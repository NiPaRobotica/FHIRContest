<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for Windows (x86-64) 2021.1 (Build 205U)" ts="2021-06-01 02:45:50">
<Class name="DFI.Common.Abstract.MessageQueueBaseMethods">
<Description>
This class contains the methods for all message queues and should be inherited into any
new Message Queue Class aliong with the Message</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeChanged>65889,71279.754485</TimeChanged>
<TimeCreated>65889,10135.832206</TimeCreated>

<Method name="CreateMessage">
<Description>
The Message Queue Class includes the fields from the TransactionLog Request Message in the Clinicom - ODS Trickle Feed are
Action, ActivityDateTime, ClinicCode, DoctorCode, EpisodeNumber, LogType, PatientNumber, TrackingDate, TrackingSequence, TransactionType</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pValues:%String(MAXLEN=5000),&pMessageId:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK,pMessageId=""
	Try {
		set obj = $classmethod($classname(),"%New")
		set tProp="" For {
			set tProp=$O(pValues(tProp)) quit:tProp=""
			// Only set the property value if the node pValues(pProp)'=""
			if $l(pValues(tProp)) set $property(obj,tProp)=pValues(tProp)
			// Unless the node pValues(pProp,"Force") is set to 1 which indicates set the
			// property to NULL.
			if '$l(pValues(tProp)),+$get(pValues(tProp,"Force")) set $property(obj,tProp)=""
		}
		Set tSC = obj.%Save() if 'tSC quit
		Set pMessageId = obj.%Id()
	}
	Catch ex {Set tSC = ex.AsStatus()}
	$$$DebugLog($username,"CreateMessage","Create Message for Message Queue: ("_$classname()_") Status: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	Quit tSC
]]></Implementation>
</Method>

<Method name="UpdateMessage">
<Description><![CDATA[
The Update Message Method allows properties in the Message Object to be updated. The message object
for the specified Message ID must exist. If it does not exist use the CreateMessage() method.<br>
There are specific Message Properties that can only be set when the message is first created
and cannot be modified or cannot be modified by this method. They are the TimeStamps.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pMessageId:%String="",&pValues:%String(MAXLEN=500000),pSourceHL7RequestMessage:EnsLib.HL7.Message="",pTargetHL7ResponseMessage:EnsLib.HL7.Message="",pSourceFHIRRequestMessage:%CharacterStream="",pTargetFHIRResponseMessage:%CharacterStream=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK,hSSC=$$$OK,hTSC=$$$OK,fSSC=$$$OK,fTSC=$$$OK // hSSC/hRSC=HL7Source/Target Status, fSSC/fTSC=FHIRSource/Target Status
	Try {
		if '$l($g(pMessageId)) set tSC=$$$ERROR(5001,"Message ID cannot be NULL") quit
		set obj = $classmethod($classname(),"%OpenId",pMessageId) if '$IsObject(obj) set tSC=$$$ERROR(501,"There is no Mesage for Message ID: "_pMessageId) quit
		// Deal with the Source and Target Hl7 or FHIR Request/Response Messages
		if $IsObject(pSourceHL7RequestMessage) set obj.SourceHL7RequestMessage=obj.SourceHL7RequestMessage.ImportFromString(pSourceHL7RequestMessage.OutputToString(,,.hSSC)) $$$DebugLog($username,"UpdateMessage","Update Source HL7 Message Status: "_$s(hSSC:"OK",1:$$$GetErrorText(hSSC)),.dSC)
		if $IsObject(pTargetHL7ResponseMessage) set obj.TargetHL7ResponseMessage=obj.TargetHL7ResponseMessage.ImportFromString(pTargetHL7ResponseMessage.OutputToString(,,.hTSC)) $$$DebugLog($username,"UpdateMessage","Update Source HL7 Message Status: "_$s(hTSC:"OK",1:$$$GetErrorText(hTSC)),.dSC)
		// Update the Source and Target FHIR Messages
		if $IsObject(pSourceFHIRRequestMessage) set tSC=pSourceFHIRRequestMessage.Rewind() quit:'tSC  set fSTC=obj.SourceFHIRRequestMessage.CopyFrom(pSourceFHIRRequestMessage) $$$DebugLog($username,"UpdateMessage","Update Source FHIR Message Status: "_$s(fSSC:"OK",1:$$$GetErrorText(fSSC)),.dSC00)
		if $IsObject(pTargetFHIRResponseMessage) set tSC=pTargetFHIRResponseMessage.Rewind() quit:'tSC  set fTSC=obj.TargetFHIRResponseMessageCopyFrom(pTargetFHIRResponseMessage) $$$DebugLog($username,"UpdateMessage","Update Source FHIR Message Status: "_$s(fTSC:"OK",1:$$$GetErrorText(fTSC)),.dSC)
		// Update any other properties
		for tProp="CreateTS","ProcessTS","CompletedTS","SourceHL7RequestMessage","TargetHL7ResponseMessage","SourceFHIRRequestMessage","TargetFHIRResponseMessage" kill pValues(tProp)
		set tProp="" For {
			set tProp=$O(pValues(tProp)) quit:tProp=""
			// Neeed to check if this is the best way to update an HL7 Message Property
			// Update the Source and Target HL7 Messages
			// Only set the property value if the node pValues(pProp)'=""
			if $l(pValues(tProp)) set $property(obj,tProp)=pValues(tProp) continue
			// Unless the node pValues(pProp,"Force") is set to 1 which indicates set the
			// property to NULL.
			if '$l(pValues(tProp)),+$get(pValues(tProp,"Force")) set $property(obj,tProp)=""
		}
		Set tSC = obj.%Save() if 'tSC quit
	}
	Catch ex {Set tSC = ex.AsStatus()}
	$$$DebugLog($username,"UpdateMessage","Update Message for Message ID: "_pMessageId_" Status: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	Quit tSC
]]></Implementation>
</Method>

<Method name="GetNextMessage">
<Description>
This method finds the next message in the Interface Message Queue Table where the ProcessTS IS NULL.
If a message is found then the method calls the method SetMessageStateToProcessing() which sets
the message property ProcessTS to the current Date/Time. To resend a message the properties
ProcessTS and CompletedTS to null which effectively sets the messages to un-processed</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pMessageID:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		set tTable=$classname() if $l($classname(),".")>2 set tTable=$tr($p($classname(),".",1,$l($classname(),".")-1),".","_")_"."_$p($classname(),".",$l($classname(),"."))
		set sql="select ID as pMessageID from "_tTable_" where ProcessTS IS NULL"
		set rs=##class(%ResultSet).%New("%DynamicQuery:SQL")
		set tSC=rs.Prepare(sql) if 'tSC quit
		set tSC=rs.Execute() if 'tSC quit
		// find next message and call the method to set the ProcessTS to the curent Date/Time signifying that
		// the message is being processed
		set found=rs.Next() if 'found set pMessageID="" quit
		set pMessageID=rs.Data("pMessageID")
		set tSC=..SetMessageStateToProcessing(pMessageID) if 'tSC quit
	}
	Catch ex { Set tSC=ex.AsStatus()}
	$$$DebugLog($username,"GetNextMessage","Get Next Message Status:"_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	if 'tSC set pMessageID=""
	Quit tSC
]]></Implementation>
</Method>

<Method name="SetMessageStateToProcessing">
<Description>
This Method sets the ProcessTS to the Current Date/Time and indicates that the message is
currently being processed</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMessageID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set obj=$classmethod($classname(),"%OpenId",pMessageID)
		If '$IsObject(obj) { Set tSC=$$$ERROR(5001,"Unable to Open Message: "_pMessageID) quit}
		Set obj.ProcessTS = $zdt($Horolog,3)
		Set tSC = obj.%Save() if 'tSC quit
	}
	Catch ex { Set tSC=ex.AsStatus() }
	$$$DebugLog($username,"SetProcessTS","Set ProcessTS for Message: "_pMessageID_" Status: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	Quit tSC
]]></Implementation>
</Method>

<Method name="CompleteMessage">
<Description><![CDATA[
The CompleteMessage() method is called when the Interface Production has finished processing the
message. It should be called by the DFI Process Message Queue Service which is the Business Service
that processes the DFI.Common.Oqueue.ODSMessageQueue after a message has been retrieved from the
queue and sent Synchronously to the DFI Create Base Message Process which is the Business Process
that creates the Base HL7 or FHIR Message. The Ensemble Response Message will contain the Status
Code returned from the Target Application API and the MessageStatus.<br>
The method updates the overall Message Status, the Status Code returned from the
HTTP Operation and is a valid %Status. If the HL7 ACK Message is a NACK then the Status
returned by the Operation should be an interpretation of the HL7 ACK Code<br>
The TargetResponseStatus is the HTTP Response Status<br>
The TargetResponseStatusText should be an interpretation of the HTTP Status Code<br>
The method also updates the two Time Calculation Fields that record the time taken:<br>
1) From Created to Completed (in seconds)<br>
2) From In Progress to Completed (in seconds)<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMessageID:%String="",pMessageStatus:%Status=$$$OK,pMessageStatusText:%String="",pTargetResponseStatus:%String="201",pTargetResponseStatusText:%String(MAXLEN=500)="",pTargetHL7ResponseMessage:EnsLib.HL7.Message="",pTargetFHIRResponseMessage:%CharacterStream=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		if '$l(pMessageID) set tSC=$$$ERROR(5001,"No Message ID specified") quit
		Set obj = $classmethod($classname(),"%OpenId",pMessageID)
		If '$IsObject(obj) { Set tSC=$$$ERROR(5001,"Unable to Open Message: "_pMessageID) quit }
		if $l(pMessageStatus) {
			set obj.MessageStatus=pMessageStatus
			if '$l(pMessageStatusText) set pMessageStatusText=$s(pMessageStatus:"Message Completed OK",1:$$$GetErrorText(pMessageStatus))
			set obj.MessageStatusText=obj.MessageStatusText_$s($l(obj.MessageStatusText):" ",1:"")_obj.MessageStatusText
		}
		if $l(pTargetResponseStatus) {
			set obj.TargetResponseStatus=pTargetResponseStatus
			if '$l(pTargetResponseStatusText) set pTargetResponseStatusText=$s(pTargetResponseStatus:"Message Completed OK",1:$$$GetErrorText(pTargetResponseStatus))
			set obj.TargetResponseStatusText=obj.TargetResponseStatusText_$s($l(obj.TargetResponseStatusText):" ",1:"")_pTargetResponseStatusText
		}
		if $IsObject(pTargetHL7ResponseMessage) set obj.TargetHL7ResponseMessage=obj.TargetHL7ResponseMessage.ImportFromString(pTargetHL7ResponseMessage.OutputToString() ,.tSC) quit:'tSC
		if $IsObject(pTargetFHIRResponseMessage) set tSC=pTargetFHIRResponseMessage.Rewind() quit:'tSC  set tSC=obj.TargetFHIRResponseMessage.CopyFrom(pTargetFHIRResponseMessage) quit:'tSC
		Set obj.CompletedTS = $zdt($h,3)
		set obj.TimeTakenFromCreateToComplete=..CalculateTime(obj.CreateTS,obj.CompletedTS)
		set obj.TimeTakenFromProcessingToComplete=..CalculateTime(obj.ProcessTS,obj.CompletedTS)
		Set tSC = obj.%Save() if 'tSC { Quit }
	}
	Catch ex { Set tSC=ex.AsStatus() }
	$$$DebugLog($username,"CompleteMessage","Complete Message: ("_pMessageID_") Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	Quit tSC
]]></Implementation>
</Method>

<Method name="CalculateTime">
<Description><![CDATA[
The CalculateTime() Method firstly computes the time taken from when the Message was Created and
when the Message was Completed. Secondly, it computes the time from when the Message was picked
up from the queue through to when the Message was Completed. The time unit is seconds.<br>
The method is called from the CompleteMessage() Method.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStartTS:%TimeStamp,pEndTS:%TimeStamp</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tStart=$zdth(pStartTS,3),tEnd=$zdth(pEndTS,3) &sql(SELECT DATEDIFF('ss',:tStart,:tEnd) INTO :return)
	}
	catch ex {set tSC=ex.AsStatus()}
	quit return
]]></Implementation>
</Method>

<Method name="PurgeMessageQueue">
<Description><![CDATA[
The PurgeMessageQueue() Method will cleardown messages that have been processed or completed
that are older than the number of days messages must be retained. If no value is passed to the
method parameter pNumberOfDays then the method will obtain the value from the Interface
Configuration Record. This method should be called by the DFI Housekeeping Service.
The method will return the number of Messages purged.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pNumberOfDays:%Integer,&pNumberOfMessagesPurged=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tTable=$classname() if $l(tTable,".")>2 set tTable=$tr($p($classname(),".",1,$l($classname(),".")-1),".","_")_"."_$p($classname(),".",$l($classname(),"."))
		if '$l(pNumberOfDays) {
			set tConfig=##class(DFI.Common.Configuration.ConfigurationSettings).%OpenId("Settings") if $IsObject(tConfig) set tSC=$$$ERROR(5001,"Unable to Open Configuration Settngs") quit
			set pNumberOfDays=$g(pSettings("DFINumberOfDaysToKeepQueueMessages"),90)
		}
		set tDate=$zdt($h-pNumberOfDays,3)
		set sql="delete from "_tTable_" where CompletedTS < '"_tDate_"'"
		set rs=##class(%ResultSet).%New("%DynamicQuery:SQL")
		set tSC=rs.Prepare(sql) if 'tSC quit
		set tSC=rs.Execute() if 'tSC quit
		set pNumberOfMessagesPurged=rs.%ROWCOUNT
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"PurgeMessageQueue","Purge Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="ResendQueueMessage">
<Description>
This method will reset the ProcessTS and CompletedTS to NULL which mans that it is effectively back to a state of unprocessed.
The GetNextMessage() method will find this message and resend it.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMessageID:%Integer=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if '$l(pMessageID) set tSC=$$$ERROR(5001,"No Message ID specified") quit
		Set obj = $classmethod($classname(),"%OpenId",pMessageID)
		If '$IsObject(obj) { Set tSC=$$$ERROR(5001,"Unable to Open Message: "_pMessageID) quit }
		set obj.ProcessTS="",obj.CompletedTS="",obj.TargetResponseStatus="",obj.MessageStatus=$$$OK,obj.MessageStatusText=""
		set obj.SourceFHIRRequestMessage="",obj.SourceHL7RequestMessage="",obj.TargetFHIRResponseMessage=""
		set obj.TargetHL7ResponseMessage="",obj.TargetResponseLocation="",obj.TargetResponseStatus=$$$OK,obj.TargetResponseStatusText=""
		set tSC=obj.%Save() if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"ResendMessage","Resend Queue Message: "_pMessageID_" Status: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="ResendDateRange">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFromTS:%TimeStamp={$zdt($p($h,",",1)_","_($p($h,",",2)-7200),3)},pToTS:%TimeStamp={$zdt($h,3)}</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set table=$p($classname(),".",$l($classname(),".")-1)_"."_$p($classname(),".",$l($classname(),"."))
		set sql="select ID from "_table_" where ProcessTS > '"_pFromTS_"' and ProcessTS < '"_pToTS_"'"
		$$$DebugLog($username,"ResendDateRange","Date Range SQL: "_sql,.dSC)
		set rs=##class(%ResultSet).%New("%DynamicQuery:SQL")
		set tSC=rs.Prepare(sql) if 'tSC quit
		set tSC=rs.Execute() if 'tSC quit
		while rs.Next(.tSC) {
			quit:'tSC
			set id=rs.Get("ID"),obj=$classmethod($classname(),"%OpenId",id)
			if '$IsObject(obj) $$$DebugLog($username,"ResendDateRange","Cannot open Message with ID: "_id,.dSC) continue
			set obj.ProcessTS="",obj.CompletedTS="",obj.TargetResponseStatus="",obj.MessageStatus=$$$OK,obj.MessageStatusText=""
			set obj.SourceFHIRRequestMessage="",obj.SourceHL7RequestMessage="",obj.TargetFHIRResponseMessage=""
			set obj.TargetHL7ResponseMessage="",obj.TargetResponseLocation="",obj.TargetResponseStatus=$$$OK,obj.TargetResponseStatusText=""
			set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"ResendDateRange","Cannot save Message with ID: "_id_" Error: "_$$$GetErrorText(tSC),.dSC) continue
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"ResendDateRange","Resend Message Queue Date Range Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="DFI.Common.Abstract.MessageQueueBaseProperties">
<Description><![CDATA[
This is the Template Message Queue Class that contains the core Message Queue Properties that are
to every Message Queue used in all DFI Interfaces.<BR>

When a Queue class is created it will inherit these properties and then define additional properties
that will be used to identify a specific Patient. In the case of the ODS we will have a reference to
a Patient and what data event has occurred in Clinicom and how that event affects the Patient in
the ODS. The prime example of this is the HPRS Bulk Export Interface and the HPRS Trickle Feed
Interface.<BR>

In the HPRS Bulk Export we build a list of patients where we create a Message Queue record
for every Patient in the DW.Modules.PMI.Patient table, whereas the HPRS Trickle feed is driven by
Ensemble Request Messages (Messages.TransactionLog) that drives the Clinicom to ODS Trickle Feed
Iterface.<br>

The Messages.TransactionLog Request Message references the Clinicom Log Type, Transaction Type
and Action which resolves down to a Patient in an ODS Module which are PMI, In-Patients, Out-Patients
or Service Groups. The Transaction Type indicates whether the data event is a direct update to the
Patient or a data event relating to the Patients In-Patient Episode such as an In-Patient Transfer
or an Out-Patient Appointment. The Action indicates the CRUD type (Add, Revise, Delete, Merge).<br>

So, when we define a new Message Queue Class, we inherit the properties from this Abstract class
and then define additional properties that are specific to the the data from the Source Namespace.
Messages are either created in response to some actiity in the Source Namespace such as a request
message passing through an Interface in the source namespace or by proactive logic in the DFI
interface such as running an SQL query that produces a result set of Patients which we then
use to create messages in the Message Queue.<br>

If the Source Namespace is the ODS and we are doing a bulk export of ODS Patients into EMCI, then
the DFI Interface will execute an SQL query that selects records from the DW_Module_PMI.Patient
table and creates messages in the 'Patient List' message queue. Once the List of Patients has been created
the different Business service then processes that list and generates FHIR messages to send to EMCI.<br>

At the same time the Clinicom to ODS Trickle feed will be creating messages in the DFI ODS to EMCI
trickle feed message queue using data from the Messages.TransactionLog request messages passing through
tghe Clinicom to ODS Trickle Feed.<br>

If the data source is an EMCI database and we are running 'Use Case' Tests in the DFI Test Module
then we introduce the concept of a Test Manifest which will contain a number of Manifest Records
where each Manifest Record reference a Master Consumer Record and the Test definition that contains
the Test Rules to be applied to those Master Consumer records in the Manifest. The Manifest can
contain anywhere between 1 and 1000 Master Consumers. Linked to the Manifest is the Test Definition
which consists of one or more Test Rules that modify specific properties in that Master Consumer
records and records from the related Master Consumer Tables such as Address, Contact, Names.
Read the documentation in the Test Module to understand how the Test Module works.<br>

The Message Queue Classes have the following properties in common:<br>
Three time stamps: CreateTS, ProcessTS and CompletedTS.<BR>
The CreateTS is set to the current Date/Time when a new message is Instantiated.<BR>
The ProcessTS is set when the Method GetNextMessage() is called and the method finds a message
that has not been processed. The ProcessTS is updated with the Current Date/Time.<BR>
The CompletedTS is updated when the Message has gone through the cycle of Business Service -> 
Business Process -> Business Operation and back to the Business Process and back to the Business
Service.<BR>

Typically the Business Process will call the CompleteMessage() method from the OnProcessResponse()
method when it can be updated with the outcome of the Operations to send the message contents to
another application and optionally to File and optionally to EMail. It is the response from the
target Application that is the most important. We need to know that the message has been delivered
successfully to the target application and whether the application has accepted the request message
which it does by sending back a response message typically an HL7 ACK Message, a FHIR Operation Outcome
message or a FHIR Resource (Patient, Encounter or a Bundle of Patients, Encounters).<BR>

If the message has not been successful then we need to know if the problem was technical e.g.
the Connection to the Application is unavailable, the target Application is down or there
is an issue with our Operation Adapter. If these scenarios are detected then two things will happen:
An Alert Notification will be sent to the Target Application Administrators.
When the connection is restored, any messages that failed during the period when connectivity
was lost can be resent. The best way to resend a message is to set the CompletedTS and
ProcessTS timestamps to NULL, set fields such as HL7 ACK Code, HTTP Status Code, TCP Status Code
to NULL. IsError and Error Message set to $$$OK and NULL. When the Business Service
that processes the Message Queue calls the GetNextMessage() method it will find those messages
and reprocess them.<BR>

If a message is rejected or the message and request type (FHIR Interaction, HL7 Merge ....) is
not accepted based on the logic of the target Application then the result of this transaction
will be sent as a Notification of the Application Administrators and they may have the option to
reprocess that Interaction with say, Data Steward Priveledges.<BR>

Analysis of failed messages can be done by identifying messages that are complete and in Error.
The ability to resend a specific message can be done using the same tequnique as the resending
of a batch of messages that failed due to connection down issues.<BR>

Messages can also be created through a UI  or programmatically through a method Call.
The Message Queue Classes all have the same generic methods CreatMessage(), GetNextMessage()
UpdateMessageQueue(), CompleteMessage(), ResendMessage(), ResendDateRange() and PurgeMesssages().<BR>

Any class that can be Inherited or Copied must use $classmethod() to run methods within
that Message Queue Class and $Property() to Set or Get Property Names and Values. In particular
the Properties in a Message Queue record that are specific to that Message Queue are 
passed into these methods in the form of an array of Name/Value Pairs. The Timestamp fields cannot
be passed in the Name/Value array as they are controlled by the Queue Class Methods only.<br>

There are other Messge Queue Properties that are generic to every message queue class (and influenced by
the type of message and the transport mechanism that sends the message body to a target application.
These properties can be updated by a UI or through the {Property Name}/{Property Value} Arrray.<br>

These properties are generally related to the JSON, HL7, Text, XML Body Content and the
File Directory and File Name properties used to create the files into which the Body Contents
are written. This applies to both Request and Response Messages. An HL7 Request Message will
have a complimentary HL7 Response Message in the form of an HL7 ACK Message.<BR>
A FHIR JSON Request Message (if there is one) will have a corresponding FHIR JSON Response Message
which will typically be the JSON for a FHIR Resource, a FHIR Bundle of One or More FHIR Resource
JSON Objects.<BR>

In order for there to be Individual Queues in each Interface the Message Queue Class has to be mapped
to the Source Interface Namespace. The Source Interface will call a method that will create
messages for all Iterfaces that are driven by that Interface. For example the Clinicom to ODS
Trickle Feed Interface will create messages in the HPRS Interface and the ODS to EMCI Interface and
the other HL7 Interfaces<br>

In order to facilitate this there is a class in the Source Interface Namespace,
<b>DFI.Common.Interface.InterfaceMappingDetails</b> that is a list of Interface Names, the Namespace in which
the Interface is running, the Message Queue Class Name of the message queue that drives the
Interfaces in those namespaces. The property IsProduction indicates whether the target Interface
is the 'Live' or 'Production' namespace and the property IsActive indicates whether the target
Interface is Active or not.<BR>
]]></Description>
<Abstract>1</Abstract>
<IncludeCode>DFIInclude</IncludeCode>
<TimeChanged>65889,29477.521592</TimeChanged>
<TimeCreated>65889,10106.477583</TimeCreated>

<Property name="CreateTS">
<Description>
This is a system Property and should not be updated by the developer</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$ZDatetime($Horolog,3)</InitialExpression>
</Property>

<Property name="ProcessTS">
<Description>
This is a system Property and should not be updated by the developer</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="CompletedTS">
<Description>
This is a system Property and should not be updated by the developer</Description>
<Type>%String</Type>
</Property>

<Property name="MessageStatus">
<Description>
The Message Status is a system property and will be determined when the Develloper calls the CompleteMessage() method
by passing in a vallid %Status value reflecting the Status at the time the method is called.</Description>
<Type>%Status</Type>
<InitialExpression>$$$OK</InitialExpression>
</Property>

<Property name="MessageStatusText">
<Description>
This is the Message Text that gives more information on the Message Status. Typically it will
be the contents of the %Status Code in Message Status but there may be many error conditions
that can be passed to the UpdateMessage() method and the CompleteMessage() method. These messages
are appended to the current message.MessageStatusText</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="5000"/>
</Property>

<Property name="TargetDocumentType">
<Description>
This may be specifed by the developer or if a copy class has been created where this is known then use
[InitialValue] to set the value and on instantiation the property will assume that value. The Response message
has the same property and should be set by the developer when he creates the Response Message</Description>
<Type>%String</Type>
<Parameter name="DISPLAYLIST" value=",HL7,FHIR,JSON,SQL"/>
<Parameter name="VALUELIST" value=",H,F,J,S"/>
</Property>

<Property name="SourceHL7RequestMessage">
<Description>
This is the HL7 Request Message that will be created by the Business Process and the Message Object
will be updated by the Business Process with the HL7 Message it creates. This must be set by the developer</Description>
<Type>EnsLib.HL7.Message</Type>
</Property>

<Property name="TargetHL7ResponseMessage">
<Description>
This should be the HL7 Response Message or as in the HPRS Interface it is the OK/Error Status Message Text.
In the exampple FHIR Response Messsage Class there is a property for the FHIR Resource Content for this purpose</Description>
<Type>EnsLib.HL7.Message</Type>
</Property>

<Property name="SourceFHIRRequestMessage">
<Description>
The FHIR JSON Request Message Created by the Business Process</Description>
<Type>%CharacterStream</Type>
</Property>

<Property name="TargetFHIRResponseMessage">
<Description>
The FHIR JSON Response Message received by the HTTP/HTTPS FHIR Business Operation</Description>
<Type>%CharacterStream</Type>
</Property>

<Property name="TargetResponseLocation">
<Description>
If the FHIR HTTP Operation Recieves a Location in the HTTPResponse Header put it in this property</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="TargetResponseStatus">
<Description>
This is the response returned by the External system and it will be either the HTTP Status in the case of HTTP operations
It can be the Error Code of an HL7 NACK or the HTTP status or it can be an interpretation of a combination of the
Adapter Response Status as well as a status embedded in the response body.</Description>
<Type>%String</Type>
<InitialExpression>$$$OK</InitialExpression>
</Property>

<Property name="TargetResponseStatusText">
<Description>
The Response Status Text is a Readable interpretation of the Response Status. If the Response Status
is an HTTP Status code and in the CompleteMessage() method a value for the Response Status Text
is not specified the logic will try and interpret the ResponseStatusText as the HTTPCodeDescription</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="5000"/>
</Property>

<Property name="TimeTakenFromCreateToComplete">
<Description>
This is a system property and should not be updated by the developer</Description>
<Type>%Integer</Type>
</Property>

<Property name="TimeTakenFromProcessingToComplete">
<Description>
This is a system property and should not be updated by the developer</Description>
<Type>%Integer</Type>
</Property>
</Class>


<Class name="DFI.Common.HL7MsgRouter.ABCRoutingRule">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65874,13440.306732</TimeChanged>
<TimeCreated>62858,5105.321898</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7MsgRouter.RuleAssistCompatible</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7MsgRouter.RoutingEngine" production="">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="DFI.Common.HL7MsgRouter.Schema"></constraint>
<when condition="((HL7.ParentId)!=(&quot;&quot;))">
<send transform="" target="Batch_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="2.3.1"></constraint>
<when condition="((HL7.ParentId)!=(&quot;&quot;))">
<send transform="" target="Batch_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="2.3.1"></constraint>
<constraint name="docType" value="FHS,BHS"></constraint>
<when condition="1">
<send transform="" target="Batch_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ADT_A08"></constraint>
<constraint name="docCategory" value="DFI.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ADT_A01"></constraint>
<when condition="1">
<send transform="" target="Priority_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ADT_A08"></constraint>
<constraint name="docCategory" value="DFI.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ADT_A01"></constraint>
<when condition="1">
<send transform="" target="ADT_A08_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<constraint name="docCategory" value="DFI.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ORM_O01"></constraint>
<when condition="((HL7.{PIDgrp.PV1grp.PV1:PatientClass})=(&quot;E&quot;))">
<send transform="" target="Priority_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<constraint name="docCategory" value="DFI.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ORM_O01"></constraint>
<when condition="1">
<send transform="" target="ORM_O01_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ADT_A31"></constraint>
<constraint name="docCategory" value="DFI.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ADT_A01"></constraint>
<when condition="1">
<send transform="" target="ADT_A31_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<constraint name="docCategory" value="2.3.1"></constraint>
<constraint name="docType" value="ORU_R01"></constraint>
<when condition="1">
<send transform="" target="Extra_Observations"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="DFI.Common.HL7MsgRouter.Schema"></constraint>
<when condition="1">
<send transform="" target="Regular_FileOperation"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="DFI.Common.HL7MsgRouter.ADTLastNameTransform">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65874,13190.822536</TimeChanged>
<TimeCreated>60213,48389</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>0</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='DFI.Common.HL7MsgRouter.Schema:ADT_A01' targetDocType='2.3.1:ADT_A01' create='new' language='objectscript' >
<assign value='source.{MSH}' property='target.{MSH}' action='set'  />
<assign value='"ADT"' property='target.{MSH:9.1}' action='set'  />
<assign value='"A01"' property='target.{MSH:9.2}' action='set'  />
<assign value='"TEST"' property='target.{MSH:ReceivingApplication}' action='set'  />
<assign value='source.{EVN}' property='target.{EVN}' action='set'  />
<assign value='source.{PID}' property='target.{PID}' action='set'  />
<assign value='"NEWNAME"' property='target.{PID:5.1}' action='set'  />
<assign value='source.{PD1}' property='target.{PD1}' action='set'  />
<assign value='source.{NK1(1)}' property='target.{NK1(1)}' action='set'  />
<assign value='source.{PV1}' property='target.{PV1}' action='set'  />
<assign value='source.{PV2}' property='target.{PV2}' action='set'  />
<assign value='source.{DB1(1)}' property='target.{DB1(1)}' action='set'  />
<assign value='source.{OBX(1)}' property='target.{OBX(1)}' action='set'  />
<assign value='source.{AL1(1)}' property='target.{AL1(1)}' action='set'  />
<assign value='source.{DG1(1)}' property='target.{DG1(1)}' action='set'  />
<assign value='source.{DRG}' property='target.{DRG}' action='set'  />
<assign value='source.{PR1grp(1)}' property='target.{PR1grp(1)}' action='set'  />
<assign value='source.{GT1(1)}' property='target.{GT1(1)}' action='set'  />
<assign value='source.{IN1grp(1)}' property='target.{IN1grp(1)}' action='set'  />
<assign value='source.{ACC}' property='target.{ACC}' action='set'  />
<assign value='source.{UB1}' property='target.{UB1}' action='set'  />
<assign value='source.{UB2}' property='target.{UB2}' action='set'  />
</transform>
]]></Data>
</XData>
</Class>


<Class name="DFI.Common.HL7MsgRouter.AlertRule">
<Description>
See the AlertTable lookup table for a mapping of alert sources to email addresses. If no match is found in the lookup, EmailAlertTransformation sends the alert to the configured Recipient for the EMailAlertOperation.</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65874,13469.721758</TimeChanged>
<TimeCreated>62858,5105.314808</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.MsgRouter.RoutingEngine" production="">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="">
<constraint name="msgClass" value="Ens.AlertRequest"></constraint>
<when condition="1">
<send transform="DFI.Common.HL7MsgRouter.EmailAlertTransform" target="EMailAlertOperation"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="DFI.Common.HL7MsgRouter.EmailAlertTransform">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65874,9481.629563</TimeChanged>
<TimeCreated>63260,3644.868482</TimeCreated>
<DependsOn>Ens.AlertRequest</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='Ens.AlertRequest' targetClass='Ens.AlertRequest' create='new' language='objectscript' >
<assign value='source.SourceConfigName' property='target.SourceConfigName' action='set'  />
<assign value='source.AlertText' property='target.AlertText' action='set'  />
<assign value='..Lookup("AlertTable",source.SourceConfigName)' property='target.AlertDestination' action='set'  />
</transform>
]]></Data>
</XData>
</Class>


<Class name="DFI.Common.HL7MsgRouter.Functions">
<Description>
Functions to use in rule definitions for the sample message router production.</Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.FunctionSet</Super>
<TimeChanged>65874,13217.94546</TimeChanged>
<TimeCreated>60211,45594.129234</TimeCreated>

<Method name="DayOfWeek">
<Description>
Returns the ordinal position of the day in the week, 
where 1 is Sunday, 2 is Monday, and so on.</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[$zd($H,10)
]]></Implementation>
</Method>

<Method name="TimeInSeconds">
<Description>
Returns the time as a number of seconds since midnight.</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[$p($H,",",2)
]]></Implementation>
</Method>
</Class>


<Class name="DFI.Common.HL7MsgRouter.MainRoutingRule">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65874,14424.673125</TimeChanged>
<TimeCreated>62858,5105.321898</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7MsgRouter.RuleAssistCompatible</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7MsgRouter.RoutingEngine" production="">
<ruleSet name="MainRuleSet1">
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ADT_A08"></constraint>
<constraint name="docCategory" value="DFI.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ADT_A01"></constraint>
<when condition="1">
<send transform="" target="ADT_A08_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<constraint name="docCategory" value="DFI.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ORM_O01"></constraint>
<when condition="((HL7.{PIDgrp.PV1grp.PV1:PatientClass})=(&quot;E&quot;))">
<send transform="" target="Priority_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<constraint name="docCategory" value="DFI.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ORM_O01"></constraint>
<when condition="1">
<send transform="" target="ORM_O01_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ADT_A31"></constraint>
<constraint name="docCategory" value="DFI.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ADT_A01"></constraint>
<when condition="1">
<send transform="" target="ADT_A31_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<constraint name="docCategory" value="2.3.1"></constraint>
<constraint name="docType" value="ORU_R01"></constraint>
<when condition="1">
<send transform="" target="Extra_Observations"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="DFI.Common.HL7MsgRouter.Schema"></constraint>
<when condition="1">
<send transform="" target="DFI Regular FileOperation"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="DFI.Common.HL7MsgRouter.NigelRule">
<Description>
Nigel Test Rule</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65874,16542.379463</TimeChanged>
<TimeCreated>65871,8974.966251</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7MsgRouter.RuleAssistCompatible</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7MsgRouter.RoutingEngine" production="">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="2.4"></constraint>
<constraint name="docName" value="ADT_A08"></constraint>
<when condition="1">
<send transform="" target="Regular_FileOperation"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="DFI.Common.HL7MsgRouter.ORMLastNameTransform">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65874,11244</TimeChanged>
<TimeCreated>60213,48814</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>0</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='DFI.Common.HL7MsgRouter.Schema:ORM_O01' targetDocType='2.3.1:ORM_O01' create='new' language='objectscript' >
<assign value='source.{MSH}' property='target.{MSH}' action='set'  />
<assign value='source.{NTE(1)}' property='target.{NTE(1)}' action='set'  />
<assign value='source.{ORCgrp(1)}' property='target.{ORCgrp(1)}' action='set'  />
<assign value='source.{PIDgrp.PID}' property='target.{PIDgrp.PID}' action='set'  />
<assign value='"NEWNAME"' property='target.{PIDgrp.PID:5.1}' action='set'  />
</transform>
]]></Data>
</XData>
</Class>


<Class name="DFI.Common.HL7MsgRouter.XYZRoutingRule">
<Description>
Routing from the XYZ message source.</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65874,11244</TimeChanged>
<TimeCreated>62858,5105.884151</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7MsgRouter.RuleAssistCompatible</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7MsgRouter.RoutingEngine" production="">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="DFI.Common.HL7MsgRouter.Schema"></constraint>
<when condition="((HL7.ParentId)!=(&quot;&quot;))">
<send transform="" target="Batch_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="2.3.1"></constraint>
<constraint name="docType" value="FHS,BHS"></constraint>
<when condition="1">
<send transform="" target="Batch_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ADT_A08"></constraint>
<constraint name="docCategory" value="DFI.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ADT_A01"></constraint>
<when condition="(Contains(HL7.{PID:PatientName(1).familylastname},&quot;&lt;S&gt;&quot;))||(StartsWith(HL7.{PID:PatientName(1).familylastname},&quot;Z&quot;))">
<send transform="DFI.Common.HL7MsgRouter.ADTLastNameTransform" target="Other_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<constraint name="docCategory" value="DFI.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ORM_O01"></constraint>
<when condition="(StartsWith(HL7.{PIDgrp.PID:PatientName(1).familylastname},&quot;S&quot;))||(StartsWith(HL7.{PIDgrp.PID:PatientName(1).familylastname},&quot;Z&quot;))">
<send transform="DFI.Common.HL7MsgRouter.ORMLastNameTransform" target="Other_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="DFI.Common.HL7MsgRouter.Schema"></constraint>
<when condition="1">
<send transform="" target="Regular_FileOperation"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="DFI.Common.Operation.EMailOperation">
<Description>
This is the default Email Operation used by a DFI Interface. It is the Email Operation that the
DFI Common Alert Notification uses as well as any other Email requirement, e.g. Reports. This Email
Operation is not used by the Ensemble Alert Notification System which uses the Ens.Alert Email Operation.
</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65878,14081.438504</TimeChanged>
<TimeCreated>65825,40932.407814</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.EMail.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.EMail.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="SendEmail">
<FormalSpec>pRequest:DFI.Common.Messages.EmailRequestMessage,*pResponse:DFI.Common.Messages.EMailResponseMessage</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set pResponse=##class(DFI.Common.Messages.EMailResponseMessage).%New(),pResponse.Status=tSC
		s pMailMessage=##class(%Net.MailMessage).%New()
		s pMailMessage.From=pRequest.From
		set i="" for i=1:1:$length(pRequest.To,",") d pMailMessage.To.Insert($piece(pRequest.To,",",i))
		s pMailMessage.ContentType="text/html"
		s pMailMessage.Subject=pRequest.Subject
		if $l(pRequest.Attachements) {
			for i=1:1:$l(pRequest.Attachements,",") {
				set file=$p(pRequest.Attachments,",",i) set delim="\" if file["/" set delim="/"
				set dir=$p(file,delim,$l(file,delim)),filename=$p(file,dir,2)
				set tSC=pMailMessage.AttachFile(dir,filename) if 'tSC quit
			}
		}
		
		d pMailMessage.TextData.Rewind()
		d pMailMessage.TextData.CopyFrom(pRequest.Text)
		d pMailMessage.TextData.WriteLine("")
		set tSC=..Adapter.SendMail(pMailMessage,.tFailedRecipients) if 'tSC quit
		if $IsObject(tFailedRecipients) {
			set key="" for {set email=tFailedRecipients.Next(.key) quit:key=""  do pResponse.FailedRecipients.Insert(email)}
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	set msg="Email Send Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)) $$$TRACE(msg)
	$$$DebugLog($username,"SendEmail",msg,.dSC)
	set pResponse.Status=tSC
	quit tSC
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="DFI.Common.Messages.EMailRequestMessage"> 
		<Method>SendEmail</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>

<Method name="OnInit">
<Description>
This user callback method is called via initConfig() from %OnNew() or in the case of SOAP Services from OnPreSOAP()</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$TRACE("Class Name: "_$classname())
	$$$TRACE("Production Item Name: "_..%ConfigName)
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="DFI.Common.Operation.FHIRFileOperation">
<Description>
This is the default DFI FHIR File Operation that is used to write FHIR JSDON Request and Response
messages to file. The File Path and File Name are xderived from the DFI Condfiguration Settings
for the specific Interface.</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65861,40287.138027</TimeChanged>
<TimeCreated>65484,80162.000625</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.File.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.File.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="WriteFHIRMessageToFile">
<FormalSpec>pRequest:DFI.Common.Messages.FHIRFileRequest,*pResponse:DFI.Common.Messages.FHIRFileResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set pResponse=##class(DFI.Common.Messages.FHIRFileResponse).%New(),pResponse.MessageId=pRequest.MessageId
		set tConfig=##class(DFI.Common.Configuration.ConfigurationSettings).GetConfigurationSettings(,$g(tConfig),.tSettings) if '$IsObject(tConfig) set tSC=$$$ERROR(5001,"Unable to Open Configuration Settings") quit
		if $l(pRequest.FileDirectory) {set tFilePath=pRequest.FileDirectory}
		elseif $l(..Adapter.FilePath) {set tFilePath=..Adapter.FilePath}
		elseif $l($g(tSettings("DFIFHIRFileDirectory"))) {set tFilePath=tSettings("DFIFHIRFileDirectory")}
		elseif $l($g(tSettings("DFIFileDirectory"))) {set tFilePath=tSettings("DFIFileDirectory")}
		else {set tFilePath="FHIR JSON Files"}
		set tFilePath=##class(%File).NormalizeDirectory(tFilePath)
		$$$TRACE("File Path: "_tFilePath)
		if $l(pRequest.FileName) {set tFileName=pRequest.FileName}
		elseif $l($g(tSettings("DFIFHIRResourceRequestJSONFileName"))) {set tFileName=tSettings("DFIFHIRResourceRequestJSONFileName")}
		else {set tFileName=$tr(..Adapter.CreateFilename("FHIR Message","%F_%Q"),"-","")}
		$$$TRACE("File Name: "_tFileName)
		set tFileName=tFilePath_tFileName
		$$$TRACE("Full File Name: "_tFileName)
		set tSC=..Adapter.PutStream(tFileName,pRequest.FHIRBody) if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	set msg="Output to File Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC))
	$$$DebugLog($username,"FHIRFileOperation",msg,.dSC) $$$TRACE(msg)
	quit tSC
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="DFI.Common.Messages.FHIRFileRequest"> 
		<Method>WriteFHIRMessageToFile</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="DFI.Common.Operation.FHIRHTTPOperation">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65845,63807.469852</TimeChanged>
<TimeCreated>65482,84866.019574</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.HTTP.OutboundAdapter</Type>
</Property>

<Property name="HTTPRequest">
<Type>%Net.HttpRequest</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="SendFHIRHTTPMessage">
<FormalSpec>pRequest:DFI.Common.Messages.EMCIDataLoadRequest,*pResponse:DFI.Common.Messages.EMCIDataLoadResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK,pResponse="",tRetryCount=0
	Try {
		$$$TRACE("HTTP Operation Request")
Retry	;
		If tRetryCount $$$TRACE("Retry Attempt: "_tRetryCount)
		set pResponse=##class(DFI.Common.Messages.EMCIDataLoadResponse).%New()
		Set tResponse = ##class(%Net.HttpResponse).%New(),tResponse.ContentType="application/fhir+json"
		If '$IsObject(..HTTPRequest) {
			Set pHttpRequest = ##class(%Net.HttpRequest).%New()
			Set pHttpRequest.Server = ..Adapter.HTTPServer
			Set pHttpRequest.Port = ..Adapter.HTTPPort
			Set pHttpRequest.ProxyServer = ..Adapter.ProxyServer
			Set pHttpRequest.ProxyPort = ..Adapter.ProxyPort
			Set pHttpRequest.ProxyTunnel = ..Adapter.ProxyHttpTunnel
			Set pHttpRequest.ProxyHTTPS = 1
			Set pHttpRequest.SSLConfiguration = ..Adapter.SSLConfig
			Set pHttpRequest.UserAgent = "curl/7.29.0"
			Set pHttpRequest.ContentEncoding = "HL7-ER7"
			Set pHttpRequest.ContentCharset = "UTF-8"
			Set pHttpRequest.ContentType = "application/fhir+json"
			Set pHttpRequest.AcceptGzip = 0
			Set pHttpRequest.WriteRawMode = 0
			Set pHttpRequest.ReadRawMode = 0
			Set pHttpRequest.OpenTimeout = ..Adapter.ConnectTimeout
			Set pHttpRequest.Timeout = ..Adapter.ResponseTimeout
			Set pHttpRequest.WriteTimeout = ..Adapter.WriteTimeout
			Set pHttpRequest.SocketTimeout = 115
			do ..HTTPRequest.EntityBody.CopyFrom(pRequest.FHIRJSONBody)
		}
		Set ..HTTPRequest.HttpResponse=tResponse
		Do ..HTTPRequest.EntityBody.Write(message)
		Set tSC = ..HTTPRequest.Post(..Adapter.URL,0,1) if 'tSC {
			// I can link this to a <READ> error generated in the HTTPRequest Send() Method
			// So I log it in the debug log and attempt to resend. I will attempt to resend up to 5 times before abandoning
			$$$DebugLog($username,"HTTP Write","Error: "_$$$GetErrorText(tSC),.dSC)
			Set tRetryCount = tRetryCount+1 if tRetryCount>5 set tRetryCount=0 Quit
			$$$DebugLog($username,"HTTP Write","Attempting to Resend: "_tRetryCount,.dSC)
			$$$TRACE("Going to attempt Retry: "_tRetryCount) set tSC=$$$OK
			Goto Retry
		}
		Set response = ..HTTPRequest.HttpResponse
		$$$TRACE("HTTP Response Status: "_response.StatusCode)
		If response.StatusCode=200 {
			If $IsObject(response.Data) {
				Set message = "" while 'response.Data.AtEnd { Set message=message_response.Data.Read(,.tSC) if 'tSC quit }
				do pResponse.HTTPResponseBody.Write(message) set pResponse.HTTPStatus=200,pResponse.HTTPStatus=200
				set pResponse.DocumentType="F",pResponse.ManifestID=pRequest.ManifestID,pResponse.ResponseStatus=$$$OK
			}
		}
		Else {
			Set message = "" if $IsObject(response.Data) { Set message="" while 'response.Data.AtEnd { Set message=message_response.Data.Read(,.tSC) if 'tSC quit } }
			Set tSC = $$$ERROR(5001,"HTTP Response Status is "_response.StatusCode_" with Error Text: "_response.ReasonPhrase_" with Content: "_message)
			set pResponse.HTTPStatus=tResponse.StatusCode,pResponse.ManifestID=pRequest.ManifestID,pResponse.MessageId=pRequest.MessageID,pResponse.ResponseStatus=tSC
		}
	}
	Catch ex {
		Set tSC = ex.AsStatus()
	}
	$$$TRACE("Outcome of HTTP Operation: "_$Select(tSC:"Ok",1:"Error: "_$$$GetErrorText(tSC)))
	Quit $$$OK
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="DFI.Common.Messages.EMCIDataLoadRequest">
		<Method>SendFHIRHTTPMessage</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="DFI.Common.Operation.FHIRHTTPSOperation">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65845,63860.970502</TimeChanged>
<TimeCreated>65482,84866.019574</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.HTTP.OutboundAdapter</Type>
</Property>

<Property name="HTTPRequest">
<Type>%Net.HttpRequest</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="SendFHIRHTTPMessage">
<FormalSpec>pRequest:DFI.Common.Messages.EMCIDataLoadRequest,*pResponse:DFI.Common.Messages.EMCIDataLoadResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK,pResponse="",tRetryCount=0
	Try {
		$$$TRACE("HTTP Operation Request")
Retry	;
		If tRetryCount $$$TRACE("Retry Attempt: "_tRetryCount)
		set pResponse=##class(DFI.Common.Messages.EMCIDataLoadResponse).%New()
		Set tResponse = ##class(%Net.HttpResponse).%New(),tResponse.ContentType="application/fhir+json"
		If '$IsObject(..HTTPRequest) {
			Set pHttpRequest = ##class(%Net.HttpRequest).%New()
			Set pHttpRequest.Server = ..Adapter.HTTPServer
			Set pHttpRequest.Port = ..Adapter.HTTPPort
			Set pHttpRequest.ProxyServer = ..Adapter.ProxyServer
			Set pHttpRequest.ProxyPort = ..Adapter.ProxyPort
			Set pHttpRequest.ProxyTunnel = ..Adapter.ProxyHttpTunnel
			Set pHttpRequest.ProxyHTTPS = 1
			Set pHttpRequest.SSLConfiguration = ..Adapter.SSLConfig
			Set pHttpRequest.UserAgent = "curl/7.29.0"
			Set pHttpRequest.ContentEncoding = "HL7-ER7"
			Set pHttpRequest.ContentCharset = "UTF-8"
			Set pHttpRequest.ContentType = "application/fhir+json"
			Set pHttpRequest.AcceptGzip = 0
			Set pHttpRequest.WriteRawMode = 0
			Set pHttpRequest.ReadRawMode = 0
			Set pHttpRequest.OpenTimeout = ..Adapter.ConnectTimeout
			Set pHttpRequest.Timeout = ..Adapter.ResponseTimeout
			Set pHttpRequest.WriteTimeout = ..Adapter.WriteTimeout
			Set pHttpRequest.SocketTimeout = 115
			do ..HTTPRequest.EntityBody.CopyFrom(pRequest.FHIRJSONBody)
		}
		Set ..HTTPRequest.HttpResponse=tResponse
		Do ..HTTPRequest.EntityBody.Write(message)
		Set tSC = ..HTTPRequest.Post(..Adapter.URL,0,1) if 'tSC {
			// I can link this to a <READ> error generated in the HTTPRequest Send() Method
			// So I log it in the debug log and attempt to resend. I will attempt to resend up to 5 times before abandoning
			$$$DebugLog($username,"HTTP Write","Error: "_$$$GetErrorText(tSC),.dSC)
			Set tRetryCount = tRetryCount+1 if tRetryCount>5 set tRetryCount=0 Quit
			$$$DebugLog($username,"HTTP Write","Attempting to Resend: "_tRetryCount,.dSC)
			$$$TRACE("Going to attempt Retry: "_tRetryCount) set tSC=$$$OK
			Goto Retry
		}
		Set response = ..HTTPRequest.HttpResponse
		$$$TRACE("HTTP Response Status: "_response.StatusCode)
		If response.StatusCode=200 {
			If $IsObject(response.Data) {
				Set message = "" while 'response.Data.AtEnd { Set message=message_response.Data.Read(,.tSC) if 'tSC quit }
				do pResponse.HTTPResponseBody.Write(message) set pResponse.HTTPStatus=200,pResponse.HTTPStatus=200
				set pResponse.DocumentType="F",pResponse.ManifestID=pRequest.ManifestID,pResponse.ResponseStatus=$$$OK
			}
		}
		Else {
			Set message = "" if $IsObject(response.Data) { Set message="" while 'response.Data.AtEnd { Set message=message_response.Data.Read(,.tSC) if 'tSC quit } }
			Set tSC = $$$ERROR(5001,"HTTP Response Status is "_response.StatusCode_" with Error Text: "_response.ReasonPhrase_" with Content: "_message)
			set pResponse.HTTPStatus=tResponse.StatusCode,pResponse.ManifestID=pRequest.ManifestID,pResponse.MessageId=pRequest.MessageID,pResponse.ResponseStatus=tSC
		}
	}
	Catch ex {
		Set tSC = ex.AsStatus()
	}
	$$$TRACE("Outcome of HTTP Operation: "_$Select(tSC:"Ok",1:"Error: "_$$$GetErrorText(tSC)))
	Quit $$$OK
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="DFI.Common.Messages.EMCIDataLoadRequest">
		<Method>SendFHIRHTTPMessage</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="DFI.Common.Operation.PIXHL7FileOperation">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65881,5924.078521</TimeChanged>
<TimeCreated>65484,80162.000625</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.File.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.File.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="WriteHL7MessageToFile">
<FormalSpec>pRequest:EnsLib.HL7.Message,*pResponse:EnsLib.HL7.Message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tConfig=##class(DFI.Common.Configuration.ConfigurationSettings).GetConfigurationSettings(,$g(tConfig),.tSettings) if '$IsObject(tConfig) set tSC=$$$ERROR(5001,"Unable to Open Configuration Settings") quit
		if $l(..Adapter.FilePath) {set tFilePath=..Adapter.FilePath}
		elseif $l($g(tSettings("DFIHL7FileDirectory"))) {set tFilePath=tSettings("DFIHL7FileDirectory")}
		elseif $l($g(tSettings("DFIFileDirectory"))) {set tFilePath=tSettings("DFIFileDirectory")}
		else {set tFilePath="HL7 Files"}
		set tFilePath=##class(%File).NormalizeDirectory(tFilePath)
		set ..Adapter.FilePath=tFilePath
		$$$TRACE("File Path: "_tFilePath)
		if $l($g(tSettings("DFIHL7RequestFileName"))) {set tFileName=tSettings("DFIHL7RequestFileName")}
		else {set tFileName=$tr(..Adapter.CreateFilename("HL7 Request Message.txt","%F_%Q"),"-.","")_".json"}
		$$$TRACE("File Name: "_tFileName)
		set tFileName=tFilePath_tFileName
		$$$TRACE("Full File Name: "_tFileName)
		if $l(tFileName) {
			set tMessage=pRequest.OutputToString(,,.tSC) if 'tSC quit
			$$$TRACE(tMessage)
			set tSC=..Adapter.PutString(tFileName,tMessage) if 'tSC quit
		}
		else {
			set tSC=$$$ERROR(5001,"Invalid File Name: "_tFileName) quit
		}
	}
	catch ex {
		set tSC=ex.AsStatus()
	}
	set msg="HL7 Output to File Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC))
	$$$TRACE(msg) $$$DebugLog($username,"HL7OutputToFile",msg,.dSC)
	set aux=##class(DFI.Common.Transformations.CreateNACKDTL.AUX).%New(),aux.ACKCode=$s(tSC:"AA",1:"AE"),aux.ACKMessage=$s(tSC:"",1:$$$GetErrorText(tSC))
	set pResponse=##class(EnsLib.HL7.Message).%New()
	set tSC=##class(DFI.Common.Transformations.CreateNACKDTL).Transform(pRequest,.pResponse,aux) if 'tSC $$$TRACE("Error in CreateACK DTL: "_$$$GetErrorText(tSC)) set pResponse=""
	if $IsObject(pResponse) {$$$TRACE(pResponse.OutputToString(,,.tSC))}
	quit tSC
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="EnsLib.HL7.Message"> 
		<Method>WriteHL7MessageToFile</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="DFI.Common.Operation.PIXHL7HTTPOperation">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65845,55144.040403</TimeChanged>
<TimeCreated>65482,84866.019574</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.HTTP.OutboundAdapter</Type>
</Property>

<Property name="HTTPRequest">
<Type>%Net.HttpRequest</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="SendHL7Message">
<FormalSpec>pRequest:EnsLib.HL7.Message,*pResponse:EnsLib.HL7.Message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK,pResponse="",tRetryCount=0
	Try {
		$$$TRACE("HL7 HTTP Operation Request")
Retry	;
		If tRetryCount $$$TRACE("Retry Attempt: "_tRetryCount)
		Set message = pRequest.OutputToString(,,.tSC) if 'tSC quit
		Set tResponse = ##class(%Net.HttpResponse).%New(),tResponse.ContentType="application/hl7-v2"
		If '$IsObject(..HTTPRequest) {
			Set pHttpRequest = ##class(%Net.HttpRequest).%New()
			Set pHttpRequest.Server = ..Adapter.HTTPServer
			Set pHttpRequest.Port = ..Adapter.HTTPPort
			Set pHttpRequest.UserAgent = "curl/7.29.0"
			Set pHttpRequest.ContentEncoding = "HL7-ER7"
			Set pHttpRequest.ContentCharset = "UTF-8"
			Set pHttpRequest.ContentType = "application/hl7-v2"
			Set pHttpRequest.AcceptGzip = 0
			Set pHttpRequest.WriteRawMode = 0
			Set pHttpRequest.ReadRawMode = 0
			Set pHttpRequest.OpenTimeout = ..Adapter.ConnectTimeout
			Set pHttpRequest.Timeout = ..Adapter.ResponseTimeout
			Set pHttpRequest.WriteTimeout = ..Adapter.WriteTimeout
			Set pHttpRequest.SocketTimeout = 115
			Set ..HTTPRequest=pHttpRequest
		}
		Set ..HTTPRequest.HttpResponse=tResponse
		Do ..HTTPRequest.EntityBody.Write(message)
		Set tSC = ..HTTPRequest.Post(..Adapter.URL,0,1) if 'tSC {
			// I can link this to a <READ> error generated in the HTTPRequest Send() Method
			// So I log it in the debug log and attempt to resend. I will attempt to resend up to 5 times before abandoning
			$$$DebugLog($username,"HTTP Write","Error: "_$$$GetErrorText(tSC),.dSC)
			Set tRetryCount = tRetryCount+1 if tRetryCount>5 set tRetryCount=0 Quit
			$$$DebugLog($username,"HTTP Write","Attempting to Resend: "_tRetryCount,.dSC)
			$$$TRACE("Going to attempt Retry: "_tRetryCount) set tSC=$$$OK
			Goto Retry
		}
		Set response = ..HTTPRequest.HttpResponse
		$$$TRACE("HTTP Response Status: "_response.StatusCode)
		If response.StatusCode=200 {
			If $IsObject(response.Data) {
				Set message = "" while 'response.Data.AtEnd { Set message=message_response.Data.Read(,.tSC) if 'tSC quit }
				Set pResponse = ##class(EnsLib.HL7.Message).ImportFromString(message,.tSC) if 'tSC $$$TRACE("An error occurred creating Respnse Message: "_$$$GetErrorText(tSC))
			}
		}
		Else {
			Set message = "" if $IsObject(response.Data) { Set message="" while 'response.Data.AtEnd { Set message=message_response.Data.Read(,.tSC) if 'tSC quit } }
			Set tSC = $$$ERROR(5001,"HTTP Response Status is "_response.StatusCode_" with Error Text: "_response.ReasonPhrase_" with Content: "_message)
			If response.StatusCode=502 {Set message=pRequest.OutputToString(,,.tSC) $$$DebugLog($username,"502 Error",message,.dSC) }
		}
	}
	Catch ex {
		Set tSC = ex.AsStatus()
	}
	If 'tSC,'$IsObject(pResponse) {
		Set pResponse = ##class(EnsLib.HL7.Message).%New(),aux=##class(DFI.Common.Transformations.CreateNACKDTL.AUX).%New()
		Set aux.ACKCode = "AE",aux.ACKMessage=$$$GetErrorText(tSC)
		Set sc = ##class(DFI.Common.Transformations.CreateNACKDTL).Transform(pRequest,.pResponse,.aux) if 'sc $$$TRACE("Unable to Create NACK Response HL7 Message")
	}
	$$$TRACE("Outcome of HTTP Operation: "_$Select(tSC:"Ok",1:"Error: "_$$$GetErrorText(tSC)))
	Quit $$$OK
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="EnsLib.HL7.Message">
		<Method>SendHL7Message</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="DFI.Common.Operation.PIXHL7HTTPSOperation">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65845,55066.610061</TimeChanged>
<TimeCreated>65482,84866.019574</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.HTTP.OutboundAdapter</Type>
</Property>

<Property name="HTTPRequest">
<Type>%Net.HttpRequest</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="SendHL7Message">
<FormalSpec>pRequest:EnsLib.HL7.Message,*pResponse:EnsLib.HL7.Message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK,pResponse="",tRetryCount=0
	Try {
		$$$TRACE("HL7 HTTPS Operation Request")
Retry	;
		If tRetryCount $$$TRACE("Retry Attempt: "_tRetryCount)
		Set message = pRequest.OutputToString(,,.tSC) if 'tSC quit
		Set tResponse = ##class(%Net.HttpResponse).%New(),tResponse.ContentType="application/hl7-v2"
		If '$IsObject(..HTTPRequest) {
			Set pHttpRequest = ##class(%Net.HttpRequest).%New()
			Set pHttpRequest.Server = ..Adapter.HTTPServer
			Set pHttpRequest.Port = ..Adapter.HTTPPort
			Set pHttpRequest.ProxyServer = ..Adapter.ProxyServer
			Set pHttpRequest.ProxyPort = ..Adapter.ProxyPort
			Set pHttpRequest.ProxyTunnel = ..Adapter.ProxyHttpTunnel
			Set pHttpRequest.ProxyHTTPS = 1
			Set pHttpRequest.SSLConfiguration = ..Adapter.SSLConfig
			Set pHttpRequest.UserAgent = "curl/7.29.0"
			Set pHttpRequest.ContentEncoding = "HL7-ER7"
			Set pHttpRequest.ContentCharset = "UTF-8"
			Set pHttpRequest.ContentType = "application/hl7-v2"
			Set pHttpRequest.AcceptGzip = 0
			Set pHttpRequest.WriteRawMode = 0
			Set pHttpRequest.ReadRawMode = 0
			Set pHttpRequest.OpenTimeout = ..Adapter.ConnectTimeout
			Set pHttpRequest.Timeout = ..Adapter.ResponseTimeout
			Set pHttpRequest.WriteTimeout = ..Adapter.WriteTimeout
			Set pHttpRequest.SocketTimeout = 115
			Set ..HTTPRequest=pHttpRequest
		}
		Set ..HTTPRequest.HttpResponse=tResponse
		Do ..HTTPRequest.EntityBody.Write(message)
		Set tSC = ..HTTPRequest.Post(..Adapter.URL,0,1) if 'tSC {
			// I can link this to a <READ> error generated in the HTTPRequest Send() Method
			// So I log it in the debug log and attempt to resend. I will attempt to resend up to 5 times before abandoning
			$$$DebugLog($username,"HTTP Write","Error: "_$$$GetErrorText(tSC),.dSC)
			Set tRetryCount = tRetryCount+1 if tRetryCount>5 set tRetryCount=0 Quit
			$$$DebugLog($username,"HTTP Write","Attempting to Resend: "_tRetryCount,.dSC)
			$$$TRACE("Going to attempt Retry: "_tRetryCount) set tSC=$$$OK
			Goto Retry
		}
		Set response = ..HTTPRequest.HttpResponse
		$$$TRACE("HTTP Response Status: "_response.StatusCode)
		If response.StatusCode=200 {
			If $IsObject(response.Data) {
				Set message = "" while 'response.Data.AtEnd { Set message=message_response.Data.Read(,.tSC) if 'tSC quit }
				Set pResponse = ##class(EnsLib.HL7.Message).ImportFromString(message,.tSC) if 'tSC $$$TRACE("An error occurred creating Respnse Message: "_$$$GetErrorText(tSC))
			}
		}
		Else {
			Set message = "" if $IsObject(response.Data) { Set message="" while 'response.Data.AtEnd { Set message=message_response.Data.Read(,.tSC) if 'tSC quit } }
			Set tSC = $$$ERROR(5001,"HTTP Response Status is "_response.StatusCode_" with Error Text: "_response.ReasonPhrase_" with Content: "_message)
			If response.StatusCode=502 {Set message=pRequest.OutputToString(,,.tSC) $$$DebugLog($username,"502 Error",message,.dSC) }
		}
	}
	Catch ex {
		Set tSC = ex.AsStatus()
	}
	If 'tSC,'$IsObject(pResponse) {
		Set pResponse = ##class(EnsLib.HL7.Message).%New(),aux=##class(DFI.Common.Transformations.CreateNACKDTL.AUX).%New()
		Set aux.ACKCode = "AE",aux.ACKMessage=$$$GetErrorText(tSC)
		Set sc = ##class(DFI.Common.Transformations.CreateNACKDTL).Transform(pRequest,.pResponse,.aux) if 'sc $$$TRACE("Unable to Create NACK Response HL7 Message")
	}
	$$$TRACE("Outcome of HTTP Operation: "_$Select(tSC:"Ok",1:"Error: "_$$$GetErrorText(tSC)))
	Quit $$$OK
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="EnsLib.HL7.Message">
		<Method>SendHL7Message</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="DFI.Common.Production.HL7MsgRouter">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Production</Super>
<TimeChanged>65874,13895.272927</TimeChanged>
<TimeCreated>60208,69187</TimeCreated>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="DFI.Common.HL7MsgRouter.Production" TestingEnabled="false" LogGeneralTraceEvents="false">
  <Description>Routes HL7 messages based on message source and contents. To learn more, click on ABC_Router or XYZ_Router. Click View Rules to see message routing rules.The production uses a routing process Ens.Alert to route alerts. The rule in Ens.Alert consults a lookup table to see where to send the alert.To demonstrate alerts, give EMailAlertOperation a valid STMP server and Recipient. You may also edit the AlertTable lookup table. Temporarily assign a bad File Path to an enabled file service.</Description>
  <ActorPoolSize>1</ActorPoolSize>
  <Setting Target="Adapter" Name="AlertNotificationOperation">EMailAlertOperation</Setting>
  <Item Name="ABC_HL7FileService" Category="" ClassName="EnsLib.HL7.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="Test source of HL7 messages." LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Host" Name="AckTargetConfigNames">Regular_FileOperation</Setting>
    <Setting Target="Host" Name="Framing">Flexible</Setting>
    <Setting Target="Host" Name="TargetConfigNames">NigelRule</Setting>
    <Setting Target="Host" Name="SearchTableClass">DFI.Common.HL7MsgRouter.SearchTable</Setting>
    <Setting Target="Host" Name="LocalFacilityApplication"></Setting>
    <Setting Target="Host" Name="AckMode">App</Setting>
    <Setting Target="Host" Name="UseAckCommitCodes">1</Setting>
    <Setting Target="Host" Name="IgnoreInboundAck">1</Setting>
    <Setting Target="Host" Name="BatchHandling">Indiv</Setting>
    <Setting Target="Host" Name="MessageSchemaCategory">2.5</Setting>
    <Setting Target="Host" Name="DefCharEncoding">Latin1</Setting>
    <Setting Target="Host" Name="AlertGracePeriod">0</Setting>
    <Setting Target="Host" Name="AlertOnError">1</Setting>
    <Setting Target="Host" Name="ArchiveIO">0</Setting>
    <Setting Target="Adapter" Name="FilePath">C:\Practice\in</Setting>
    <Setting Target="Adapter" Name="FileSpec">*.txt</Setting>
    <Setting Target="Adapter" Name="ArchivePath">C:\Practice\inarchive</Setting>
    <Setting Target="Adapter" Name="WorkPath"></Setting>
    <Setting Target="Adapter" Name="Charset">Default</Setting>
    <Setting Target="Adapter" Name="FileAccessTimeout">10</Setting>
    <Setting Target="Adapter" Name="AppendTimestamp">1</Setting>
    <Setting Target="Adapter" Name="CallInterval">5</Setting>
    <Setting Target="Host" Name="SaveReplies">All</Setting>
  </Item>
  <Item Name="Ens.Alert" Category="" ClassName="EnsLib.MsgRouter.RoutingEngine" PoolSize="0" Enabled="true" Foreground="false" Comment="This handles Alert routing logic." LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Host" Name="BusinessRuleName">DFI.Common.HL7MsgRouter.AlertRule</Setting>
    <Setting Target="Host" Name="AlertOnError">0</Setting>
  </Item>
  <Item Name="EMailAlertOperation" Category="" ClassName="EnsLib.EMail.AlertOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="Alerts system administrators via e-mail." LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Host" Name="RetryInterval">15</Setting>
    <Setting Target="Host" Name="AlertRetryGracePeriod">10</Setting>
    <Setting Target="Host" Name="FailureTimeout">15</Setting>
    <Setting Target="Host" Name="AlertOnError">1</Setting>
    <Setting Target="Host" Name="ArchiveIO">0</Setting>
    <Setting Target="Adapter" Name="SMTPServer">smtp.gmail.com</Setting>
    <Setting Target="Adapter" Name="SMTPPort">587</Setting>
    <Setting Target="Adapter" Name="Credentials">email</Setting>
    <Setting Target="Adapter" Name="Recipient">nigel.salm@gmail.com</Setting>
    <Setting Target="Adapter" Name="Cc"></Setting>
    <Setting Target="Adapter" Name="From">nigel@healthsystems.co.za</Setting>
    <Setting Target="Host" Name="IncludeDetails">1</Setting>
    <Setting Target="Host" Name="IncludeNodeinSubject">1</Setting>
    <Setting Target="Host" Name="SubjectPrefix">HL7 Error</Setting>
    <Setting Target="Adapter" Name="SSLConfig">ISC.FeatureTracker.SSL.Config</Setting>
  </Item>
  <Item Name="Regular_FileOperation" Category="" ClassName="EnsLib.HL7.Operation.FileOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="Default destination for HL7 messages." LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Host" Name="Filename">%H%M_Regular_%F.txt</Setting>
    <Setting Target="Host" Name="Separators"><![CDATA[|^~\&]]]]><![CDATA[></Setting>
    <Setting Target="Host" Name="SearchTableClass"></Setting>
    <Setting Target="Host" Name="AlertRetryGracePeriod">0</Setting>
    <Setting Target="Host" Name="RetryInterval">5</Setting>
    <Setting Target="Host" Name="FailureTimeout">15</Setting>
    <Setting Target="Host" Name="AlertOnError">1</Setting>
    <Setting Target="Host" Name="ArchiveIO">0</Setting>
    <Setting Target="Host" Name="Framing">AsciiLF</Setting>
    <Setting Target="Adapter" Name="FilePath">C:\Practice\out</Setting>
    <Setting Target="Adapter" Name="Overwrite">0</Setting>
    <Setting Target="Adapter" Name="Charset">Default</Setting>
    <Setting Target="Adapter" Name="OpenTimeout">5</Setting>
  </Item>
  <Item Name="BadMessageHandler" Category="" ClassName="EnsLib.HL7.Operation.FileOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="Destination for bad messages." LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Host" Name="Filename">%H%M_Bad_%F.txt</Setting>
    <Setting Target="Host" Name="Separators"><![CDATA[|^~\&]]]]><![CDATA[></Setting>
    <Setting Target="Host" Name="SearchTableClass"></Setting>
    <Setting Target="Host" Name="AlertRetryGracePeriod">0</Setting>
    <Setting Target="Host" Name="RetryInterval">5</Setting>
    <Setting Target="Host" Name="FailureTimeout">15</Setting>
    <Setting Target="Host" Name="AlertOnError">1</Setting>
    <Setting Target="Host" Name="ArchiveIO">0</Setting>
    <Setting Target="Host" Name="Framing">AsciiLF</Setting>
    <Setting Target="Adapter" Name="FilePath">C:\Practice\out</Setting>
    <Setting Target="Adapter" Name="Overwrite">0</Setting>
    <Setting Target="Adapter" Name="Charset">Default</Setting>
    <Setting Target="Adapter" Name="OpenTimeout">5</Setting>
  </Item>
  <Item Name="NigelRule" Category="" ClassName="DFI.Common.HL7MsgRouter.NigelRule" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="Validation">dmf-z</Setting>
    <Setting Target="Host" Name="BusinessRuleName">DFI.Common.HL7MsgRouter.NigelRule</Setting>
    <Setting Target="Host" Name="AlertOnBadMessage">1</Setting>
    <Setting Target="Host" Name="BadMessageHandler">BadMessageHandler</Setting>
    <Setting Target="Host" Name="AlertOnError">1</Setting>
    <Setting Target="Host" Name="ActOnTransformError">1</Setting>
    <Setting Target="Host" Name="ActOnValidationError">1</Setting>
    <Setting Target="Host" Name="ReplyCodeActions">E=F</Setting>
    <Setting Target="Host" Name="ResponseFrom">Regular_FileOperation</Setting>
    <Setting Target="Host" Name="AddNackERR">1</Setting>
  </Item>
  <Item Name="DFI.Common.HL7MsgRouter.RoutingRule" Category="" ClassName="EnsLib.HL7MsgRouter.RoutingEngine" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="Validation"></Setting>
    <Setting Target="Host" Name="BusinessRuleName">DFI.Common.HL7MsgRouter.RoutingRule</Setting>
  </Item>
<Item Name="DFI.Common.REST.DirectoryService" Category="" ClassName="DFI.Common.REST.DirectoryService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="Port">9988</Setting>
    <Setting Target="Adapter" Name="JobPerConnection">0</Setting>
    <Setting Target="Adapter" Name="SSLConfig"></Setting>
  </Item>
  <Item Name="DFI.Common.REST.DirectoryOperation" Category="" ClassName="DFI.Common.REST.DirectoryOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="HTTPPort">9988</Setting>
    <Setting Target="Adapter" Name="HTTPServer">localhost</Setting>
    <Setting Target="Adapter" Name="URL">/directory</Setting>
    <Setting Target="Adapter" Name="SSLConfig"></Setting>
  </Item></Production>
]]></Data>
</XData>
</Class>


<Class name="DFI.Common.Production.InterfaceProduction">
<Super>Ens.Production</Super>
<TimeChanged>65895,24321.997323</TimeChanged>
<TimeCreated>65815,65097.660706</TimeCreated>

<Method name="GetCurrentProductionSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pSettings:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Ens.Director).GetProductionSettings(.pSettings)
]]></Implementation>
</Method>

<Method name="GetProductionItemSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pProductionItem:%String="",&pSettings:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=##class(Ens.Director).GetItemSettings(pProductionItem,$LB("Target","Name","Value","ValueType","Default","DefaultType","Description","Type"),,pSettings) if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>

<Method name="SetAutoStart">
<ClassMethod>1</ClassMethod>
<FormalSpec>pProductionName:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if '$l(pProductionName) {
			set tSC=##class(DFI.Common.Configuration.ConfigurationSettings).GetConfigurationSettings(,.tConfig,.pSettings)
			set pProductionName=pSettings("DFIProductionName")
			if '$l(pProductionName) set tSC=$$$ERROR(5001,"Unable to determine Production Name") quit
		}
		set tSC=##class(Ens.Director).SetAutoStart(pProductionName)
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>

<Method name="GetSettingsArray">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>*pSettings</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[##class(Ens.Director).GetProductionSettings("",.pSettings)
]]></Implementation>
</Method>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="DFI.Common.Production.InterfaceProduction" TestingEnabled="true" LogGeneralTraceEvents="true">
  <Description>This is the default DFI Interface. It contains all of the current Common Production Services, Processes and Operations. The DFI Configuration Settings has Properties that specify the various Service, Process and Operation Production Item Names and corresponding underlying Class Names. The specific Interface Productions are identified by 'DFI.{Interface}.Production.InterfaceProduction</Description>
  <ActorPoolSize>2</ActorPoolSize>
  <Setting Target="Adapter" Name="AlertNotificationManager"></Setting>
  <Setting Target="Adapter" Name="AlertNotificationOperation">Ens.Alert</Setting>
  <Setting Target="Adapter" Name="AlertNotificationRecipients">nigel@healthsystems.co.za</Setting>
  <Setting Target="Adapter" Name="AlertNotificationOperation">EMailAlertOperation</Setting>
  <Item Name="DFI Housekeeping Service" Category="" ClassName="DFI.Common.Service.HouseKeeping" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="AlertOnError">1</Setting>
    <Setting Target="Adapter" Name="CallInterval">600</Setting>
  </Item>
  <Item Name="DFI Message Queue Service" Category="" ClassName="DFI.Common.Service.ProcessMessageQueue" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="Ens.Alert" Category="DFI Common Operation" ClassName="EnsLib.EMail.AlertOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="AlertGroups">HealthSystems</Setting>
    <Setting Target="Host" Name="AlertOnError">0</Setting>
    <Setting Target="Host" Name="AlertRetryGracePeriod">15</Setting>
    <Setting Target="Host" Name="BusinessPartner">DFI</Setting>
    <Setting Target="Host" Name="IncludeDetails">1</Setting>
    <Setting Target="Host" Name="IncludeNodeinSubject">1</Setting>
    <Setting Target="Host" Name="QueueCountAlert">20</Setting>
    <Setting Target="Host" Name="QueueWaitAlert">120</Setting>
    <Setting Target="Host" Name="ReplyCodeActions">E=F</Setting>
    <Setting Target="Host" Name="SubjectPrefix">DFI Interface Alert Notification</Setting>
    <Setting Target="Host" Name="SystemName">DFI.Cpmmon.Production.InterfaceProduction</Setting>
    <Setting Target="Adapter" Name="Credentials">EMail</Setting>
    <Setting Target="Adapter" Name="From">nigel@healthsystems.co.za</Setting>
    <Setting Target="Adapter" Name="Recipient">nigel@healthsystems.co.za</Setting>
    <Setting Target="Adapter" Name="SMTPPort">587</Setting>
    <Setting Target="Adapter" Name="SMTPServer">smtp.office365.com</Setting>
    <Setting Target="Adapter" Name="SSLConfig">ISC.FeatureTracker.SSL.Config</Setting>
  </Item>
  <Item Name="DFI Email Operation" Category="DFI Common Operation" ClassName="DFI.Common.Operation.EMailOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="This is the Email Operation that is used to send Alert Notification Emails and optionally any File Attachments that are a by product of the Production Functionality." LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="AlertGroups">HealthSystems</Setting>
    <Setting Target="Host" Name="AlertOnError">1</Setting>
    <Setting Target="Host" Name="AlertRetryGracePeriod">15</Setting>
    <Setting Target="Host" Name="BusinessPartner">DFI</Setting>
    <Setting Target="Host" Name="QueueCountAlert">20</Setting>
    <Setting Target="Host" Name="QueueWaitAlert">120</Setting>
    <Setting Target="Host" Name="ReplyCodeActions">E=F</Setting>
    <Setting Target="Adapter" Name="Credentials">EMail</Setting>
    <Setting Target="Adapter" Name="From">nigel@healthsystems.co.za</Setting>
    <Setting Target="Adapter" Name="Recipient">nigel@healthsystems.co.za</Setting>
    <Setting Target="Adapter" Name="SMTPPort">587</Setting>
    <Setting Target="Adapter" Name="SMTPServer">smtp.office365.com</Setting>
    <Setting Target="Adapter" Name="SSLConfig">ISC.FeatureTracker.SSL.Config</Setting>
  </Item>
  <Item Name="DFI Alert Service" Category="" ClassName="DFI.Common.Service.AlertNotificationService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="AlertGracePeriod">30</Setting>
    <Setting Target="Host" Name="AlertOnError">1</Setting>
  </Item>
  <Item Name="DFI PIX HL7 File Operation" Category="" ClassName="DFI.Common.Operation.PIXHL7FileOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="DFI PIX HL7 HTTP Operation" Category="" ClassName="DFI.Common.Operation.PIXHL7HTTPOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="AlertOnError">1</Setting>
    <Setting Target="Host" Name="AlertRetryGracePeriod">30</Setting>
    <Setting Target="Host" Name="BusinessPartner">DFI</Setting>
    <Setting Target="Host" Name="QueueCountAlert">10</Setting>
    <Setting Target="Host" Name="QueueWaitAlert">15</Setting>
    <Setting Target="Host" Name="ReplyCodeActions">E=F</Setting>
  </Item>
  <Item Name="DFI WCG HL7 STD Process" Category="" ClassName="DFI.WCGHL7STD.Process.ODStoWCGHL7STD" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
</Production>
]]></Data>
</XData>
</Class>


<Class name="DFI.Common.Production.REST">
<Super>Ens.Production</Super>
<TimeChanged>65874,13837.515563</TimeChanged>
<TimeCreated>62636,62570.295692</TimeCreated>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="DFI.Common.REST.Production" TestingEnabled="true" LogGeneralTraceEvents="false">
  <Description></Description>
  <ActorPoolSize>2</ActorPoolSize>
  <Item Name="DFI.Common.REST.DirectoryService" Category="" ClassName="DFI.Common.REST.DirectoryService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="Port">9988</Setting>
    <Setting Target="Adapter" Name="JobPerConnection">0</Setting>
    <Setting Target="Adapter" Name="SSLConfig"></Setting>
  </Item>
  <Item Name="DFI.Common.REST.DirectoryOperation" Category="" ClassName="DFI.Common.REST.DirectoryOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="HTTPPort">9988</Setting>
    <Setting Target="Adapter" Name="HTTPServer">localhost</Setting>
    <Setting Target="Adapter" Name="URL">/directory</Setting>
    <Setting Target="Adapter" Name="SSLConfig"></Setting>
  </Item>
</Production>
]]></Data>
</XData>
</Class>


<Class name="DFI.Common.REST.DirectoryOperation">
<Description>
This business operation accepts a request for Person or Employee directory services. The request specifies the action to be taken and any additional parameters needed.
Then the remote REST service is invoked using the appropriate HTTP command, URL, and JSON formatted payload.  The REST HTTP response is then parsed and the values are returned in a response object.
This demonstrates automatically and manually constructing and sending a JSON payload, and retrieving and parsing a JSON object or collection response.
It also demonstrates use of the four CRUD operations in the RESTful HTTP context: Create/PUT, Retrieve/GET, Update/POST, and Delete/DELETE.</Description>
<Super>EnsLib.REST.Operation</Super>
<TimeChanged>65874,10785.058829</TimeChanged>
<TimeCreated>59235,56913.819</TimeCreated>

<Method name="OnMessage">
<FormalSpec>pRequest:DFI.Common.REST.DirectoryRequest,*pResponse:DFI.Common.REST.DirectoryResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try {
		If (pRequest.Type="") || (pRequest.Key="") || (pRequest.KeyValue="") {
			Set tSC=$$$ERROR($$$EnsErrGeneral,"Fields Type, Key and KeyValue are mandatory")
			Quit
		}
		Set tCmd=$ZConvert(pRequest.Command,"U")
		If tCmd = "GET" {
			Set tURL=..Adapter.URL_"/"_pRequest.Type_"/"_pRequest.Key_"/"_$$$URLENCODE(pRequest.KeyValue)_$S(""=pRequest.Field:"",1:"/"_pRequest.Field)
			Set tSC=..Adapter.GetURL(tURL,.tHttpResponse)
			Set:$$$ISERR(tSC)&&$IsObject(tHttpResponse)&&$IsObject(tHttpResponse.Data)&&tHttpResponse.Data.Size tSC=$$$ERROR($$$EnsErrGeneral,$$$StatusDisplayString(tSC)_":"_tHttpResponse.Data.Read())
			Set tSC1 = pRequest.NewResponse(.pResponse)  Set:$$$ISERR(tSC1) tSC=$$$ADDSC(tSC,tSC1)
			Set pResponse.SessionId=..%RequestHeader.SessionId
			Set pResponse.RequestURL="Get "_tURL
			Quit:$$$ISERR(tSC)
			If $$$IsdefObject(tHttpResponse)&&$IsObject(tHttpResponse.Data)&&tHttpResponse.Data.Size {
				For i=0:1:31 { Continue:$Case(i,9:1,10:1,13:1,:0)  Set tArr($I(tArr))=$C(i), tArr($I(tArr))="" } ; strip control chars from raw stream copy
				Do ##class(%IO.MetaCharacterStream).%New(tHttpResponse.Data).CopyReplaceArray(pResponse.RawResponse,,,,,,,"IO",.tSC,.tArr)
				If pRequest.KeyValue=$TR(pRequest.KeyValue,"*?") {
					Set tSC=..JSONStreamToObject(tHttpResponse.Data,.tProxy)  Quit:$$$ISERR(tSC)
					Do tProxy.%CopyToArray(.tRec)
					If $Case(pRequest.Field, "":1, "*":1, :0) {
						Do ..getPersonProps(.tRec,pResponse.Properties)
						$$$TRACE("Got "_pResponse.Properties.Count()_" property records")
					} Else {
						$$$ASSERT($G(tRec(pRequest.Key))=pRequest.KeyValue)
						Kill tRec(pRequest.Key)
						Set tVal=$G(tRec(pRequest.Field),$C(0))
						Kill tRec(pRequest.Field)
						$$$ASSERT(tVal'=$C(0)&&'$D(tRec)) ; should not have returned any other fields
						Set pResponse.Value=tVal
						$$$TRACE("Got "_pRequest.Field_" = "_tVal_" for key "_pRequest.Key)
					}
				} Else {
					Set tSC=..JSONStreamToObjectArray(tHttpResponse.Data,.tProxyArray)  Quit:$$$ISERR(tSC)
					For i=1:1:tProxyArray { Set tProxy=tProxyArray(i)
						Kill tRec
						Do tProxy.%CopyToArray(.tRec)
						If $Case(pRequest.Field, "":1, "*":1, :0) {
							Set rec=##class(%ArrayOfDataTypes).%New()
							Do ..getPersonProps(.tRec,rec)
							Do pResponse.Records.SetAt(rec,i)
						} Else {
							Set tVal=$G(tRec(pRequest.Field),$C(0))
							Kill tRec(pRequest.Field)
							$$$ASSERT(tVal'=$C(0)) ; should not have returned other fields
							Do pResponse.Properties.SetAt(pRequest.Key_"="_$S($ZCVT(pRequest.Field,"L")=$ZCVT(pRequest.Key,"L"):tVal,1:tRec(pRequest.Key))_" : "_pRequest.Field_"="_tVal,i)
						}
					}
					$$$TRACE("Got "_tProxyArray_" records")
				}
			} Else { /* Set tSC=$$$ERROR($$$EnsErrGeneral,"No response data")  Quit */ }
		} ElseIf tCmd = "POST" {
			Set tURL=..Adapter.URL_"/"_pRequest.Type_"/"_pRequest.Key_"/"_$$$URLENCODE(pRequest.KeyValue)
			Set tSC=..Adapter.PostURL(tURL,.tHttpResponse,"",pRequest.Body)
			Set:$$$ISERR(tSC)&&$IsObject(tHttpResponse)&&$IsObject(tHttpResponse.Data)&&tHttpResponse.Data.Size tSC=$$$ERROR($$$EnsErrGeneral,$$$StatusDisplayString(tSC)_":"_tHttpResponse.Data.Read())
			Set tSC1=pRequest.NewResponse(.pResponse)  Set:$$$ISERR(tSC1) tSC=$$$ADDSC(tSC,tSC1)
			Set pResponse.SessionId=..%RequestHeader.SessionId
			Set pResponse.RequestURL="Post "_tURL
			If $IsObject(tHttpResponse) {
				Do pResponse.RawResponse.CopyFrom(tHttpResponse.Data)  Do tHttpResponse.Data.Rewind()
				Set pResponse.Value=tHttpResponse.Data.Read() ; count
			}
			
		} ElseIf tCmd = "DELETE" {
			Set tURL=..Adapter.URL_"/"_pRequest.Type_"/"_pRequest.Key_"/"_$$$URLENCODE(pRequest.KeyValue)_$S(""=pRequest.Field:"",1:"/"_pRequest.Field)
			Set tSC=..Adapter.DeleteURL(tURL,.tHttpResponse)
			Set:$$$ISERR(tSC)&&$IsObject(tHttpResponse)&&$IsObject(tHttpResponse.Data)&&tHttpResponse.Data.Size tSC=$$$ERROR($$$EnsErrGeneral,$$$StatusDisplayString(tSC)_":"_tHttpResponse.Data.Read())
			Set tSC1=pRequest.NewResponse(.pResponse) Set:$$$ISERR(tSC1) tSC=$$$ADDSC(tSC,tSC1) 
			Quit:$$$ISERR(tSC)
			Set pResponse.SessionId=..%RequestHeader.SessionId
			Set pResponse.RequestURL="Delete "_tURL
			Do pResponse.RawResponse.CopyFrom(tHttpResponse.Data)  Do tHttpResponse.Data.Rewind()
			Set pResponse.Value=tHttpResponse.Data.Read() ; count

		} ElseIf tCmd = "PUT" {
			Set tURL=..Adapter.URL_"/"_pRequest.Type
			Set tSC=..Adapter.PutURL(tURL,.tHttpResponse,"",pRequest.Body)
			Set:$$$ISERR(tSC)&&$IsObject(tHttpResponse)&&$IsObject(tHttpResponse.Data)&&tHttpResponse.Data.Size tSC=$$$ERROR($$$EnsErrGeneral,$$$StatusDisplayString(tSC)_":"_tHttpResponse.Data.Read())
			Set tSC1=pRequest.NewResponse(.pResponse)  Set:$$$ISERR(tSC1) tSC=$$$ADDSC(tSC,tSC1)
			Quit:$$$ISERR(tSC)
			Set pResponse.SessionId=..%RequestHeader.SessionId
			Set pResponse.RequestURL="Put "_tURL
			Do pResponse.RawResponse.CopyFrom(tHttpResponse.Data)  Do tHttpResponse.Data.Rewind()
			Set pResponse.Value=tHttpResponse.Data.Read() ; ID
		} Else {
			Set tSC=$$$ERROR($$$EnsErrGeneral,"Command "_pRequest.Command_" not implemented")
		}
	} catch {
		Set tSC=$$$SystemError
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="getPersonProps">
<Description>
copy Person properties from COS array to %ArrayOfDataTypes object, handling various data types appropriately</Description>
<FormalSpec>pArray,pCollectionObj</FormalSpec>
<Implementation><![CDATA[
	Set k="" For { Set k=$O(pArray(k),1,val)  Quit:""=k
		If '$IsObject(val) {
			Do pCollectionObj.SetAt($S($L(val)<=50:val,1:$E(val,1,47)_"..."),k) ; truncate strings longer than 50 chars
		} ElseIf $Case(k,"Spouse":1,"Company":1,:0) {
			Do pCollectionObj.SetAt(val.Name,k) ; don't drill in to nested Spouse and Company objects, just keep their name
		} ElseIf val.%Extends("%Library.ListOfDataTypes") || val.%Extends("%Library.ListOfObjects") {
			Set val2="" For j=1:1:val.Count() { Set val2=val2_","_val.GetAt(j) } ; concatenate lists of values into a single string (i.e. FavoriteColors)
			Do pCollectionObj.SetAt($E(val2,2,*),k)
		} ElseIf val.%Extends("%ZEN.proxyObject") {
			Kill tRec2  Do val.%CopyToArray(.tRec2)
			Set j="" For { Set j=$O(tRec2(j),1,val2)  Quit:""=j
				Do pCollectionObj.SetAt(val2,k_"."_j) ; unroll nested proxy object properties using a dot in the property name
			}
		} Else {
			Do pCollectionObj.SetAt(val,k) ; just store the oref string
		}
	}
]]></Implementation>
</Method>
</Class>


<Class name="DFI.Common.REST.DirectoryPage">
<Description>
StartProduction</Description>
<IncludeCode>EnsConstants,EnsUI,Ensemble</IncludeCode>
<Super>%CSP.UI.Portal.Template</Super>
<TimeChanged>65874,11244</TimeChanged>
<TimeCreated>60310,50851.071342</TimeCreated>

<Parameter name="DOMAIN">
<Default>ENSDEMO</Default>
</Parameter>

<Parameter name="RESOURCE">
<Description>
User needs USE permissions on the %Ens_MessageContent resource to view this page.</Description>
<Default>%Ens_MessageContent:USE</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Demo REST Directory Service</Default>
</Parameter>

<Parameter name="CSSINCLUDES">
<Default>ensemble/Ensemble_Wizards.css</Default>
</Parameter>

<Parameter name="AUTOLOGOUT">
<Description>
If true, then attempt to refresh this page when its session timeout period has expired.
This will cause a login page to display if the current session has ended
and security is set to require login.</Description>
<Type>BOOLEAN</Type>
<Default>0</Default>
</Parameter>

<XData name="contentPane">
<Description>
This XML block defines the contents of the page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane>
<jsonProvider id="jpResponseInfo" OnGetTargetObject="GetResponseInfo">
<parameter id="riId" paramName="responseId"/>
</jsonProvider>
<hgroup cellVAlign="top">
<pane id="paneSelect" paneName="paneSelect"/>
<spacer width="15"/>
<pane id="paneInfo" paneName="paneInfo" width="40%" />
<pane id="paneDetails" paneName="paneDetails"/>
</hgroup>
<hgroup>
<spacer width="15"/>
<vgroup>
<text name="txSession" id="txSession" label="Session ID" labelClass="labelRequired"
          title="View the Trace diagram for the REST service request and response." />
<text name="txURL" id="txURL" label="URL sent" labelClass="labelRequired" size="210" 
          title="The text of the REST service URL submitted to the server." />
<textarea name="txRawResponse" id="txRawResponse" label="Raw Response JSON" labelClass="labelRequired" height="100" width="400"
          title="The full REST / JSON response received from the server." />
</vgroup>
</hgroup>
</pane>
]]></Data>
</XData>

<XData name="paneSelect">
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen" >
<vgroup id="mainPanel" cellAlign="center" groupClass="" enclosingClass="menuPanel"  valign="top">
<form name="fmSelect" id="fmSelect" layout="vertical" cellStyle="padding: 2px 10px; font-size:0.8em;">
<radioSet required="true" readOnly="false" hidden="false" value=""
  name="rsPersonEmployee" id="rsPersonEmployee" label="Record Type" 
  labelClass="labelRequired"  enclosingStyle="padding-bottom:4px;" 
  title="Which type of directory record to work with"
  valueList="Person,Employee" displayList="Person,Employee" originalValue="Person"
  onclick="zenPage.changeType('rsPersonEmployee');"
	/>
<hgroup>
<radioSet required="true" readOnly="false" hidden="false" value=""
  name="rsNameSSN" id="rsNameSSN" label="Retrieval Key Field" 
  labelClass="labelRequired"  enclosingStyle="padding-bottom:4px;" 
  title="Which key field to use to identify directory records"
  valueList="Name,SSN" displayList="Name,SSN" originalValue="Name"
  onclick="zenPage.changeType('rsNameSSN');"
	/>
<spacer width="10" />
<text name="txKeyVal" id="txKeyVal" label="Key Value" labelClass="labelRequired" size="21" 
          title="Enter a key value to use in identifying which directory records to work with. May contain wildcards * and ?." />
</hgroup>
<hgroup>
<radioSet required="true" readOnly="false" hidden="false" value=""
  name="rsField" id="rsField" label="Retrieve Field(s)" 
  labelClass="labelRequired"  enclosingStyle="padding-bottom:4px;" 
  title="Which field value to retrieve"
  valueList="All,Single" displayList="All,Single" originalValue="All"
  onclick="zenPage.changeType('rsField');"
	/>
<spacer width="10" />
<text name="txField" id="txField" label="Field Name" labelClass="labelRequired" size="21" hidden="true"
          title="Enter a field name to retrieve the value of (case insensitive)." />
</hgroup>
<button controlClass="commandButton" id="btnRetrieve" caption="Retrieve" onclick="zenPage.retrieveRec();"
		title="Retrieve directory records matching the above retrieval criteria" />
</form>
</vgroup>
</pane>
]]></Data>
</XData>

<XData name="paneInfo">
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane>
<label name="txValue" id="txValue" label="Retrieved Value" labelClass="labelRequired" controlClass="labelRequired"
          title="Value retrieved for a single-record, single-field query." />
<html id="htmlInfo" OnDrawContent="DrawInfoTable" />
</pane>
]]></Data>
</XData>

<XData name="paneDetails">
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane>
<form name="fmDetails" id="fmDetails" layout="vertical" cellStyle="padding: 2px 10px; font-size:0.8em;">
<html id="htmlDetails" OnDrawContent="DrawDetailsTable" />
<hgroup>
<button controlClass="commandButton" id="btnUpdate" caption="Update" onclick="zenPage.updateRec();"
		title="Update the current directory record using the above field values" />
<button controlClass="commandButton" id="btnDelete" caption="Delete" onclick="zenPage.deleteRec();"
		title="Delete the current directory record" />
<button controlClass="commandButton" id="btnCreate" caption="Create" onclick="zenPage.createRec();"
		title="Create a new directory record using the above field values" />
</hgroup>
</form>
</pane>
]]></Data>
</XData>

<Method name="DrawInfoTable">
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 &html<<table id="infoTable" border="1" style="cursor:default;visibility:hidden;" title="Click a row to select">
	<thead>
		<tr>
			<th id="infoKey">Key</th>
			<th id="infoVal">Value</th>
		</tr>
 	</thead>
 	<tbody id="infoBody">
 	</tbody>
	</table>

	<table id="recordsTable" border="1" style="cursor:default;visibility:hidden;" title="Click a row to select">
	<thead>
		<tr>
			<th id="recordsName">Name</th>
			<th id="recordsSSN">SSN</th>
		</tr>
	</thead>
	<tbody id="recordsBody">
	</tbody>
	</table>>
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawDetailsTable">
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 &html<<table id="detailTable" border="1">
	<thead>
		<tr>
			<th id="detailProp">Property</th>
			<th id="detailVal">Value</th>
		</tr>
	</thead>
	<tbody id="detailBody">
	</tbody>
	</table>>
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Description>
This client event, if present, is fired when the page is loaded.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	zen('rsPersonEmployee').setValue('Person');
	zen('rsNameSSN').setValue('Name');
	zen('rsField').setValue('All');
]]></Implementation>
</Method>

<Method name="retrieveRec">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var type = zen('rsPersonEmployee').getValue();
	var key = zen('rsNameSSN').getValue();
	var val = zen('txKeyVal').getValue();
	var field = zen('txField').getValue();
	if ('All' == zen('rsField').getValue()) field='*';

	if ('' == val) { alert($$$Text('You must enter a key value. You may use wildcards * and ?.')); return }
	if ('' == field) { alert($$$Text('You must enter a field value or select "All".')); return }

	var result = zenPage.DoRetrieve(type,key,val,field);
	var parm = zen('riId');
	var ids = result.split('|');
	var id = parseInt(ids[1]);
	if (id > 0) {
		parm.value = id;
		/*zenPage.currRespId = id;
		zenPage.currType = type;
		zenPage.currKey = key;
		zenPage.currKeyVal = val;
		zenpage.currField = field;*/
	} else {
		parm.value = '';
		var err = result;
		if (err && ('' != err)) alert(err);
	}
	zenPage.refresh();
]]></Implementation>
</Method>

<Method name="updateRec">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var key = zenPage.findKey();
	if ('' == key) return;
	var keyval = key.split('=');
	var obj = zenPage.getDetailObj();
	if (!obj) return;
	var type = zen('rsPersonEmployee').getValue();
	var result = zenPage.DoUpdate(type,keyval[0],keyval[1],obj);
	var parm = zen('riId');
	var ids = result.split('|');
	var id = parseInt(ids[1]);
	var updid = parseInt(ids[0]);
	if (updid > 0) {
		parm.value = id;
		zenPage.refresh();
		alert('record '+updid+' updated');
	} else {
		parm.value = '';
		var err = result;
		if (err && ('' != err)) alert(err);
	}
]]></Implementation>
</Method>

<Method name="deleteRec">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var key = zenPage.findKey();
	if ('' == key) return;
	var keyval = key.split('=');
	var result = zenPage.DoDelete(keyval[0],keyval[1]);
	var parm = zen('riId');
	var ids = result.split('|');
	var id = parseInt(ids[1]);
	var count = parseInt(ids[0]);
	if (count > 0) {
		if (count == 1) { alert('one record deleted'); }
		else { alert(count + ' RECORDS DELETED'); }
		parm.value = id;
		zenPage.refresh();
	} else {
		parm.value = '';
		var err = result;
		if (err && ('' != err)) alert(err);
	}
]]></Implementation>
</Method>

<Method name="createRec">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var key = zenPage.findKey();
	if ('' == key) return;
	var keyval = key.split('=');
	var obj = zenPage.getDetailObj()
	if (!obj) return;
	var type = zen('rsPersonEmployee').getValue();
	// An Employee is a Person, but setting one of these properties for a Person object will cause Property error
	if ((type = "Person") && ((obj.Company) || (obj.Title) || (obj.Salary) || (obj.Notes) || (obj.Picture))){
		type = "Employee"
	}
	var result = zenPage.DoCreate(type,keyval[0],keyval[1],obj);
	var parm = zen('riId');
	var ids = result.split('|');
	var id = parseInt(ids[1]);
	var newid = parseInt(ids[0]);
	if (newid > 0) {
		parm.value = id;
		zenPage.refresh();
		alert('Create succeeded, new id=' + newid);
	} else {
		parm.value = '';
		var err = result;
		if (err && ('' != err)) alert(err);
	}
]]></Implementation>
</Method>

<Method name="getDetailObj">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var obj = new zenProxy();
	var dbod = self.document.getElementById('detailTable').children[1];
	var numProps = 0;
	for (var rownum in dbod.rows) {
		var row=dbod.rows[rownum];
		if (!row.cells)continue;
		var prop = row.cells[0].textContent;
		var val = row.cells[1].children[0].value;
		obj[prop] = val;
		numProps = numProps + 1;
	}
	if (numProps > 0) return obj;
	alert('No directory record selected');
	return null;
]]></Implementation>
</Method>

<Method name="findKey">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var dbod = self.document.getElementById('detailTable').children[1];
	if (dbod.rows.length===0) {
		alert('No record to modify.');
		return '';	
	}
	var name = '';
	for (var rownum in dbod.rows) {
		var row=dbod.rows[rownum];
		if (!row.cells) continue;
		var prop = row.cells[0].textContent;
		if (prop.toLowerCase() == 'ssn') {
			var ssn = row.cells[1].children[0].value;
			if ('' != ssn) return 'ssn='+ssn;
		}
		if (prop.toLowerCase() == 'name') {
			name = row.cells[1].children[0].value;
			if (name != '') return 'name='+name;
		}
	}
	alert('Can\'t find key in current directory record');
	return '';
]]></Implementation>
</Method>

<Method name="DoRetrieve">
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String,key:%String,val:%String,field:%String</FormalSpec>
<ReturnType>%ZEN.Datatype.string</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tSC = ##class(Ens.Director).CreateBusinessService("EnsLib.Testing.Service",.tService)  Quit:$$$ISERR(tSC) $$$StatusDisplayString(tSC)
	Set tTestRequest = ##class(EnsLib.Testing.Request).%New()  $$$ASSERT($IsObject(tTestRequest))
	Set tTestRequest.Target = "DFI.Common.REST.DirectoryOperation"
	Set tTestRequest.SyncCall = 1
	Set tRequest=##class(DFI.Common.REST.DirectoryRequest).%New()
	Set tRequest.Command = "GET"
	// An Employee is a Person, but if don't look in Employee data, will get Property error for these properties
	Set:$Case(field,"Company":1,"Title":1,"Salary":1,"Notes":1,"Picture":1,:0) type = "Employee"
	Set tRequest.Type = $ZConvert(type,"L")
	Set tRequest.Key = $ZConvert(key,"L")
	Set tRequest.KeyValue = val
	Set tRequest.Field = $S("*"=field:"",1:field)
	Set tTestRequest.Request = tRequest
	Set tSC = tService.ProcessInput(tTestRequest,.tResponse)
	Quit:$$$ISERR(tSC) $$$StatusDisplayString(tSC)

	#; display response
	Quit $S($$$IsdefObject(tResponse):1_"|"_tResponse.%Id(),1:"No Response from DFI.Common.REST.DirectoryOperation GET")
]]></Implementation>
</Method>

<Method name="DoUpdate">
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String,key:%String,val:%String,obj:%ZEN.proxyObject</FormalSpec>
<ReturnType>%ZEN.Datatype.string</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tSC = ##class(Ens.Director).CreateBusinessService("EnsLib.Testing.Service",.tService)  Quit:$$$ISERR(tSC) $$$StatusDisplayString(tSC)
	Set tTestRequest = ##class(EnsLib.Testing.Request).%New()  $$$ASSERT($IsObject(tTestRequest))
	Set tTestRequest.Target = "DFI.Common.REST.DirectoryOperation"
	Set tTestRequest.SyncCall = 1
	Set tRequest=##class(DFI.Common.REST.DirectoryRequest).%New()
	Set tRequest.Command = "POST"
	Set tRequest.Type = $ZConvert(type,"L")
	Set tRequest.Key = $ZConvert(key,"L")
	Set tRequest.KeyValue = val
	Set tSC=##class(Ens.Util.JSON).ObjectToJSONStream(obj,tRequest.Body)
	If $$$ISOK(tSC) {
		Set tTestRequest.Request = tRequest
		Set tSC = tService.ProcessInput(tTestRequest,.tResponse)
	}
	Quit:$$$ISERR(tSC) $$$StatusDisplayString(tSC)

	#; display response
	Quit $S($$$IsdefObject(tResponse):tResponse.Value_"|"_tResponse.%Id(),1:"No Response from DFI.Common.REST.DirectoryOperation POST")
]]></Implementation>
</Method>

<Method name="DoDelete">
<ClassMethod>1</ClassMethod>
<FormalSpec>key:%String,val:%String</FormalSpec>
<ReturnType>%ZEN.Datatype.string</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tSC = ##class(Ens.Director).CreateBusinessService("EnsLib.Testing.Service",.tService)  Quit:$$$ISERR(tSC) $$$StatusDisplayString(tSC)
	Set tTestRequest = ##class(EnsLib.Testing.Request).%New()  $$$ASSERT($IsObject(tTestRequest))
	Set tTestRequest.Target = "DFI.Common.REST.DirectoryOperation"
	Set tTestRequest.SyncCall = 1
	Set tRequest=##class(DFI.Common.REST.DirectoryRequest).%New()
	Set tRequest.Command = "DELETE"
	Set tRequest.Type = "person"
	Set tRequest.Key = $ZConvert(key,"L")
	Set tRequest.KeyValue = val
	Set tTestRequest.Request = tRequest
	Set tSC = tService.ProcessInput(tTestRequest,.tResponse)
	Quit:$$$ISERR(tSC) $$$StatusDisplayString(tSC)

	#; display response
	Quit $S($$$IsdefObject(tResponse):tResponse.Value_"|"_tResponse.%Id(),1:"No Response from DFI.Common.REST.DirectoryOperation DELETE")
]]></Implementation>
</Method>

<Method name="DoCreate">
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String,key:%String,keyvalue:%String,obj:%ZEN.proxyObject</FormalSpec>
<ReturnType>%ZEN.Datatype.string</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tSC = ##class(Ens.Director).CreateBusinessService("EnsLib.Testing.Service",.tService)  Quit:$$$ISERR(tSC) $$$StatusDisplayString(tSC)
	Set tTestRequest = ##class(EnsLib.Testing.Request).%New()  $$$ASSERT($IsObject(tTestRequest))
	Set tTestRequest.Target = "DFI.Common.REST.DirectoryOperation"
	Set tTestRequest.SyncCall = 1
	Set tRequest=##class(DFI.Common.REST.DirectoryRequest).%New()
	Set tRequest.Command = "PUT"
	Set tRequest.Type = $ZConvert(type,"L")
	Set tRequest.Key = key
	Set tRequest.KeyValue = keyvalue
	Set tSC=##class(Ens.Util.JSON).ObjectToJSONStream(obj,tRequest.Body)
	If $$$ISOK(tSC) {
		Set tTestRequest.Request = tRequest
		Set tSC = tService.ProcessInput(tTestRequest,.tResponse)
	}
	Quit:$$$ISERR(tSC) $$$StatusDisplayString(tSC)

	#; display response
	Quit $S($$$IsdefObject(tResponse):tResponse.Value_"|"_tResponse.%Id(),1:"No Response from DFI.Common.REST.DirectoryOperation PUT")
]]></Implementation>
</Method>

<Method name="refresh">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var json = this.getComponentById('jpResponseInfo');
	json.reloadContents();
	var resp = json.getContentObject();
	var ctl;
	ctl = zen('txURL');
	ctl.setValue(resp ? resp.RequestURL : '');

	ctl = zen('txRawResponse');
	ctl.setValue(resp ? resp.RawResponse : '');

	var ctl=zen('txValue')
	ctl.setValue(resp ? resp.Value : '');

	var records = '';
	var rows = '';
	var i = 0;
	if (resp) {
		var showing = this.getComponentById('rsField').getValue();
		for (var prop in resp.Properties) {
			i = i + 1;
			if (showing == "All") {
				var val = resp.Properties[prop];
				rows = rows+'<tr onclick="zenPage.propClick(\''+prop+'\');"><td>'+prop+'</td><td>'+val+'</td></tr>';
			} else {
				var parts = resp.Properties[prop].split(':');
				var key = parts[0];
				parts[0] = null;
				rows = rows+'<tr onclick="zenPage.propClick(\''+prop+'\');"><td>'+key+'</td><td>'+parts.join(':')+'</td></tr>';
			}
		}

		for (var num in resp.Records) {
			var rec = resp.Records[num];
			records = records+'<tr onclick="zenPage.recClick(\''+num+'\');"><td>'+rec.Name+'</td><td>'+rec.SSN+'</td></tr>';
		}
	}
	ctl.setHidden(rows != '' || records != '');
	self.document.getElementById('infoTable').style.visibility = (rows == '') ? "hidden" : "visible";
	self.document.getElementById('recordsTable').style.visibility = (records == '') ? "hidden" : "visible";

	var bod = self.document.getElementById('infoTable').children[1];
	zenPage.setInnerHTML(bod,rows);

	var bod2 = self.document.getElementById('recordsTable').children[1];
	zenPage.setInnerHTML(bod2, records);

	var sctl = zen('txSession');
	sctl.setValue(resp ? resp.SessionId : '');
	//Set ..%GetComponentById("lblSessionId").value = "<b>"_$$$Text("Session Id:")_"</b> "_tSessionId_" &nbsp;&nbsp;<a href=""#"" class=""ribbonSortOption"" style=""font-size:10pt"" onClick=""zenPage.launchPopupWindow(zenLink('EnsPortal.VisualTrace.zen?SESSIONID="_tSessionId_"'),'Trace','status=no,scrollbars=auto,resizable=yes,top=200,left=200,width=1000,height=800');"" title="""_$$$Text("Display the Visual Trace diagram for this REST service invocation")_""">"_$$$Text("Visual Trace")_"</a>"

	var dbod = self.document.getElementById('detailTable').children[1];
	zenPage.setInnerHTML(dbod,'');
]]></Implementation>
</Method>

<Method name="setInnerHTML">
<Description>
Allow innerHTML value to be edited even in IE</Description>
<FormalSpec>body,html</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var temp = document.createElement('div');
	temp.innerHTML = '<table><tbody>' + html + '</tbody></table>';
	body.parentNode.replaceChild(temp.firstChild.firstChild, body);
]]></Implementation>
</Method>

<Method name="propClick">
<FormalSpec>prop</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var json = this.getComponentById('jpResponseInfo');
	var resp = json.getContentObject();
	var rows='';
	if (parseInt(prop) == prop) {
		var parts = resp.Properties[prop].split(':');
		var key = parts[0];
		var vals;
		vals = key.split('=');
		rows = rows+'<tr><td>'+vals[0]+'</td><td><input type="text" value=\''+vals[1]+'\'/></td></tr>';
		vals = parts[1].split('=');
		rows = rows+'<tr><td>'+vals[0]+'</td><td><input type="text" value=\''+vals[1]+'\'/></td></tr>';
	}
	else {
		var val;
		val = resp.Properties[prop];
		rows = rows+'<tr><td>'+prop+'</td><td><input type="text" value=\''+val+'\'/></td></tr>';
	}
	var bod = self.document.getElementById('detailTable').children[1];
	zenPage.setInnerHTML(bod,rows);
]]></Implementation>
</Method>

<Method name="recClick">
<FormalSpec>num</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var json = this.getComponentById('jpResponseInfo');
	var resp = json.getContentObject();
	var rows='';
	var rec = resp.Records[num];
	for (var prop in rec) {
		if ('_' == prop[0]) continue;
		rows = rows+'<tr><td>'+prop+'</td><td><input type="text" value=\''+rec[prop]+'\'/></td></tr>';
	}
	var bod = self.document.getElementById('detailTable').children[1];
	zenPage.setInnerHTML(bod,rows);
]]></Implementation>
</Method>

<Method name="GetResponseInfo">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParameters,*pObj]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC=$$$OK, pObj=$$$NULLOREF
	try {
		Set tResponseId = $G(pParameters("responseId"))
		If tResponseId {
			Set pObj=##class(DFI.Common.REST.DirectoryResponse).%OpenId(tResponseId,,.tSC)  Quit:$$$ISERR(tSC)
		}
	} catch {
		Set tSC = $$$SystemError
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="changeType">
<Description>
What to do when the user selects a new radio button value.</Description>
<FormalSpec>id</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ctl = zen(id);
	var val = ctl.getValue();
	if (id == 'rsField') {
		var tx = zen('txField');
		tx.setHidden((val=='All') ? 1 : 0);
	}
]]></Implementation>
</Method>

<Method name="%OnGetTitle">
<Description>
Get the (localized) title string for the page.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ..%OnGetPageName()
]]></Implementation>
</Method>

<Method name="%OnGetPageName">
<Description>
Get the (localized) name of the page.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set txt = $$$Text(..#PAGENAME)
	Quit txt
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description>
Decorate the page.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Do ##super()
	
	Set tSC = $$$OK
	
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="DFI.Common.REST.DirectoryRequest">
<IncludeCode>Ensemble</IncludeCode>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65874,11244</TimeChanged>
<TimeCreated>62636,28344.589637</TimeCreated>

<Parameter name="RESPONSECLASSNAME">
<Default>DFI.Common.REST.DirectoryResponse</Default>
</Parameter>

<Property name="Command">
<Type>%String</Type>
<InitialExpression>"GET"</InitialExpression>
</Property>

<Property name="Type">
<Type>%String</Type>
<InitialExpression>"person"</InitialExpression>
</Property>

<Property name="Key">
<Type>%String</Type>
<InitialExpression>"name"</InitialExpression>
</Property>

<Property name="KeyValue">
<Type>%String</Type>
</Property>

<Property name="Field">
<Type>%String</Type>
</Property>

<Property name="Body">
<Description>
For JSON content submission</Description>
<Type>%GlobalCharacterStream</Type>
</Property>

<Method name="NewResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try {
		Set pResponse = $classmethod(..#RESPONSECLASSNAME,"%New")  Set tSC=$S($IsObject(pResponse):$$$OK, 1:%objlasterror)
	} catch {
		Set tSC=$$$SystemError
	}
	Quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^DFI.Common1095.DirectoryReE2FFD</DataLocation>
<DefaultData>DirectoryRequestDefaultData</DefaultData>
<IdLocation>^DFI.Common1095.DirectoryReE2FFD</IdLocation>
<IndexLocation>^DFI.Common1095.DirectoryReE2FFI</IndexLocation>
<StreamLocation>^DFI.Common1095.DirectoryReE2FFS</StreamLocation>
<Data name="DirectoryRequestDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Command</Value>
</Value>
<Value name="3">
<Value>Type</Value>
</Value>
<Value name="4">
<Value>Key</Value>
</Value>
<Value name="5">
<Value>KeyValue</Value>
</Value>
<Value name="6">
<Value>Field</Value>
</Value>
<Value name="7">
<Value>Body</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DFI.Common.REST.DirectoryResponse">
<IncludeCode>Ensemble</IncludeCode>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65874,11244</TimeChanged>
<TimeCreated>62636,28360.099318</TimeCreated>

<Property name="Value">
<Description>
Single result value</Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Properties">
<Description>
Single record properties or list of records' single values</Description>
<Type>%String</Type>
<Collection>array</Collection>
<Parameter name="MAXLEN"/>
<Parameter name="XMLITEMNAME" value="Value"/>
<Parameter name="XMLKEYNAME" value="Key"/>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>

<Property name="Records">
<Description>
Array of records' properties</Description>
<Type>%ArrayOfDataTypes</Type>
<Collection>array</Collection>
<Parameter name="XMLITEMNAME" value="Record"/>
<Parameter name="XMLKEYNAME" value="num"/>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="RequestURL">
<Description>
For the record: submitted Request URL</Description>
<Type>%String</Type>
<Internal>1</Internal>
<Parameter name="MAXLEN"/>
</Property>

<Property name="RawResponse">
<Description>
For the record: raw HTTP response body resulting from request URL</Description>
<Type>%Stream.GlobalCharacter</Type>
<Internal>1</Internal>
</Property>

<Property name="SessionId">
<Description>
For the record: ID of the session used to retrieve this response</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^DFI.Common1095.DirectoryRe673ED</DataLocation>
<DefaultData>DirectoryResponseDefaultData</DefaultData>
<IdLocation>^DFI.Common1095.DirectoryRe673ED</IdLocation>
<IndexLocation>^DFI.Common1095.DirectoryRe673EI</IndexLocation>
<StreamLocation>^DFI.Common1095.DirectoryRe673ES</StreamLocation>
<Data name="DirectoryResponseDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Value</Value>
</Value>
<Value name="3">
<Value>RequestURL</Value>
</Value>
<Value name="4">
<Value>RawResponse</Value>
</Value>
<Value name="5">
<Value>SessionId</Value>
</Value>
</Data>
<Data name="Properties">
<Attribute>Properties</Attribute>
<Structure>subnode</Structure>
<Subscript>"Properties"</Subscript>
</Data>
<Data name="Records">
<Attribute>Records</Attribute>
<Structure>subnode</Structure>
<Subscript>"Records"</Subscript>
</Data>
</Storage>
</Class>


<Class name="DFI.Common.REST.DirectoryService">
<Description>
This is a sample REST service implementing a directory of Person and Employee records. Not every Person is an Employee.
The CRUD (Create,Retrieve,Update,Delete) interface is implemented via the REST/HTTP commands PUT,GET,POST,and DELETE respectively.
Records of interest may be retrieved via type and key fields "name" and "ssn".  Wildcards containing * and ? are supported.
The resulting HTTP body of a successful GET query may be a partially or fully populated JSON object, depending on the field requested, or a JSON array of such JSON objects if a wildcard was used.
Example REST URLs:
GET /directory/employee/name/Q*/salary
GET /directory/employee/name/Quentin, Fred A.
GET /directory/employee/ssn/123-45-6789/*</Description>
<Super>EnsLib.REST.Service</Super>
<TimeChanged>65874,10220.241502</TimeChanged>
<TimeCreated>62538,45933.322065</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.InboundAdapter</Default>
</Parameter>

<XData name="UrlMap">
<XMLNamespace>http://www.intersystems.com/urlmap</XMLNamespace>
<Data><![CDATA[
<Routes>
<Route Url="/:personType" Method="PUT" Call="createPerson"/>
<Route Url="/:personType/:keyfield/:keyval/:getfield" Method="GET" Call="retrievePerson"/>
<Route Url="/:personType/:keyfield/:keyval" Method="GET" Call="retrievePerson"/>
<Route Url="/:personType/:keyfield/:keyval" Method="POST" Call="updatePerson"/>
<Route Url="/:personType/:keyfield/:keyval" Method="DELETE" Call="deletePerson"/>
</Routes>
]]></Data>
</XData>

<Parameter name="EnsServicePrefix">
<Default>|directory</Default>
</Parameter>

<Method name="createPerson">
<Description>
Create or replace</Description>
<FormalSpec>pInput:%Library.AbstractStream,*pOutput:%Stream.Object,pPersonType:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tType=$ZConvert(pPersonType,"L")  Quit:$Case(tType,"employee":0, "person":0, :1) $$$ERROR($$$EnsErrGeneral,"Directory type "_..#EnsServicePrefix_"/"_tType_"/ not supported.")
	Set $E(tType)=$ZConvert($E(tType),"U")
	Set tNS=$Namespace

	Set tSC=..JSONStreamToObject(pInput,.tProxy) Quit:$$$ISERR(tSC) tSC
	Do tProxy.%CopyToArray(.tRec)
	ZNSpace "SAMPLES"
	try {
		Set tObj=$classmethod("Sample."_tType,"%New")  Quit:$$$ISERR(tSC)
		Set tSC=..updateObject(tObj,.tRec)  Quit:$$$ISERR(tSC)
		Set tSC=tObj.%Save()  Quit:$$$ISERR(tSC)
		Set tID=tObj.%Id()
		Kill tRS
		ZNSpace tNS
		Do pOutput.Write(tID)
	} catch {
		Kill tRS
		ZNSpace tNS
		Set tSC=$$$SystemError
	}
	Kill tRS
	ZNSpace tNS

	// return 201 if successfully created
	Do:$$$ISOK(tSC) pOutput.SetAttribute("ResponseCode","201 Created")
	Quit tSC
]]></Implementation>
</Method>

<Method name="retrievePerson">
<Description>
Retrieve</Description>
<FormalSpec>pInput:%Library.AbstractStream,*pOutput:%Stream.Object,pPersonType:%String,pKeyField:%String,pKeyVal:%String,pGetField:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tType=$ZConvert(pPersonType,"L")  Quit:$Case(tType,"employee":0, "person":0, :1) $$$ERROR($$$EnsErrGeneral,"Directory type "_..#EnsServicePrefix_"/"_tType_"/ not supported.")
	Set $E(tType)=$ZConvert($E(tType),"U")
	Set tKeyIn=pKeyField, tKey=$ZConvert(tKeyIn,"L")  Quit:$Case(tKey,"name":0, "ssn":0, :1) $$$ERROR($$$EnsErrGeneral,"Directory key "_..#EnsServicePrefix_"/"_tType_"/"_tKey_" not supported.")
	Set tKeyVal=$Replace($ZConvert(pKeyVal,"I","URL"),"'","''")
	Set tField=pGetField  Set:""=tField tField="*"  Quit:tField["," $$$ERROR($$$EnsErrGeneral,"Commas not allowed in selection field; found: .../"_tField)
	Set tNS=$Namespace

	Set tKeyWild=$Translate(pKeyVal,"*?","%_")
	Do:tKeyWild'=pKeyVal pOutput.Write("[")
	ZNSpace "SAMPLES"
	try {
		Set tSel=$S("*"=tField:"ID",1:tField)
		Set tSQL="SELECT "_tSel_$S("*"=tField||(tKey=tSel):"", 1:","_tKey)_$Case("ID",tKey:"",tSel:"",:",ID")_" FROM Sample."_tType_" WHERE "_tKey_" LIKE '"_tKeyWild_"'"
		Set tRS=##class(%ResultSet).%New()
		Set tSC=tRS.Prepare(tSQL)  Quit:$$$ISERR(tSC)
		Set tSC=tRS.Execute()  Quit:$$$ISERR(tSC)
		Set tFirst=1
		Set tOut=##class(%IO.StringStream).%New()
		While tRS.Next(.tSC) && $$$ISOK(tSC) {
			#; first normalize the case of the key and sel property names
			If tFirst {
				Set k="" For { Set k=$O(tRS.Data(k))  Quit:""=k
					If $ZConvert(k,"L")=$Zconvert(tSel,"L") Set tSelN=k
					If $ZConvert(k,"L")=$Zconvert(tKey,"L") Set tKeyN=k
				}
			}
			If $Case(tSelN, "Company":1, "Notes":1, "Home":1, "Office":1, :0) {
				Set tVal=tRS.Data("ID")
				Set tObj=$classmethod("Sample."_tType,"%OpenId",tVal,,.tSC)  Quit:$$$ISERR(tSC)
				Set tVal=$property(tObj,tSelN)
				Set tSelX = $Case(tSelN, "Home":"Addr", "Office":"Addr", :tSelN)
				Set tVal=$Case(tSelX, "Company":tVal.Name, "Notes":tVal.Read(), "Addr":tVal.Street_", "_tVal.City_" "_tVal.State_" "_tVal.Zip, :tVal)
			} Else {
				Set tVal=tRS.Data(tSelN)
			}
			If "*"=tField {
				Set tObj=$classmethod("Sample."_tType,"%OpenId",tVal,,.tSC)  Quit:$$$ISERR(tSC)
				Set tProxyObj=..buildProxyObj(tObj)
				Do tOut.Write($S(tFirst:"",1:","))
				Set tSC=..ObjectToJSONStream(tProxyObj,.tOut)
			} Else {
				Set:tKeyN'=tSelN tKeyFound=tRS.Data(tKeyN)
				Do tOut.Write($S(tFirst:"",1:",")_"{"_$S(tKeyN=tSelN:"",1:""""_tKeyIn_""":"""_tKeyFound_""", ")_""""_tSel_""":"""_tVal_"""}"_$C(13,10))
			}
			Set tFirst=0
			ZNSpace tNS
			Do tOut.Rewind()  Set tSC1=pOutput.Write(tOut.Read())  Do tOut.Clear()  Set:$$$ISOK(tSC) tSC=tSC1  Quit:$$$ISERR(tSC)
			ZNSpace "SAMPLES"
		} Quit:$$$ISERR(tSC)
		Do:tKeyWild'=tKeyVal pOutput.Write("]"_$C(13,10))
	} catch {
		Kill tRS
		ZNSpace tNS
		Set tSC=$$$SystemError
	}
	Kill tRS
	ZNSpace tNS
	Do:$$$ISOK(tSC) pOutput.SetAttribute("Content-Type","application/json")
	Quit tSC
]]></Implementation>
</Method>

<Method name="updatePerson">
<Description>
Update: For given service, replaces primary Person or Person with given name</Description>
<FormalSpec>pInput:%Library.AbstractStream,*pOutput:%Stream.Object,pPersonType:%String,pKeyField:%String,pKeyVal:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tType=$ZConvert(pPersonType,"L")  Quit:$Case(tType,"employee":0, "person":0, :1) $$$ERROR($$$EnsErrGeneral,"Directory type "_..#EnsServicePrefix_"/"_tType_"/ not supported.")
	Set $E(tType)=$ZConvert($E(tType),"U")
	Set tKeyIn=pKeyField, tKey=$ZConvert(tKeyIn,"L")  Quit:$Case(tKey,"name":0, "ssn":0, :1) $$$ERROR($$$EnsErrGeneral,"Directory key "_..#EnsServicePrefix_"/"_tType_"/"_tKey_" not supported.")
	Set tKeyVal=$Replace($ZConvert(pKeyVal,"I","URL"),"'","''")
	Set tNS=$Namespace

	Set tSC=..JSONStreamToObject(pInput,.tProxy) Quit:$$$ISERR(tSC) tSC
	Do tProxy.%CopyToArray(.tRec)
	ZNSpace "SAMPLES"
	try {
		Set tSQL="SELECT ID FROM Sample."_tType_" WHERE "_tKey_" = '"_tKeyVal_"'"
		Set tRS=##class(%ResultSet).%New()
		Set tSC=tRS.Prepare(tSQL)  Quit:$$$ISERR(tSC)
		Set tSC=tRS.Execute()  Quit:$$$ISERR(tSC)
		If 'tRS.Next(.tSC) || $$$ISERR(tSC) Set:$$$ISOK(tSC) tSC=$$$ERROR($$$EnsErrGeneral,"No "_tType_" record found with key field "_tKey_" = '"_tKeyVal_"'")  Quit

		Set tID=tRS.Data("ID")
		If +tID'=tID Set tSC=$$$ERROR($$$EnsErrGeneral,"No "_tType_" ID found for key field "_tKey_" = '"_tKeyVal_"'")  Quit
		Kill tRS

		Set tObj=$classmethod("Sample."_tType,"%OpenId",tID,,.tSC)  Quit:$$$ISERR(tSC)
		Set tSC=..updateObject(tObj,.tRec,tKey,tKeyVal)  Quit:$$$ISERR(tSC)
		Set tSC=$method(tObj,"%Save")  Quit:$$$ISERR(tSC)

		Kill tRS
		ZNSpace tNS
		Do pOutput.Write(tID)
	} catch {
		Kill tRS
		ZNSpace tNS
		Set tSC=$$$SystemError
	}
	Kill tRS
	ZNSpace tNS
	Do:$$$ISOK(tSC) pOutput.SetAttribute("Content-Type","application/json")
	Quit tSC
]]></Implementation>
</Method>

<Method name="deletePerson">
<FormalSpec>pInput:%Library.AbstractStream,*pOutput:%Stream.Object,pPersonType:%String,pKeyField:%String,pKeyVal:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tType=$ZConvert(pPersonType,"L")  Quit:$Case(tType,"employee":0, "person":0, :1) $$$ERROR($$$EnsErrGeneral,"Directory type "_..#EnsServicePrefix_"/"_tType_"/ not supported.")
	Set $E(tType)=$ZConvert($E(tType),"U")
	Set tKeyIn=pKeyField, tKey=$ZConvert(tKeyIn,"L")  Quit:$Case(tKey,"name":0, "ssn":0, :1) $$$ERROR($$$EnsErrGeneral,"Directory key "_..#EnsServicePrefix_"/"_tType_"/"_tKey_" not supported.")
	Set tKeyVal=$Replace($ZConvert(pKeyVal,"I","URL"),"'","''")
	Set tNS=$Namespace

	ZNSpace "SAMPLES"
	try {
		Set tSQL="DELETE FROM Sample."_tType_" WHERE "_tKey_" = '"_tKeyVal_"'"
		Set tRS=##class(%ResultSet).%New()
		Set tSC=tRS.Prepare(tSQL)  Quit:$$$ISERR(tSC)
		Set tSC=tRS.Execute()  Quit:$$$ISERR(tSC)
		Set tRowCount=tRS.%ROWCOUNT
		Kill tRS
		ZNSpace tNS
		Do pOutput.Write(tRowCount)
	} catch {
		Kill tRS
		ZNSpace tNS
		Set tSC=$$$SystemError
	}
	Kill tRS
	ZNSpace tNS

	// return 204 if successfully deleted
	Do:$$$ISOK(tSC) pOutput.SetAttribute("ResponseCode","204 No Content")
	Quit tSC
]]></Implementation>
</Method>

<Method name="updateObject">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pObj:%RegisteredObject,&pArray,pKeyField:%String="",pKeyVal="xxx"]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC=$$$OK, tDOB=0, tAge=0, tHasKey=0, tKFU=$ZCVT(pKeyVal,"U")
	Set prop="" For { Set tVal="" Set prop=$O(pArray(prop),1,tVal)  Quit:""=prop  Set propU=$ZConvert(prop,"U")
		If propU=pKeyField && (tKFU'=tVal) Set tSC=$$$ERROR($$$EnsErrGeneral,"Attempt to assign key value "_pKeyField_" ='"_tVal_"' where existing value = '"_pKeyVal_"'")  Quit
		Set:$Case(propU,"SSN":""'=tVal,"NAME":""'=tVal,:0) tHasKey=tHasKey+1
		Set:0=tAge&&("AGE"=propU) tAge=tVal
		Continue:$Case(propU,"ID":1,"AGE":1,:("_"=$E(prop)))
		If propU="COMPANY" {
			If ""=tVal {
				Set tCo=$$$NULLOREF
			} Else {
				&sql()
				Set tSQL="SELECT ID FROM Sample.Company WHERE Name = '"_tVal_"'"
				Set tRS=##class(%ResultSet).%New()
				Set tSC=tRS.Prepare(tSQL)  Quit:$$$ISERR(tSC)
				Set tSC=tRS.Execute()  Quit:$$$ISERR(tSC)
				If 'tRS.Next(.tSC) || $$$ISERR(tSC) Set:$$$ISOK(tSC) tSC=$$$ERROR($$$EnsErrGeneral,"No company found named '"_tVal_"'")  Quit
				Set tCoID=tRS.Data("ID")
				Set tCo=##class(Sample.Company).%OpenId(tCoID)
				If '$IsObject(tCo) Set tSC=$$$ERROR($$$EnsErrGeneral,"Couldn't open Company object '"_tVal_"' with ID="_tCoID)  Quit
			}
			Set pObj.Company=tCo
			Kill tCo
		} ElseIf propU="SPOUSE" {
			If ""=tVal {
				Set tSpouse=$$$NULLOREF
			} Else {
				&sql()
				Set tSQL="SELECT ID FROM Sample.Person WHERE Name = '"_tVal_"'"
				Set tRS=##class(%ResultSet).%New()
				Set tSC=tRS.Prepare(tSQL)  Quit:$$$ISERR(tSC)
				Set tSC=tRS.Execute()  Quit:$$$ISERR(tSC)
				If 'tRS.Next(.tSC) || $$$ISERR(tSC) Set:$$$ISOK(tSC) tSC=$$$ERROR($$$EnsErrGeneral,"No spouse person found named '"_tVal_"'")  Quit
				Set tSpouseID=tRS.Data("ID")
				Set tSpouse=##class(Sample.Person).%OpenId(tSpouseID)
				If '$IsObject(tSpouse) Set tSC=$$$ERROR($$$EnsErrGeneral,"Couldn't open spouse Person object '"_tVal_"' with ID="_tSpouseID)  Quit
			}
			Set pObj.Spouse=tSpouse
			Kill tSpouse
		} ElseIf propU="NOTES" {
			Set tStream=$property(pObj,prop)
			Do tStream.Clear()
			Set tSC=tStream.Write(tVal)
		} ElseIf prop["." {
			Set tChild=$property(pObj,$P(prop,"."))
			If $IsObject(tChild) Set $property(tChild,$P(prop,".",2))=tVal
		} Else {
			Set:0=tDOB&&("DOB"=propU) tDOB=1, tVal=$P($ZDTH(tVal,3),",")
			Set $property(pObj,prop)=tVal
		}
	}
	Quit:""=pKeyField&&(tHasKey<2) $$$ERROR($$$EnsErrGeneral,"Can't create object unless Name and SSN fields have values")
	Set:tAge&&(0=tDOB) pObj.DOB=($P($H,",")-(tAge*365))
	Quit tSC
]]></Implementation>
</Method>

<Method name="buildProxyObj">
<Description>
Normalize the Person or Employee info by copying its properties to a proxy object in a selective way</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pObj:%Persistent</FormalSpec>
<Implementation><![CDATA[
	Set tProxy = ##class(%ZEN.proxyObject).%New()
	Set tProxy.ID=pObj.%Id()
	Set tProxy.Name=pObj.Name
	Set tProxy.Age=pObj.Age
	Set tProxy.DOB=$ZDateTime(pObj.DOB,3)
	Set tProxy.SSN=pObj.SSN
	Set tProxy.FavoriteColors=pObj.FavoriteColors
	Set tProxy.Spouse=pObj.Spouse.Name
	Set tProxy.Home=..buildProxyAddr(pObj.Home)
	Set tProxy.Office=..buildProxyAddr(pObj.Office)
	If pObj.%IsA("Sample.Employee") {
		Set tProxy.Company=pObj.Company.Name
		Set tProxy.Notes=$S($IsObject(pObj.Notes):pObj.Notes.Read(),1:"")
	}
	Quit tProxy
]]></Implementation>
</Method>

<Method name="buildProxyAddr">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pObj:%SerialObject</FormalSpec>
<Implementation><![CDATA[
	Set tProxy = ##class(%ZEN.proxyObject).%New()
	Set tProxy.Street=pObj.Street
	Set tProxy.City=pObj.City
	Set tProxy.State=pObj.State
	Set tProxy.Zip=pObj.Zip
	Quit tProxy
]]></Implementation>
</Method>

<Method name="OnErrorStream">
<Description>
Control the type and content of error returned to the REST caller</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStatus:%Status</FormalSpec>
<Implementation><![CDATA[
 	Set tStream = ##class(%GlobalBinaryStream).%New()  $$$ASSERT($IsObject(tStream))
	Do tStream.Write($ZConvert($$$StatusDisplayString(pStatus)_$C(13,10),"O","UTF8"))
	Set tStream.Attributes("Content-Type")=" text/plain; charset=""UTF-8"""
	Set tStream.Attributes("ResponseCode")="500 Internal Server Error"
 	Quit tStream
]]></Implementation>
</Method>
</Class>


<Class name="DFI.Common.REST.MathService">
<Description><![CDATA[
Simple REST Service in Ensemble  

It is a Math service with a RESTful interface returning JSON:		/sum/2/3  =>  { "Sum" : 5 }

There are two ways to call this REST interface. You can test both ways using a Browser: 

1) Calling the adapter port directly

		http://IP:AdapterPort/sum/2/3

2) Or using the CSP Gateway mechanism. In order for this way to work, a web application has to be created first.
	   For example, create a new web app with the following minimum parameters:  
		Web App Name = /rest
		Namespace = yourNamespace
		Dispatch class = EnsLib.REST.Service

		http://IP:WebServerPort/rest/servicename/sum/2/3
]]></Description>
<Super>EnsLib.REST.Service</Super>
<TimeChanged>65874,10240.271765</TimeChanged>
<TimeCreated>63211,41324.236163</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.InboundAdapter</Default>
</Parameter>

<Parameter name="EnsServicePrefix">
<Default>|sum</Default>
</Parameter>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
<Route Url="/:number1/:number2" Method="GET" Call="Sum"/>
</Routes>
]]></Data>
</XData>

<Method name="Sum">
<Description>

This method returns the sum of pnumber1 and pnumber2
</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pInput:%Library.AbstractStream,*pOutput:%Stream.Object,pnumber1:%Integer,pnumber2:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	try{
 		// Do whatever you need to do and get back an object
 		set result = pnumber1 + pnumber2
 		set tProxy = ##class(%ZEN.proxyObject).%New()
 		set tProxy.Sum = result
 		
 		// You could just write the output manually or use helper methods like ..ObjectToJSONStream() to generate JSON
 		do pOutput.SetAttribute("Content-Type","application/json")
 		do pOutput.Write("[")
 		
 		Set tOut=##class(%IO.StringStream).%New()
 		do ..ObjectToJSONStream(tProxy,.tOut)	
 		
 		do tOut.Rewind()
 		do pOutput.Write( tOut.Read() )
 		do pOutput.Write("]"_$C(13,10))
 		
	} catch (e) {
		set status = e.AsStatus()
	}
      quit status
]]></Implementation>
</Method>
</Class>


<Class name="DFI.Common.SearchTable.HL7MsgRouter">
<Description>
Defines a set of properties derived from Document objects of class 'EnsLib.HL7.Message'
that can be used in SQL to identify messages of interest.
Extends EnsLib.HL7.SearchTable; adds more searchable properties to the ones defined in that class.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.HL7.SearchTable</Super>
<TimeChanged>65874,11244</TimeChanged>
<TimeCreated>59946,61139</TimeCreated>
<LegacyInstanceContext>1</LegacyInstanceContext>

<XData name="SearchSpec">
<XMLNamespace>http://www.intersystems.com/EnsSearchTable</XMLNamespace>
<Data><![CDATA[
<Items>
<!--
	Items that do not depend on DocType, indexing any HL7 message.
	The | character cannot be used in IDKEY indexes. So using a + in this example
	Any | in the data (i.e. not used as a possible HL7 separator) will be converted
	on filing to the Search Table as a +
	Original HL7 data remains unchanged.
-->
<Item DocType=""               PropName="SendingFacilApp"  >{1:4}_"+"_{1:3}</Item>
<Item DocType=""               PropName="RecvingFacilApp"  >{1:6}_"+"_{1:5 }</Item>
<Item DocType=""               PropName="MSHDateTime" PropType='DateTime:HL7' >{1:7}</Item>

<!-- Get fields from named segments found in any HL7 message -->
<Item DocType=""               PropName="InsuranceCo"      >[IN1:4()]</Item>

<!-- Get specific field from specific segment HL7 message assigned a specific DocType  -->
<Item DocType="DFI.Common.HL7MsgRouter.Schema:ORM_O01 "  PropName="ServiceId">{ORCgrp().OBRuniongrp.OBRunion.OBR:UniversalServiceID.text}</Item>
<Item DocType="2.3.1:ORU_R01 "                      PropName="ServiceId">{PIDgrpgrp().ORCgrp(1).OBR:UniversalServiceID.text}</Item>
</Items>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="DFI.Common.Service.AlertNotificationService">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessService</Super>
<TimeChanged>65881,3551.1412</TimeChanged>
<TimeCreated>63739,40952.661038</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>Ens.InboundAdapter</Type>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		$$$TRACE("DFI Alert Service Started at: "_$zdt($h,3))
		set rs=##class(%ResultSet).%New("DFI.Common.Alerts.ProductionAlerts:Extent")
		set tSC=rs.Prepare() if 'tSC quit
		set tSC=rs.Execute() if 'tSC quit
		while rs.Next(){
			set tID=rs.Data("ID")
			if $d(^Ens.Runtime("ConfigItem",tID)) {
				set item=##class(DFI.Common.Alerts.ProductionAlerts).%OpenId(tID)
				if $IsObject(item) {
					// First lets check queues
					// If Queue Count Alert value = -1 then this means there is no alert on queues for this item
					if item.QueueSizeAlert'=-1 {
						if $g(^Ens.Queue(tID,0,"count"))>item.QueueSizeAlert {
							if $system.SQL.DATEDIFF("s",item.QueueSizeAlertLastDT,$zdt($h,3))>item.QueueSizeAlertInterval {
								set msg="The Queue Count on item "_tID_" is "_$g(^Ens.Queue(tID,0,"count"))_" which is greater than the expected count of "_item.QueueSizeAlert
								$$$DebugLog($username,"OnProcessInput","Queue Email Text: "_msg,.dSC) $$$TRACE(msg)
								set sc=..SendAlertMessage(tID, msg, item.RecipientList)  if 'sc $$$DebugLog($username,"OnProcessInput","Alert Error Send Alert Status: "_$s(sc:"OK",1:$$$GetErrorText(sc)),.dSC)
								set item.QueueSizeAlertLastDT=$zdt($h,3)
							}
						}
						else {if $system.SQL.DATEDIFF("y",item.QueueSizeAlertLastDT,$zdt($h,3))>item.QueueSizeAlertInterval {set item.QueueSizeAlertLastDT=$zdt($h,3)}}
					}
					// Now lets check Error Counts
					$$$TRACE("Process Errors: Into Error Check")
					set key="" for {
						set error=item.Errors.GetNext(.key) quit:key=""
						// If the ErrorCountAlert=-1 no Notification is sent
						if error.ErrorCountAlert'=-1 {
							if error.ErrorCount>error.ErrorCountAlert {
								if $system.SQL.DATEDIFF("s",error.LastAlertDT,$zdt($h,3))>error.ErrorCountAlertInterval {
									set msg="Production Item "_tID_" has has an error count of "_error.ErrorCount_" for error: "_error.ErrorID_" which is greater than the allowed count of "_error.ErrorCountAlert_" at "_$zdt($h,3)
									$$$DebugLog($username,"OnProcessInput","Error Email Text: "_msg,.dSC) $$$TRACE(msg)
									set sc=..SendAlertMessage(tID, msg, $s($l(item.RecipientList):item.RecipientList,1:"")_$s(($l(item.RecipientList)&$l(error.RecipientList)):";",1:"")_error.RecipientList) if 'sc $$$DebugLog($username,"OnProcessInput","Alert Error Send Alert Status: "_$s(sc:"OK",1:$$$GetErrorText(sc)),.dSC)
									set error.LastAlertDT=$zdt($h,3),error.ErrorCount=0
								}
							}
							else {
								if $system.SQL.DATEDIFF("s",error.LastAlertDT,$zdt($h,3))>error.ErrorCountAlertInterval {set error.ErrorCount=0,error.LastAlertDT=$zdt($h,3)}
							}
							set sc=error.%Save() if 'sc $$$DebugLog($username,"OnProcessInput","Alert Error Save Status: "_$s(sc:"OK",1:$$$GetErrorText(sc)),.dSC)
						}
					}
					// Now lets check for Conditions
					$$$TRACE("Process Conditions: Into Condition Check")
					set key="" for {
						set condition=item.Conditions.GetNext(.key) quit:key=""
						// If ConditionCountAlert=-1 then no Notification is sent
						if condition.ConditionCountAlert'=-1 {
							if condition.ConditionCount>condition.ConditionCountAlert {
								if $system.SQL.DATEDIFF("s",condition.LastAlertDT,$zdt($h,3))>condition.ConditionCountAlertInterval {
									set msg="Item "_tID_" has has a condition count of "_condition.ConditionCount_" for condition """_condition.ConditionID_""" which is greater than the allowed count of "_condition.ConditionCountAlert_" at "_$zdt($h,3)
									$$$DebugLog($username,"OnProcessInput","Error Email Text: "_msg,.dSC) $$$TRACE(msg)
									set sc=..SendAlertMessage(tID, msg, $s($l(item.RecipientList):item.RecipientList,1:"")_$s(($l(item.RecipientList)&$l(error.RecipientList)):";",1:"")_error.RecipientList) if 'sc $$$DebugLog($username,"OnProcessInput","Alert Condition Send Alert Status: "_$s(sc:"OK",1:$$$GetErrorText(sc)),.dSC)
									set condition.LastAlertDT=$zdt($h,3),condition.ConditionCount=0
								}
							}
							else {
								if $system.SQL.DATEDIFF("s",condition.LastAlertDT,$zdt($h,3))>condition.CountAlertInterval {set condition.ConditionCount=0,condition.LastAlertDT=$zdt($h,3)}
							}
							set sc=condition.%Save() if 'sc $$$DebugLog($username,"OnProcessInput","Alert Condition Save Status: "_$s(sc:"OK",1:$$$GetErrorText(sc)),.dSC)
						}
					}
				set tSC=item.%Save() $$$DebugLog($username,"OnProcessInput","Alert Production Item Save Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
				}
			}
		quit:'tSC
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"OnProcessInput","The OnProcessInput() Status is "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="SendAlertMessage">
<FormalSpec>source:%String(MAXLEN=200),msg:%String(MAXLEN=1000),recipients:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set alert=##class(Ens.AlertRequest).%New()
		if $l($g(recipients)) set alert.AlertDestination=recipients
		set alert.AlertText=msg
		set alert.SourceConfigName=$g(source)
		do ..SendAlert(alert)
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"SendAlertMessage","The SendAlertMessage() Status is "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="DFI.Common.Service.HL7FileService">
<Super>Ens.BusinessService</Super>
<TimeChanged>65871,6646.443933</TimeChanged>
<TimeCreated>65871,6646.443933</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.File.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.File.InboundAdapter</Type>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:%Stream.Object,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="DFI.Common.Service.HTTPHL7Service">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessService</Super>
<TimeChanged>65870,45181.940586</TimeChanged>
<TimeCreated>65870,45181.940586</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.HTTP.InboundAdapter</Type>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:%GlobalCharacterStream,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set hl7Message=##class(EnsLib.HL7.Message).ImportFromLibraryStream(pInput,.tSC,.pConfig)
		$$$TRACE("HL7 Message: "_hl7Message)
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
	    Set ..Adapter.ParseBodyFormVars=1
	    set settings=..Adapter.GetSettings(.pSettings)
	}
	catch ex {set tSC=ex.AsStatus()}
    Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="DFI.Common.Service.HouseKeeping">
<Description><![CDATA[
This class runs as a Business Service in the Data Flow Integration Interfaces<br>
Its purpose is to clean up data generated by the Interface Production. Data is retained for a Number of days<br>
which are specified in the DFI.Common.InferfaceConfiguration Table.<br>
The four types of data the service monitors are:<br>
1) Ensemble Messages<br>
2) Ensemble Trace Logs<br>
3) DFI Debug Logs<br>
4) The DFI Inbound Message Queue created in the ODS and processed by the DFI ODS Message Service<br>]]></Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessService</Super>
<TimeChanged>65878,19817.137032</TimeChanged>
<TimeCreated>65496,65253.309208</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>Ens.InboundAdapter</Type>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		$$$TRACE("DFI Interface Data Cleanup is Starting")
		
		// Get Configuration Settings
		set tSC=##class(DFI.Common.Configuration.ConfigurationSettings).GetConfigurationSettings(,.tConfig,.tSettings) if 'tSC quit
		set tInterfaceName=$g(tSettings("DFIProductionName")),tNameSpace=$namespace
		// Delete Message Queue
		set daysToKeep=+$g(tSettings("DFINumberOfDaysToKeepQueueMessages")) 
		set datetime=$zd($h-daysToKeep,3)
		$$$TRACE("Deleting ODS Messages older than "_datetime)
		set tMessageQueueName=$g(tSettings("DFIMessageQueueClassName"))
		if '$l(tMessageQueueName) set tSC=$$$ERROR(5001,"DFI Message Queue Name Setting is not Defined") quit
		set tInterfaceTable=tMessageQueueName
		if $l(tInterfaceTable,".")>2 set tInterfaceTable=$tr($p(tInterfaceTable,".",1,$l(tInterfaceTable,".")-2),".","_")_"_"_$p(tMessageQueueName,".",$l(tMessageQueueName,".")-1,$l(tMessageQueueName,"."))
		set tSQL="delete from "_tInterfaceTable_" where CompletedTS IS NOT NULL and CompletedTS < '"_datetime_"'"
		$$$TRACE("tSQL: "_tSQL)
		set rs=##class(%ResultSet).%New("%DynamicQuery:SQL")
		set tSC=rs.Prepare(tSQL) if 'tSC quit
		set tSC=rs.Execute() if 'tSC quit
		$$$TRACE("The Number of ODS Messages Deleted is "_rs.%ROWCOUNT)
		
		// Delete Debug Logs
		set datetime=$zd($h-$g(tSettings("DFIDaysToKeepDebugLogs")),3)
		$$$TRACE("Deleting Debug Logs older than "_datetime)
		&sql(delete from DFI_Common_Debug.Logging where CreateTS<:datetime)
		$$$TRACE("The Number of Debug Logs Deleted is "_%ROWCOUNT)
		
		// Delete Ensemble $$$TRACE, $$$ERROR and $$$INFO messsages
		set datetime=$zdt($h-$g(tSettings("DFINumberOfDaysToKeepEnsembleLogs")),3),rowcount=0
		$$$TRACE("Deleting Debug Logs older than "_datetime)
		set tSC=##class(Ens.Purge).PurgeEventLogsByDate(+$g(tSettings("DFINumberOfDaysToKeepEnsembleLogs")),.rowcount) if 'tSC $$$TRACE("Error Deleting Ensemble Logs: "_$$$GetErrorText(tSC)) set tSC=$$$OK
		$$$TRACE("The Number of Ensemble Logs Deleted is "_(+$g(rowcount)))
		
		// Delete Ensemble Messages (Request/Response/HL7 Messages)
		set datetime=$zdt($h-$g(tSettings("DFINumberOfDaysToKeepEnsembleMessages")),3),rowcount=0
		$$$TRACE("Deleting Ensemble Messages older than "_datetime)
		set tSC=##class(Ens.Purge).PurgeMessagesByDate($g(tSettings("DFINumberOfDaysToKeepEnsembleMessages")),.rowcount,1,1) if 'tSC $$$TRACE("Error Deleting Ensemble Messages: "_$$$GetErrorText(tSC)) set tSC=$$$OK
		$$$TRACE("The Number of Ensemble Messages Deleted is "_rowcount)
		
		// Delete Files
		for directory="DFIFileDirectory","DFIFHIRFileDirectory","DFIHL7FileDirectory","DFIManifestFileDirectory" {
			if $l($g(tSettings(directory))) {
				$$$TRACE("Deleting files in: ("_directory_") is starting")
				set rs=##class(%ResultSet).%New("%Library.File:FileSet"),dt=$tr($zdt($h-1,3),":- ","")
				set tSC=rs.Execute(tSettings(directory),"*.*") if 'tSC quit
				while rs.Next() {if $tr(rs.Data("DateCreated"),":- ","")<dt set ok=##class(%Library.File).Delete(rs.Data("Name")) $$$TRACE("File: "_rs.Data("Name")_" Delete Status: "_$s(ok:"Yes",1:"Not OK"))}
				do rs.Close()
				$$$TRACE("Deleting files in: ("_directory_") is complete")
			}
		}
		
		// Purge is complete
		$$$TRACE("DFI Interface Data Cleanup is Complete")
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="DFI.Common.Service.ProcessEMCIMessageQueue">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessService</Super>
<TimeChanged>65853,44963.211309</TimeChanged>
<TimeCreated>65478,83896.555477</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>Ens.InboundAdapter</Type>
</Property>

<Property name="MaxNumberOfLoops">
<Type>%Integer</Type>
<InitialExpression>200</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Parameter SETTINGS = "Organization:Basic:selector?context={IHIS.Production.ContextSearch/Organizations}, IsMasterSummary:Basic";

]]></Content>
</UDLText>

<Parameter name="SETTINGS">
<Default>MaxNumberOfLoops:Basic</Default>
</Parameter>

<Method name="OnProcessInput">
<Description><![CDATA[
This is a copy of the Generic ProcessMessageQueue. There is nothing in here that is specific to EMCI Message Queue
However if I ever want an EMCI Message Queue to be processed differently then I would overwrite the code
in this Method<br><br>
The OnProcssInput Method of the DFI.Common.Service.ProcessMessageQueue is common to all Interfaces
that are driven a Message Queue. For example the Clinicom to ODS Trickle feed that processes the
Clinicom Transactions in the Business Processes of the Trickle Feed Production. The easiest way
to ensure that each Interface only processes the messages for its own Production/Namespace is to
have a list of Namespaces/ProductionNames/MessageQueueClass table in the Source Database and depending
on the nature of name.<br><br>
The Message queue Class can be used in every namespace if the class definition
resides in the ODS and is mapped to each Interface Namespace. However the underlying global will not be
mapped and so the data created will reside in the Namespace of the Interface.<br><br>
I don't want to use direct global Accessing. Nor do I want the Message queue to reside in the ODS
and be subscripted by the Interface Name (or a combination of Namespace and Interface Name).<br><br>
The Message Queue Class can also be inherited into a sub-class that can contain the name of the Interface
in the Queue Class name. However the Business Process method that executes in the logic of the Clinicom Trickle
Feed will need to access the Configuration Settings of each Interface in order to get the Interface Name,
Namespace and MessageQueueClass Name. There is one assumption and that is that the ODS will need to
have a class that defines each Interface, the namespace that it is running in, the Interface Name
and the MessageQueueClassName.<br><br>
Then I have a few options:<BR><BR>
1) Use Class Mapping to map the Message Queue Class to each individual Namespace where the Message Queue Class Name<br>
is either the base DFI.Common.Queue.ODSMessageQueue or a class copied from DFI.Common.Queue.ODSMessageQueue<br>
with a name such as DFI.Common.Queue.ODStoEMCIDF01 or DFI.DF01.Queue.ODSMessageQueue<BR>
2) As long as you do not Map The Default Message Queue Global to the Interface Namespace then the<br>
Message Queue Global will be created in each Namespace and prevents queue globals spanning<br>
More than one Interface.<br>
3) You could use Subscript Level Mapping but that would but that would Involve too many changes in the<br>
existing code which I don't want to modify at this stage.<br>]]></Description>
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=##class(DFI.Common.Configuration.ConfigurationSettings).GetMessageQueueData(.pInterfaceName,.pNamespace,.pQueueClassName,.pIsProduction,.pIsProductionActive) if 'tSC quit
		for i=1:1:..MaxNumberOfLoops {
			set tSC=$classmethod(pQueueClassName,"GetNextMessage",.pMessageId) if 'tSC quit
			if pMessageId="" continue
			// Have the option of directing messages to different Business Processes depending
			// on the Transaction Type and Log Type as per the Main BPL in the ODS Production
			// That class is called: BusinessProcesses.TransactionRouter.BPL and and it routes
			// messages from Clinicom to specific Business Processes that handle the PMI,
			// Admissions and Discharges, Transfers and so on.
			$$$TRACE("ODS Message: "_pMessageId_" found")
			set tRequest=##class(DFI.Common.Messages.PatientTransactionRequest).%New()
			set tRequest.MessageID=pMessageId
			set tSC=..SendRequestSync("DFI Process Message",tRequest,.tResponse,,"Sending Async Request for Message ID: "_pMessageId) if 'tSC quit
			$$$TRACE("Message: "_pMessageId_" Sent OK")
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$TRACE("Service Outcome: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)))
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="DFI.Common.Service.ProcessMessageQueue">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessService</Super>
<TimeChanged>65846,30966.933401</TimeChanged>
<TimeCreated>65478,83896.555477</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>Ens.InboundAdapter</Type>
</Property>

<Property name="MaxNumberOfLoops">
<Type>%Integer</Type>
<InitialExpression>200</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Parameter SETTINGS = "Organization:Basic:selector?context={IHIS.Production.ContextSearch/Organizations}, IsMasterSummary:Basic";

]]></Content>
</UDLText>

<Parameter name="SETTINGS">
<Default>MaxNumberOfLoops:Basic</Default>
</Parameter>

<Method name="OnProcessInput">
<Description>
The OnProcssInput Method of the DFI.Common.Service.ProcessMessageQueue is common to all Interfaces
that are driven by the Clinicom to ODS Trickle feed that processes the Clinicom Transactions in the Business Processes 
of the Trickle Feed Production. The easiest way to ensure that each Interface only processes the messages for
its own Production/Namespace is to have a list of Namespaces/Production Names/Interface Name/MessageQueueClass
name. The Message queue Class can be used in every namespace if the class definition resides in the ODS and is
mapped to each Interface Namespace. However the underlying global will not be mapped and so the data created will
reside in the Namespace of the Interface.I don't want to use direct global Accessing. Nor do I want the Message queue
to reside in the ODS and be subscripted by the Interface Name (or a combination of Namespace and Interface Name).
The Message Queue Class can also be inherited into a sub-class that can contain the name of the Interface
in the Queue Class name. However the method that executes in the Business Processes of the Clinicom Trickle Feed
will need to access the Configuration Settings of each Interface in order to get the Interface Name, Namespace and
MessageQueueClass Name. There is one assumption and that is that the ODS will need to have a class that defines
each Interface, the namespace that it is running in, the Interface Name and the MessageQueueClassName.
Then I have two options:
1) Use Class Mapping to map the Message Queue Class to each individual Namespace where the Message Queue Class Name
		is either the base DFI.Common.Queue.ODSMessageQueue or an Inherited class with a name such as
		DFI.Common.Queue.ODStoEMCIDFI1.
1.1)	The advantage of using the original class name mapped into every namespace is that the class mapping always uses
		the same classname in each new Interface Namespace and Namespace Mapping
1.2) The problem with having different Message Queue Class Names is that a mapping would have to be created for each
		Message Queue Class Name in each namespace for that Interface to take into account a QC and Production
		namespace however if we use the same Message Queue Class Name is that we would have to implement 1.3 and 1.4
1.3)	That could be achieved by creating all Indices with {Namespace} and {Interface Name} built into the Index definition
1.4)	for example ID,{Namespace},{InterfaceName}, CreateTS,{Namespace},{InterfaceName}
		and any other Indices that are created
		Or would we?
2) The easiest way to handle this is facilitate either option. In which case we don't want to build the Class Name and Namespace
		into the Message Queue Class Definition. We have to have a Class in the ODS that lists the Interfaces, their namespace
		and MessageQueueClassName which should be created when the ClassMapping is created
3) The Third option is to either be able to call the Queue Class Methods in the namespace where they reside and I don't
		know if that is possible. Or we have to change namespace, call the Create Message Method and then change back to
		the ODS. This works but if the code crashes then you can be left in the wrong namespace. Which can be corrected
		with appropriate code in the exception handler of that method.</Description>
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=##class(DFI.Common.Configuration.ConfigurationSettings).GetConfigurationSettings(,.pConfig,.pSettings) if 'tSC quit
		$$$TRACE("Message Queue Class: "_pSettings("DFIMessageQueueClassName"))
		$$$TRACE("Production Name: "_pSettings("DFIProductionName"))
		$$$TRACE("DFIRequestMessageClassName: "_pSettings("DFIRequestMessageClassName"))
		$$$TRACE("Business Process Name: "_pSettings("DFIPrimaryBusinessProcessName"))
		set tQueueClassName=pSettings("DFIMessageQueueClassName")
		set tPrimaryBP=pSettings("DFIPrimaryBusinessProcessName")
		set tRequestClassName=pSettings("DFIRequestMessageClassName")
		for i=1:1:..MaxNumberOfLoops {
			$$$TRACE("Into Loop")
			set tSC=$classmethod(tQueueClassName,"GetNextMessage",.pMessageId) if 'tSC quit
			if pMessageId="" $$$DebugLog($username,"OnProcessInput","Get Next Message returns: "_pMessageId,.dSC) continue
			// Have the option of directing messages to different Business Processes depending
			// on the Transaction Type and Log Type as per the Main BPL in the ODS Production
			// That class is called: BusinessProcesses.TransactionRouter.BPL and and it routes
			// messages from Clinicom to specific Business Processes that handle the PMI,
			// Admissions and Discharges, Transfers and so on.
			$$$TRACE("Queue Message: "_pMessageId_" found")
			set tRequest=$classmethod(tRequestClassName,"%New")
			set tRequest.MessageId=pMessageId
			set tSC=..SendRequestSync(tPrimaryBP,tRequest,.tResponse,,"Sending Async Request for Message ID: "_pMessageId) if 'tSC quit
			$$$TRACE("Message: "_pMessageId_" Sent OK")
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"OnProcessInput","On Process Input Status: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	$$$TRACE("Service Outcome: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)))
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="DFI.Common.Service.ProcessODSMessageQueue">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessService</Super>
<TimeChanged>65840,16140.121428</TimeChanged>
<TimeCreated>65478,83896.555477</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>Ens.InboundAdapter</Type>
</Property>

<Property name="MaxNumberOfLoops">
<Type>%Integer</Type>
<InitialExpression>200</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Parameter SETTINGS = "Organization:Basic:selector?context={IHIS.Production.ContextSearch/Organizations}, IsMasterSummary:Basic";

]]></Content>
</UDLText>

<Parameter name="SETTINGS">
<Default>MaxNumberOfLoops:Basic</Default>
</Parameter>

<Method name="OnProcessInput">
<Description>
This is a copy of the Generic ProcessMessageQueue. There is nothing in here that is specific to ODS Message Queue
However if I ever want an EMCI Message Queue to be processed differently then I would overwrite the code
in this Method
The OnProcssInput Method of the DFI.Common.Service.ProcessMessageQueue is common to all Interfaces
that are driven by the Clinicom to ODS Trickle feed that processes the Clinicom Transactions in the Business Processes 
of the Trickle Feed Production. The easiest way to ensure that each Interface only processes the messages for
its own Production/Namespace is to have a list of Namespaces/Production Names/Interface Name/MessageQueueClass
name. The Message queue Class can be used in every namespace if the class definition resides in the ODS and is
mapped to each Interface Namespace. However the underlying global will not be mapped and so the data created will
reside in the Namespace of the Interface.I don't want to use direct global Accessing. Nor do I want the Message queue
to reside in the ODS and be subscripted by the Interface Name (or a combination of Namespace and Interface Name).
The Message Queue Class can also be inherited into a sub-class that can contain the name of the Interface
in the Queue Class name. However the method that executes in the Business Processes of the Clinicom Trickle Feed
will need to access the Configuration Settings of each Interface in order to get the Interface Name, Namespace and
MessageQueueClass Name. There is one assumption and that is that the ODS will need to have a class that defines
each Interface, the namespace that it is running in, the Interface Name and the MessageQueueClassName.
Then I have two options:
1) Use Class Mapping to map the Message Queue Class to each individual Namespace where the Message Queue Class Name
		is either the base DFI.Common.Queue.ODSMessageQueue or an Inherited class with a name such as
		DFI.Common.Queue.ODStoEMCIDFI1.
1.1)	The advantage of using the original class name mapped into every namespace is that the class mapping always uses
		the same classname in each new Interface Namespace and Namespace Mapping
1.2) The problem with having different Message Queue Class Names is that a mapping would have to be created for each
		Message Queue Class Name in each namespace for that Interface to take into account a QC and Production
		namespace however if we use the same Message Queue Class Name is that we would have to implement 1.3 and 1.4
1.3)	That could be achieved by creating all Indices with {Namespace} and {Interface Name} built into the Index definition
1.4)	for example ID,{Namespace},{InterfaceName}, CreateTS,{Namespace},{InterfaceName}
		and any other Indices that are created
		Or would we?
2) The easiest way to handle this is facilitate either option. In which case we don't want to build the Class Name and Namespace
		into the Message Queue Class Definition. We have to have a Class in the ODS that lists the Interfaces, their namespace
		and MessageQueueClassName which should be created when the ClassMapping is created
3) The Third option is to either be able to call the Queue Class Methods in the namespace where they reside and I don't
		know if that is possible. Or we have to change namespace, call the Create Message Method and then change back to
		the ODS. This works but if the code crashes then you can be left in the wrong namespace. Which can be corrected
		with appropriate code in the exception handler of that method.</Description>
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=##class(DFI.Common.Configuration.ConfigurationSettings).GetMessageQueueData(.pInterfaceName,.pNamespace,.pQueueClassName,.pIsProduction,.pIsProductionActive) if 'tSC quit
		for i=1:1:..MaxNumberOfLoops {
			set tSC=$classmethod(pQueueClassName,"GetNextMessage",.pMessageId) if 'tSC quit
			if pMessageId="" continue
			// Have the option of directing messages to different Business Processes depending
			// on the Transaction Type and Log Type as per the Main BPL in the ODS Production
			// That class is called: BusinessProcesses.TransactionRouter.BPL and and it routes
			// messages from Clinicom to specific Business Processes that handle the PMI,
			// Admissions and Discharges, Transfers and so on.
			$$$TRACE("ODS Message: "_pMessageId_" found")
			set tRequest=##class(DFI.Common.Messages.PatientTransactionRequest).%New()
			set tRequest.MessageID=pMessageId
			set tSC=..SendRequestSync("DFI Process Message",tRequest,.tResponse,,"Sending Async Request for Message ID: "_pMessageId) if 'tSC quit
			$$$TRACE("Message: "_pMessageId_" Sent OK")
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$TRACE("Service Outcome: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)))
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="DFI.Common.TestModule.EMCIConsumerProperties">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65890,2375.003548</TimeChanged>
<TimeCreated>65852,18430.884902</TimeCreated>

<Property name="EMCIPropertyName">
<Description>
Logical Pseudo EMCI Consumer Property Name</Description>
<Type>%String</Type>
</Property>

<Property name="ProperEMCIConsumerPropertyReference">
<Description>
Actual EMCI Consumer Property Reference. Note: Must take int consideration Collections and Relationship Syntax</Description>
<Type>%String</Type>
</Property>

<Property name="TestCondition">
<Type>DFI.Common.TestModule.TestConditions</Type>
<Cardinality>one</Cardinality>
<Inverse>EMCIConsumerPropertiesRel</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>EMCIPropertyName</Properties>
<Unique>1</Unique>
</Index>

<Index name="TestConditionIndex">
<Properties>TestCondition</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^DFI.CommonD7BE.EMCIConsume2EB7D</DataLocation>
<DefaultData>EMCIConsumerPropertiesDefaultData</DefaultData>
<IdLocation>^DFI.CommonD7BE.EMCIConsume2EB7D</IdLocation>
<IndexLocation>^DFI.CommonD7BE.EMCIConsume2EB7I</IndexLocation>
<StreamLocation>^DFI.CommonD7BE.EMCIConsume2EB7S</StreamLocation>
<Data name="EMCIConsumerPropertiesDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ProperEMCIConsumerPropertyReference</Value>
</Value>
<Value name="3">
<Value>TestCondition</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DFI.Common.TestModule.Manifest">
<Description>
A manifest is a mechanism for recording a collection of Records which are the Data Records from
a Data Source that are Transformed into FHIR JSON and sent to either the EMCI or IHIS FHIR Server.
Typically a Manifest is linkedd to a Test Definition though it can be used purely to emmulate a
Collection or Batch of Data Records.</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,%XML.Adaptor,%ZEN.DataModel.Adaptor,Cogs.JsonClass</Super>
<TimeChanged>65890,6507.924099</TimeChanged>
<TimeCreated>65835,12863.337009</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// The ManifestId and RecordNumber constitute the RowId of the Manifest

]]></Content>
</UDLText>

<Property name="ManifestId">
<Type>%String</Type>
<InitialExpression>"Manifest:"_$i(^DFI.Common.TestModule.NextManifest)</InitialExpression>
<Parameter name="JSONNAME" value="manifestID"/>
</Property>

<Property name="ManifestCreateTS">
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($h,3)</InitialExpression>
<Required>1</Required>
<Parameter name="JSONNAME" value="manifestCreateTS"/>
</Property>

<Property name="PreviousManifestFK">
<Type>DFI.Common.TestModule.Manifest</Type>
<Parameter name="JSONNAME" value="previousManifest"/>
</Property>

<ForeignKey name="PreviousManifestFK">
<Properties>PreviousManifestFK</Properties>
<ReferencedClass>DFI.Common.TestModule.Manifest</ReferencedClass>
</ForeignKey>

<Property name="NextManifestFK">
<Type>DFI.Common.TestModule.Manifest</Type>
<Parameter name="JSONNAME" value="nextManifest"/>
</Property>

<ForeignKey name="NextManifestFK">
<Properties>NextManifestFK</Properties>
<ReferencedClass>DFI.Common.TestModule.Manifest</ReferencedClass>
</ForeignKey>

<Property name="NumberOfRecords">
<Type>%Integer</Type>
<Calculated>1</Calculated>
<InitialExpression>1</InitialExpression>
<Parameter name="JSONNAME" value="numberOfRecords"/>
</Property>

<Property name="TestDefinitionFK">
<Type>DFI.Common.TestModule.TestDefinitions</Type>
<Parameter name="JSONNAME" value="testDefinition"/>
</Property>

<ForeignKey name="TestDefnitionFK">
<Properties>TestDefinitionFK</Properties>
<ReferencedClass>DFI.Common.TestModule.TestDefinitions</ReferencedClass>
</ForeignKey>

<Property name="FromConsumerId">
<Type>%String</Type>
<Parameter name="JSONNAME" value="fromConsumerId"/>
</Property>

<Property name="ToConsumerId">
<Type>%String</Type>
<Parameter name="JSONNAME" value="toConsumerId"/>
</Property>

<Property name="ManifestStatus">
<Type>%Status</Type>
<InitialExpression>$$$OK</InitialExpression>
<Parameter name="JSONNAME" value="manifestStatus"/>
</Property>

<Property name="ManifestStatusText">
<Type>%String</Type>
<Parameter name="JSONNAME" value="manifestStatusText"/>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="ManifestFileDirectory">
<Type>%String</Type>
<Parameter name="JSONNAME" value="manifestFileDirectory"/>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="ManifestFileName">
<Type>%String</Type>
<Parameter name="JSONNAME" value="manifestFileName"/>
<Parameter name="MAXLEN" value="3000"/>
</Property>

<Property name="ManifestRecords">
<Type>DFI.Common.TestModule.ManifestRecords</Type>
<Cardinality>children</Cardinality>
<Inverse>Manifest</Inverse>
<Relationship>1</Relationship>
<Parameter name="JSONNAME" value="manifestRecords"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>ManifestId</Properties>
<Unique>1</Unique>
</Index>

<Method name="NumberOfRecordsGet">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	quit +..ManifestRecords.Count()
]]></Implementation>
</Method>

<Method name="%OnNew">
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=##class(DFI.Common.Configuration.ConfigurationSettings).GetConfigurationSettings(,.pConfig,.pSettings) if 'tSC quit
		set ..ManifestFileDirectory=$g(pSettings("DFIManifestFileDirectory"))
		set ..ManifestFileName=$g(pSettings("DFIManifestFileName"))
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"%OnNew","The Status of %OnNew() is: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="CreateManifest">
<Description>
We need to pass in PreviousManifestid, TestReference
Then we pass in the array of Name/Value Pairs for the Test Related Fields in the arrray pTests
The Fields for array are: NumberOfRecords, RandomSelection, SelectedRecords, PassEMCIUId, ChangeAddress, ChangePhoneNumber, ChangeFamilyName</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pPreviousManifest:%String="",pNextManifest:%String="",pTestDefinition:%String,&pValues:%String(MAXLEN=1000),&pManifest:DFI.Common.TestModule.Manifest]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<SqlProc>1</SqlProc>
<WebMethod>1</WebMethod>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set pManifest=$classmethod($classname(),"%New") if '$IsObject(pManifest) set tSC=$$$ERROR(5001,"Unable to create Manifest") quit
		if $l(pPreviousManifest) do pManifest.PreviousManifestSetObjectId(pPreviousManifest)
		if $l(pNextManifest) do pManifest.NextManifestSetObjectId(pNextManifest)
		if $l(pTestDefinition) do pManifest.TestDefinitionSetObjectId(pTestDefinition)
		set tProp="" for {
			set tProp=$o(pValues(tProp)) quit:tProp=""
			if $l(pValues(tProp)) {set $property(pManifest,tProp)=pValues(tProp)}
			elseif 'l(pValues(tProp)),+$g(pValues(tProp,"Force")) {set $property(pManifest,tProp)=""}
		}
		set tSC=pManifest.%Save() if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	if 'tSC set pManifest=""
	$$$DebugLog($username,"CreateManifest","Create Manifest ("_$s($IsObject(pManifest):pManifest.ManifestId,1:"NULL")_") Status: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="UpdateManifest">
<Description>
We cannot change the ManifestId, PreviousManifest, and the TestDefinition
We can Modifiy any other Property
Note that the properties, PreviousManifest, NextManifest, and TestDefinition cannot
be changed </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pManifestId:%String="",pFromConsumerId:%String="",pToConsumerId:%String="",pManifestStatus:%Status=$$$OK,pManifestStatusText:%String(MAXLEN=500)="",pManifestFileDirectory:%String="",pManifestFileName:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<SqlProc>1</SqlProc>
<WebMethod>1</WebMethod>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if pManifestId="" set tSC=$$$ERROR(5001,"ManifestId is Null") quit
		set obj=$classmethod($classname(),"%OpenId",pManifestId) if '$IsObject(obj) set tSC=$$$ERROR(5001,"Manifest with ID: "_pManifestId_" does not Exist") quit
		if $l(pFromConsumerId) set obj.FromConsumerId=pFromConsumerId
		if $l(pToConsumerId) set obj.ToConsumerId=pToConsumerId
		if $l(pManifestStatus) set obj.ManifestStatus=pManifestStatus
		if $l(pManifestStatusText) set obj.ManifestStatusText=obj.ManifestStatusText_$s($l(obj.ManifestStatusText):" ",1:"")_pManifestStatusText
		if $l(pManifestFileDirectory) set obj.ManifestFileDirectory=pManifestFileDirectory
		if $l(pManifestFileName) set obj.ManifestFileName=pManifestFileName
		set tSC=obj.%Save() if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"UpdateManifest","The Update Manifest Status is: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="CreateManifestFile">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pManifestId:%TimeStamp="",&pManifestDirectory:%String(MAXLEN=100)="",&pManifestFileName:%String(MAXLEN=200)="",&pManifestFile:%String(MAXLEN=400)]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<SqlProc>1</SqlProc>
<WebMethod>1</WebMethod>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if pManifestId="" set tSC=$$$ERROR(5001,"Manifest Date is Null") quit
		set tManifest=$classmethod($classname(),"%OpenId",pManifestId) if '$IsObject(tManifest) set tSC=$$$ERROR(5001,"Manifest with ManifestId: "_pManifestId_" does not exist") quit
		set tSC=##class(DFI.Common.Configuration.ConfigurationSettings).GetConfigurationSettings("DFI.Common.Configuration.ConfigurationSettings",,.pConfig,.pSettings) quit:'tSC  set pConfig=""
		if pManifestDirectory="" set pManifestDirectory=pSettings("DFIManifestFileDirectory")
		if pManifestFileName="" set pManifestFileName=pSettings("DFIManifestFileName")
		set file=pManifestFileName
		if file ["{FromCosumerId}" set file=$p(file,"{FromCosumerId}",1)_tManifest.FromConsumerId_$p(file,"{FromConsumerId}",2,99)
		if file["{ToConsumerId}" set file=$p(file,"{ToConsumerId}",1)_tManifest.ToConsumerId_$p(file,"{ToConsumeId}",2,99)
		if file["{TestDefinition" set file=$p(file,"{TestDefinition}",1)_tManifest.TestDefinition.Name_$p(file,"{TestDefinition}",2,99)
		if file["{ManifestId}" set file=$p(file,"{ManifestId}",1)_pManifestId_$p(file,"{ManifestId}",2,99)
		if file["{Date}" set file=$p(file,"{Date}",1)_$tr($zdt($h,3),": -")_$p(file,"{Date}",2,99)
		set file=pManifestDirectory_file
		open file:("WNS"):0
		if '$t {set tSC=$$$ERROR(5001,"Unable to Open file: "_file) quit}
		// Write Header Line 1
		use file write "Manifest",$c(9),"PreviousManifest",$c(9),"NumberOfRecords:",$c(9),"RandomSelection",$c(9),"Selected Records",$c(9),"TestDefintion",$c(9),"From ConsumerId",$c(9),"To ConsumerId",$c(9),"Manifest Status",$c(9),"Manifest Status Text",!
		// Write Header 2
		use file write pManifestId,$c(9),tManifest.PreviousManifest,$c(9),tManifest.NumberOfRecords,$c(9),tManifest.RandomSelection,$c(9),$c(9),tManifest.SelectedRecords,$c(9),tManifest.TestDefinition,$c(9),tManifest.FromConsumerId,$c(9),tManifest.ToConsumerId,$c(9),$s(tManifest.ManifestStatus:"OK",1:$$$GetErrorText(tManifest.ManifestStatus)),$c(9),tManifest.ManifestStatusText,!
		// Write Header 3
		use file write "RecordNumber",$c(9),"CopyConsumerId",$c(9),"MasterConsumerId",$c(9),"EMCIUId",$c(9),"EMCIEventQueueId",$c(9),"MessageStatus",$c(9),"MessageStatusText",$c(9),"FHIRRequestJSONFileName",$c(9),"FHIROperationOutcomeFileName",$c(9),"HTTPStatus",!
		for i=1:1:tManifest.ManifestRecords.Count() {
			set rec=tManifest.ManifestRecords.GetAt(i) if '$IsObject(rec) $$$DebugLog($username,"Create Manifest File","Manifest Record: "_i_" does not exist",.dSC) continue
			use file write rec.RecordNumber,$c(9),rec.CopyConsumerId,$c(9),rec.MasterConsumerId,$c(9),rec.EMCIUId,$c(9),rec.EMCIEventQueueId,$c(9),$s(rec.MessageStatus:"OK",1:$$$GetErrorText(rec.ManifestStatus)),$c(9),rec.MessageStatusText,$c(9),rec.FHIRRequestJSONFileName,$c(9),rec.FHIROperationOutcomeFileName,$c(9),rec.HTTPStatus,!
			use file write "<END OF FILE>"
		}
		close file
		set pManifestFile=file
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^DFI.Common.TestMoD7BE.ManifestD</DataLocation>
<DefaultData>ManifestDefaultData</DefaultData>
<IdLocation>^DFI.Common.TestMoD7BE.ManifestD</IdLocation>
<IndexLocation>^DFI.Common.TestMoD7BE.ManifestI</IndexLocation>
<StreamLocation>^DFI.Common.TestMoD7BE.ManifestS</StreamLocation>
<Data name="ManifestDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ManifestCreateTS</Value>
</Value>
<Value name="3">
<Value>PreviousManifestRel</Value>
</Value>
<Value name="4">
<Value>NextManifestRel</Value>
</Value>
<Value name="5">
<Value>TestDefinition</Value>
</Value>
<Value name="6">
<Value>FromConsumerId</Value>
</Value>
<Value name="7">
<Value>ToConsumerId</Value>
</Value>
<Value name="8">
<Value>ManifestStatus</Value>
</Value>
<Value name="9">
<Value>ManifestStatusText</Value>
</Value>
<Value name="10">
<Value>ManifestFileDirectory</Value>
</Value>
<Value name="11">
<Value>ManifestFileName</Value>
</Value>
<Value name="12">
<Value>PreviousManifestFK</Value>
</Value>
<Value name="13">
<Value>NextManifestFK</Value>
</Value>
<Value name="14">
<Value>TestDefinitionFK</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DFI.Common.TestModule.ManifestRecords">
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,%XML.Adaptor,%ZEN.DataModel.Adaptor,Cogs.JsonClass</Super>
<TimeChanged>65890,3292.972791</TimeChanged>
<TimeCreated>65835,12863.337009</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// The RecordNumber is the PK on the Manifest Records. The Parent is the Manifest

]]></Content>
</UDLText>

<Property name="Manifest">
<Type>DFI.Common.TestModule.Manifest</Type>
<Cardinality>parent</Cardinality>
<Inverse>ManifestRecords</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="RecordNumber">
<Type>%Integer</Type>
<Parameter name="JSONNAME" value="recordNumber"/>
</Property>

<Property name="CopyConsumerId">
<Type>%String</Type>
<Parameter name="JSONNAME" value="copyConsumerId"/>
</Property>

<Property name="MasterConsumerId">
<Type>%String</Type>
<Parameter name="JSONNAME" value="masterConsumerId"/>
</Property>

<Property name="EMCIUId">
<Type>%String</Type>
<Parameter name="JSONNAME" value="emciUId"/>
</Property>

<Property name="EMCIEventQueueId">
<Type>%String</Type>
<Parameter name="JSONNAME" value="emciEventQueueId"/>
</Property>

<Property name="MessageStatus">
<Type>%Status</Type>
<InitialExpression>$$$OK</InitialExpression>
<Parameter name="JSONNAME" value="messaageStatus"/>
</Property>

<Property name="MessageStatusText">
<Type>%String</Type>
<Parameter name="JSONNAME" value="messageStatusText"/>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="FHIRRequestBody">
<Type>%CharacterStream</Type>
<Parameter name="JSONNAME" value="fhirRequestBody"/>
</Property>

<Property name="FHIRResponseBody">
<Type>%CharacterStream</Type>
<Parameter name="JSONNAME" value="fhirResponseBody"/>
</Property>

<Property name="FHIRRequestJSONFileName">
<Type>%String</Type>
<Parameter name="JSONNAME" value="fhirRequestJSONFileName"/>
<Parameter name="MAXLEN" value="50000"/>
</Property>

<Property name="FHIROperationOutcomeFileName">
<Type>%String</Type>
<Parameter name="JSONNAME" value="fhirOperationOutcomeFileName"/>
<Parameter name="MAXLEN" value="50000"/>
</Property>

<Property name="HTTPStatus">
<Type>DFI.Common.CodeTables.HTTPStatusCodes</Type>
<Parameter name="JSONNAME" value="httpStatus"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>RecordNumber</Properties>
<Unique>1</Unique>
</Index>

<Method name="UpdateManifestRecord">
<Description>
Updates or Creates Manifest Record keyed on ManifestId and RecordNumber
pManifestDT, pRecordNumber, pMasterConsumerId, pCopyConsumerId, pEMCIUId, pEMCIEventQueueId, pMessageStatus, pMessageStatusText, pFHIRRequestFileName, pFHIROpOutcomeFileName, pHTTPStatus</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pManifestId:%String="",pRecordNumber:%Integer="",pMasterConsumerId:%String="",pCopyConsumerId:%String="",pEMCIUId:%String="",pEMCIEventQueueId:%String="",pMessageStatus:%Status=$$$OK,pMessageStatusText:%String(MAXLEN=1000)="",pFHIRRequestBody:%CharacterStream,pFHIRResponseBody:%CharacterStream,pFHIRRequestFileName:%String(MAXLEN=1000)="",pFHIROpOutcomeFileName:%String(MAXLEN=1000)="",pHTTPStatus:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<SqlProc>1</SqlProc>
<WebMethod>1</WebMethod>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if pManifestId="" set tSC=$$$ERROR(5001,"Manifest ID is Null") quit
		if '+$g(pRecordNumber) set tSC=$$$ERROR(5001,"Record Number must be greater than 0") quit
		set obj=$classmethod($classname(),"%OpenId",pManifestId_"||"_pRecordNumber)
		if '$IsObject(obj) {
			set obj=$classmethod($classname(),"%New")
			set obj.RecordNumber=pRecordNumber
			do obj.ManifestIdSetObjectId(pManifestId)
		}
		if $l(pMasterConsumerId) set obj.MasterConsumerId=pMasterConsumerId
		if $l(pCopyConsumerId) set obj.CopyConsumerId=pCopyConsumerId
		if $l(pEMCIUId) set obj.EMCIUId=pEMCIUId
		if $l(pEMCIEventQueueId) set obj.EMCIEventQueueId=pEMCIEventQueueId
		if $l(pMessageStatus) set obj.MessageStatus=pMessageStatus
		if $l(pMessageStatusText),'(+pMessageStatus) {set obj.MessageStatusText=obj.MessageStatusText_$s($l(obj.MessageStatusText):" ",1:"")_pMessageStatusText}
		if $IsObject(pFHIRRequestBody) set tSC=pFHIRRequestBody.Rewind() quit:'tSC  set tSC=obj.FHIRRequestBody.CopyFrom(pFHIRRequestBody) quit:'tSC
		if $IsObject(pFHIRResponseBody) set tSC=pFHIRResponseBody.Rewind() quit:'tSC  set tSC=obj.FHIRResponseBody.CopyFrom(pFHIRRequestBody) quit:'tSC
		if $l(pFHIRRequestFileName) set obj.FHIRRequestJSONFileName=pFHIRRequestFileName
		if $l(pFHIROpOutcomeFileName) set obj.FHIROperationOutcomeFileName=pFHIROpOutcomeFileName
		if $l(pHTTPStatus) do obj.HTTPStatusSetObjectId(pHTTPStatus)
		set tSC=obj.%Save() if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("ManifestRecords")</DataLocation>
<DefaultData>ManifestRecordsDefaultData</DefaultData>
<IdLocation>^DFI.Common.TestMoD7BE.ManifestC("ManifestRecords")</IdLocation>
<IndexLocation>^DFI.CommonD7BE.ManifestRecF60AI</IndexLocation>
<StreamLocation>^DFI.CommonD7BE.ManifestRecF60AS</StreamLocation>
<Data name="ManifestRecordsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CopyConsumerId</Value>
</Value>
<Value name="3">
<Value>MasterConsumerId</Value>
</Value>
<Value name="4">
<Value>EMCIUId</Value>
</Value>
<Value name="5">
<Value>EMCIEventQueueId</Value>
</Value>
<Value name="6">
<Value>MessageStatus</Value>
</Value>
<Value name="7">
<Value>MessageStatusText</Value>
</Value>
<Value name="8">
<Value>FHIRRequestBody</Value>
</Value>
<Value name="9">
<Value>FHIRResponseBody</Value>
</Value>
<Value name="10">
<Value>FHIRRequestJSONFileName</Value>
</Value>
<Value name="11">
<Value>FHIROperationOutcomeFileName</Value>
</Value>
<Value name="12">
<Value>HTTPStatus</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DFI.Common.TestModule.TestConditions">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65890,2375.046064</TimeChanged>
<TimeCreated>65852,18281.035924</TimeCreated>

<Property name="TestConditionName">
<Description>
A mesningful name for the Test Condition</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="TestConditionType">
<Description>
Test </Description>
<Type>%String</Type>
</Property>

<Property name="EMCIConsumerPropertiesRel">
<Description>
The Property or Properties that will be Created or Modifed or Removed from the Source Data Table.
The Property Names use a pseudo notation {Source_Table_Name}.{Property_Name}. If the source
is a Patient Record which could be EMCI.MasterConsumer.MasterConsumer or DW.Modules.PMI.Patient
and the Property is DateOfBirth then the pseudo filed name is {Patient}.{BirthDate} or
{Patient}.{DateOfBirth}. The source table will be rconciled at compilation time and will
depend on the the source table name. The Property Name must be the actual name of the Property
in the Source Table.
In the case of Collections such as Addresses then the syntax would be
{Source_Table_Name}.{Addresses}.{k1(n){:k1(N)}}.{Address_Property_Name}
where {k1(n)} can be a literal value e.g. 1, if {:k1(N)} is specified it too can be a literal e.g. 2
and would read {Patient}.{Addresses}.(1).{Suburb} through {Patient}.{Addresses}.(2).{Suburb}
the key words 'first' and 'last' can be used for {k1(n)} and/or {k1(N)} e.g {first:last} implies all
addresses in the list of Addresses. If there is a collection within a collection such as:
{Patient}.{Contacts}.{k1(n){:k1(N)}}.{ContactPoint}.{k2(n){:k2(N)}}.{rContactPointUseId}
This allows the system to differentiate between the inner and outer loops.</Description>
<Type>DFI.Common.TestModule.EMCIConsumerProperties</Type>
<Cardinality>many</Cardinality>
<Inverse>TestCondition</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="RemoveListProperty">
<Description>
If you want to remove an Identifier for example then set the flag RemoveListProperty to 1 (True)</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="RemoveListPropertyItem">
<Description>
This property works in combination with the property RemoveListProperty Property above being TRUE
And allows you to specify which Identifier you wish to remove</Description>
<Type>%String</Type>
<Parameter name="DISPLAYLIST" value=",First,Last,Random,All"/>
<Parameter name="VALUELIST" value=",F,L,R,A"/>
</Property>

<Property name="RemoveListPropertyUSEValue">
<Description>
This property allows you to specify a list item to be removed based on the 'use' attribute rather than
by specifying an item in the list by its position (RemoveListPropertyItem). At the moment the possible
values are 'official', 'usual' and 'old'. Others may be added ata later stage</Description>
<Type>%String</Type>
<Parameter name="VALUELIST" value=",official,usual,old,secondary"/>
</Property>

<Property name="AddListProperty">
<Description>
AddListProperty works in the opposite way from the RemoveListItem functionality</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="AddListPropertyCount">
<Description>
How many Items to Add, currently constrained to 1,2 or 3 new Items</Description>
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
<Parameter name="MAXVAL" value="3"/>
<Parameter name="MINVAL" value="1"/>
</Property>

<Property name="AddListPropertyUse">
<Description>
The USE attribute value of the List Item to use. If you are adding up to 3 new items then
the USE value will correspond to the value in that position in he list of USE values
The possible values are "usual","old","secondary","official"
If you are adding 3 new items then you would specify the list of USE values as
"usual,old,old" as an example. The values Usual and official can only appear once in the list
The vakue of the actual property will be generated using one of the data generator methods</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="RemovePropertyData">
<Description>
Set the Property Value to NULL or 0 in the case of a Boolean Property</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="ScrambleData">
<Description>
If scamble data is true then the property value will replaced with a value generated by one of the data
generator methods</Description>
<Type>%Boolean</Type>
</Property>

<Property name="ScrambleDataClassMethodName">
<Description>
A Classmethod Name from the DFI Common Utility Data Generators Class</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="CallClassName">
<Description>
An Alternative Class containing the method to use instead of a method within the Utility Data Generator
Class.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="CallClassMethodName">
<Description>
An alternative method name within the CallClassName to use instead of the Utility Data Generator Class</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="CallMethodParameterValues">
<Description>
These are the values to pass to the custom method. The number of items in the list cannot be more than the
the number of parameters in the method signature</Description>
<Type>%ListOfDataTypes</Type>
</Property>

<Property name="TestDefinition">
<Description>
Inverse relationship property name back to Test Definition</Description>
<Type>DFI.Common.TestModule.TestDefinitions</Type>
<Cardinality>one</Cardinality>
<Inverse>TestConditions</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="TestDefinitionIndex">
<Description>
Index to support the 1:many relationship between Test Definition and Test Conditions</Description>
<Properties>TestDefinition</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^DFI.CommonD7BE.TestConditionsD</DataLocation>
<DefaultData>TestConditionsDefaultData</DefaultData>
<IdLocation>^DFI.CommonD7BE.TestConditionsD</IdLocation>
<IndexLocation>^DFI.CommonD7BE.TestConditionsI</IndexLocation>
<StreamLocation>^DFI.CommonD7BE.TestConditionsS</StreamLocation>
<Data name="TestConditionsDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>TestConditionName</Value>
</Value>
<Value name="3">
<Value>TestConditionType</Value>
</Value>
<Value name="4">
<Value>RemoveListProperty</Value>
</Value>
<Value name="5">
<Value>RemoveListPropertyItem</Value>
</Value>
<Value name="6">
<Value>RemoveListPropertyUSEValue</Value>
</Value>
<Value name="7">
<Value>AddListProperty</Value>
</Value>
<Value name="8">
<Value>AddListPropertyCount</Value>
</Value>
<Value name="9">
<Value>AddListPropertyUse</Value>
</Value>
<Value name="10">
<Value>RemovePropertyData</Value>
</Value>
<Value name="11">
<Value>ScrambleData</Value>
</Value>
<Value name="12">
<Value>ScrambleDataClassMethodName</Value>
</Value>
<Value name="13">
<Value>CallClassName</Value>
</Value>
<Value name="14">
<Value>CallClassMethodName</Value>
</Value>
<Value name="15">
<Value>CallMethodParameterValues</Value>
</Value>
<Value name="16">
<Value>TestDefinition</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DFI.Common.TestModule.TestDefinitions">
<Description>
This Class is used to Define Tests to Run against the EMCI or IHIS FHIR Server. Tests are wrapped within
a Manifest and the Man</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor,Cogs.JsonClass</Super>
<TimeChanged>65876,46602.450707</TimeChanged>
<TimeCreated>65852,19944.003668</TimeCreated>

<Property name="TestName">
<Description>
A meaningful but short Name for the Test</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="JSONNAME" value="testName"/>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="TestDescription">
<Description>
A longer description of the Test, what it is trying to Test, what Interacion is expected,
what the expected outcome is. The combination of the Test Name, Test Description and other
Properties in the TestDefinition should be meaningful and form part of the documentation of
the Test. Therefore the more precise this Description is as well as the HTTP Method, the Test
Rules and environment Settings (mfConfig Settings) combine to generate a comprehensive 
Test Document that forms part of the Testing Strategy</Description>
<Type>%String</Type>
<Parameter name="JSONNAME" value="testDescription"/>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="PassEMCIUId">
<Description>
This Test send the EMCIUId as the 'Official' Identifier. If Test=0 this field is True, else false
and is Test 1 if the following properties are all false</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
<Parameter name="JSONNAME" value="passEMCIUId"/>
</Property>

<Property name="RandomSelection">
<Description><![CDATA[
If TRUE (1) this property will make the record selection process generate a random number between 1 and the
number of records to be included in the Batch Manifest and it will skip that many records in the
in the source data before picking up the next source record to Process.<br>
If the value is FALSE (0) then the process that processes the Source Data walks through the source
data table based on the source record ID (internal ID) in a sequential order from the first record
through to the last record.]]></Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="JSONNAME" value="randomSelection"/>
</Property>

<Property name="UseManifestRecordSourceRowIds">
<Description><![CDATA[
This property tells the Test Processor to use the record information in the Manifest Recordsof
this Manifest to retrieve the source data from the source data source. So instead of walking
trough the source data tables' Internal RowId it uses the RowId that is stored in the Manifest
Record (Property CopyConsumerId or MasterConsumerId).<br>
If this proeperty is set to 1 (TRUE) then the Property 'RandomSelection' is ignored.]]></Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="JSONNAME" value="useManifestRecordSourceRowIds"/>
</Property>

<Property name="SelectedRecords">
<Description>
If this property is populated with a list of Manifest Record ID's (The RowId of the Manifest Records
within the Manifest then only those records will be used in the test. The Manifest needs to have been
populated at least once before this option will work. Essentially this allows you to reprocess the
items pointed to by the Manifest Record Properties such as Copy Consumer ID or Master Consumer ID and
other IHIS Entities once they are enabled. This setting will override the RandomSelection option
and the UseManifestRecordSourceRowIds (which is implicitly what this setting does)</Description>
<Type>%String</Type>
<Parameter name="JSONNAME" value="selectedRecords"/>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="ExpectedOutcome">
<Description>
A description of the expected outcome of the Tests performed on the Rows retrieved, transformed and
sent to the EMCI or IHIS server</Description>
<Type>%String</Type>
<Parameter name="JSONNAME" value="expectedOutcome"/>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="ActualOutcome">
<Description>
A description of the actual outcome of the tests. This description will detail those rows that either
resulted in the expected Outcome and those that did not. The outcomes that were not expected should
be investigated as to why they did not perform as expected, The reason should be explained in the
Operation Outcome of the FHIR Request</Description>
<Type>%String</Type>
<Parameter name="JSONNAME" value="actualOutcome"/>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="HTTPMethod">
<Description>
The HTTP Method to use in the HTTP or HTTPS Operation</Description>
<Type>DFI.Common.CodeTables.HTTPMethods</Type>
<Parameter name="JSONNAME" value="httpMethod"/>
</Property>

<Property name="TargetDocumentType">
<Description>
The type of Document determines the HTTP Operation that is used to send the data to the Target
Application (EMCI, IHIS, IHIS Module). Typically this is going to be FHIR JSON or HL7 though
TCP is an option </Description>
<Type>%String</Type>
<Parameter name="DISPLAYLIST" value=",FHIR JSON,HL7"/>
<Parameter name="JSONNAME" value="targetDocumentType"/>
<Parameter name="VALUELIST" value=",F,H"/>
</Property>

<Property name="ManagingOrganization">
<Description>
The Managing Organization Default. This should be specified in the FHIR JSON. If not specified it
should default to Clinicom</Description>
<Type>%String</Type>
<Parameter name="JSONNAME" value="managingOrganization"/>
</Property>

<Property name="UseMasterConsumer">
<Description>
Use the Master Consumer Class as opposed to the CopyConsumer Class</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
<Parameter name="JSONNAME" value="useMasterConsumer"/>
</Property>

<Property name="TestConditions">
<Description>
A collection of Test Conditions that are invoked by the Testing Module Business Process(es), The Test CVonditions
are typically applied to a specific field in the source data tables.</Description>
<Type>DFI.Common.TestModule.TestConditions</Type>
<Cardinality>many</Cardinality>
<Inverse>TestDefinition</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="mfConfigTestSettings">
<Description>
When the Tests (Test Definitions) are run the Testing Module can set mfConfig settings in the Target
EMCI or IHIS FHIR Server to test certain scenarios. The mfConfig settings are returned to their prior
state after the tests have completed.</Description>
<Type>DFI.Common.TestModule.mfConfigSettings</Type>
<Cardinality>many</Cardinality>
<Inverse>TestDefinition</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^DFI.CommonD7BE.TestDefinit565BD</DataLocation>
<DefaultData>TestDefinitionsDefaultData</DefaultData>
<IdLocation>^DFI.CommonD7BE.TestDefinit565BD</IdLocation>
<IndexLocation>^DFI.CommonD7BE.TestDefinit565BI</IndexLocation>
<StreamLocation>^DFI.CommonD7BE.TestDefinit565BS</StreamLocation>
<Data name="TestDefinitionsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>TestName</Value>
</Value>
<Value name="3">
<Value>TestDescription</Value>
</Value>
<Value name="4">
<Value>PassEMCIUId</Value>
</Value>
<Value name="5">
<Value>RandomSelection</Value>
</Value>
<Value name="6">
<Value>UseManifestRecordSourceRowIds</Value>
</Value>
<Value name="7">
<Value>SelectedRecords</Value>
</Value>
<Value name="8">
<Value>ExpectedOutcome</Value>
</Value>
<Value name="9">
<Value>ActualOutcome</Value>
</Value>
<Value name="10">
<Value>HTTPMethod</Value>
</Value>
<Value name="11">
<Value>TargetDocumentType</Value>
</Value>
<Value name="12">
<Value>ManagingOrganization</Value>
</Value>
<Value name="13">
<Value>UseMasterConsumer</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DFI.Common.TestModule.mfConfigSettings">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65875,43394.197105</TimeChanged>
<TimeCreated>65852,19660.717982</TimeCreated>

<Property name="mfConfigPropertyName">
<Type>%String</Type>
</Property>

<Property name="mfConfigPropertyPriorValue">
<Type>%String</Type>
</Property>

<Property name="mfConfigPropertyTestValue">
<Type>%String</Type>
</Property>

<Property name="ReturnmfConfigPropertyValuetoPrior">
<Type>%Boolean</Type>
</Property>

<Property name="mfConfigPropertyValue">
<Type>%String</Type>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>mfConfigPropertyName</Properties>
<Unique>1</Unique>
</Index>

<Property name="TestDefinition">
<Type>DFI.Common.TestModule.TestDefinitions</Type>
<Cardinality>one</Cardinality>
<Inverse>mfConfigTestSettings</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="TestDefinitionIndex">
<Properties>TestDefinition</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^DFI.CommonD7BE.mfConfigSetC2D4D</DataLocation>
<DefaultData>mfConfigSettingsDefaultData</DefaultData>
<IdLocation>^DFI.CommonD7BE.mfConfigSetC2D4D</IdLocation>
<IndexLocation>^DFI.CommonD7BE.mfConfigSetC2D4I</IndexLocation>
<StreamLocation>^DFI.CommonD7BE.mfConfigSetC2D4S</StreamLocation>
<Data name="mfConfigSettingsDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>mfConfigPropertyPriorValue</Value>
</Value>
<Value name="3">
<Value>mfConfigPropertyTestValue</Value>
</Value>
<Value name="4">
<Value>ReturnmfConfigPropertyValuetoPrior</Value>
</Value>
<Value name="5">
<Value>mfConfigPropertyValue</Value>
</Value>
<Value name="6">
<Value>TestDefinition</Value>
</Value>
</Data>
</Storage>
</Class>


<Routine name="DFIInclude" type="INC" timestamp="65896,8624.306"><![CDATA[
#define DebugLog(%s1,%s2,%s3,%s4) do ##class(DFI.Common.Debug.Logging).CreateDebugLog($classname(),%s1,%s2,%s3,%s4)
#define GetDebugOnOff(%s1) quit ##class(DFI.Common.Debug.Status).GetDebugOnOff(%s1)
#define fill "  "
#define crlf $c(13,10)
#define CreateEMCIManifest(%s1,%s2,%s3,%s4,%s5,%s6,%s7,%s8,%s9,%s10,%s11,%s12,%s13) set tSC=##class(DFI.EMCI.DataLoad.EMCIManifest).UpdateManifestRecord(%s1,%s2,%s3,%s4,%s5,%s6,%s7,%s8,%s9,%s10,%s11,%s12,%s13) if 'tSC write !,"Update Manifest: "_$$$GetErrorText(tSC)
#define GenerateEMCIManifest(%s1,%s2,%s3,%s4,%s5,%s6,%s7)  set tSC=##class(DFI.EMCI.DataLoad.EMCIManifest).CreateManifestFile(%s1,%s2,%s3,%s4,%s5,%s6,%s7) if 'tSC write !,"Write Manifest File: "_$$$GetErrorText(tSC)
#define CreateDWManifest(%s1,%s2,%s3,%s4,%s5,%s6,%s7,%s8) set tSC=##class(DFI.DW.DataLoad.DWManifest).UpdateManifestRecord(%s1,%s2,%s3,%s4,%s5,%s6,%s7,%s8) if 'tSC quit
#define GenerateDWManifest(%s1,%s2,%s3,%s4,%s5,%s6)  set tSC=##class(DFI.DW.DataLoad.DWManifest).CreateManifestFile(%s1,%s2,%s3,%s4,%s5,%s6) if 'tSC quit
#define DisplayError(%s1) do $SYSTEM.OBJ.DisplayError(%s1)
#define DecomposeStatus(%s1,%s2) do $SYSTEM.Status.DecomposeStatus(%s1,%s2)
#define GetErrorText(%s1) $zstrip($p($system.Status.GetErrorText(%s1),":",2,99),"<>W")
#define GetHPRNfromHID(%s1) ##class(DFI.Common.Utility.Functions).ConvertHIDtoHPRN(%s1)
#define IsValidTelephone(%s1) ##class(DFI.Common.Utility.Functions).IsValidTelephone(%s1)
#define GetSurname(%s1) ##class(DFI.Common.Utility.Functions).DecodeNames(%s1,"PersonSurname")
#define GetGivenName(%s1) ##class(DFI.Common.Utility.Functions).DecodeNames(%s1,"PersonGivenName")
#define GetGivenNameOther(%s1) ##class(DFI.Common.Utility.Functions).DecodeNames(%s1,"PersonGivenNameOther")
#define GetNOKSurname(%s1) ##class(DFI.Common.Utility.Functions).DecodeNames(%s1,"NOKSurname")
#define GetNOKGivenName(%s1) ##class(DFI.Common.Utility.Functions).DecodeNames(%s1,"NOKGivenName")
#define GetNOKGivenNameOther(%s1) ##class(DFI.Common.Utility.Functions).DecodeNames(%s1,"NOKGivenNameOther")
#define GetCleanAddress(%s1) ##class(DFI.Common.Utility.Functions).DecodeAddress(%s1)
#define ALPHAUP(%s) $zu(28,%s,6)
#define SQLSTRING(%s) $zu(28,%s,8)
#define SQLSTRINGT(%s,%l) $zu(28,%s,8,%l)
#define SQLUPPER(%s) $zu(28,%s,7)
#define SQLUPPERT(%s,%l) $zu(28,%s,7,%l)
#define STRING(%s) $zu(28,%s,9)
#define STRINGT(%s,%l) $zu(28,%s,9,%l)
#define TRUNCATE(%s) %s
#define TRUNCATET(%s,%l) $e(%s,1,%l)
#define UPPER(%s) $zu(28,%s,5)
#define quote(%val) $zutil(144,1,%val)
#define StripQuotes(%s) $replace($e(%s,2,*-1),"""""","""")
#define LOWER(%s) $zcvt(%s,"L")
#define LastPiece(%s,%p) $p(%s,%p,*)
#define AllButLastPiece(%s,%p) $p(%s,%p,1,*-1)
#define IsOneOf(%item,%list) ((","_%list_",")[(","_%item_","))
#define AllButFirstChar(%s) $e(%s,2,*)
#define AllButLastChar(%s) $e(%s,1,*-1)
#define StripLeadingWhiteSpace(%s) $zstrip(%s,"<W")
#define StripTrailingWhiteSpace(%s) $zstrip(%s,">W")
#define GetList(%s) $zstrip($tr(%s," ",","),"=",",")
#define GetDT(%s) $zstrip($s(($e(%s,1,2)?2a&($e(%s,1,2)="eq")):"1 ",($e(%s,1,2)?2a&($e(%s,1,2)="ne")):"0 ",1:"")_$tr(%s,"eqngtlT"," "),"="," ")
#define boolean(%s) $s(%s="true":1,%s=1:1,1:0)
#define soundex(%s) ##class(EMCI.Utils.Soundex).GetSoundex(%s)
#define soundexXH(%s) ##class(EMCI.Utils.Soundex).GetSoundexXhosa(%s)
#define phone(%s) ##class(EMCI.Utils.BusinessRules).NormalizeSysTelephone(%s) // Questionable
#define email(%s) $ZSTRIP(Value, "*PW",,"@.-_")
#define emailUP(%s) $zu(28,$ZSTRIP(Value, "*PW",,"@.-_"),5)
#define emailLW(%s) $zcvt($ZSTRIP(Value, "*PW",,"@.-_"),"L")
#define normalizeSysStringUP(%s) $zu(28,$zstrip(%s,"*CNW"),7) // Based on Currrent Normalisation in TemplateConsumer (UPPER, STRIP Numerics and White Space (and I have added C to remove CTRL characters particularly CR/LF))
#define normalizeSysStringLW(%s) $zcvt($zstrip(%s,"*CNW"),"L") // More useful for iFind indices that by default LOWERCASE all aplha values
#define normalizeSysNumStringUP(%s) $zu(28,$zstrip(%s,"*CW"),7) // Strings that can contain numerics and/or alphas
#define normalizeSysNumStringLW(%s) $zcvt($zstrip(%s,"*CW"),"L") // Strings that can contrain numerics and/or alphas
#define strings(%s) ",city,address-city,address-country,address-state,address-use,family,given,name,use,resourceType,type,system,display,"[","_%s-","
#define numbers(%s) ",address-postalCode,rank,size,"[","_%s_","
#define numstrings(%s) ",address,line,district,text,"[","_%s_","
#define urlStructure(%s) $s($e($$$LOWER(%s),1,4)="http":"url",1:"uri")
#define GetInteractionMethodName(%s) $tr($zcvt($tr($tr(%s,"$",""),"-"," "),"W")," ","")

]]></Routine>


<Class name="Robot.ACKOperation">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>63945,45120.487556</TimeChanged>
<TimeCreated>63648,4632.736469</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.File.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.File.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="SendAGK">
<FormalSpec>pRequest:EnsLib.HL7.Message,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set tSC=pRequest.OutputToFile("c:\RobotTesting\OutboundHL7\RDS "_$zdt($h,3),1)
End	;
	set pResponse=##class(Robot.ACKResponse).%New()
	set pResponse.Success=tSC
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="EnsLib.HL7.Message"> 
		<Method>SendAGK</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="Robot.ACKResponse">
<Super>Ens.Response</Super>
<TimeChanged>63649,37684</TimeChanged>
<TimeCreated>63648,4595.247421</TimeCreated>

<Property name="Success">
<Type>%Status</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>RobotACKResponseDefaultData</DefaultData>
<Data name="RobotACKResponseDefaultData">
<Structure>listnode</Structure>
<Subscript>"RobotACKResponse"</Subscript>
<Value name="1">
<Value>Success</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Address">
<Super>%SerialObject,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>63649,37684</TimeChanged>
<TimeCreated>63620,76998.89384</TimeCreated>

<Property name="AddressLine1">
<Type>%String</Type>
<Parameter name="POPSPEC" value=".AddressLine1()"/>
</Property>

<Property name="AddressLine2">
<Type>%String</Type>
<Parameter name="POPSPEC" value=".AddressLine2()"/>
</Property>

<Property name="Suburb">
<Type>%String</Type>
<Parameter name="POPSPEC" value=".Suburb()"/>
</Property>

<Property name="Province">
<Type>%String</Type>
<Parameter name="POPSPEC" value=".Province()"/>
</Property>

<Property name="Country">
<Type>%String</Type>
<InitialExpression>"South Africa"</InitialExpression>
</Property>

<Property name="PostCode">
<Type>%String</Type>
<Parameter name="POPSPEC" value=".PostCode()"/>
</Property>

<Method name="AddressLine1">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ($r(1000)+1)_" "_$p("Andrew,Bloom,Van der Linde,Rat,Cat",",",($r(5)+1))_" "_$p("Way,Avenue,Street,Close",",",($r(4)+1))
]]></Implementation>
</Method>

<Method name="AddressLine2">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ""
]]></Implementation>
</Method>

<Method name="Suburb">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $p("Melville,Parkhurst,Parkmore,Observatory,Braamfontein,Houghton,Bryanston,Rosebank",",",($r(8)+1))
]]></Implementation>
</Method>

<Method name="Province">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $p("Gauteng,Northern Cape,Western Cape,Eastern Cape,Free State,Northern",",",($r(6)+1))
]]></Implementation>
</Method>

<Method name="PostCode">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ($r(9)+1)_$r(10)_$r(10)_$r(10)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Serial</Type>
<State>AddressState</State>
<StreamLocation>^Robot.AddressS</StreamLocation>
<Data name="AddressState">
<Value name="1">
<Value>AddressLine1</Value>
</Value>
<Value name="2">
<Value>AddressLine2</Value>
</Value>
<Value name="3">
<Value>Suburb</Value>
</Value>
<Value name="4">
<Value>Province</Value>
</Value>
<Value name="5">
<Value>Country</Value>
</Value>
<Value name="6">
<Value>PostCode</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.AlertService">
<Super>Ens.BusinessService</Super>
<TimeChanged>64027,52837.015809</TimeChanged>
<TimeCreated>63739,40952.661038</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>Ens.InboundAdapter</Type>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	$$$TRACE("Robot Alert Service Started at: "_$zdt($h,3))
	set rs=##class(%ResultSet).%New("Robot.ProductionAlerts:Extent")
	set tSC=rs.Execute() if 'tSC goto End
	for {
		do rs.Next(.rssc) quit:'rssc  quit:'$l(rs.GetData(1))
		set itemid=rs.GetData(1)
		if $d(^Ens.Runtime("ConfigItem",itemid)) {
			set item=##class(Robot.ProductionAlerts).%OpenId(itemid)
			if $IsObject(item) {
				// First lets check queues
				// If Queue Count Alert value = -1 then this means there is no alert on queues for this item
				if item.QueueSizeAlert'=-1 {
					if $g(^Ens.Queue(itemid,0,"count"))>item.QueueSizeAlert {
						if $system.SQL.DATEDIFF("s",item.QueueSizeAlertLastDT,$zdt($h,3))>item.QueueSizeAlertInterval {
							set msg="The Queue Count on item "_itemid_" is "_$g(^Ens.Queue(itemid,0,"count"))_" which is greater than the expected count of "_item.QueueSizeAlert_" at "_$zdt($h,3)
							set tSC=..SendAlertMessage(itemid, msg, item.RecipientList)
							set item.QueueSizeAlertLastDT=$zdt($h,3)
						}
					}
					else {
						if $system.SQL.DATEDIFF("y",item.QueueSizeAlertLastDT,$zdt($h,3))>item.QueueSizeAlertInterval {
							set item.QueueSizeAlertLastDT=$zdt($h,3)
						}
					}
				}
				// Now lets check Error Counts
				set sc=""
				$$$TRACE("Prod Item: Into Error Check")
				for {
					set error=item.Errors.GetNext(.sc) quit:sc=""
					if error.ErrorCountAlert'=-1 {
						if error.ErrorCount>error.ErrorCountAlert {
							if $system.SQL.DATEDIFF("s",error.LastAlertDT,$zdt($h,3))>error.ErrorCountAlertInterval {
								set msg="Production Item "_itemid_" has has an error count of "_error.ErrorCount_" for error: "_error.ErrorID_" which is greater than the allowed count of "_error.ErrorCountAlert_" at "_$zdt($h,3)
								set tSC=..SendAlertMessage(itemid, msg, $s($l(item.RecipientList):item.RecipientList,1:"")_$s(($l(item.RecipientList)&$l(error.RecipientList)):";",1:"")_error.RecipientList)
								set error.LastAlertDT=$zdt($h,3),error.ErrorCount=0
								set sc=error.%Save()
							}
						}
						else {
							if $system.SQL.DATEDIFF("s",error.LastAlertDT,$zdt($h,3))>error.ErrorCountAlertInterval {
								set error.ErrorCount=0,error.LastAlertDT=$zdt($h,3)
								set sc=error.%Save()
							}
						}
					}
				}
				// Now lets check for Conditions
				set sc=""
				for {
					set condition=item.Conditions.GetNext(.sc) quit:sc=""
					if condition.ConditionCountAlert'=-1 {
						if condition.ConditionCount>condition.ConditionCountAlert {
							if $system.SQL.DATEDIFF("s",condition.LastAlertDT,$zdt($h,3))>condition.ConditionCountAlertInterval {
								set msg="Item "_itemid_" has has a condition count of "_condition.ConditionCount_" for condition """_condition.ConditionID_""" which is greater than the allowed count of "_condition.ConditionCountAlert_" at "_$zdt($h,3)
								set tSC=..SendAlertMessage(itemid, msg, $s($l(item.RecipientList):item.RecipientList,1:"")_$s(($l(item.RecipientList)&$l(condition.RecipientList)):";",1:"")_condition.RecipientList)
								set condition.LastAlertDT=$zdt($h,3),condition.ConditionCount=0
								set sc=condition.%Save()
							}
						}
						else {
							if $system.SQL.DATEDIFF("s",condition.LastAlertDT,$zdt($h,3))>conditon.ConditionCountAlertInterval {
								set condition.ConditionCount=0,condition.LastAlertDT=$zdt($h,3)
								set sc=condition.%Save()
							}
						}
					}
				}
			set tSC=item.%Save()
			}
		}
	quit:'tSC
	}
End	;
	$$$TRACE("Exiting Robot Alert Service")
	quit tSC
Error	;
	set $ztrap=""
	set tSC=$system.Status.Error(5001,..%ConfigName_" Robot Message Service Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="SendAlertMessage">
<FormalSpec>source:%String(MAXLEN=200),msg:%String(MAXLEN=1000),recipients:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set alert=##class(Ens.AlertRequest).%New()
	if $l($g(recipients)) set alert.AlertDestination=recipients
	set alert.AlertText=msg
	set alert.SourceConfigName=$g(source)
	do ..SendAlert(alert)
End	;
	quit tSC
Error	;
	set $ztrap=""
	set tSC=$system.Status.Error(5001,..%ConfigName_" Alert Service Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Common.Abstract.MessageQueueBaseMethods">
<Description>
This class contains the methods for all message queues and should be inherited into any
new Message Queue Class aliong with the Message</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeChanged>65889,71279.754485</TimeChanged>
<TimeCreated>65889,10135.832206</TimeCreated>

<Method name="CreateMessage">
<Description>
The Message Queue Class includes the fields from the TransactionLog Request Message in the Clinicom - ODS Trickle Feed are
Action, ActivityDateTime, ClinicCode, DoctorCode, EpisodeNumber, LogType, PatientNumber, TrackingDate, TrackingSequence, TransactionType</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pValues:%String(MAXLEN=5000),&pMessageId:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK,pMessageId=""
	Try {
		set obj = $classmethod($classname(),"%New")
		set tProp="" For {
			set tProp=$O(pValues(tProp)) quit:tProp=""
			// Only set the property value if the node pValues(pProp)'=""
			if $l(pValues(tProp)) set $property(obj,tProp)=pValues(tProp)
			// Unless the node pValues(pProp,"Force") is set to 1 which indicates set the
			// property to NULL.
			if '$l(pValues(tProp)),+$get(pValues(tProp,"Force")) set $property(obj,tProp)=""
		}
		Set tSC = obj.%Save() if 'tSC quit
		Set pMessageId = obj.%Id()
	}
	Catch ex {Set tSC = ex.AsStatus()}
	$$$DebugLog($username,"CreateMessage","Create Message for Message Queue: ("_$classname()_") Status: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	Quit tSC
]]></Implementation>
</Method>

<Method name="UpdateMessage">
<Description><![CDATA[
The Update Message Method allows properties in the Message Object to be updated. The message object
for the specified Message ID must exist. If it does not exist use the CreateMessage() method.<br>
There are specific Message Properties that can only be set when the message is first created
and cannot be modified or cannot be modified by this method. They are the TimeStamps.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pMessageId:%String="",&pValues:%String(MAXLEN=500000),pSourceHL7RequestMessage:EnsLib.HL7.Message="",pTargetHL7ResponseMessage:EnsLib.HL7.Message="",pSourceFHIRRequestMessage:%CharacterStream="",pTargetFHIRResponseMessage:%CharacterStream=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK,hSSC=$$$OK,hTSC=$$$OK,fSSC=$$$OK,fTSC=$$$OK // hSSC/hRSC=HL7Source/Target Status, fSSC/fTSC=FHIRSource/Target Status
	Try {
		if '$l($g(pMessageId)) set tSC=$$$ERROR(5001,"Message ID cannot be NULL") quit
		set obj = $classmethod($classname(),"%OpenId",pMessageId) if '$IsObject(obj) set tSC=$$$ERROR(501,"There is no Mesage for Message ID: "_pMessageId) quit
		// Deal with the Source and Target Hl7 or FHIR Request/Response Messages
		if $IsObject(pSourceHL7RequestMessage) set obj.SourceHL7RequestMessage=obj.SourceHL7RequestMessage.ImportFromString(pSourceHL7RequestMessage.OutputToString(,,.hSSC)) $$$DebugLog($username,"UpdateMessage","Update Source HL7 Message Status: "_$s(hSSC:"OK",1:$$$GetErrorText(hSSC)),.dSC)
		if $IsObject(pTargetHL7ResponseMessage) set obj.TargetHL7ResponseMessage=obj.TargetHL7ResponseMessage.ImportFromString(pTargetHL7ResponseMessage.OutputToString(,,.hTSC)) $$$DebugLog($username,"UpdateMessage","Update Source HL7 Message Status: "_$s(hTSC:"OK",1:$$$GetErrorText(hTSC)),.dSC)
		// Update the Source and Target FHIR Messages
		if $IsObject(pSourceFHIRRequestMessage) set tSC=pSourceFHIRRequestMessage.Rewind() quit:'tSC  set fSTC=obj.SourceFHIRRequestMessage.CopyFrom(pSourceFHIRRequestMessage) $$$DebugLog($username,"UpdateMessage","Update Source FHIR Message Status: "_$s(fSSC:"OK",1:$$$GetErrorText(fSSC)),.dSC00)
		if $IsObject(pTargetFHIRResponseMessage) set tSC=pTargetFHIRResponseMessage.Rewind() quit:'tSC  set fTSC=obj.TargetFHIRResponseMessageCopyFrom(pTargetFHIRResponseMessage) $$$DebugLog($username,"UpdateMessage","Update Source FHIR Message Status: "_$s(fTSC:"OK",1:$$$GetErrorText(fTSC)),.dSC)
		// Update any other properties
		for tProp="CreateTS","ProcessTS","CompletedTS","SourceHL7RequestMessage","TargetHL7ResponseMessage","SourceFHIRRequestMessage","TargetFHIRResponseMessage" kill pValues(tProp)
		set tProp="" For {
			set tProp=$O(pValues(tProp)) quit:tProp=""
			// Neeed to check if this is the best way to update an HL7 Message Property
			// Update the Source and Target HL7 Messages
			// Only set the property value if the node pValues(pProp)'=""
			if $l(pValues(tProp)) set $property(obj,tProp)=pValues(tProp) continue
			// Unless the node pValues(pProp,"Force") is set to 1 which indicates set the
			// property to NULL.
			if '$l(pValues(tProp)),+$get(pValues(tProp,"Force")) set $property(obj,tProp)=""
		}
		Set tSC = obj.%Save() if 'tSC quit
	}
	Catch ex {Set tSC = ex.AsStatus()}
	$$$DebugLog($username,"UpdateMessage","Update Message for Message ID: "_pMessageId_" Status: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	Quit tSC
]]></Implementation>
</Method>

<Method name="GetNextMessage">
<Description>
This method finds the next message in the Interface Message Queue Table where the ProcessTS IS NULL.
If a message is found then the method calls the method SetMessageStateToProcessing() which sets
the message property ProcessTS to the current Date/Time. To resend a message the properties
ProcessTS and CompletedTS to null which effectively sets the messages to un-processed</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pMessageID:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		set tTable=$classname() if $l($classname(),".")>2 set tTable=$tr($p($classname(),".",1,$l($classname(),".")-1),".","_")_"."_$p($classname(),".",$l($classname(),"."))
		set sql="select ID as pMessageID from "_tTable_" where ProcessTS IS NULL"
		set rs=##class(%ResultSet).%New("%DynamicQuery:SQL")
		set tSC=rs.Prepare(sql) if 'tSC quit
		set tSC=rs.Execute() if 'tSC quit
		// find next message and call the method to set the ProcessTS to the curent Date/Time signifying that
		// the message is being processed
		set found=rs.Next() if 'found set pMessageID="" quit
		set pMessageID=rs.Data("pMessageID")
		set tSC=..SetMessageStateToProcessing(pMessageID) if 'tSC quit
	}
	Catch ex { Set tSC=ex.AsStatus()}
	$$$DebugLog($username,"GetNextMessage","Get Next Message Status:"_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	if 'tSC set pMessageID=""
	Quit tSC
]]></Implementation>
</Method>

<Method name="SetMessageStateToProcessing">
<Description>
This Method sets the ProcessTS to the Current Date/Time and indicates that the message is
currently being processed</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMessageID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set obj=$classmethod($classname(),"%OpenId",pMessageID)
		If '$IsObject(obj) { Set tSC=$$$ERROR(5001,"Unable to Open Message: "_pMessageID) quit}
		Set obj.ProcessTS = $zdt($Horolog,3)
		Set tSC = obj.%Save() if 'tSC quit
	}
	Catch ex { Set tSC=ex.AsStatus() }
	$$$DebugLog($username,"SetProcessTS","Set ProcessTS for Message: "_pMessageID_" Status: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	Quit tSC
]]></Implementation>
</Method>

<Method name="CompleteMessage">
<Description><![CDATA[
The CompleteMessage() method is called when the Interface Production has finished processing the
message. It should be called by the DFI Process Message Queue Service which is the Business Service
that processes the Robot.Common.Oqueue.ODSMessageQueue after a message has been retrieved from the
queue and sent Synchronously to the DFI Create Base Message Process which is the Business Process
that creates the Base HL7 or FHIR Message. The Ensemble Response Message will contain the Status
Code returned from the Target Application API and the MessageStatus.<br>
The method updates the overall Message Status, the Status Code returned from the
HTTP Operation and is a valid %Status. If the HL7 ACK Message is a NACK then the Status
returned by the Operation should be an interpretation of the HL7 ACK Code<br>
The TargetResponseStatus is the HTTP Response Status<br>
The TargetResponseStatusText should be an interpretation of the HTTP Status Code<br>
The method also updates the two Time Calculation Fields that record the time taken:<br>
1) From Created to Completed (in seconds)<br>
2) From In Progress to Completed (in seconds)<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMessageID:%String="",pMessageStatus:%Status=$$$OK,pMessageStatusText:%String="",pTargetResponseStatus:%String="201",pTargetResponseStatusText:%String(MAXLEN=500)="",pTargetHL7ResponseMessage:EnsLib.HL7.Message="",pTargetFHIRResponseMessage:%CharacterStream=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		if '$l(pMessageID) set tSC=$$$ERROR(5001,"No Message ID specified") quit
		Set obj = $classmethod($classname(),"%OpenId",pMessageID)
		If '$IsObject(obj) { Set tSC=$$$ERROR(5001,"Unable to Open Message: "_pMessageID) quit }
		if $l(pMessageStatus) {
			set obj.MessageStatus=pMessageStatus
			if '$l(pMessageStatusText) set pMessageStatusText=$s(pMessageStatus:"Message Completed OK",1:$$$GetErrorText(pMessageStatus))
			set obj.MessageStatusText=obj.MessageStatusText_$s($l(obj.MessageStatusText):" ",1:"")_obj.MessageStatusText
		}
		if $l(pTargetResponseStatus) {
			set obj.TargetResponseStatus=pTargetResponseStatus
			if '$l(pTargetResponseStatusText) set pTargetResponseStatusText=$s(pTargetResponseStatus:"Message Completed OK",1:$$$GetErrorText(pTargetResponseStatus))
			set obj.TargetResponseStatusText=obj.TargetResponseStatusText_$s($l(obj.TargetResponseStatusText):" ",1:"")_pTargetResponseStatusText
		}
		if $IsObject(pTargetHL7ResponseMessage) set obj.TargetHL7ResponseMessage=obj.TargetHL7ResponseMessage.ImportFromString(pTargetHL7ResponseMessage.OutputToString() ,.tSC) quit:'tSC
		if $IsObject(pTargetFHIRResponseMessage) set tSC=pTargetFHIRResponseMessage.Rewind() quit:'tSC  set tSC=obj.TargetFHIRResponseMessage.CopyFrom(pTargetFHIRResponseMessage) quit:'tSC
		Set obj.CompletedTS = $zdt($h,3)
		set obj.TimeTakenFromCreateToComplete=..CalculateTime(obj.CreateTS,obj.CompletedTS)
		set obj.TimeTakenFromProcessingToComplete=..CalculateTime(obj.ProcessTS,obj.CompletedTS)
		Set tSC = obj.%Save() if 'tSC { Quit }
	}
	Catch ex { Set tSC=ex.AsStatus() }
	$$$DebugLog($username,"CompleteMessage","Complete Message: ("_pMessageID_") Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	Quit tSC
]]></Implementation>
</Method>

<Method name="CalculateTime">
<Description><![CDATA[
The CalculateTime() Method firstly computes the time taken from when the Message was Created and
when the Message was Completed. Secondly, it computes the time from when the Message was picked
up from the queue through to when the Message was Completed. The time unit is seconds.<br>
The method is called from the CompleteMessage() Method.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStartTS:%TimeStamp,pEndTS:%TimeStamp</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tStart=$zdth(pStartTS,3),tEnd=$zdth(pEndTS,3) &sql(SELECT DATEDIFF('ss',:tStart,:tEnd) INTO :return)
	}
	catch ex {set tSC=ex.AsStatus()}
	quit return
]]></Implementation>
</Method>

<Method name="PurgeMessageQueue">
<Description><![CDATA[
The PurgeMessageQueue() Method will cleardown messages that have been processed or completed
that are older than the number of days messages must be retained. If no value is passed to the
method parameter pNumberOfDays then the method will obtain the value from the Interface
Configuration Record. This method should be called by the DFI Housekeeping Service.
The method will return the number of Messages purged.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pNumberOfDays:%Integer,&pNumberOfMessagesPurged=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tTable=$classname() if $l(tTable,".")>2 set tTable=$tr($p($classname(),".",1,$l($classname(),".")-1),".","_")_"."_$p($classname(),".",$l($classname(),"."))
		if '$l(pNumberOfDays) {
			set tConfig=##class(Robot.Common.Configuration.ConfigurationSettings).%OpenId("Settings") if $IsObject(tConfig) set tSC=$$$ERROR(5001,"Unable to Open Configuration Settngs") quit
			set pNumberOfDays=$g(pSettings("DFINumberOfDaysToKeepQueueMessages"),90)
		}
		set tDate=$zdt($h-pNumberOfDays,3)
		set sql="delete from "_tTable_" where CompletedTS < '"_tDate_"'"
		set rs=##class(%ResultSet).%New("%DynamicQuery:SQL")
		set tSC=rs.Prepare(sql) if 'tSC quit
		set tSC=rs.Execute() if 'tSC quit
		set pNumberOfMessagesPurged=rs.%ROWCOUNT
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"PurgeMessageQueue","Purge Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="ResendQueueMessage">
<Description>
This method will reset the ProcessTS and CompletedTS to NULL which mans that it is effectively back to a state of unprocessed.
The GetNextMessage() method will find this message and resend it.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMessageID:%Integer=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if '$l(pMessageID) set tSC=$$$ERROR(5001,"No Message ID specified") quit
		Set obj = $classmethod($classname(),"%OpenId",pMessageID)
		If '$IsObject(obj) { Set tSC=$$$ERROR(5001,"Unable to Open Message: "_pMessageID) quit }
		set obj.ProcessTS="",obj.CompletedTS="",obj.TargetResponseStatus="",obj.MessageStatus=$$$OK,obj.MessageStatusText=""
		set obj.SourceFHIRRequestMessage="",obj.SourceHL7RequestMessage="",obj.TargetFHIRResponseMessage=""
		set obj.TargetHL7ResponseMessage="",obj.TargetResponseLocation="",obj.TargetResponseStatus=$$$OK,obj.TargetResponseStatusText=""
		set tSC=obj.%Save() if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"ResendMessage","Resend Queue Message: "_pMessageID_" Status: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="ResendDateRange">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFromTS:%TimeStamp={$zdt($p($h,",",1)_","_($p($h,",",2)-7200),3)},pToTS:%TimeStamp={$zdt($h,3)}</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set table=$p($classname(),".",$l($classname(),".")-1)_"."_$p($classname(),".",$l($classname(),"."))
		set sql="select ID from "_table_" where ProcessTS > '"_pFromTS_"' and ProcessTS < '"_pToTS_"'"
		$$$DebugLog($username,"ResendDateRange","Date Range SQL: "_sql,.dSC)
		set rs=##class(%ResultSet).%New("%DynamicQuery:SQL")
		set tSC=rs.Prepare(sql) if 'tSC quit
		set tSC=rs.Execute() if 'tSC quit
		while rs.Next(.tSC) {
			quit:'tSC
			set id=rs.Get("ID"),obj=$classmethod($classname(),"%OpenId",id)
			if '$IsObject(obj) $$$DebugLog($username,"ResendDateRange","Cannot open Message with ID: "_id,.dSC) continue
			set obj.ProcessTS="",obj.CompletedTS="",obj.TargetResponseStatus="",obj.MessageStatus=$$$OK,obj.MessageStatusText=""
			set obj.SourceFHIRRequestMessage="",obj.SourceHL7RequestMessage="",obj.TargetFHIRResponseMessage=""
			set obj.TargetHL7ResponseMessage="",obj.TargetResponseLocation="",obj.TargetResponseStatus=$$$OK,obj.TargetResponseStatusText=""
			set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"ResendDateRange","Cannot save Message with ID: "_id_" Error: "_$$$GetErrorText(tSC),.dSC) continue
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"ResendDateRange","Resend Message Queue Date Range Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Common.Abstract.MessageQueueBaseProperties">
<Description><![CDATA[
This is the Template Message Queue Class that contains the core Message Queue Properties that are
to every Message Queue used in all DFI Interfaces.<BR>

When a Queue class is created it will inherit these properties and then define additional properties
that will be used to identify a specific Patient. In the case of the ODS we will have a reference to
a Patient and what data event has occurred in Clinicom and how that event affects the Patient in
the ODS. The prime example of this is the HPRS Bulk Export Interface and the HPRS Trickle Feed
Interface.<BR>

In the HPRS Bulk Export we build a list of patients where we create a Message Queue record
for every Patient in the DW.Modules.PMI.Patient table, whereas the HPRS Trickle feed is driven by
Ensemble Request Messages (Messages.TransactionLog) that drives the Clinicom to ODS Trickle Feed
Iterface.<br>

The Messages.TransactionLog Request Message references the Clinicom Log Type, Transaction Type
and Action which resolves down to a Patient in an ODS Module which are PMI, In-Patients, Out-Patients
or Service Groups. The Transaction Type indicates whether the data event is a direct update to the
Patient or a data event relating to the Patients In-Patient Episode such as an In-Patient Transfer
or an Out-Patient Appointment. The Action indicates the CRUD type (Add, Revise, Delete, Merge).<br>

So, when we define a new Message Queue Class, we inherit the properties from this Abstract class
and then define additional properties that are specific to the the data from the Source Namespace.
Messages are either created in response to some actiity in the Source Namespace such as a request
message passing through an Interface in the source namespace or by proactive logic in the DFI
interface such as running an SQL query that produces a result set of Patients which we then
use to create messages in the Message Queue.<br>

If the Source Namespace is the ODS and we are doing a bulk export of ODS Patients into EMCI, then
the DFI Interface will execute an SQL query that selects records from the DW_Module_PMI.Patient
table and creates messages in the 'Patient List' message queue. Once the List of Patients has been created
the different Business service then processes that list and generates FHIR messages to send to EMCI.<br>

At the same time the Clinicom to ODS Trickle feed will be creating messages in the DFI ODS to EMCI
trickle feed message queue using data from the Messages.TransactionLog request messages passing through
tghe Clinicom to ODS Trickle Feed.<br>

If the data source is an EMCI database and we are running 'Use Case' Tests in the DFI Test Module
then we introduce the concept of a Test Manifest which will contain a number of Manifest Records
where each Manifest Record reference a Master Consumer Record and the Test definition that contains
the Test Rules to be applied to those Master Consumer records in the Manifest. The Manifest can
contain anywhere between 1 and 1000 Master Consumers. Linked to the Manifest is the Test Definition
which consists of one or more Test Rules that modify specific properties in that Master Consumer
records and records from the related Master Consumer Tables such as Address, Contact, Names.
Read the documentation in the Test Module to understand how the Test Module works.<br>

The Message Queue Classes have the following properties in common:<br>
Three time stamps: CreateTS, ProcessTS and CompletedTS.<BR>
The CreateTS is set to the current Date/Time when a new message is Instantiated.<BR>
The ProcessTS is set when the Method GetNextMessage() is called and the method finds a message
that has not been processed. The ProcessTS is updated with the Current Date/Time.<BR>
The CompletedTS is updated when the Message has gone through the cycle of Business Service -> 
Business Process -> Business Operation and back to the Business Process and back to the Business
Service.<BR>

Typically the Business Process will call the CompleteMessage() method from the OnProcessResponse()
method when it can be updated with the outcome of the Operations to send the message contents to
another application and optionally to File and optionally to EMail. It is the response from the
target Application that is the most important. We need to know that the message has been delivered
successfully to the target application and whether the application has accepted the request message
which it does by sending back a response message typically an HL7 ACK Message, a FHIR Operation Outcome
message or a FHIR Resource (Patient, Encounter or a Bundle of Patients, Encounters).<BR>

If the message has not been successful then we need to know if the problem was technical e.g.
the Connection to the Application is unavailable, the target Application is down or there
is an issue with our Operation Adapter. If these scenarios are detected then two things will happen:
An Alert Notification will be sent to the Target Application Administrators.
When the connection is restored, any messages that failed during the period when connectivity
was lost can be resent. The best way to resend a message is to set the CompletedTS and
ProcessTS timestamps to NULL, set fields such as HL7 ACK Code, HTTP Status Code, TCP Status Code
to NULL. IsError and Error Message set to $$$OK and NULL. When the Business Service
that processes the Message Queue calls the GetNextMessage() method it will find those messages
and reprocess them.<BR>

If a message is rejected or the message and request type (FHIR Interaction, HL7 Merge ....) is
not accepted based on the logic of the target Application then the result of this transaction
will be sent as a Notification of the Application Administrators and they may have the option to
reprocess that Interaction with say, Data Steward Priveledges.<BR>

Analysis of failed messages can be done by identifying messages that are complete and in Error.
The ability to resend a specific message can be done using the same tequnique as the resending
of a batch of messages that failed due to connection down issues.<BR>

Messages can also be created through a UI  or programmatically through a method Call.
The Message Queue Classes all have the same generic methods CreatMessage(), GetNextMessage()
UpdateMessageQueue(), CompleteMessage(), ResendMessage(), ResendDateRange() and PurgeMesssages().<BR>

Any class that can be Inherited or Copied must use $classmethod() to run methods within
that Message Queue Class and $Property() to Set or Get Property Names and Values. In particular
the Properties in a Message Queue record that are specific to that Message Queue are 
passed into these methods in the form of an array of Name/Value Pairs. The Timestamp fields cannot
be passed in the Name/Value array as they are controlled by the Queue Class Methods only.<br>

There are other Messge Queue Properties that are generic to every message queue class (and influenced by
the type of message and the transport mechanism that sends the message body to a target application.
These properties can be updated by a UI or through the {Property Name}/{Property Value} Arrray.<br>

These properties are generally related to the JSON, HL7, Text, XML Body Content and the
File Directory and File Name properties used to create the files into which the Body Contents
are written. This applies to both Request and Response Messages. An HL7 Request Message will
have a complimentary HL7 Response Message in the form of an HL7 ACK Message.<BR>
A FHIR JSON Request Message (if there is one) will have a corresponding FHIR JSON Response Message
which will typically be the JSON for a FHIR Resource, a FHIR Bundle of One or More FHIR Resource
JSON Objects.<BR>

In order for there to be Individual Queues in each Interface the Message Queue Class has to be mapped
to the Source Interface Namespace. The Source Interface will call a method that will create
messages for all Iterfaces that are driven by that Interface. For example the Clinicom to ODS
Trickle Feed Interface will create messages in the HPRS Interface and the ODS to EMCI Interface and
the other HL7 Interfaces<br>

In order to facilitate this there is a class in the Source Interface Namespace,
<b>Robot.Common.Interface.InterfaceMappingDetails</b> that is a list of Interface Names, the Namespace in which
the Interface is running, the Message Queue Class Name of the message queue that drives the
Interfaces in those namespaces. The property IsProduction indicates whether the target Interface
is the 'Live' or 'Production' namespace and the property IsActive indicates whether the target
Interface is Active or not.<BR>
]]></Description>
<Abstract>1</Abstract>
<IncludeCode>DFIInclude</IncludeCode>
<TimeChanged>65889,29477.521592</TimeChanged>
<TimeCreated>65889,10106.477583</TimeCreated>

<Property name="CreateTS">
<Description>
This is a system Property and should not be updated by the developer</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$ZDatetime($Horolog,3)</InitialExpression>
</Property>

<Property name="ProcessTS">
<Description>
This is a system Property and should not be updated by the developer</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="CompletedTS">
<Description>
This is a system Property and should not be updated by the developer</Description>
<Type>%String</Type>
</Property>

<Property name="MessageStatus">
<Description>
The Message Status is a system property and will be determined when the Develloper calls the CompleteMessage() method
by passing in a vallid %Status value reflecting the Status at the time the method is called.</Description>
<Type>%Status</Type>
<InitialExpression>$$$OK</InitialExpression>
</Property>

<Property name="MessageStatusText">
<Description>
This is the Message Text that gives more information on the Message Status. Typically it will
be the contents of the %Status Code in Message Status but there may be many error conditions
that can be passed to the UpdateMessage() method and the CompleteMessage() method. These messages
are appended to the current message.MessageStatusText</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="5000"/>
</Property>

<Property name="TargetDocumentType">
<Description>
This may be specifed by the developer or if a copy class has been created where this is known then use
[InitialValue] to set the value and on instantiation the property will assume that value. The Response message
has the same property and should be set by the developer when he creates the Response Message</Description>
<Type>%String</Type>
<Parameter name="DISPLAYLIST" value=",HL7,FHIR,JSON,SQL"/>
<Parameter name="VALUELIST" value=",H,F,J,S"/>
</Property>

<Property name="SourceHL7RequestMessage">
<Description>
This is the HL7 Request Message that will be created by the Business Process and the Message Object
will be updated by the Business Process with the HL7 Message it creates. This must be set by the developer</Description>
<Type>EnsLib.HL7.Message</Type>
</Property>

<Property name="TargetHL7ResponseMessage">
<Description>
This should be the HL7 Response Message or as in the HPRS Interface it is the OK/Error Status Message Text.
In the exampple FHIR Response Messsage Class there is a property for the FHIR Resource Content for this purpose</Description>
<Type>EnsLib.HL7.Message</Type>
</Property>

<Property name="SourceFHIRRequestMessage">
<Description>
The FHIR JSON Request Message Created by the Business Process</Description>
<Type>%CharacterStream</Type>
</Property>

<Property name="TargetFHIRResponseMessage">
<Description>
The FHIR JSON Response Message received by the HTTP/HTTPS FHIR Business Operation</Description>
<Type>%CharacterStream</Type>
</Property>

<Property name="TargetResponseLocation">
<Description>
If the FHIR HTTP Operation Recieves a Location in the HTTPResponse Header put it in this property</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="TargetResponseStatus">
<Description>
This is the response returned by the External system and it will be either the HTTP Status in the case of HTTP operations
It can be the Error Code of an HL7 NACK or the HTTP status or it can be an interpretation of a combination of the
Adapter Response Status as well as a status embedded in the response body.</Description>
<Type>%String</Type>
<InitialExpression>$$$OK</InitialExpression>
</Property>

<Property name="TargetResponseStatusText">
<Description>
The Response Status Text is a Readable interpretation of the Response Status. If the Response Status
is an HTTP Status code and in the CompleteMessage() method a value for the Response Status Text
is not specified the logic will try and interpret the ResponseStatusText as the HTTPCodeDescription</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="5000"/>
</Property>

<Property name="TimeTakenFromCreateToComplete">
<Description>
This is a system property and should not be updated by the developer</Description>
<Type>%Integer</Type>
</Property>

<Property name="TimeTakenFromProcessingToComplete">
<Description>
This is a system property and should not be updated by the developer</Description>
<Type>%Integer</Type>
</Property>
</Class>


<Class name="Robot.Common.Alerts.AlertConditions">
<Description>
The Alert Conditions differ from Alert Errors in that they are intended as Information Messages rather than Warning or
Error Messages. This class is a child class of Robot.Common.Alerts.ProductionAlerts</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65881,1764.006586</TimeChanged>
<TimeCreated>63792,68094.646765</TimeCreated>

<Property name="ConditionID">
<Description>
A meaningful Condition Type that is used as way of grouping different Conditions</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Property name="ConditionText">
<Description>
The Condition Message Text</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="ConditionCount">
<Description>
The Condition Count is incremented each time a new record is created for this ConditionID</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="ConditionCountAlert">
<Description>
How many Condition Alerts must be created for this ConditionID before a notification is sent</Description>
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="ConditionCountAlertInterval">
<Description>
After a Condition Notification is sent then this Interval is the number of seconds that must elapse before another 
Notification is sent. Once a Notification is sent then the ErrorCount is reset to 0</Description>
<Type>%Time</Type>
<InitialExpression>"300"</InitialExpression>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="LastAlertDT">
<Description>
The Date/Time that the last Notification was sent out</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($h,3)</InitialExpression>
</Property>

<Property name="RecipientList">
<Description>
The Email List to whom the Notifications are sent. If not sspecified then the Recipient List is inherited from the 
ProductionAlerts class</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>ConditionID</Properties>
<Unique>1</Unique>
</Index>

<Property name="ProductionItem">
<Type>Robot.Common.Alerts.ProductionAlerts</Type>
<Cardinality>parent</Cardinality>
<Inverse>Conditions</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="ConditionAlert">
<Description>
Create a Condition Alert Record for the Production Item and Condition</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>configitem:%String="",condition:%String="",conditiontext:%String(MAXLEN=500)="",count:%Integer=1,interval:%Time=600</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,conditiontext=$g(conditiontext)
	try {
		if '$l(configitem) set tSC=$system.Status.Error(5001,"Unable to create condition alert. Config Item not defined") quit
		if '$l(condition) set tSC=$system.Status.Error(5001,"Unable to create condition alert. Condition not defined") quit
		set id=configitem_"||"_condition
		set alert=##class(Robot.Common.Alerts.AlertConditions).%OpenId(id)
		if '$IsObject(alert) {
			set alert=##class(Robot.Common.Alerts.AlertConditions).%New()
			do alert.ProductionItemSetObjectId(configitem)
			set alert.ConditionID=condition
		}
		set alert.ConditionCount=alert.ConditionCount+1,alert.ConditionText=conditiontext,alert.ConditionCountAlert=count,alert.ConditionCountAlertInterval=interval,tSC=alert.%Save() if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"AlertCondition","Alert Condition Save Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("Conditions")</DataLocation>
<DefaultData>AlertConditionsDefaultData</DefaultData>
<IdLocation>^Robot.Common.AlertConditionsC("Conditions")</IdLocation>
<IndexLocation>^Robot.Common.AlertConditionsI</IndexLocation>
<StreamLocation>^Robot.Common.AlertConditionsS</StreamLocation>
<Data name="AlertConditionsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ConditionText</Value>
</Value>
<Value name="3">
<Value>ConditionCount</Value>
</Value>
<Value name="4">
<Value>ConditionCountAlert</Value>
</Value>
<Value name="5">
<Value>ConditionCountAlertInterval</Value>
</Value>
<Value name="6">
<Value>LastAlertDT</Value>
</Value>
<Value name="7">
<Value>RecipientList</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Alerts.AlertErrors">
<Description>
This class holds the Alert Errors.  Error Alerts typically are raised when there are communication failures
or unexpected Code Error Exceptions. This class is a child class of Robot.Common.Alerts.ProductionAlerts.</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65881,3076.776318</TimeChanged>
<TimeCreated>63792,68094.646765</TimeCreated>

<Property name="ErrorID">
<Description>
The ErrorID is a meaningful string that defines the type of Error or Warning</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Property name="ErrorText">
<Description>
The Error Text Message</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="ErrorCount">
<Description>
The Error Count is icremented each time an Error with this ErrorID is created</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="ErrorCountAlert">
<Description>
This property indicates how many times must the error occur before an Alert is raised
If this property is set to -1 then no Notification will be sent for this Error Type</Description>
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="ErrorCountAlertInterval">
<Description>
After an Error Alert Notification is sent out the Error Count is </Description>
<Type>%Time</Type>
<InitialExpression>"300"</InitialExpression>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="LastAlertDT">
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($h,3)</InitialExpression>
</Property>

<Property name="RecipientList">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>ErrorID</Properties>
<Unique>1</Unique>
</Index>

<Property name="ProductionItem">
<Type>Robot.Common.Alerts.ProductionAlerts</Type>
<Cardinality>parent</Cardinality>
<Inverse>Errors</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="ErrorAlert">
<ClassMethod>1</ClassMethod>
<FormalSpec>pConfigItem:%String="",pErrorID:%String="",pErrorText:%String(MAXLEN=500)="",pCount:%Integer=1,pInterval:%Time=600</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,pErrorText=$g(pErrorText)
	try {
		if '$l(pConfigItem) set tSC=$$$ERROR(5001,"Unable to create error alert. Config Item not defined") quit
		if '$l(pErrorID) set tSC=$$$ERROR(5001,"Unable to create error alert. Error ID not defined") quit
		set id=pConfigItem_"||"_pErrorID
		set alert=##class(Robot.Common.Alerts.AlertErrors).%OpenId(id)
		if '$IsObject(alert) {
			set alert=##class(Robot.Common.Alerts.AlertErrors).%New()
			do alert.ProductionItemSetObjectId(pConfigItem)
			set alert.ErrorID=pErrorID
		}
		set alert.ErrorCount=alert.ErrorCount+1,alert.ErrorText=pErrorText,alert.ErrorCountAlert=pCount,alert.ErrorCountAlertInterval=pInterval,tSC=alert.%Save() if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"ErrorAlert","Error Alert Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("Errors")</DataLocation>
<DefaultData>AlertErrorsDefaultData</DefaultData>
<IdLocation>^Robot.Common.AlertErrorsC("Errors")</IdLocation>
<IndexLocation>^Robot.Common.AlertErrorsI</IndexLocation>
<StreamLocation>^Robot.Common.AlertErrorsS</StreamLocation>
<Data name="AlertErrorsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ErrorText</Value>
</Value>
<Value name="3">
<Value>ErrorCount</Value>
</Value>
<Value name="4">
<Value>ErrorCountAlert</Value>
</Value>
<Value name="5">
<Value>ErrorCountAlertInterval</Value>
</Value>
<Value name="6">
<Value>LastAlertDT</Value>
</Value>
<Value name="7">
<Value>RecipientList</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Alerts.ProductionAlerts">
<Description><![CDATA[
The ProdunctioAlerts Class Deals with the Production Item Queues. It checks to see how many entries there
are in the Queue for a Production Item and if that Queue exceeds The QueueSizeAlert then an Error Notification
is sent to the appropriate Recipients. The check is performed every 30 Minutes and if the Queue is still
too long then the Alert Notifiction is re-sent<br>
It then processes all Error Condiftions by Production Item Name and follows the rules of those Error
Conditions to see if the Error Condition Still Persists. It is does another Alert Notification is sent<br>
Likewise it processes Alert Conditions in the same way as Error Alerts<br>
The Business Service Robot.Common.Service.AlertNotificationService processes the Production Alerts,
Along with Error and Condition Alerts.<br>]]></Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65881,2355.493048</TimeChanged>
<TimeCreated>63792,68150.310989</TimeCreated>

<Property name="ProductionItem">
<Description>
For the purposes of Global Mappings the Global Names in the Storage Definition have been modified to
be more readable than the Ensemble generated Global Names. This Parameter informs the developer that
should they delete the Storage Definition then they should replace the Glabal Names with the Value in
the Parameter where the * = D, I or SParameter GlobalName = "^Robot.Common.ProdAlerts*";
The Production Item Name</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="ProductionItemClassName">
<Description>
The Production Item Class</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="QueueSizeAlert">
<Description>
The number of items awaiting processing in the queue before a warning Notification is sent out
If QueueSizeAlert=-1 Queue Warning Notifications will not be sent out</Description>
<Type>%Integer</Type>
<InitialExpression>10</InitialExpression>
</Property>

<Property name="QueueSizeAlertInterval">
<Description>
The Interval of Time before another Alert Notification is sent out if the error condition persists</Description>
<Type>%Time</Type>
<InitialExpression>"900"</InitialExpression>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="QueueSizeAlertLastDT">
<Description>
The Date/Time when the last Notification was sent</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($h,3)</InitialExpression>
</Property>

<Property name="RecipientList">
<Description><![CDATA[
The Email list of recipients who will receive these Notifications. The ErrorAlerts
and ConditionAlerts also have Recipient Lists so it is possible to target different
individuals for the different forms of Errors/Warnings/Conditions.<br>
If the Recipient list is not defined at the lower level then they inherit this
Recipient List ]]></Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="ErrorRecipientList">
<Description>
Error Recipient List</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="ConditionRecipientList">
<Description>
Condition Recipient List</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>ProductionItem</Properties>
<Unique>1</Unique>
</Index>

<Property name="Errors">
<Description>
The Error Alerts Parent-Child Relationship</Description>
<Type>Robot.Common.Alerts.AlertErrors</Type>
<Cardinality>children</Cardinality>
<Inverse>ProductionItem</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Conditions">
<Description>
The Condition Alerts Parent-Child Relationship</Description>
<Type>Robot.Common.Alerts.AlertConditions</Type>
<Cardinality>children</Cardinality>
<Inverse>ProductionItem</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="BuildProductionAlertItems">
<Description>
This method builds a list of Production Items in the Production</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		#dim tConfig as Robot.Common.Configuration.ConfigurationSettings
		set tSC=##class(Robot.Common.Configuration.ConfigurationSettings).GetConfigurationSettings(,.tConfig,.tSettings) if 'tSC quit
		set tSC=##class(Robot.Common.Alerts.ProductionAlerts).%DeleteExtent() if 'tSC quit
		set tConfigItem="" for {
			set tConfigItem=$o(^Ens.Runtime("ConfigItem",tConfigItem)) quit:tConfigItem=""
			if tConfigItem["%" continue
			if (tConfigItem["Ens."!(tConfigItem["EnsLib."))&&(tConfigItem'="Ens.Alert") continue
			set item=##class(Robot.Common.Alerts.ProductionAlerts).%OpenId(tConfigItem)
			if '$IsObject(item) {set item=##class(Robot.Common.Alerts.ProductionAlerts).%New(),item.ProductionItem=tConfigItem,item.ProductionItemClassName=$g(^Ens.Runtime("ConfigItem",tConfigItem,"ClassName"))}
			// the Configuration DFIAlertNotificationEMailList is required.
			set item.RecipientList=tConfig.DFIAlertNotificationEmailList
			set item.ErrorRecipientList=tConfig.DFIErrorAlertEmailList if '$l(item.ErrorRecipientList) set item.ErrorRecipientList=item.RecipientList
			// If there is no Condition Recipient List default it to the Error Recipient List which
			// will either be the Error Recipient List from the Configuration List or it will be
			// the Recipient List derived from the Configuration Alert Notification List
			set item.ConditionRecipientList=tConfig.DFIConditionAlertEmailList if '$l(item.ConditionRecipientList) set item.ConditionRecipientList=item.ErrorRecipientList
			set tSC=item.%Save()
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"BuildProductionAlerts","Build Production Alerts Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.ProdAlertsD</DataLocation>
<DefaultData>ProductionAlertsDefaultData</DefaultData>
<IdLocation>^Robot.Common.ProdAlertsD</IdLocation>
<IndexLocation>^Robot.Common.ProdAlertsI</IndexLocation>
<StreamLocation>^Robot.Common.ProdAlertsS</StreamLocation>
<Data name="ProductionAlertsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ProductionItemClassName</Value>
</Value>
<Value name="3">
<Value>QueueSizeAlert</Value>
</Value>
<Value name="4">
<Value>QueueSizeAlertInterval</Value>
</Value>
<Value name="5">
<Value>QueueSizeAlertLastDT</Value>
</Value>
<Value name="6">
<Value>RecipientList</Value>
</Value>
<Value name="7">
<Value>ErrorRecipientList</Value>
</Value>
<Value name="8">
<Value>ConditionRecipientList</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.CodeTableMappings.FacilityCodeMappings">
<Description>
This Table maintains a list of WCG Facility Codes and their National Department of Health 6-digit
Facility Code. The class supports creating an Export File of rows as well as an Import From File Function.
This is usefule when wanting to recreate this file without using Global Inport or Export function</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent</Super>
<TimeChanged>65880,84448.463923</TimeChanged>
<TimeCreated>65486,43693.162325</TimeCreated>

<Parameter name="GlobalName">
<Description>
For the purposes of Global Mappings the Global Names in the Storage Definition have been modified to
be more readable than the Ensemble generated Global Names. This Parameter informs the developer that
should they delete the Storage Definition then they should replace the Glabal Names with the Value in
the Parameter where the * = D, I or S</Description>
<Default>^Robot.Common.CodeTM.Facility*</Default>
</Parameter>

<Property name="WCGFacilityCode">
<Type>%String</Type>
</Property>

<Property name="NationalDOHFacilityCode">
<Type>%String</Type>
</Property>

<Property name="FacilityName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>WCGFacilityCode</Properties>
<Unique>1</Unique>
</Index>

<Index name="DOHidx">
<Properties>NationalDOHFacilityCode</Properties>
</Index>

<Method name="ExportDataToFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>file:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if '$l(file) set tSC=$$$ERROR(5001,"File name cannot be NULL") quit
		open file:("WNS"):0
		else  set tSC=$$$ERROR(5001,"Cannot open file: "_file) quit
		use file w "WC Facility Code",$c(9),"WC Facility Name",$c(9),"National Code",!
		set sql="select WCGFacilityCode, FacilityName, NationalDOHFacilityCode from Robot_Common_CodeTableMappings.FacilityCodeMappings"
		set rs=##class(%ResultSet).%New("%DynamicQuery:SQL")
		set tSC=rs.Prepare(sql) if 'tSC quit
		set tSC=rs.Execute() if 'tSC quit
		while rs.Next() {
			use file w rs.Data("WCGFacilityCode"),$c(9),rs.Data("FacilityName"),$c(9),rs.Data("NationalDOHFacilityCode"),!
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	if $l(file) close file
	quit tSC
]]></Implementation>
</Method>

<Method name="LoadDataFromFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>file:%String="",pContainsHeader:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if '$l(file) set tSC=$$$ERROR(5001,"File name cannot be NULL") quit
		set tSC=##class(Robot.Common.CodeTableMappings.FacilityCodeMappings).%DeleteExtent() if 'tSC quit
		open file:("R"):0
		else  set tSC=$$$ERROR(5001,"Cannot open file: "_file) quit
		if pContainsHeader use file read header
		use 0 w !,"Header: "_header
		for {
			use file read x if x="<ENDOFFILE>" quit
			set wcc=$p(x,$c(9),1),wcd=$p(x,$c(9),2),ntc=$p(x,$c(9),3)
			set obj=##class(Robot.Common.CodeTableMappings.FacilityCodeMappings).%OpenId(wcc)
			if '$IsObject(wcc) set obj=##class(Robot.Common.CodeTableMappings.FacilityCodeMappings).%New(),obj.WCGFacilityCode=wcc
			set obj.FacilityName=wcd,obj.NationalDOHFacilityCode=ntc
			set sc=obj.%Save() if 'sc u 0 w !,$system.Status.GetErrorText(sc)
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	close file
	quit tSC
]]></Implementation>
</Method>

<Method name="GetNationalCode">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pWCGFacilityCode:%String="",&pNationalCode:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set tSC=$$$OK
	try {
        if pWCGFacilityCode="" {set pNationalCode="" quit}
        &sql(select NationalDOHFacilityCode into :pNationalCode from Robot_Common_CodeTableMappings.FacilityCodeMappings
        where WCGFacilityCode=:pWCGFacilityCode)
        if SQLCODE {set pNationalCode="" $$$DebugLog($username,"Facility_National_Code_Missing",pWCGFacilityCode,.dSC)}
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.CodeTM.FacilityD</DataLocation>
<DefaultData>FacilityCodeMappingsDefaultData</DefaultData>
<IdLocation>^Robot.Common.CodeTM.FacilityD</IdLocation>
<IndexLocation>^Robot.Common.CodeTM.FacilityI</IndexLocation>
<StreamLocation>^Robot.Common.CodeTM.FacilityS</StreamLocation>
<Data name="FacilityCodeMappingsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>NationalDOHFacilityCode</Value>
</Value>
<Value name="3">
<Value>FacilityName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.CodeTableMappings.HL7AddressTypeMappings">
<Description>
This Table is used to map ODS/DW Address Type Codes to HL7 Address Type Codes and their Description.
The class supports creating an Export File of rows as well as an Import From File Function.
This is useful when wanting to recreate this file without using Global Inport or Export function</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent</Super>
<TimeChanged>65881,358.651571</TimeChanged>
<TimeCreated>65497,73700.197085</TimeCreated>

<Parameter name="GlobalName">
<Description>
For the purposes of Global Mappings the Global Names in the Storage Definition have been modified to
be more readable than the Ensemble generated Global Names. This Parameter informs the developer that
should they delete the Storage Definition then they should replace the Glabal Names with the Value in
the Parameter where the * = D, I or S</Description>
<Default>^Robot.Common.CodeTM.HL7Address*</Default>
</Parameter>

<Property name="mfAddressTypeCode">
<Type>%String</Type>
</Property>

<Property name="HL7AddressTypeCode">
<Type>%String</Type>
</Property>

<Property name="HL7AddressTypeDescription">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>mfAddressTypeCode</Properties>
<Unique>1</Unique>
</Index>

<Method name="GetHL7AddressTypeCode">
<ClassMethod>1</ClassMethod>
<FormalSpec>pAddressType:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,tAddressType=""
	try {
		if '$l(pAddressType) quit
		&sql(select HL7AddressTypeCode into :tAddressType from Robot_Common_CodeTableMappings.HL7AddressTypeMappings
		where mfAddressTypeCode = :pAddressType)
		if SQLCODE {set tAddressType=""}
	}
	catch ex {
		set tAddressType=""
	}
	quit tAddressType
]]></Implementation>
</Method>

<Method name="GetHL7AddressTypeDescription">
<ClassMethod>1</ClassMethod>
<FormalSpec>pAddressType:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,tAddressTypeDesc=""
	try {
		if '$l(pAddressType) quit
		&sql(select HL7AddressTypeDescription into :tAddressTypeDesc from Robot_Common_CodeTableMappings.HL7AddressTypeMappings
		where mfAddressTypeCode = :pAddressType)
		if SQLCODE {set tAddressType=""}
	}
	catch ex {
		set tAddressTypeDesc=""
	}
	quit tAddressTypeDesc
]]></Implementation>
</Method>

<Method name="LoadDataFromFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>file:%String="",pContainsHeader:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if '$l(file) set tSC=$$$ERROR(5001,"File name cannot be NULL") quit
		set tSC=##class(Robot.Common.CodeTableMappings.HL7AddressTypeMappings).%DeleteExtent()
		open file:("R"):0
		else  set tSC=$$$ERROR(5001,"Cannot open file: "_file) quit
		if pContainsHeader use file read header use 0 w !,"Header: "_header
		for {
			use file read rec if rec="<ENDOFFILE>" quit
			set obj=##class(Robot.Common.CodeTableMappings.HL7AddressTypeMappings).%OpenId(rec,$c(9),1)
			if '$IsObject(obj) set obj=##class(Robot.Common.CodeTableMappings.HL7AddressTypeMappings).%New(),obj.mfAddressTypeCode=$p(rec,$c(9),1)
			set obj.HL7AddressTypeCode=$p(rec,$c(9),2),obj.HL7AddressTypeDescription=$p(rec,$c(9),3)
			set sc=obj.%Save() if 'sc u 0 w !,$system.Status.GetErrorText(sc)
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	close file
	w !,"Status: ",$s(tSC:"OK",1:$$$GetErrorText(tSC)),!
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.CodeTM.HL7AddressD</DataLocation>
<DefaultData>HL7AddressTypeMappingsDefaultData</DefaultData>
<IdLocation>^Robot.Common.CodeTM.HL7AddressD</IdLocation>
<IndexLocation>^Robot.Common.CodeTM.HL7AddressI</IndexLocation>
<StreamLocation>^Robot.Common.CodeTM.HL7AddressS</StreamLocation>
<Data name="HL7AddressTypeMappingsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>HL7AddressTypeCode</Value>
</Value>
<Value name="3">
<Value>HL7AddressTypeDescription</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.CodeTableMappings.HL7ContactTypeMappings">
<Description>
This class Maps ODS/DW mfContactTypes to HL7ContactTypeCode and Description as well as HL7 Contact
Equipment Code and Description. It does this as there is only one mfContactType table that covers
bothe the Location and the Equipment TYpe</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65881,455.692637</TimeChanged>
<TimeCreated>65461,61793.655504</TimeCreated>

<Parameter name="GlobalName">
<Description>
For the purposes of Global Mappings the Global Names in the Storage Definition have been modified to
be more readable than the Ensemble generated Global Names. This Parameter informs the developer that
should they delete the Storage Definition then they should replace the Glabal Names with the Value in
the Parameter where the * = D, I or S</Description>
<Default>^Robot.Common.CodeTM.HL7Contact*</Default>
</Parameter>

<Property name="mfContactTypeCode">
<Type>%String</Type>
</Property>

<Property name="HL7ContactTypeCode">
<Type>%String</Type>
</Property>

<Property name="HL7ContactTypeDescription">
<Type>%String</Type>
</Property>

<Property name="HL7ContactEquipmentTypeCode">
<Type>%String</Type>
</Property>

<Property name="HL7ContactEquipmentTypeDescription">
<Type>%String</Type>
</Property>

<Index name="mfCode">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>mfContactTypeCode</Properties>
<Unique>1</Unique>
</Index>

<Index name="hl7Code">
<Properties>HL7ContactTypeCode</Properties>
</Index>

<Method name="GetHL7ContactTypeCode">
<ClassMethod>1</ClassMethod>
<FormalSpec>pmfContactTypeCode:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,tHL7Code=""
	try {
		if pmfContactTypeCode="" quit
		&sql(select HL7ContactTypeCode into :tHL7Code from Robot_Common_CodeTableMappings.HL7ContactTypeMappings where mfContactTypeCode=:pmfContactTypeCode)
	}
	catch ex {
		set tHL7Code=""
	}
	quit tHL7Code
]]></Implementation>
</Method>

<Method name="GetHL7ContactEquipmentTypeCode">
<ClassMethod>1</ClassMethod>
<FormalSpec>pmfContactTypeCode:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,tHL7Code=""
	try {
		if pmfContactTypeCode="" quit
		&sql(select HL7ContactEquipmentTypeCode into :tHL7Code from Robot_Common_CodeTableMappings.HL7ContactTypeMappings where mfContactTypeCode=:pmfContactTypeCode)
	}
	catch ex {
		set tHL7Code=""
	}
	quit tHL7Code
]]></Implementation>
</Method>

<Method name="GetHL7ContactTypeDescription">
<ClassMethod>1</ClassMethod>
<FormalSpec>pmfContactTypeCode:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,tHL7Description=""
	try {
		if pmfContactTypeCode="" quit
		&sql(select HL7ContactTypeDescription into :tHL7Description from Robot_Common_CodeTableMappings.HL7ContactTypeMappings where mfContactTypeCode=:pmfContactTypeCode)
	}
	catch ex {
		set tHL7Description=""
	}
	quit tHL7Description
]]></Implementation>
</Method>

<Method name="GetHL7ContactEquipmentTypeDescription">
<ClassMethod>1</ClassMethod>
<FormalSpec>pmfContactTypeCode:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,tHL7Description=""
	try {
		if pmfContactTypeCode="" quit
		&sql(select HL7ContactEquipmentTypeDescription into :tHL7Description from Robot_Common_CodeTableMappings.HL7ContactTypeMappings where mfContactTypeCode=:pmfContactTypeCode)
	}
	catch ex {
		set tHL7Description=""
	}
	quit tHL7Description
]]></Implementation>
</Method>

<Method name="GetmfContactTypeCode">
<ClassMethod>1</ClassMethod>
<FormalSpec>pHL7ContactTypeCode:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,tmfCode=""
	try {
		if pHL7ContactTypeCode="" quit
		&sql(select mfContactTypeCode into :tmfCode from Robot_Common_CodeTableMappings.HL7ContactTypeMappings where HL7ContactTypeCode=:pHL7ContactTypeCode)
	}
	catch ex {
		set tmfCode=""
	}
	quit tmfCode
]]></Implementation>
</Method>

<Method name="LoadDataFromFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>file:%String="",pContainsHeader:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if '$l(file) set tSC=$$$ERROR(5001,"File name cannot be NULL") quit
		set tSC=##class(Robot.Common.CodeTableMappings.HL7ContactTypeMappings).%DeleteExtent()
		open file:("R"):0
		else  set tSC=$$$ERROR(5001,"Cannot open file: "_file) quit
		if pContainsHeader use file read header use 0 w !,"Header: "_header
		for {
			use file read rec if rec="<ENDOFFILE>" quit
			set mfc=$p(rec,$c(9),1),htc=$p(rec,$c(9),2),htd=$p(rec,$c(9),3),hetc=$p(rec,$c(9),4),hetd=$p(rec,$c(9),5)
			set obj=##class(Robot.Common.CodeTableMappings.HL7ContactTypeMappings).%OpenId(rec,$c(9),1)
			if '$IsObject(obj) set obj=##class(Robot.Common.CodeTableMappings.HL7ContactTypeMappings).%New(),obj.mfContactTypeCode=mfc
			set obj.HL7ContactTypeCode=htc,obj.HL7ContactTypeDescription=htd,obj.HL7ContactEquipmentTypeCode=hetc,obj.HL7ContactEquipmentTypeDescription=hetd
			set sc=obj.%Save() if 'sc u 0 w !,$system.Status.GetErrorText(sc)
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	close file
	w !,"Status: ",$s(tSC:"OK",1:$$$GetErrorText(tSC)),!
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.CodeTM.HL7ContactD</DataLocation>
<DefaultData>HL7ContactTypeMappingsDefaultData</DefaultData>
<IdLocation>^Robot.Common.CodeTM.HL7ContactD</IdLocation>
<IndexLocation>^Robot.Common.CodeTM.HL7ContactI</IndexLocation>
<StreamLocation>^Robot.Common.CodeTM.HL7ContactS</StreamLocation>
<Data name="HL7ContactTypeMappingsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>HL7ContactTypeCode</Value>
</Value>
<Value name="3">
<Value>HL7ContactTypeDescription</Value>
</Value>
<Value name="4">
<Value>HL7ContactEquipmentTypeCode</Value>
</Value>
<Value name="5">
<Value>HL7ContactEquipmentTypeDescription</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.CodeTableMappings.HL7GenderTypeMappings">
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent</Super>
<TimeChanged>65881,617.085119</TimeChanged>
<TimeCreated>65499,36191.120791</TimeCreated>

<Parameter name="GlobalName">
<Description>
For the purposes of Global Mappings the Global Names in the Storage Definition have been modified to
be more readable than the Ensemble generated Global Names. This Parameter informs the developer that
should they delete the Storage Definition then they should replace the Glabal Names with the Value in
the Parameter where the * = D, I or S</Description>
<Default>^Robot.Common.CodeTM.HL7Gender*</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Note for this to work the mfGenderCode should be the 'Key' field from the

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// DW_Masterfiles.mfGender

]]></Content>
</UDLText>

<Property name="mfGenderCode">
<Type>%String</Type>
</Property>

<Property name="HL7GenderCode">
<Type>%String</Type>
</Property>

<Property name="HL7GenderDescription">
<Type>%String</Type>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>mfGenderCode</Properties>
<Unique>1</Unique>
</Index>

<Method name="GetHL7GenderCode">
<ClassMethod>1</ClassMethod>
<FormalSpec>pmfGenderCode:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,tHL7Code=""
	try {
		if '$l(pmfGenderCode) quit
		&sql(select HL7GenderCode into :tHL7Code from Robot_Common_CodeTableMappings.HL7GenderTypeMappings
		where mfGenderCode = :pmfGenderCode)
	}
	catch ex {set tSC=ex.AsStatus(),tHL7Code=""}
	$$$DebugLog($username,"HL7GenderCode","Outcome: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tHL7Code
]]></Implementation>
</Method>

<Method name="GetHL7GenderDescription">
<ClassMethod>1</ClassMethod>
<FormalSpec>pmfGenderCode:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,tHL7Description=""
	try {
		if '$l(pmfGenderCode) quit
		&sql(select HL7GenderDescription into :tHL7Description from Robot_Common_CodeTableMappings.HL7GenderTypeMappings
		where mfGenderCode = :pmfGenderCode)
	}
	catch ex {set tSC=ex.AsStatus(),tHL7Description=""}
	$$$DebugLog($username,"HL7GenderDescription","Outcome: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tHL7Description
]]></Implementation>
</Method>

<Method name="LoadDataFromFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>file:%String="",pContainsHeader:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if '$l(file) set tSC=$$$ERROR(5001,"File name cannot be NULL") quit
		set tSC=##class(Robot.Common.CodeTableMappings.HL7GenderTypeMappings).%DeleteExtent()
		open file:("R"):0
		else  set tSC=$$$ERROR(5001,"Cannot open file: "_file) quit
		if pContainsHeader use file read header use 0 w !,"Header: "_header
		for {
			use file read rec if rec="<ENDOFFILE>" quit
			set obj=##class(Robot.Common.CodeTableMappings.HL7GenderTypeMappings).%OpenId(rec,$c(9),1)
			if '$IsObject(obj) set obj=##class(Robot.Common.CodeTableMappings.HL7GenderTypeMappings).%New(),obj.mfGenderCode=$p(rec,$c(9),1)
			set obj.HL7GenderCode=$p(rec,$c(9),2),obj.HL7GenderDescription=$p(rec,$c(9),3)
			set sc=obj.%Save() if 'sc u 0 w !,$system.Status.GetErrorText(sc)
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	close file
	w !,"Status: ",$s(tSC:"OK",1:$$$GetErrorText(tSC)),!
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.CodeTM.HL7GenderD</DataLocation>
<DefaultData>HL7GenderTypeMappingsDefaultData</DefaultData>
<IdLocation>^Robot.Common.CodeTM.HL7GenderD</IdLocation>
<IndexLocation>^Robot.Common.CodeTM.HL7GenderI</IndexLocation>
<StreamLocation>^Robot.Common.CodeTM.HL7GenderS</StreamLocation>
<Data name="HL7GenderTypeMappingsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>HL7GenderCode</Value>
</Value>
<Value name="3">
<Value>HL7GenderDescription</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.CodeTableMappings.HL7MaritalStatusMappings">
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent</Super>
<TimeChanged>65881,552.936793</TimeChanged>
<TimeCreated>65499,36191.120791</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Note for this to work the mfMaritalStatusCode should be the 'Key' field from the

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// DW_Masterfiles.mfMaritalStatus

]]></Content>
</UDLText>

<Parameter name="GlobalName">
<Description>
For the purposes of Global Mappings the Global Names in the Storage Definition have been modified to
be more readable than the Ensemble generated Global Names. This Parameter informs the developer that
should they delete the Storage Definition then they should replace the Glabal Names with the Value in
the Parameter where the * = D, I or S</Description>
<Default>^Robot.Common.CodeTM.HL7Marital*</Default>
</Parameter>

<Property name="mfMaritalStatusCode">
<Type>%String</Type>
</Property>

<Property name="HL7MaritalStatusCode">
<Type>%String</Type>
</Property>

<Property name="HL7MaritalStatusDescription">
<Type>%String</Type>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>mfMaritalStatusCode</Properties>
<Unique>1</Unique>
</Index>

<Method name="GetHL7MaritalStatusCode">
<ClassMethod>1</ClassMethod>
<FormalSpec>pmfMaritalStatusCode:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,tHL7Code=""
	try {
		if '$l(pmfMaritalStatusCode) quit
		&sql(select HL7MaritalStatusCode into :tHL7Code from Robot_Common_CodeTableMappings.HL7MaritalStatusMappings
		where mfMaritalStatusCode = :pmfMaritalStatusCode)
	}
	catch ex {set tSC=ex.AsStatus(),tHL7Code=""}
	$$$DebugLog($username,"HL7MaritalStatusCode","Outcome: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tHL7Code
]]></Implementation>
</Method>

<Method name="GetHL7MaritalStatusDescription">
<ClassMethod>1</ClassMethod>
<FormalSpec>pmfMaritalStatusCode:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,tHL7Description=""
	try {
		if '$l(pmfMaritalStatusCode) quit
		&sql(select HL7MaritalStatusDescription into :tHL7Description from Robot_Common_CodeTableMappings.HL7MaritalStatusMappings
		where mfMaritalStatusCode = :pmfMaritalStatusCode)
	}
	catch ex {set tSC=ex.AsStatus(),tHL7Description=""}
	$$$DebugLog($username,"HL7MaritalStatusDescription","Outcome: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tHL7Description
]]></Implementation>
</Method>

<Method name="LoadDataFromFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>file:%String="",pContainsHeader:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if '$l(file) set tSC=$$$ERROR(5001,"File name cannot be NULL") quit
		set tSC=##class(Robot.Common.CodeTableMappings.HL7MaritalStatusMappings).%DeleteExtent()
		open file:("R"):0
		else  set tSC=$$$ERROR(5001,"Cannot open file: "_file) quit
		if pContainsHeader use file read header use 0 w !,"Header: "_header
		for {
			use file read rec if rec="<ENDOFFILE>" quit
			set obj=##class(Robot.Common.CodeTableMappings.HL7MaritalStatusMappings).%OpenId(rec,$c(9),1)
			if '$IsObject(obj) set obj=##class(Robot.Common.CodeTableMappings.HL7MaritalStatusMappings).%New(),obj.mfMaritalStatusCode=$p(rec,$c(9),1)
			set obj.HL7MaritalStatusCode=$p(rec,$c(9),2),obj.HL7MaritalStatusDescription=$p(rec,$c(9),3)
			set sc=obj.%Save() if 'sc u 0 w !,$system.Status.GetErrorText(sc)
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	close file
	w !,"Status: ",$s(tSC:"OK",1:$$$GetErrorText(tSC)),!
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.CodeTM.HL7MaritalD</DataLocation>
<DefaultData>HL7MaritalStatusMappingsDefaultData</DefaultData>
<IdLocation>^Robot.Common.CodeTM.HL7MaritalD</IdLocation>
<IndexLocation>^Robot.Common.CodeTM.HL7MaritalI</IndexLocation>
<StreamLocation>^Robot.Common.CodeTM.HL7MaritalS</StreamLocation>
<Data name="HL7MaritalStatusMappingsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>HL7MaritalStatusCode</Value>
</Value>
<Value name="3">
<Value>HL7MaritalStatusDescription</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.CodeTableMappings.HL7NOKRelationshipMappings">
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent</Super>
<TimeChanged>65881,724.80006</TimeChanged>
<TimeCreated>65492,21799.038762</TimeCreated>

<Parameter name="GlobalName">
<Description>
For the purposes of Global Mappings the Global Names in the Storage Definition have been modified to
be more readable than the Ensemble generated Global Names. This Parameter informs the developer that
should they delete the Storage Definition then they should replace the Glabal Names with the Value in
the Parameter where the * = D, I or S</Description>
<Default>^Robot.Common.CodeTM.HL7NOK*</Default>
</Parameter>

<Property name="mfNextOfKinRelationshipCode">
<Type>%String</Type>
</Property>

<Property name="HL7NextOfKinRelationshipCode">
<Type>%String</Type>
</Property>

<Property name="HL7NextOfKinRelationshipDescription">
<Type>%String</Type>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>mfNextOfKinRelationshipCode</Properties>
<Unique>1</Unique>
</Index>

<Index name="HL7idx">
<Properties>HL7NextOfKinRelationshipCode</Properties>
</Index>

<Method name="GetHL7NextOfKinRelationshipCode">
<ClassMethod>1</ClassMethod>
<FormalSpec>pmfNOKRelCode:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,tHL7NOKRelCode="UNK"
	try {
		if pmfNOKRelCode="" quit
		&sql(select HL7NextOfKinRelationshipCode into :tHL7NOKRelCode
			from Robot_Common_CodeTableMappings.HL7NOKRelationshipMappings
			where mfNextOfKinRelationshipCode = :pmfNOKRelCode)
		if SQLCODE {$$$DebugLog($username,"mfNextOfKinRelationshipCode","Code: "_pmfNOKRelCode_" does not exist in the NOK Mapping Table",.dSC)}
	}
	catch ex {set tSC=ex.AsStatus(),tHL7NOKRelCode="UNK"}
	$$$DebugLog($username,"HL7NextOfKinRelationshipCode","Outcome: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tHL7NOKRelCode
]]></Implementation>
</Method>

<Method name="GetHL7NextOfKinRelationshipDescription">
<ClassMethod>1</ClassMethod>
<FormalSpec>pmfNOKRelCode:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,tHL7NOKRelDescription="UNKNOWN"
	try {
		if pmfNOKRelCode="" quit
		&sql(select HL7NextOfKinRelationshipDescription into :tHL7NOKRelDesc
			from Robot_Common_CodeTableMappings.HL7NOKRelationshipMappings
			where mfNextOfKinRelationshipCode = :pmfNOKRelCode)
		if SQLCODE {set tSC=$$$ERROR(5001,"NOK Relationship Code: "_pmfNOKRelCode_" does not exist in the NOK Mapping Table") quit}
	}
	catch ex {set tSC=ex.AsStatus(),tHL7NOKRelDesc=""}
	$$$DebugLog($username,"HL7NextOfKinRelationshipDescription","Outcome: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tHL7NOKRelDescription
]]></Implementation>
</Method>

<Method name="LoadDataFromFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>file:%String="",pContainsHeader:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if '$l(file) set tSC=$$$ERROR(5001,"File name cannot be NULL") quit
		set tSC=##class(Robot.Common.CodeTableMappings.HL7NOKRelationshipMappings).%DeleteExtent()
		open file:("R"):0
		else  set tSC=$$$ERROR(5001,"Cannot open file: "_file) quit
		if pContainsHeader use file read header use 0 w !,"Header: "_header
		for {
			use file read rec if rec="<ENDOFFILE>" quit
			set obj=##class(Robot.Common.CodeTableMappings.HL7NOKRelationshipMappings).%OpenId(rec,$c(9),1)
			if '$IsObject(obj) set obj=##class(Robot.Common.CodeTableMappings.HL7NOKRelationshipMappings).%New(),obj.mfNextOfKinRelationshipCode=$p(rec,$c(9),1)
			set obj.HL7NextOfKinRelationshipCode=$p(rec,$c(9),2),obj.HL7NextOfKinRelationshipDescription=$p(rec,$c(9),3)
			set sc=obj.%Save() if 'sc u 0 w !,$system.Status.GetErrorText(sc)
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	close file
	w !,"Status: ",$s(tSC:"OK",1:$$$GetErrorText(tSC)),!
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.CodeTM.HL7NOKD</DataLocation>
<DefaultData>HL7NOKRelationshipMappingsDefaultData</DefaultData>
<IdLocation>^Robot.Common.CodeTM.HL7NOKD</IdLocation>
<IndexLocation>^Robot.Common.CodeTM.HL7NOKI</IndexLocation>
<StreamLocation>^Robot.Common.CodeTM.HL7NOKS</StreamLocation>
<Data name="HL7NOKRelationshipMappingsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>HL7NextOfKinRelationshipCode</Value>
</Value>
<Value name="3">
<Value>HL7NextOfKinRelationshipDescription</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.CodeTableMappings.LookupReference">
<Description>
An alternative implementation of the ODS FHIR.Lookup Class
Needs a mechanism to pass back the additional information I have included</Description>
<IncludeCode>DFIInclude</IncludeCode>
<StorageStrategy/>
<Super>%Persistent</Super>
<TimeChanged>65880,84494.560953</TimeChanged>
<TimeCreated>64891,45620.060394</TimeCreated>

<Parameter name="GlobalName">
<Description>
For the purposes of Global Mappings the Global Names in the Storage Definition have been modified to
be more readable than the Ensemble generated Global Names. This Parameter informs the developer that
should they delete the Storage Definition then they should replace the Glabal Names with the Value in
the Parameter where the * = D, I or S</Description>
<Default>^Robot.Common.CodeTM.LookupRef*</Default>
</Parameter>

<Property name="Type">
<Description>
This indicates the possible mf{Code_Table_Name} that the DW code comes from</Description>
<Type>%String</Type>
</Property>

<Property name="DWCode">
<Type>%String</Type>
</Property>

<Property name="DWmfCodeTableName">
<Type>%String</Type>
</Property>

<Property name="FHIRCode">
<Type>%String</Type>
</Property>

<Property name="FHIRURL">
<Type>%String</Type>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Property name="AssigningAuthority">
<Type>%String</Type>
</Property>

<Index name="I1">
<Properties>Type,DWCode</Properties>
</Index>

<Index name="I2">
<Properties>Type,FHIRCode</Properties>
</Index>

<Method name="Lookup">
<ClassMethod>1</ClassMethod>
<FormalSpec>pType:%String,pCode:%String,pDefault:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,tReturnCode=""
	try {
		if pCode="" quit
		&SQL(SELECT FHIRCode INTO :tReturnCode FROM Robot_Common_CodeTableMappings.LookupReference WHERE Type = :pType AND DWCode = :pCode)
		if SQLCODE {set tReturnCode = pDefault}
		
		//Need to run through 14million records to update the correct Gender. This is an alternative so long.
		//Not needed as the mappings was tweaked/fixed.
		// NTS - What abount "unknown"
		/*if (pType = "Gender")
		{
			if tReturnCode = "other" {set tReturnCode = "female"}
			elseif tReturnCode = "female" {set tReturnCode = "male"}
			elseif tReturnCode = "other" {set tReturnCode = "other"}
			elseif (tReturnCode = "male") {set tReturnCode = "other"}
		}*/
	}
	catch ex {set tSC=ex.AsStatus()}
	if 'tSC $$$DebugLog($username,"DFI FHIR Lookup","Lookup Type: "_pType_" Code: "_pCode_" FHIR: "_tReturnCode_" SQLCODE: "_$g(SQLCODE)_" Lookup Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	q tReturnCode
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.CodeTM.LookupRefD</DataLocation>
<DefaultData>LookupReferenceDefaultData</DefaultData>
<IdLocation>^Robot.Common.CodeTM.LookupRefD</IdLocation>
<IndexLocation>^Robot.Common.CodeTM.LookupRefI</IndexLocation>
<StreamLocation>^Robot.Common.CodeTM.LookupRefS</StreamLocation>
<Data name="LookupReferenceDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Type</Value>
</Value>
<Value name="3">
<Value>DWCode</Value>
</Value>
<Value name="4">
<Value>DWmfCodeTableName</Value>
</Value>
<Value name="5">
<Value>FHIRCode</Value>
</Value>
<Value name="6">
<Value>FHIRURL</Value>
</Value>
<Value name="7">
<Value>AssigningAuthority</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.CodeTables.Actions">
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65881,2567.115141</TimeChanged>
<TimeCreated>65478,85560.625921</TimeCreated>

<Parameter name="GlobalName">
<Description>
For the purposes of Global Mappings the Global Names in the Storage Definition have been modified to
be more readable than the Ensemble generated Global Names. This Parameter informs the developer that
should they delete the Storage Definition then they should replace the Glabal Names with the Value in
the Parameter where the * = D, I or S</Description>
<Default>^Robot.Common.CodeT.Actions*</Default>
</Parameter>

<Property name="Action">
<Description><![CDATA[
Actions are typically functions that give context to a Transaction Type. So for instance
if a transaction type indicates a Patient and the addition, revision or deletion of a patient
then the Action would be specifid as ADD, REVISE or DELETE<br>
However not all transaction types have actions associated with them in which case the Action needs to
have a default alternative which is "NONE". The reason for needing a cop out action is that Action Codes
are referenced in the class Robot.Common.CodeTables.EventTypeMapping where Action forms part of the primary
key structure of the objects in that class and as a primary key field value cannot be null there needs to
be a non null option that is not ADD, REVISE, DELETE, PURGE. Hence NONE<br>]]></Description>
<Type>%String</Type>
<InitialExpression>"ADD"</InitialExpression>
<Parameter name="VALUELIST" value=",ADD,REVISE,DELETE,PURGE,NONE"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Action</Properties>
<Unique>1</Unique>
</Index>

<Method name="CreateActionData">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Add some comment
	set tSC=$$$OK
	try {
		set tSC=##class(Robot.Common.CodeTables.Actions).%DeleteExtent() if 'tSC quit
		for action="ADD","REVISE","DELETE","PURGE","NONE" {set obj=..%New(),obj.Action=action,tSC=obj.%Save() if 'tSC quit}
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"CreateActionData","Create Action Data Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.CodeT.ActionsD</DataLocation>
<DefaultData>ActionsDefaultData</DefaultData>
<IdLocation>^Robot.Common.CodeT.ActionsD</IdLocation>
<IndexLocation>^Robot.Common.CodeT.ActionsI</IndexLocation>
<StreamLocation>^Robot.Common.CodeT.ActionsS</StreamLocation>
<Data name="ActionsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.CodeTables.EventTypeMapping">
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65880,84624.69786</TimeChanged>
<TimeCreated>65479,4359.711491</TimeCreated>

<Parameter name="GlobalName">
<Description>
For the purposes of Global Mappings the Global Names in the Storage Definition have been modified to
be more readable than the Ensemble generated Global Names. This Parameter informs the developer that
should they delete the Storage Definition then they should replace the Glabal Names with the Value in
the Parameter where the * = D, I or S</Description>
<Default>^Robot.Common.CodeT.EventMap*</Default>
</Parameter>

<Property name="TransactionType">
<Type>Robot.Common.CodeTables.TransactionTypes</Type>
</Property>

<Property name="LogType">
<Type>Robot.Common.CodeTables.LogTypes</Type>
</Property>

<Property name="Action">
<Type>Robot.Common.CodeTables.Actions</Type>
</Property>

<Property name="HL7MessageCode">
<Type>%String</Type>
<InitialExpression>"ADT"</InitialExpression>
</Property>

<Property name="HL7TriggerEvent">
<Type>%String</Type>
</Property>

<Property name="HL7MessageStructure">
<Type>%String</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HL7RequiredSegments">
<Type>%ListOfDataTypes</Type>
</Property>

<Property name="VisitType">
<Type>Robot.Common.CodeTables.VisitTypes</Type>
</Property>

<Property name="Enabled">
<Description>
If the Enabled flag is not set then the message will be ignored and deleted</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="AdditionalSegmentAssigns">
<Description>
The Additional Segment Assigns List is a mechanism where specific Segment Fields can be assigned a value
outside of the Patient To HL7 Message DTL
The 'Key' of the list is the HL7 Segment and Field Name reference
The 'Value' is the value to be assigned to that Segment Field
Values can be specified using the following syntax:
   Literal Value: "Literal Value"
   Cache expression: {expression} e.g. {$zdt($h,3)} to assign a date to the field
   Object Property Reference: [objectreference.propertyname]
   - the objectreference can be a simple oref
	   - the objectreference can be a chained reference in the form oref.class....class
   - the objectreference can be a chained reference including list elements in the form oref.list.GetAt(key)
   - The propertyname is the property that contains the value to be assigned
Values can be a complex structure that mixes one or more of the three forms:
For example {$zdt([oref...list.GetAt(key)...propertyname],3)}_"AM"
At run time the value will be evaluated and then assigned using the programatic syntax for
interacting with an HL7 Segment Field. as:
set status=hl7message.SetValueAt(Value,"PIDgrpgrp(1).PIDgrp.PID:FieldName","set","")
This mechanism will work for the initial implementation of this project but may require further
enhancements or an alternative mechanism for achieving the desired funtionality if this mechanism
proves to be limiting or too complex</Description>
<Type>%ListOfDataTypes</Type>
</Property>

<Property name="EventTypeDescription">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>LogType,TransactionType,Action</Properties>
<Unique>1</Unique>
</Index>

<Method name="CreateEventTypeMappingData">
<Description>
This method creates the data for this class
And some more comments</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=$classmethod($classname(),"%DeleteExtent") if 'tSC quit
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(7) do obj.ActionSetObjectId("ADD")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A01",obj.EventTypeDescription="In Patient Admission Add"
		do obj.VisitTypeSetObjectId("I") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:7:ADD:I An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(7) do obj.ActionSetObjectId("DELETE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A11",obj.EventTypeDescription="In Patient Admission Delete"
		do obj.VisitTypeSetObjectId("I") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:7:DELETE:I An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(7) do obj.ActionSetObjectId("REVISE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A01",obj.EventTypeDescription="In Patient Admission Revise"
		do obj.VisitTypeSetObjectId("I") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:7:REVISE:I An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(10) do obj.ActionSetObjectId("ADD")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A02",obj.EventTypeDescription="In Patient Transfer Add"
		do obj.VisitTypeSetObjectId("I") set obj.Enabled=0
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:10:ADD:I An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(10) do obj.ActionSetObjectId("DELETE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A12",obj.EventTypeDescription="In Patient Transfer Delete"
		do obj.VisitTypeSetObjectId("I") set obj.Enabled=0
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:10:DELETE:I An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(10) do obj.ActionSetObjectId("REVISE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A02",obj.EventTypeDescription="In Patient Transfer Revise"
		do obj.VisitTypeSetObjectId("I") set obj.Enabled=0
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:10:REVISE:I An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(11) do obj.ActionSetObjectId("ADD")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A03",obj.EventTypeDescription="In Patient Discharge Add"
		do obj.VisitTypeSetObjectId("I") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:11:ADD:I An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(11) do obj.ActionSetObjectId("DELETE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A13",obj.EventTypeDescription="In Patient Discharge Delete"
		do obj.VisitTypeSetObjectId("I") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:11:DELETE:I An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(11) do obj.ActionSetObjectId("REVISE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A03",obj.EventTypeDescription="In Patient Discharge Revise"
		do obj.VisitTypeSetObjectId("I") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:11:REVISE:I An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(12) do obj.ActionSetObjectId("REVISE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A03",obj.EventTypeDescription="In Patient Discharge Completed"
		do obj.VisitTypeSetObjectId("I") set obj.Enabled=0
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:12:REVISE:I An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(16) do obj.ActionSetObjectId("PURGE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="",obj.EventTypeDescription="In Patient Admission Purged"
		do obj.VisitTypeSetObjectId("I") set obj.Enabled=0
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:16:PURGE:I An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(34) do obj.ActionSetObjectId("ADD")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A01",obj.EventTypeDescription="Out Patient Add"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:34:ADD:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(34) do obj.ActionSetObjectId("REVISE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A01",obj.EventTypeDescription="Out Patient Revise"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:34:REVISE:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(34) do obj.ActionSetObjectId("DELETE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A11",obj.EventTypeDescription="Out Patient Delete"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:34:DELETE:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(40) do obj.ActionSetObjectId("ADD")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A08",obj.EventTypeDescription="Patient Add"
		do obj.VisitTypeSetObjectId("N") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:40:ADD:N An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(40) do obj.ActionSetObjectId("DELETE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A23",obj.EventTypeDescription="Patient Delete"
		do obj.VisitTypeSetObjectId("N") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:40:DELETE:N An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(40) do obj.ActionSetObjectId("REVISE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A08",obj.EventTypeDescription="Patient Revise"
		do obj.VisitTypeSetObjectId("N") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:40:REVISE:N An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(44) do obj.ActionSetObjectId("ADD")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A08",obj.EventTypeDescription="Patient Add"
		do obj.VisitTypeSetObjectId("N") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:44:ADD:N An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(44) do obj.ActionSetObjectId("DELETE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A23",obj.EventTypeDescription="Patient Delete"
		do obj.VisitTypeSetObjectId("N") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:44:DELETE:N An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(44) do obj.ActionSetObjectId("REVISE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A08",obj.EventTypeDescription="Patient Revise"
		do obj.VisitTypeSetObjectId("N") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:44:REVISE:N An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(41) do obj.ActionSetObjectId("DELETE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A39",obj.EventTypeDescription="PMI Merge Delete"
		do obj.VisitTypeSetObjectId("N") set obj.Enabled=0
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:41:DELETE:N An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("ADTL") do obj.TransactionTypeSetObjectId(42) do obj.ActionSetObjectId("ADD")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A40",obj.EventTypeDescription="PMI Merge Add"
		do obj.VisitTypeSetObjectId("N") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","ADTL:42:ADD:N An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("CPTL") do obj.TransactionTypeSetObjectId(40) do obj.ActionSetObjectId("ADD")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A01",obj.EventTypeDescription="Service Group"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","CPTL:40:ADD:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("CPTL") do obj.TransactionTypeSetObjectId(40) do obj.ActionSetObjectId("ADD")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A01",obj.EventTypeDescription="Service Group Appointment"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","CPTL:40:ADD:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("CPTL") do obj.TransactionTypeSetObjectId(50) do obj.ActionSetObjectId("ADD")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A01",obj.EventTypeDescription="Service Group Appointment"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","CPTL:50:ADD:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("CPTL") do obj.TransactionTypeSetObjectId(51) do obj.ActionSetObjectId("ADD")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A01",obj.EventTypeDescription="Service Group Appointment"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","CPTL:51:ADD:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("CPTL") do obj.TransactionTypeSetObjectId(52) do obj.ActionSetObjectId("ADD")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A01",obj.EventTypeDescription="Service Group Appointment"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","CPTL:52:ADD:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("CPTL") do obj.TransactionTypeSetObjectId(50) do obj.ActionSetObjectId("DELETE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A01",obj.EventTypeDescription="Service Group Appointment"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","CPTL:50:DELETE:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("CPTL") do obj.TransactionTypeSetObjectId(51) do obj.ActionSetObjectId("DELETE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A11",obj.EventTypeDescription="Service Group Appointment"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","CPTL:51:DELETE:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("CPTL") do obj.TransactionTypeSetObjectId(52) do obj.ActionSetObjectId("DELETE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A11",obj.EventTypeDescription="Service Group Appointment"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","CPTL:52:DELETE:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("SHTL") do obj.TransactionTypeSetObjectId(61) do obj.ActionSetObjectId("ADD")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A11",obj.EventTypeDescription="Out Patient Service Add"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","SHTL:61:ADD:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("SHTL") do obj.TransactionTypeSetObjectId(62) do obj.ActionSetObjectId("ADD")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A01",obj.EventTypeDescription="Out Patient Service Add"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","SHTL:52:ADD:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("SHTL") do obj.TransactionTypeSetObjectId(63) do obj.ActionSetObjectId("ADD")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A01",obj.EventTypeDescription="Out Patient Service"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","SHTL:63:ADD:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("SHTL") do obj.TransactionTypeSetObjectId(64) do obj.ActionSetObjectId("ADD")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A01",obj.EventTypeDescription="Out Patient Service"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","SHTL:64:ADD:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("SHTL") do obj.TransactionTypeSetObjectId(65) do obj.ActionSetObjectId("ADD")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A01",obj.EventTypeDescription="Out Patient Service"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","SHTL:65:ADD:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("SHTL") do obj.TransactionTypeSetObjectId(61) do obj.ActionSetObjectId("REVISE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A01",obj.EventTypeDescription="Out Patient Service"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","SHTL:61:REVISE:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("SHTL") do obj.TransactionTypeSetObjectId(62) do obj.ActionSetObjectId("REVISE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A01",obj.EventTypeDescription="Out Patient Service"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","SHTL:62:REVISE:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("SHTL") do obj.TransactionTypeSetObjectId(63) do obj.ActionSetObjectId("REVISE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A01",obj.EventTypeDescription="Out Patient Service"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","SHTL:63:REVISE:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("SHTL") do obj.TransactionTypeSetObjectId(64) do obj.ActionSetObjectId("REVISE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A01",obj.EventTypeDescription="Out Patient Service"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","SHTL:64:REVISE:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("SHTL") do obj.TransactionTypeSetObjectId(65) do obj.ActionSetObjectId("REVISE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A01",obj.EventTypeDescription="Out Patient Service"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","SHTL:65:REVISE:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("SHTL") do obj.TransactionTypeSetObjectId(61) do obj.ActionSetObjectId("DELETE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A11",obj.EventTypeDescription="Out Patient Service"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","SHTL:61:DELETE:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("SHTL") do obj.TransactionTypeSetObjectId(62) do obj.ActionSetObjectId("DELETE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A11",obj.EventTypeDescription="Out Patient Service"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","SHTL:62:DELETE:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("SHTL") do obj.TransactionTypeSetObjectId(63) do obj.ActionSetObjectId("DELETE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A11",obj.EventTypeDescription="Out Patient Service"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","SHTL:63:DELETE:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("SHTL") do obj.TransactionTypeSetObjectId(64) do obj.ActionSetObjectId("DELETE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A11",obj.EventTypeDescription="Out Patient Service"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","SHTL:64:DELETE:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
		set obj=##class(Robot.Common.CodeTables.EventTypeMapping).%New()
		do obj.LogTypeSetObjectId("SHTL") do obj.TransactionTypeSetObjectId(65) do obj.ActionSetObjectId("DELETE")
		set obj.HL7MessageCode="ADT",obj.HL7TriggerEvent="A11",obj.EventTypeDescription="Out Patient Service"
		do obj.VisitTypeSetObjectId("O") set obj.Enabled=1
		set tSC=obj.%Save() if 'tSC $$$DebugLog($username,"HL7 Event Type Mapping","SHTL:65:DELETE:O An Error Occured: "_$$$GetErrorText(tSC) ,.dSC)
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"HL7 Event Type Mapping","Create Hl7 Event Type Mapping Status: "_$s(tSC:1,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="HL7MessageStructureGet">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tMessageStructure="ADT_A01"
	try {
		if "*A01*A04*A08*A13*"[..HL7TriggerEvent {set tMessageStructure="ADT_A01"}
		elseif "*A05*A14*A28*A31"[..HL7TriggerEvent {set tMessageStructure="ADT_A05"}
		elseif "*A06*A07"[..HL7TriggerEvent {set tMessageStructure="ADT_A06"}
		elseif "*A09*A10*A11"[..HL7TriggerEvent {set tMessageStructure="ADT_A09"}
		elseif "*A21*A22*A23*A25*A26*A27*A29*A32*A33"[..HL7TriggerEvent {set tMessageStructure="ADT_A21"}
		elseif "*A30*A34*A35*A36*A46*A47*A48*A49"[..HL7TriggerEvent {set tMessageStructure="ADT_A30"}
		elseif "*A39*A40*A41*A42"[..HL7TriggerEvent {set tMessageStructure="ADT_A39"}
		elseif "*A43*A44"[..HL7TriggerEvent {set tMessageStructure="ADT_A43"}
		elseif "*A50*A51"[..HL7TriggerEvent {set tMessageStructure="ADT_A50"}
		elseif "*A52*A53*A55"[..HL7TriggerEvent {set tMessageStructure="ADT_A52"}
		elseif "*A61*A62"[..HL7TriggerEvent {set tMessageStructure="ADT_A61"}
		else {set tMessageStructure="ADT_"_..HL7TriggerEvent}
	}
	catch ex {
		set tSC=ex.AsStatus()
	}
	quit tMessageStructure
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.CodeT.EventMapD</DataLocation>
<DefaultData>EventTypeMappingDefaultData</DefaultData>
<IdLocation>^Robot.Common.CodeT.EventMapD</IdLocation>
<IndexLocation>^Robot.Common.CodeT.EventMapI</IndexLocation>
<StreamLocation>^Robot.Common.CodeT.EventMapS</StreamLocation>
<Data name="EventTypeMappingDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>HL7MessageCode</Value>
</Value>
<Value name="3">
<Value>HL7TriggerEvent</Value>
</Value>
<Value name="4">
<Value>HL7RequiredSegments</Value>
</Value>
<Value name="5">
<Value>VisitType</Value>
</Value>
<Value name="6">
<Value>Enabled</Value>
</Value>
<Value name="7">
<Value>AdditionalSegmentAssigns</Value>
</Value>
<Value name="8">
<Value>EventTypeDescription</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.CodeTables.HTTPMethods">
<Description>
This code table contains a list of HTTP Methods such as POST, PUT, DELETE, LINK and so on
It is used by the Test Module and implicitly HL7 messages sent to an HTTP Server where the Default
HTTP Method is POST.</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65880,84633.74421</TimeChanged>
<TimeCreated>65860,77450.184027</TimeCreated>

<Parameter name="GlobalName">
<Description>
For the purposes of Global Mappings the Global Names in the Storage Definition have been modified to
be more readable than the Ensemble generated Global Names. This Parameter informs the developer that
should they delete the Storage Definition then they should replace the Glabal Names with the Value in
the Parameter where the * = D, I or S</Description>
<Default>^Robot.Common.CodeT.HTTPMethods*</Default>
</Parameter>

<Property name="HTTPMethod">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",GET,POST,PUT,DELETE,LINK,UNLINK"/>
</Property>

<Property name="HTTPMethodDescription">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="FHIRInteractionName">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",read,search,create,update,delete,link,unlink"/>
</Property>

<Property name="IHISInteractionName">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",Read,Search,Insert,Revise,Delete,Merge,Unmerge"/>
</Property>

<Method name="CreateHTTPMethods">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=##class(Robot.Common.CodeTables.HTTPMethods).%DeleteExtent() if 'tSC quit
		set obj=##class(Robot.Common.CodeTables.HTTPMethods).%New()
		set obj.HTTPMethod="GET",obj.HTTPMethodDescription="Retrieve a Resource",obj.FHIRInteractionName="read",obj.IHISInteractionName="Read"
		set tSC=obj.%Save() if 'tSC quit
		set obj=##class(Robot.Common.CodeTables.HTTPMethods).%New()
		set obj.HTTPMethod="POST",obj.HTTPMethodDescription="Create a Resource",obj.FHIRInteractionName="create",obj.IHISInteractionName="Insert"
		set tSC=obj.%Save() if 'tSC quit
		set obj=##class(Robot.Common.CodeTables.HTTPMethods).%New()
		set obj.HTTPMethod="GET",obj.HTTPMethodDescription="Search for Resources",obj.FHIRInteractionName="search",obj.IHISInteractionName="Search"
		set tSC=obj.%Save() if 'tSC quit
		set obj=##class(Robot.Common.CodeTables.HTTPMethods).%New()
		set obj.HTTPMethod="DELETE",obj.HTTPMethodDescription="Delete a Resource",obj.FHIRInteractionName="delete",obj.IHISInteractionName="Delete"
		set tSC=obj.%Save() if 'tSC quit
		set obj=##class(Robot.Common.CodeTables.HTTPMethods).%New()
		set obj.HTTPMethod="LINK",obj.HTTPMethodDescription="Link a Resource",obj.FHIRInteractionName="link",obj.IHISInteractionName="Merge"
		set tSC=obj.%Save() if 'tSC quit
		set obj=##class(Robot.Common.CodeTables.HTTPMethods).%New()
		set obj.HTTPMethod="UNLINK",obj.HTTPMethodDescription="Unlink a Resource",obj.FHIRInteractionName="unlink",obj.IHISInteractionName="Unmerge"
		set tSC=obj.%Save() if 'tSC quit
		set obj=##class(Robot.Common.CodeTables.HTTPMethods).%New()
		set obj.HTTPMethod="PUT",obj.HTTPMethodDescription="Update a Resource",obj.FHIRInteractionName="update",obj.IHISInteractionName="Revise"
		set tSC=obj.%Save() if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"CreateHTTPMethods","Create HTTP Methods Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.CodeT.HTTPMethodsD</DataLocation>
<DefaultData>HTTPMethodsDefaultData</DefaultData>
<IdLocation>^Robot.Common.CodeT.HTTPMethodsD</IdLocation>
<IndexLocation>^Robot.Common.CodeT.HTTPMethodsI</IndexLocation>
<StreamLocation>^Robot.Common.CodeT.HTTPMethodsS</StreamLocation>
<Data name="HTTPMethodsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>HTTPMethod</Value>
</Value>
<Value name="3">
<Value>HTTPMethodDescription</Value>
</Value>
<Value name="4">
<Value>FHIRInteractionName</Value>
</Value>
<Value name="5">
<Value>IHISInteractionName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.CodeTables.HTTPStatusCodes">
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65880,84641.91789</TimeChanged>
<TimeCreated>65478,85440.309337</TimeCreated>

<Parameter name="GlobalName">
<Description>
For the purposes of Global Mappings the Global Names in the Storage Definition have been modified to
be more readable than the Ensemble generated Global Names. This Parameter informs the developer that
should they delete the Storage Definition then they should replace the Glabal Names with the Value in
the Parameter where the * = D, I or S</Description>
<Default>^Robot.Common.CodeT.HTTPStatus*</Default>
</Parameter>

<Property name="HTTPCode">
<Type>%String</Type>
</Property>

<Property name="HTTPCodeDescription">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>HTTPCode</Properties>
<Unique>1</Unique>
</Index>

<Method name="LoadDataFromFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>pHTTPFile:%String(MAXLEN=200)="",pContainsHeader:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=..%DeleteExtent() if 'tSC quit
		set tSC=##class(Robot.Common.CodeTables.HTTPStatusCodes).%DeleteExtent() if 'tSC quit
		if '$l(pHTTPFile) set tSC=$$$ERROR(5001,"HTTP Status Codes File not Specified") quit
		open pHTTPFile:("R"):0
		if '$t set tSC=$$$ERROR(5001,"Unable to open HTTP Status Codes File: "_pHTTPFile) quit
		if pContainsHeader use pHTTPFile read header use 0 w !,"header: ",header
		for {
			use pHTTPFile read rec if rec="<ENDOFFILE>" quit
			set obj=..%New()
			set obj.HTTPCode=$p(rec,$c(9),1),obj.HTTPCodeDescription=$p(rec,$c(9),2),tSC=obj.%Save() if 'tSC quit
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	if $l(pHTTPFile) close pHTTPFile
	$$$DebugLog($username,"CreateHTTPCodeData","Import Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.CodeT.HTTPStatusD</DataLocation>
<DefaultData>HTTPStatusCodesDefaultData</DefaultData>
<IdLocation>^Robot.Common.CodeT.HTTPStatusD</IdLocation>
<IndexLocation>^Robot.Common.CodeT.HTTPStatusI</IndexLocation>
<StreamLocation>^Robot.Common.CodeT.HTTPStatusS</StreamLocation>
<Data name="HTTPStatusCodesDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>HTTPCodeDescription</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.CodeTables.LogTypes">
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65880,84649.691985</TimeChanged>
<TimeCreated>65478,85440.309337</TimeCreated>

<Parameter name="GlobalName">
<Description>
For the purposes of Global Mappings the Global Names in the Storage Definition have been modified to
be more readable than the Ensemble generated Global Names. This Parameter informs the developer that
should they delete the Storage Definition then they should replace the Glabal Names with the Value in
the Parameter where the * = D, I or S</Description>
<Default>^Robot.Common.CodeT.LogTypes*</Default>
</Parameter>

<Property name="LogType">
<Type>%String</Type>
</Property>

<Property name="LogTypeDescription">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>LogType</Properties>
<Unique>1</Unique>
</Index>

<Method name="CreateLogTypeData">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=..%DeleteExtent() if 'tSC quit
		for log="ADTL","CGTL","CPTL","SHTL" {
			set obj=..%New()
			set obj.LogType=log,obj.LogTypeDescription=log,tSC=obj.%Save() if 'tSC write !,"Cannot save Log Type: "_log_" with Error: "_$$$GetErrorText(tSC)
		}
	}
	catch ex {
		set tSC=ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.CodeT.LogTypesD</DataLocation>
<DefaultData>LogTypesDefaultData</DefaultData>
<IdLocation>^Robot.Common.CodeT.LogTypesD</IdLocation>
<IndexLocation>^Robot.Common.CodeT.LogTypesI</IndexLocation>
<StreamLocation>^Robot.Common.CodeT.LogTypesS</StreamLocation>
<Data name="LogTypesDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>LogTypeDescription</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.CodeTables.SQLCodes">
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65880,84659.117616</TimeChanged>
<TimeCreated>65825,76937.424741</TimeCreated>

<Parameter name="GlobalName">
<Description>
For the purposes of Global Mappings the Global Names in the Storage Definition have been modified to
be more readable than the Ensemble generated Global Names. This Parameter informs the developer that
should they delete the Storage Definition then they should replace the Glabal Names with the Value in
the Parameter where the * = D, I or S</Description>
<Default>^Robot.Common.CodeT.SQLCodes*</Default>
</Parameter>

<Property name="SQLCode">
<Type>%String</Type>
</Property>

<Property name="SQLCodeDescription">
<Type>%String</Type>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>SQLCode</Properties>
<Unique>1</Unique>
</Index>

<Method name="LoadDataFromFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>pSQLCodeFile:%String(MAXLEN=200)="",pContainsHeader:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=$classmethod($classname(),"%DeleteExtent") if 'tSC quit
		if '$l(pSQLCodeFile) set tSC=$$$ERROR(5001,"SQL Codes File not Specified") quit
		open pSQLCodeFile:("R"):0
		if '$t set tSC=$$$ERROR(5001,"Unable to open SQL Codes File: "_pSQLCodeFile) quit
		if pContainsHeader use pSQLCodeFile read header
		for {
			use pSQLCodeFile read line if line="<ENDOFFILE>" quit
			set obj=..%New(),obj.SQLCode=$p(line,$c(9),1),obj.SQLCodeDescription=$p(line,$c(9),2),tSC=obj.%Save() if 'tSC quit
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	if $l(pSQLCodeFile) close pSQLCodeFile
	$$$DebugLog($username,"LoadSQLCodeData","Import Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.CodeT.SQLCodesD</DataLocation>
<DefaultData>SQLCodesDefaultData</DefaultData>
<IdLocation>^Robot.Common.CodeT.SQLCodesD</IdLocation>
<IndexLocation>^Robot.Common.CodeT.SQLCodesI</IndexLocation>
<StreamLocation>^Robot.Common.CodeT.SQLCodesS</StreamLocation>
<Data name="SQLCodesDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>SQLCodeDescription</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.CodeTables.TransactionTypes">
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65880,84303.502705</TimeChanged>
<TimeCreated>65478,85340.797119</TimeCreated>

<Parameter name="GlobalName">
<Description>
For the purposes of Global Mappings the Global Names in the Storage Definition have been modified to
be more readable than the Ensemble generated Global Names. This Parameter informs the developer that
should they delete the Storage Definition then they should replace the Glabal Names with the Value in
the Parameter where the * = D, I or S</Description>
<Default>^Robot.Common.CodeT.Transaction*</Default>
</Parameter>

<Property name="TransactionType">
<Type>%String</Type>
</Property>

<Property name="TransactionTypeDescription">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="IsActive">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>TransactionType</Properties>
<Unique>1</Unique>
</Index>

<Method name="CreateTransactionTypeData">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=..%DeleteExtent(,.pDeleteCount,.pInstanceCount,.pInitializeExtent,.pErrorLog) if 'tSC quit
		for code=7,8,9,10,11,12,16 {set obj=..%New(),obj.TransactionType=code,obj.TransactionTypeDescription="In Patient",tSC=obj.%Save() if 'tSC quit}
		for code=34,61,62,63,64,65 {set obj=..%New(),obj.TransactionType=code,obj.TransactionTypeDescription="Out Patient",tSC=obj.%Save() if 'tSC quit}
		for code=40,41,42,44 {set obj=..%New(),obj.TransactionType=code,obj.TransactionTypeDescription="Patient (PMI)",tSC=obj.%Save() if 'tSC quit}
		for code=50,51,52 {set obj=..%New(),obj.TransactionType=code,obj.TransactionTypeDescription="Service Group",tSC=obj.%Save() if 'tSC quit}
		for code=80 {set obj=..%New(),obj.TransactionType=code,obj.TransactionTypeDescription="Border Escort",tSC=obj.%Save() if 'tSC quit}
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"CreateTransactionTypeData","Create Transaction Types Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.CodeT.TransactionD</DataLocation>
<DefaultData>TransactionTypesDefaultData</DefaultData>
<IdLocation>^Robot.Common.CodeT.TransactionD</IdLocation>
<IndexLocation>^Robot.Common.CodeT.TransactionI</IndexLocation>
<StreamLocation>^Robot.Common.CodeT.TransactionS</StreamLocation>
<Data name="TransactionTypesDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>TransactionTypeDescription</Value>
</Value>
<Value name="3">
<Value>IsActive</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.CodeTables.VisitTypes">
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent</Super>
<TimeChanged>65880,84307.76723</TimeChanged>
<TimeCreated>65486,51971.190648</TimeCreated>

<Parameter name="GlobalName">
<Description>
For the purposes of Global Mappings the Global Names in the Storage Definition have been modified to
be more readable than the Ensemble generated Global Names. This Parameter informs the developer that
should they delete the Storage Definition then they should replace the Glabal Names with the Value in
the Parameter where the * = D, I or S</Description>
<Default>^Robot.Common.CodeT.Visit*</Default>
</Parameter>

<Property name="VisitTypeCode">
<Type>%String</Type>
</Property>

<Property name="VisitTypeDescription">
<Type>%String</Type>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>VisitTypeCode</Properties>
<Unique>1</Unique>
</Index>

<Method name="LoadDataFromFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFile:%String(MAXLEN=300)="",pContainsHeader:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set tSC=$$$OK,AtEnd=0,tCount=0
	try {
		if '$l(pFile) set tSC=$$$ERROR(5001,"File Name is NULL") quit
		open pFile:("R"):0
		if '$t set tSC=$$$ERROR(5001,"Unable to open File: "_pFile) quit
		set tSC=$classmethod($classname(),"%DeleteExtent") if 'tSC quit
		if pContainsHeader use pFile read header
		for {
			use pFile read rec if rec="<ENDOFFILE>" quit
			set obj=##class(Robot.Common.CodeTables.VisitTypes).%New(),obj.VisitTypeCode=$p(rec,$c(9),1),obj.VisitTypeDescription=$p(rec,$c(9),2),tSC=obj.%Save()
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"Load Visit Types","Load Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	if $l(pFile) close pFile
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.CodeT.VisitD</DataLocation>
<DefaultData>VisitTypesDefaultData</DefaultData>
<IdLocation>^Robot.Common.CodeT.VisitD</IdLocation>
<IndexLocation>^Robot.Common.CodeT.VisitI</IndexLocation>
<StreamLocation>^Robot.Common.CodeT.VisitS</StreamLocation>
<Data name="VisitTypesDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>VisitTypeDescription</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Configuration.ConfigurationSettings">
<Description><![CDATA[
The DFI Common InterfaceConfiguration Class contains the Parameters that describe the Interface
and the properties that define the number of days Debug Logs, Trace Logs, Ensemble Messages
and Interface Queue Messages are retained.<BR><br>
There can only be one Configuration record in the Interface namespace and has a Primary Key/ID Key
named <b>"Settings"</b>.<BR><br>
This has implications when it comes to mapping this class into every Interface Namespace. We want
the same Configuration Settings Class definition available in every Interface Namespace but the actual
field data for the configuration must be local to that Interface. So I use Package Mapping to
map the Class to each Interface Namespace but I do not create a Global Mapping. That way the
Configuration settings record will be specific to that Interface Namespace.<BR><br>
The Configuartion Settings contains all of the information about every component in the ODS, EMCI and
IHIS interfaces. Normally an Interface Production is configured using the Management Portal
-> Ensemble -> Configuration to add or remove Production Items but an Interface Production
can also be modified programmatically. I have yet to decide if I will use that approach. One
advantage is that I can store the parameters for each Production Item in each Production and
can be maintained outside of the manangement portal. I have not written this fuctionality and
will make a final descision once I have completed all of the other work I have to do.<BR><br>
The Configuration Settings hold the email lists for the Alert Notification System (Errors and Conditions).
It also holds the email list that manifest reports are sent to if Manifests are used for Batching
a group of Messages. This was functionality that I designed for the EMCI Data Load Testing and though
that code was not ultimately used I have documented it and I believe that I have a good design for
a dynamic Testing Module that can be used for EMCI and IHIS which will provide formal Testing
Platform for future testing<BR><br>
There are a number of File Directories into which different types of files will be written (HL7
messages, JSON request messages, JSON Bundle Responses and JSON Operation Outcomes)<BR><br>
There are settings for the following possible Interface Production Items as well as the
underlying Class Name:<br><br>
House Keeping Service [Required]<BR>
HTTP HL7 Business Operation<BR>
HTTPS HL7 Business Operation<BR>
HTTP FHIR Business Operation<BR>
HTTPS FHIR Business Operation<BR>
HL7 File Business Operation<br>
EMail Business Operation [Required]<br>
Message Queue Business Service [Required]<br>
Alternative ODS Message Queue Service<br>
Alternative EMCI Message Queue Service<br>
Primary Business Process [Required]<br>
Ensemble Alert Email Operation [Required]<br>
Ensemble Alert Monitor Service [Required]<br><br>
There are flags DFISendMessageHTTP and DFISendMessageHTTPS that are used to determine
whether the HTTP or HTTPS Operation is used. The Primary Business Process invokes the calls
to the HTTP and File Operations<BR><br>
There is an Email Business Operation. The Email Operation Production Item Name and underlying
class name are specified here. There are Email Request and Response Messages that are used by
the Alert Notification Service as well as any Business Process that emails Files such as a 
Manifest Report to a list of recipients.<BR><br>
AS there are so many properties in this class that methods to Create or Update the Configuration
settings would have so many Method Parameters that it would probably break the limit on
Method Parameters. So, apart from the ConfigurationID or Configuration Object passed to these
methods the second parameter is an array passed by reference. At the moment this is an array
in the form:<BR><BR>
pSettings({PropertyName})={pValue} where {pValue} is not NULL unless forced.<BR><BR>
the UpdateConfiguration method walks through the Property names in the array and then using $property()
will update the value of that property in the Configuration Object. The code checks to see
if the pValue is NULL. If it is then by default I do not update any field with NULL however if the
node:<BR><BR>
pSettings({Property_Name},"Force")=1<BR><BR>
Is defined and is 1 then I will update the property with NULL.<BR>
If a property points to another DFI class with properties of its own then those property values
are specified as:<BR><BR>
pSettings({Property_Name},"Propeties",{Robot_Class_Property_Name})={pValue}<BR><BR>
The same principle of forcing a NULL value applies here as well:<BR><BR>
pSettings({Property_Name},"Properties",{Robot_Class_Property_Name},"Force")=1<BR><BR>
If the Property is some form of Collection, %List, %Array then the 'Key' and 'Value' of each
item in the collection is specified as follows:<BR><BR>
pSettings({Property_Name},"Values",{Key})={pValue}<BR><BR>
where pValue can be a literal or an OREF<BR>
I clear the contents of the Property in the Config Object and then use $classmethod to
invoke the "InsertAt" method to insert the pSettings items into the collection.<BR><br>
There are methods to Start and Stop the production as well as Update the Production.<BR>
There is a method to Get the Current Production Setting details.<BR><BR>
<b>WARNING: Do Not Delete the Storage Definition of this Class. The GlobalName is fixed</b><BR>]]></Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent</Super>
<TimeChanged>65895,26092.178361</TimeChanged>
<TimeCreated>65798,84273.741603</TimeCreated>

<Parameter name="GlobalName">
<Description>
For the purposes of Global Mappings the Global Names in the Storage Definition have been modified to
be more readable than the Ensemble generated Global Names. This Parameter informs the developer that
should they delete the Storage Definition then they should replace the Glabal Names with the Value in
the Parameter where the * = D, I or S</Description>
<Default>^Robot.Configuration.Settings*</Default>
</Parameter>

<Property name="DFIConfigurationID">
<Description>
The DFIConfigurationID is indexed to be the Primary Key/ID Key with a value of "Settings". The logic of the UpdateConfiguration()
Method ensures that only the object with an ID of "Settings" will be created or updated</Description>
<Type>%String</Type>
<InitialExpression>"Settings"</InitialExpression>
<Required>1</Required>
</Property>

<Property name="DFINamespace">
<Description>
The namespace in which the Interface is running.</Description>
<Type>%String</Type>
<InitialExpression>$namespace</InitialExpression>
</Property>

<Property name="DFIProductionName">
<Description><![CDATA[
The Production Name is the Name of the Interface Production. The Production Name is used in the methods in this class that use the
Ens.Director class to perform Production Actions Start, Stop and Update. This is a Class Name.<BR>]]></Description>
<Type>%String</Type>
<InitialExpression>"Robot.Common.Production.DFIInterfaceProduction"</InitialExpression>
<Required>1</Required>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIInterfaceVersion">
<Description>
The Version number of the Interface.</Description>
<Type>%String</Type>
<InitialExpression>"V1.0.0"</InitialExpression>
</Property>

<Property name="DFIIsProductionInterface">
<Description>
This flag indicates if the Production is the 'Live' production.</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="DFIIsProductionActive">
<Description>
Is the Production Active.</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="DFIMessageQueueClassName">
<Description>
The MessageQueueClassName is used by the Production Classes that call the methods in the
Message Queue Class.</Description>
<Type>%String</Type>
<InitialExpression>"Robot.Common.Queue.ODSTFMessageQueue"</InitialExpression>
<Required>1</Required>
</Property>

<Property name="DFIRequestMessageClassName">
<Description>
The Request Class Name that is created by the Buisness Service.</Description>
<Type>%String</Type>
<InitialExpression>"Robot.Common.Messages.TransactionRequest"</InitialExpression>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="DFIResponseMessageClassName">
<Description>
The Response Class Name that is returned to the Business Service.</Description>
<Type>%String</Type>
<InitialExpression>"Robot.Common.Messages.TransactionResponse"</InitialExpression>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="DFITargetMessageType">
<Description>
The Target Message Type indicates the Target Message type that will be created by the Interface. There are essentially 3 types
HL7, FHIR JSON and SQL.</Description>
<Type>%String</Type>
<InitialExpression>"H"</InitialExpression>
<Required>1</Required>
<Parameter name="DISPLAYLIST" value=",HL7,FHIR,SQL"/>
<Parameter name="VALUELIST" value=",H,F,S"/>
</Property>

<Property name="DFIIsSSLTSLOperation">
<Description>
The Target HTT or TCP or EMail operation uses SSl/TSL using HTTPS. This directs the Business Process
to send the Request Message to either the Secure Operation or the normal operation</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="DFIFHIRResources">
<Description>
The list of FHIR Resource(s) that are managed in the Interface if the Interface is an EMCI or IHIS Data Flow
The property is a comma delimited list of Resource Names.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="DFIDebugging">
<Description><![CDATA[
If Debugging is True then the $$$DebugLog() calls in the class method code will create Debug Log Records. This is usually only
required in Development and QC. It should be False in the Live Production.<BR>
The class Robot.Common.Debug.Status also holds a flag indicating if Debugging is turned on or off and there are
methods in the Robot.Common.Debug.Logging class that Set or Get the Logging Status. So This property is Calculated
and calls the GetDebugOnOff() method in the Debug Logging Class.]]></Description>
<Type>%Boolean</Type>
<Calculated>1</Calculated>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="DFIReceivingApplication">
<Description><![CDATA[
HL7 Properties for HL7 Messages<BR>
MSH Receiving Aplication]]></Description>
<Type>%String</Type>
<InitialExpression>"StandardODSPIXInterface"</InitialExpression>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="DFIReceivingFacility">
<Description>
MSH Receiving Facility</Description>
<Type>%String</Type>
<InitialExpression>"WCHDOH"</InitialExpression>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="DFISendingApplication">
<Description>
MSH Sending Application</Description>
<Type>%String</Type>
<InitialExpression>"WCGSTDPIXInterface"</InitialExpression>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="DFISendingFacility">
<Description>
MSH Sending Facility</Description>
<Type>%String</Type>
<InitialExpression>"WCGDOHODS"</InitialExpression>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="DFIDefaultEvent">
<Description>
This is the default Trigger Event of the HL7 message from which the HL7 Message Structure will be determined</Description>
<Type>%String</Type>
<InitialExpression>"A08"</InitialExpression>
</Property>

<Property name="DFISendMessageHTTP">
<Description>
If True the generated message will be sent to the HTTP Outbound Operation (HL7 or FHIR JSON)</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="DFISendMessageHTTPS">
<Description>
If True the generated message will be sent to the HTTPS Outbound Operation (HL7 or FHIR JSON)</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="DFISendMessageToFile">
<Description>
If True the generated message will be written to file (HL7 or FHIR JSON)</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="DFIHTTPHL7OperationName">
<Description>
This is the HL7 HTTP Business Operation Name in the Interface Production</Description>
<Type>%String</Type>
<InitialExpression>"DFI HL7 HTTP Operation"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIHTTPHL7OperationClassName">
<Description>
This is the HL7 HTTP Business Operation Class Name in the Interface Production</Description>
<Type>%String</Type>
<InitialExpression>"Robot.Common.Operation.PIXHL7HTTPOperation"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIHTTPSHL7OperationName">
<Description>
This is the HL7 HTTPS Business Operation Name in the Interface Production</Description>
<Type>%String</Type>
<InitialExpression>"DFI HL7 HTTPS Operation"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIHTTPSHL7OperationClassName">
<Description>
This is the HL7 HTTPS Business Operation Class Name in the Interface Production</Description>
<Type>%String</Type>
<InitialExpression>"Robot.Common.Operation.PIXHL7HTTPSOperation"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIHTTPFHIROperationName">
<Description>
This is the FHIR HTTP Business Operation Name in the Interface Production</Description>
<Type>%String</Type>
<InitialExpression>"DFI FHIR HTTP Operation"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIHTTPFHIROperationClassName">
<Description>
This is the FHIR HTTP Business Operation Class Name in the Interface Production</Description>
<Type>%String</Type>
<InitialExpression>"Robot.Common.Operation.FHIRHTTPOperation"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIHTTPSFHIROperationName">
<Description>
This is the FHIR HTTPS Business Operation Name in the Interface Production</Description>
<Type>%String</Type>
<InitialExpression>"DFI FHIR HTTPS Operation"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIHTTPSFHIROperationClassName">
<Description>
This is the FHIR HTTPS Business Operation Class Name in the Interface Production</Description>
<Type>%String</Type>
<InitialExpression>"Robot.Common.Operation.FHIRHTTPSOperation"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIFileHL7OpertionName">
<Description>
This is the HL7 File Business Operation Name in the Interface Production</Description>
<Type>%String</Type>
<InitialExpression>"DFI HL7 File Operation"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIFileHL7OpertionClassName">
<Description>
This is the HL7 File Business Operation Class Name in the Interface Production</Description>
<Type>%String</Type>
<InitialExpression>"Robot.Common.Operation.PIXHL7FileOperation"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIFileFHIROperationName">
<Description>
This is the FHIR File Business Operation Name in the Interface Production</Description>
<Type>%String</Type>
<InitialExpression>"DFI FHIR File Operation"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIFileFHIROperationClassName">
<Description>
This is the FHIR File Business Operation Class Name in the Interface Production</Description>
<Type>%String</Type>
<InitialExpression>"Robot.Common.Operation.FHIRFileOperation"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIHouseKeepingServiceName">
<Description>
This is the Interface HouseKeeping Business Service Name</Description>
<Type>%String</Type>
<InitialExpression>"DFI HouseKeeping Service"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIHouseKeepingClassName">
<Description>
This is the Interface HouseKeeping Business Service Class Name</Description>
<Type>%String</Type>
<InitialExpression>"Robot.Common.Service.HouseKeeping"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIAlertNotificationServiceName">
<Description>
This is the Interface Alert Notification Service Name</Description>
<Type>%String</Type>
<InitialExpression>"DFI Alert Notification Service"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIAlertNotificationServiceClassName">
<Description>
This is the Interface Alert Notification Service Class Name</Description>
<Type>%String</Type>
<InitialExpression>"Robot.Common.Service.AlertNotificationService"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIAlertMonitorServiceName">
<Description>
The Ensemble Ens Alert Monitor Production Item Name.</Description>
<Type>%String</Type>
<InitialExpression>"Ens Alert Monitor"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIAlertMonitorServiceClassName">
<Description>
The Ensmeble Ens Alert Monitor Class Name. </Description>
<Type>%String</Type>
<InitialExpression>"Ens.Alerting.AlertMonitor"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIBuildPatientListServiceName">
<Description><![CDATA[
------------------------------------------------------------------------------------------------------------------------<br>
Settings for the Bulk Export of Patients from ODS to EMCI Settings<BR>
-------------------------------------------------------------------------------------------------------------------------<BR><br>

This is the BulkExport BuildPatientListService ClassName. This is the service that Builds the List
of Patients that will be Exported to EMCI before the Patient to EMCI Trckle Feed Interface takes over]]></Description>
<Type>%String</Type>
<InitialExpression>"DFI Build Patient List Service"</InitialExpression>
</Property>

<Property name="DFIBuildPatientListServiceClassName">
<Description>
This is the Bulk Export Build Patient List Service Class Name</Description>
<Type>%String</Type>
<InitialExpression>"Robot.BulkExport.Service.BuildPatientListService"</InitialExpression>
</Property>

<Property name="DFIBulkExportQueueClassName">
<Description>
This is the Queue Class Name of the Patient List created by the Build Patient List Service in the Bulk Export
Interface. This Queue is then processed by the Robot.BulkExport.Service.BulkExportSendPatient Service
will use and for each entry it will create an Entry in the BulkExportMessageQueue that tracks the
Sending of the Patients to EMCI.</Description>
<Type>%String</Type>
<InitialExpression>"Robot.BulkExport.Queue.BulkExportMessageQueue"</InitialExpression>
</Property>

<Property name="DFIBulkExportSendPatientsServiceName">
<Description>
This is the Service Name of the Bulk Export Send Patients Service that kicks in when the Build Patient
List Service is complete.</Description>
<Type>%String</Type>
<InitialExpression>"DFI Send Patients Service"</InitialExpression>
</Property>

<Property name="DFIBulkExportSendPatientServiceClassName">
<Description>
This is the Service Class Name for the Bulk Export
Send Patient Service Name</Description>
<Type>%String</Type>
<InitialExpression>"Robot.BulkExport.Service.SendPatientsService"</InitialExpression>
</Property>

<Property name="DFIBulkExportSendPatientProcessName">
<Description>
This is the name of the Bulk Export Send Patient Business Process Name</Description>
<Type>%String</Type>
<InitialExpression>"DFI Send Patient Process"</InitialExpression>
</Property>

<Property name="DFIBulkExportSendPatientProcessClass">
<Description>
This is the Class Name of the Bulk Export Send Patient Process Class Name</Description>
<Type>%String</Type>
<InitialExpression>"Robot.BulkExport.Process.SendPatientProcess"</InitialExpression>
</Property>

<Property name="DFIBulkExportPatientListComplete">
<Description>
This Property is used by the ODS to EMCI Bulk Export. The Bulk Export builds a Message Queue
of Patient Internal Numbers. Once the List is Built then the Service that Builds the List disables
itself and the Service to process the Bulk Export List is started and will process the Bulk Export List
and for each message a request is sent to the Business Process that converts the ODS Patient into
a FHIR Patient Document and sends it to the EMCI FHIR Server
This property is updated by the Build Patient List Service</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="DFIBulkExportPatientRecordsProcessed">
<Description>
This is the number of Patients processed by the ODS to EMCI FHIR Bulk Export
This property is updated by the Build Patient List Service</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="DFIBulkExportNumberOfPatientsToBeSelected">
<Description>
This property can be used to control how many Patients are selected for export in the 
ODS to EMCI FHIR Bulk Export and is referenced by the Build Patient Lisr Service. Once
the Number of Patient Records that have been Processed either hits the end of File or
it reaches the Number to be Selected then the List is Complete and the Build Patient List
will effectively stop and if the BulkExportStartSendAutomatically is TRUE then it will 
start sending the Patients to EMCI</Description>
<Type>%Integer</Type>
<InitialExpression>18000000</InitialExpression>
</Property>

<Property name="DFIBulkExportStartSendAutomatically">
<Description><![CDATA[
If StartBulkExportAutomatically is TRUE then the Business Service, Robot.EMCIBulkExport.Service.BulkExportSendPatients,
that starts transmitting the Patients that the service Robot.EMCIBulkLoad.Service.BulkExportPatientList
has added to the Robot.EMCIBulkExport.Queue.BulkExportList, will start transmitting the Patients.<br>
If the setting is False then the Robot.EMCIBulkExport.Service.BulkExportSendPatients service will just loop until
until the setting DFOBuildListOfPatientsIsComplete is TRUE]]></Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="DFIBulkExportStartPatient">
<Description><![CDATA[
The Start Patient is the last patient that was processed by the BuildPaientList Service. This is the seed
value from where the next cycle of building the Patient List. The Patient List Build Service can
have a Call Interval of no less than 0.1second so the OnProcessInput method has an 
inner loop and it will process say 200 records in a loop before exiting the service only to be called
again 0.1 seconds later.<br>
When the Service is invoked again it will pick up from where it left off<br>
This property is updated by the Build Patient List Service]]></Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="DFIMessageQueueServiceName">
<Description><![CDATA[
------------------------------------------------------------------------------------------------------------------------<br>
End of Bulk Export of Patients from ODS to EMCI Settings<BR>
-------------------------------------------------------------------------------------------------------------------------<BR><br>
This is the Default Business Service Name for the Business Service that processes the Message
Queue that drives the Interface. Messages are created in the Message Queue based on activity in
an Interface running in another Namespace. For example the Clinicom to ODS Trickle Feed creates
messages whenever an Data Event occurs in Clinicom and a TransactionLog Request Message is processed
in the Trickle Feed Production.<BR><br>
Messages can also be created through a UI  or programmatically through a method Call.<BR>
The Message Queue Classes all have the same generic methods CreatMessage(), GetNextMessage()
UpdateMessageQueue(), CompleteMessage(), ResendMessage(), PurgeMesssages().<BR><br>
Any class that can be Inherited or Copied must use $classmethod() to run mmethods within
that Class and $Property() to Set or Get Property Names and Values. In particular
the Properties in a Message Queue Class that are specific to that Message Queue are 
passed in, or retrieved from, are passed as an array of values to the methods that Create,
Update or Retrieve these message specific properties.<BR><br>
There are properties in every Message Queue Class that are controlled by the Message Queue Class
and cannot be updated by those methods. There are Messge Queue Properties that are generic to
every message queue class (and influenced by the type of message and the transport mechanism
that sends the message body to a target application. These properties can be updated by a UI
or through the {Property Name}/{Property Value} Arrray.<BR><br>
These properties are enerally related to the JSON, HL7, Text, XML Body Content and the
File Directory and File Name properties used to create the files into which the Body Contents
are written. This applies to both Request and Response Messages. An HL7 Request Message will
have a complimentary HL7 Response Message in the form of an HL7 ACK Message<BR><br>
A FHIR JSON Request Message (if there is one) will have a corresponding FHIR JSON Response Message
which will typically be the JSON for a FHIR Resource, a FHIR Bundle of One or More FHIR Resource
JSON Objects.<BR>]]></Description>
<Type>%String</Type>
<InitialExpression>"DFI Message Queue Service"</InitialExpression>
</Property>

<Property name="DFIMessageQueueServiceClassName">
<Description>
This is the Message Queue Service Class Name.</Description>
<Type>%String</Type>
<InitialExpression>"Robot.Common.Service.ProcessMessageQueue"</InitialExpression>
</Property>

<Property name="DFIAltODSMessageQueueServiceName">
<Description>
These Production Items are effectively copies of the Default Message Queue Service and if it helps
make the production contents more Readable then use this field.</Description>
<Type>%String</Type>
<InitialExpression>"DFI ODS Message Queue Service"</InitialExpression>
</Property>

<Property name="DFIAltODSMessageQueueServiceClassName">
<Description>
These Production Items are effectively copies of the Default Message Queue Service and if it helps
make the production contents more Readable then use this field.</Description>
<Type>%String</Type>
<InitialExpression>"Robot.Common.Service.ProcessODSMessageQueue"</InitialExpression>
</Property>

<Property name="DFIAltEMCIMessageQueueServiceName">
<Description>
These Production Items are effectively copies of the Default Message Queue Service and if it helps
make the production contents more Readable then use this field.</Description>
<Type>%String</Type>
<InitialExpression>"DFI EMCI Message Queue Service"</InitialExpression>
</Property>

<Property name="DFIAltEMCIMessageQueueServiceClassName">
<Description>
These Production Items are effectively copies of the Default Message Queue Service and if it helps
make the production contents more Readable then use this field.</Description>
<Type>%String</Type>
<InitialExpression>"Robot.Common.Service.ProcessEMCIMessageQueue"</InitialExpression>
</Property>

<Property name="DFIPrimaryBusinessProcessName">
<Description>
The Main Busines Process Name. The Primary Business Process is called by the "DFI Message Queue Service"
The Business Service looks at the configuration settings to get the name of the Message Queue
and then calls the GetNextMessage() method of that class using $Classmethod(). If the method returns
a message the Service then uses the Configuration Property "DFIRequestMessageClassName" to
create a new Request Message which it passes to the DFI Primary Bussiness Process.</Description>
<Type>%String</Type>
<InitialExpression>"DFI WCG HL7 STD Process"</InitialExpression>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="DFIPrimaryBusinessServiceClassName">
<Description>
The Primary Business Process Class Name. This is the undrlying class name of the DFI Primary Business
Process Production Item Name (above).</Description>
<Type>%String</Type>
<InitialExpression>"Robot.Common.Process.PrimaryBusinessProcess"</InitialExpression>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="DFIFHIRFileDirectory">
<Description><![CDATA[
The File Directory where EMCI/IHIS FHIR JSON Files will be written. This is for Files that contain
the Request and Response FHIR JSON Content for EMCI and IHIS Interfaces.<br>
See the notes on the DFIFileDirectory property for additional notes.]]></Description>
<Type>%String</Type>
<InitialExpression>"D:\DFI\Files\FHIRFiles\General\"</InitialExpression>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="DFIHL7FileDirectory">
<Description><![CDATA[
The File Directory where EMCI/IHIS FHIR JSON Files will be written. This is for Files that contain
the Request and Response FHIR JSON Content for EMCI and IHIS Interfaces.<br>
See the notes on the DFIFileDirectory property for additional notes.]]></Description>
<Type>%String</Type>
<InitialExpression>"D:\DFI\Files\HL7Files\General\"</InitialExpression>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="DFIFileDirectory">
<Description><![CDATA[
The File Directory where Files will be written. This is for any Files that are generated by
the Interface. There other File Directory Property Names specific to FHIR, HL7 and Manifests
that can be used to override this setting. It is the responsibility of the Business Process
or other Production Item that calls the File Operation to decide whether an alternative directory
Name is to be used based on the desired functionality of the Interface Production<br>
There are Directories for the Interface QC Namespace and the Production
Namespace. So the naming of this field should take into consideration the setting:<br><br>
DFIIsProductionInterface=1 (true) or 0 (false)<br><br>
that indicates whether the Interface is running in Production or not.<br>
Again, the files from both QC and PRD can be written to the same directory if required.]]></Description>
<Type>%String</Type>
<InitialExpression>"D:\DFI\Files\GeneralFiles\"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIHL7RequestFileName">
<Description>
The default name for EMCI/ODS HL7 ADT Request Messages.</Description>
<Type>%String</Type>
<InitialExpression>"HL7 Request Message for {SourceObjectID} run on {TimeStamp}.txt"</InitialExpression>
<Parameter name="MAXLEN" value="3000"/>
</Property>

<Property name="DFIHL7ResponseFileName">
<Description>
The default name for EMCI/ODS HL7 ACK Response Messages.</Description>
<Type>%String</Type>
<InitialExpression>"HL7 ACK Response Message for {SourceObjectID} run on {TimeStamp}.txt"</InitialExpression>
<Parameter name="MAXLEN" value="3000"/>
</Property>

<Property name="DFIFHIRResourceRequestJSONFileName">
<Description>
The default name for EMCI FHIR Patient JSON Request Messages.</Description>
<Type>%String</Type>
<InitialExpression>"FHIR Resource Request JSON for Resource {ResourceName} and ResourceID {ResourceID} run on {TimeStamp}.json"</InitialExpression>
<Parameter name="MAXLEN" value="3000"/>
</Property>

<Property name="DFIFHIRResourceResponseJSONFileName">
<Description>
The default name for EMCI FHIR Patient JSON Response Messages Typically a Resource, a Bundle or an Operation
Outcome.</Description>
<Type>%String</Type>
<InitialExpression>"FHIR Resource Request JSON for Resource {ResourceName} and ResourceID {ResourceID} run on {TimeStamp}.json"</InitialExpression>
<Parameter name="MAXLEN" value="3000"/>
</Property>

<Property name="DFIManifestFileDirectory">
<Description>
The File Directory where Manifest Files will be created. This is the Directory where Test Files
are written. The HTTP Request JSON files and HTTP Response JSON files are stored here. There is
a Manifest Directory for both a QC Interface Namespace and a PRD Interface Namespace so the setting
'DFIIsProductionInterface' = 1 (true) that indicates that the Interface is running in a Production Namespace</Description>
<Type>%String</Type>
<InitialExpression>"D:\DFI\Files\ManifestFiles\General\"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DFIManifestFileName">
<Description>
The default File Name for Manifest Files. The fields enclosed in {} are substituted at runtime
with specific details for the resultant filename.</Description>
<Type>%String</Type>
<InitialExpression>"Data Load Manifest {ManifestDT} from Patient {FromConsumerId} to Patient {ToConsumerId} for Test {TestNumber} run at {Date}.csv"</InitialExpression>
<Parameter name="MAXLEN" value="3000"/>
</Property>

<Property name="DFIManifestRequestRecordFileName">
<Description>
This is the file name into which the JSON or HL7 or other document type is written when the 
Business Process that uses Manifests sends the Request Document to the HTTP/TCP/Email/File Outbound
Business Operstion. This is configured for a FHIR Request/Response HTTP Request. It will be
Modified when the Configuration Settings are created for new DFI Interface,</Description>
<Type>%String</Type>
<InitialExpression>"EMCI Patient {EMCIUId} FHIR Patient Request - Manifest {ManifestDT} - Record Number {RecordNumber} - Test Number {TestNumber} run on {Date}.json"</InitialExpression>
<Parameter name="MAXLEN" value="3000"/>
</Property>

<Property name="DFIManifestResponseRecordFileName">
<Description><![CDATA[
This is the File Name into which the JSON or HL& or other Document Type that is received back from
the Target Application. For example: An HL7 ACK Message, a FHIR Interaction Operation Outcome.
This is configured for a FHIR Request/Response HTTP Request. It will be Modified when the
Configuration Settings are created for new DFI Interface that uses HL7 for example.]]></Description>
<Type>%String</Type>
<InitialExpression>"EMCI Patient {EMCIUId} FHIR Operation Outcome Response - Manifest {ManifestDT} - Record Number {RecordNumber} - Test Number {TestNumber} run on {Date}.json"</InitialExpression>
<Parameter name="MAXLEN" value="3000"/>
</Property>

<Property name="DFIEMailSenderAddress">
<Description>
This is the default Email Sender Email addresss. This is used when Notifications or
other Emails are sent to targeted lists of Recipients.</Description>
<Type>%String</Type>
<InitialExpression>"nigel@healthsystems.co.za"</InitialExpression>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="DFIDefaultEmailList">
<Description>
This is the default Target List of Email Recipients that will be used to send EMails to. There are
specific EMail Lists for different situations and if those lists are not populated then this list
will be used instead. The list is a string of Email addresses seperated by a "," or ";'
This list should not be used for any of the Alert Notification Lists as they are
specified seperately. This list would include people who receive Manifest Reports
or other Ssystem Reports</Description>
<Type>%String</Type>
<InitialExpression>"nigel.salm@icloud.com"</InitialExpression>
<Required>1</Required>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="DFIAlertNotificationEmailList">
<Description>
The DFIAlertNotificationEmailList is the default list of Recipients to receive
Alert Notifications. The ProductionAlerts class is a list of Production Items
with the Production Item Name as the PrimaryKey in the ProductionAlerts Table. At the
Production Item Level the only attributes that are monitored are the Item Queue Size
and the ProductionItem Status. If the Queue Size exceeds a certain size then we
have the option of sending an Alert Notification. Likewise if the Item Status is 
'InError" and likewise an Alert Notification could be sent. This email list
is the list of recipients that should receive these notifications.
By default this list is inherited into the ErrorAlert Notification List and
the ConditionAlert Notification List.</Description>
<Type>%String</Type>
<InitialExpression>"nigel@healthsystems.co.za"</InitialExpression>
<Required>1</Required>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="DFIErrorAlertEmailList">
<Description>
This is the Target List of Email Recipients for Alert Error Notirfications.</Description>
<Type>%String</Type>
<InitialExpression>"nigel.salm@outlook.com"</InitialExpression>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="DFIConditionAlertEmailList">
<Description>
This is the Target list of Email Recipients for Alert Condition Notifications.</Description>
<Type>%String</Type>
<InitialExpression>"nigel.salm@gmail.com"</InitialExpression>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="DFINumberOfDaysToKeepQueueMessages">
<Description>
The number of days that the messages in the Message Queue are retained.</Description>
<Type>%Integer</Type>
<InitialExpression>90</InitialExpression>
</Property>

<Property name="DFINumberOfDaysToKeepEnsembleMessages">
<Description>
The number of days to retain the Ensemble Messages.</Description>
<Type>%Integer</Type>
<InitialExpression>90</InitialExpression>
</Property>

<Property name="DFINumberOfDaysToKeepEnsembleLogs">
<Description>
The number of days that the Ensemble Logs are retained.</Description>
<Type>%Integer</Type>
<InitialExpression>90</InitialExpression>
</Property>

<Property name="DFINumberOfDaysToKeepDebugLogs">
<Description>
The number of days that the Debug Logs are retained.</Description>
<Type>%Integer</Type>
<InitialExpression>90</InitialExpression>
</Property>

<Property name="DFINumberOfDaysToKeepFiles">
<Description>
The number of days that files are retained.</Description>
<Type>%Integer</Type>
<InitialExpression>90</InitialExpression>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>DFIConfigurationID</Properties>
<Unique>1</Unique>
</Index>

<Method name="DFIDebuggingGet">
<Description>
This method returns the 'true'/'false' flag that determines whether Debugging is Turned On or Off.</Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit ##class(Robot.Common.Debug.Status).GetDebugOnOff(.tSC)
]]></Implementation>
</Method>

<Method name="GetConfigurationSettings">
<Description>
Thsi method will return an array of Configuration Property Names. If the method is passed an alternative
classname then it will get the properties of that class. This is used for any Configuration
Property that points to a Code table or other DFI class. Lists and Arrays are also catered for. Refere
to the main class documentation to see the specifics of how the the pSettings array is specified.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pClassName:%String=$classname(),pClassObject:%RegisteredObject="",&pSettings:%String(MAXLEN=3000)]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if pClassName=$classname(),'$IsObject(pClassObject) {
			set pClassObject=$classmethod($classname(),"%OpenId","Settings")
			if '$IsObject(pClassObject) {set pClassObject=$classmethod($classname(),"%New"),pClassObject.DFIConfigurationID="Settings",tSC=pClassObject.%Save() if 'tSC quit}
		}
		set tCompClass=##class(%Dictionary.CompiledClass).%OpenId(pClassName)
		if '$IsObject(tCompClass) set tSC=$$$ERROR(5001,"Unable to open Compiled Class Definition for '"_$classname()_"'") quit
		set (tKey,tProp)="" for {
			set tProp=tCompClass.Properties.GetNext(.tKey) quit:tKey=""  if $e(tProp.Name,1)="%" continue
			if '$IsObject(tProp) $$$DebugLog($username,"Configuration:GetProperties","Property for Property Key: "_tKey_" is not an object",.dSC) continue
			set tName=tProp.Name,tType=tProp.Type
			// Deal with collections
			if tType["%List",tType["%Array",tType["%Collection" {
				if $IsObject(pClassObject) {
					set tCollection=$property(pClassObject,tName)
					set cKey="" for {
						set cItem=tCollection.GetNext(.cKey) quit:cKey=""
						set pSettings(tName,"Values",cKey)=cItem
					}
				}
				else {set pSettings(tName)=""}
				set pSettings(tName,"Type")="%List"
				continue
			}
			elseif $p(tType,".",1)="DFI" {
				kill tSettings
				set tSC=$classmethod($classname(),"GetClassProperties",tName,$s($IsObject(pClassObject):$property(pClassObject,tName),1:""),.tSettings) if 'tSC quit
				Merge pSettings(tName,"Properties")=tSettings
				set pSettings(tName,"Type")="DFI"
			}
			else {
				set pSettings(tName)=$s($IsObject(pClassObject):$property(pClassObject,tName),1:"")
				set pSettings(tName,"Type")="DT"
				continue
			}
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"Get Configuration Settigs","The Status of Get Configuration Settings is: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="GetClassProperties">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pClassName:%String="",pClassObject:%RegisteredObject,&pProperties:%String(MAXLEN=5000)]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if '$l(pClassName) set tSC=$$$ERROR(5001,"Class Name is not Specified") quit
		set tCompClass=##class(%Dictionary.CompiledClass).%OpenId(pClassName)
		if '$IsObject(tCompClass) set tSC=$$$ERROR(5001,"Unable to open Compiled Class Definition for '"_pClassname_"'") quit
		set (tKey,tProp)="" for {
			set tProp=pCompClass.Properties.GetNext(.tKey) quit:tKey=""
			if '$IsObject(tProp) $$$DebugLog($username,"Configuration:GetClassProperties","Property for Property Key: "_tKey_" is not an object",.dSC) continue
			set tName=tProp.Name,tType=tProp.Type
			// Deal with collections
			if tType["%List",tType["%Array",tType["%Collection" {
				if $IsObject(pClassObject) {
					set pCollection=$property(pClassObject,tName)
					set cKey="" for {
						set cItem=pCollection.GetNext(.cKey) quit:cKey=""
						set pSettings(tName,"Values",cKey)=cItem
					}
				}
				else {set pSettings(tName)=""}
				set pSettings(tName,"Type")="%List"
				continue
			}
			elseif $p(tType,".",1)="DFI" {
				kill tSettings
				set tSC=$classmethod($classname(),"GetClassSettings",tName,$s($IsObject(pClassObject):$property(pClassObject,tName),1:""),.tSettings) if 'tSC quit
				Merge pSettings(tName,"Properties")=tSettings
				set pSettings(tName,"Type")="DFI"
			}
			else {
				set pSettings(tName)=$s($IsObject(pClassObject):$property(pClassObject,tName),1:"")
				set pSettings(tName,"Type")="DT"
				continue
			}
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>

<Method name="UpdateConfigurationSettings">
<Description>
This method is called to create or update the "Settings" row in the Configuration Class. Refer to the
main class documentation that details the specifics of how Proeprty valus are Updated in this class.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pConfig:%RegisteredObject="",&pSettings:%String(MAXLEN=3000),pKillExtent:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if pKillExtent set tSC=$classmethod($classname(),"%DeleteExtent") quit:'tSC  set pConfig=""
		if '$IsObject(pConfig) set pConfig=$classmethod($classname(),"%OpenId","Settings")
		if '$IsObject(pConfig) set pConfig=$classmethod($classname(),"%New"),pConfig.DFIConfigurationID="Settings",tSC=pConfig.%Save() if 'tSC quit
		set tProp="" for {
			set tProp=$o(pSettings(tProp)) quit:tProp=""  Continue:tProp="DFIConfigurationID"  continue:$e(tProp,1)="%"
			// Deal with normal properties
			if $g(pSettings(tProp,"Type"))="DT" {
				if $l(pSettings(tProp)) set $property(pConfig,tProp)=pSettings(tProp)
				if '$l(pSettings(tProp)),+$g(pSettings(tProp,"Force")) set $property(pConfig,tProp)=""
			}
			elseif $g(pSettings(tProp,"Type"))="DFI" {
				set tField="" for {
					set ttField=$o(pSettings(tProp,"Properties",tField)) quit:tField=""
					if $l(pSettings(tProp,"Properties",tField)) set $property($property(pConfig,tProp),tField)=pSettings(tProp,"Properties",tField)
					if '$l(pSettings(tProp,"Properties",tField)),+$g(pSettings(tProp,"Properties",tField,"Force")) set $property($property(pConfig,tProp),tField)=""
				}
			}
			elseif $g(pSettings(tProp,"Type"))="%List" {
				do $classmethod($property(pConfig,tProp),"Clear")
				set x="" for {
					set x=$o(pSettings(tProp,"Values",x)) quit:x=""
					do $classmethod($property(pConfig,tProp),"InsertAt",pSettings(tProp,"Values",x),x)
				}
			}
		}
		set tSC=pConfig.%Save() if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"ConfigurationUpdate","Update Configuration Settings Status: "_$s(tSC:1,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="GetMessageQueueData">
<Description>
This Method gets the specific Information about the Interface that is used to create the ODSToInterfaceMapping class
that resides in the ODS and is used to list all Interfaces and contains the method that will walk through each Interface
definition and from that call the CreateMessage() Method of the Robot.Common.Queue.ODSMessageQueue or
a sub-class thereof.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pProductionName="",&pNamespace:%String="",&pQueueClassName:%String="",&pIsProduction:%Boolean=0,&pIsProductionActive:%Boolean=1]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tConfig=$classmethod($classname(),"%OpenId","Settings") if '$IsObject(tConfig) set tSC=$$$ERROR(5001,"Configuration Settings Do Not Exist") quit
		set pProductionName=tConfig.DFIProductionName,pNamespace=tConfig.DFINamespace,pQueueClassName=tConfig.DFIMessageQueueClassName
		set pIsProduction=tConfig.DFIIsProductionInterface,pIsProductionActive=tConfig.DFIIsProductionActive
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"GetMessageQueueData","Get Message Queue Data Status: "_$$$GetErrorText(tSC),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="CreateInterfaceMappingDetails">
<Description>
Create entry in the mapped Robot.Common.Interface.ODStoInterfaceMapping class</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=$classmethod($classname(),"GetMessageQueueData",.tInterfaceName,.tInterfaceNamespace,.tQueueClassName,.tIsProductionInterface,.tIsActive) if 'tSC quit
		set tNew=0,tMapping=##class(Robot.Common.Interface.InterfaceMappingDetails).%OpenId(pInterfaceName_"||"_pInterfaceNamespace)
		if '$IsObject(tMapping) {set tMapping=##class(Robot.Common.Interface.InterfaceMappingDetails).%New(),tNew=1}
		/// as InterfaceName and InterfaceNamespace are the Primary Key of the Mapping Table we cannot change their values
		if tNew {set tMapping.InterfaceName=pInterfaceName,tMapping.InterfaceNamespace=pInterfaceNamespace}
		set tMapping.MessageQueueClassName=pQueueClassName,tMapping.IsProduction=pIsProductionInterface,tMapping.IsActive=pIsActive
		set tSC=tMapping.%Save() if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"CreateMapping","Create Interface Mapping Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="StartProduction">
<Description>
This method will Start the Production where the Production Name is derived from the Configuration Settings</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=$classmethod($classname(),"GetConfigurationSettings",.tSettings) if 'tSC quit
		if '$l($g(tSettings("DFIProductionName"))) set tSettings("DFIProductionName")=$g(^Ens.Configuration("csp","LastProduction"))
		set tSC=##class(Ens.Director).StartProduction(tSettings("DFIProductionName")) if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"Configuration","Start Production Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="StopProduction">
<Description>
This method will Stop the Production where the Production Name is derived from the Configuration Settings</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTimeOut:%Integer=120,pForce:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=##class(Ens.Director).StopProduction(pTimeOut,pForce) if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"Configuration","Stop Production Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="UpdateProduction">
<Description>
This method will Update the Production where the Production Name is derived from the Configuration Settings</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTimeOut:%Integer=120,pForce:%Boolean=1,pCalledByScheduleHandler:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=##class(Ens.Director).UpdateProduction(pTimeOut,pForce,pCalledByScheduleHandler) if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"Configuration","Update Production Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="GetProductionStatus">
<Description><![CDATA[
This method returns the Production Status.<br>
pProductionName: Returns the production name when the status is running, suspended or troubled.<br>
pState: Outputs production status. The valid values are:<br>
$$$eProductionStateRunning<br>
$$$eProductionStateStopped<br>
$$$eProductionStateSuspended<br>
$$$eProductionStateTroubled<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pProductionName:%String,*pState:%Integer,pLockTimeout:%Numeric=10,pSkipLockIfRunning:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if '$l(pProductionName) {
			set tConfig=##class(Robot.Common.Configuration.ConfigurationSettings).%OpenId("Settings") if 'tConfig set tSC=$$$ERROR(5001,"Configuration Settings are not Defined") quit
			set pProductionName=tConfig.DFIProductionName
		}
		set tSC=##class(Ens.Director).GetProductionStatus(.pProductionName, .pState, pLockTimeout, pSkipLockIfRunning) if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"Configuration","Get Production Status is: "_$s(tSC:"OK",1:"Error: "_$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Configuration.SettingsD</DataLocation>
<DefaultData>ConfigurationSettingsDefaultData</DefaultData>
<IdLocation>^Robot.Configuration.SettingsD</IdLocation>
<IndexLocation>^Robot.Configuration.SettingsI</IndexLocation>
<StreamLocation>^Robot.Configuration.SettingsS</StreamLocation>
<Data name="ConfigurationSettingsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DFINamespace</Value>
</Value>
<Value name="3">
<Value>DFIProductionName</Value>
</Value>
<Value name="4">
<Value>DFIInterfaceVersion</Value>
</Value>
<Value name="5">
<Value>DFIIsProductionInterface</Value>
</Value>
<Value name="6">
<Value>DFIIsProductionActive</Value>
</Value>
<Value name="7">
<Value>DFIMessageQueueClassName</Value>
</Value>
<Value name="8">
<Value>DFIRequestMessageClassName</Value>
</Value>
<Value name="9">
<Value>DFIResponseMessageClassName</Value>
</Value>
<Value name="10">
<Value>DFITargetMessageType</Value>
</Value>
<Value name="11">
<Value>DFIIsSSLTSLOperation</Value>
</Value>
<Value name="12">
<Value>DFIFHIRResources</Value>
</Value>
<Value name="13">
<Value>DFIReceivingApplication</Value>
</Value>
<Value name="14">
<Value>DFIReceivingFacility</Value>
</Value>
<Value name="15">
<Value>DFISendingApplication</Value>
</Value>
<Value name="16">
<Value>DFISendingFacility</Value>
</Value>
<Value name="17">
<Value>DFIDefaultEvent</Value>
</Value>
<Value name="18">
<Value>DFISendMessageHTTP</Value>
</Value>
<Value name="19">
<Value>DFISendMessageHTTPS</Value>
</Value>
<Value name="20">
<Value>DFISendMessageToFile</Value>
</Value>
<Value name="21">
<Value>DFIHTTPHL7OperationName</Value>
</Value>
<Value name="22">
<Value>DFIHTTPHL7OperationClassName</Value>
</Value>
<Value name="23">
<Value>DFIHTTPSHL7OperationName</Value>
</Value>
<Value name="24">
<Value>DFIHTTPSHL7OperationClassName</Value>
</Value>
<Value name="25">
<Value>DFIHTTPFHIROperationName</Value>
</Value>
<Value name="26">
<Value>DFIHTTPFHIROperationClassName</Value>
</Value>
<Value name="27">
<Value>DFIHTTPSFHIROperationName</Value>
</Value>
<Value name="28">
<Value>DFIHTTPSFHIROperationClassName</Value>
</Value>
<Value name="29">
<Value>DFIFileHL7OpertionName</Value>
</Value>
<Value name="30">
<Value>DFIFileHL7OpertionClassName</Value>
</Value>
<Value name="31">
<Value>DFIFileFHIROperationName</Value>
</Value>
<Value name="32">
<Value>DFIFileFHIROperationClassName</Value>
</Value>
<Value name="33">
<Value>DFIHouseKeepingServiceName</Value>
</Value>
<Value name="34">
<Value>DFIHouseKeepingClassName</Value>
</Value>
<Value name="35">
<Value>DFIAlertNotificationServiceName</Value>
</Value>
<Value name="36">
<Value>DFIAlertNotificationServiceClassName</Value>
</Value>
<Value name="37">
<Value>DFIAlertMonitorServiceName</Value>
</Value>
<Value name="38">
<Value>DFIAlertMonitorServiceClassName</Value>
</Value>
<Value name="39">
<Value>DFIBuildPatientListServiceName</Value>
</Value>
<Value name="40">
<Value>DFIBuildPatientListServiceClassName</Value>
</Value>
<Value name="41">
<Value>DFIBulkExportQueueClassName</Value>
</Value>
<Value name="42">
<Value>DFIBulkExportSendPatientsServiceName</Value>
</Value>
<Value name="43">
<Value>DFIBulkExportSendPatientServiceClassName</Value>
</Value>
<Value name="44">
<Value>DFIBulkExportSendPatientProcessName</Value>
</Value>
<Value name="45">
<Value>DFIBulkExportSendPatientProcessClass</Value>
</Value>
<Value name="46">
<Value>DFIBulkExportPatientListComplete</Value>
</Value>
<Value name="47">
<Value>DFIBulkExportPatientRecordsProcessed</Value>
</Value>
<Value name="48">
<Value>DFIBulkExportNumberOfPatientsToBeSelected</Value>
</Value>
<Value name="49">
<Value>DFIBulkExportStartSendAutomatically</Value>
</Value>
<Value name="50">
<Value>DFIBulkExportStartPatient</Value>
</Value>
<Value name="51">
<Value>DFIMessageQueueServiceName</Value>
</Value>
<Value name="52">
<Value>DFIMessageQueueServiceClassName</Value>
</Value>
<Value name="53">
<Value>DFIAltODSMessageQueueServiceName</Value>
</Value>
<Value name="54">
<Value>DFIAltODSMessageQueueServiceClassName</Value>
</Value>
<Value name="55">
<Value>DFIAltEMCIMessageQueueServiceName</Value>
</Value>
<Value name="56">
<Value>DFIAltEMCIMessageQueueServiceClassName</Value>
</Value>
<Value name="57">
<Value>DFIPrimaryBusinessProcessName</Value>
</Value>
<Value name="58">
<Value>DFIPrimaryBusinessServiceClassName</Value>
</Value>
<Value name="59">
<Value>DFIFHIRFileDirectory</Value>
</Value>
<Value name="60">
<Value>DFIHL7FileDirectory</Value>
</Value>
<Value name="61">
<Value>DFIFileDirectory</Value>
</Value>
<Value name="62">
<Value>DFIHL7RequestFileName</Value>
</Value>
<Value name="63">
<Value>DFIHL7ResponseFileName</Value>
</Value>
<Value name="64">
<Value>DFIFHIRResourceRequestJSONFileName</Value>
</Value>
<Value name="65">
<Value>DFIFHIRResourceResponseJSONFileName</Value>
</Value>
<Value name="66">
<Value>DFIManifestFileDirectory</Value>
</Value>
<Value name="67">
<Value>DFIManifestFileName</Value>
</Value>
<Value name="68">
<Value>DFIManifestRequestRecordFileName</Value>
</Value>
<Value name="69">
<Value>DFIManifestResponseRecordFileName</Value>
</Value>
<Value name="70">
<Value>DFIEMailSenderAddress</Value>
</Value>
<Value name="71">
<Value>DFIDefaultEmailList</Value>
</Value>
<Value name="72">
<Value>DFIAlertNotificationEmailList</Value>
</Value>
<Value name="73">
<Value>DFIErrorAlertEmailList</Value>
</Value>
<Value name="74">
<Value>DFIConditionAlertEmailList</Value>
</Value>
<Value name="75">
<Value>DFINumberOfDaysToKeepQueueMessages</Value>
</Value>
<Value name="76">
<Value>DFINumberOfDaysToKeepEnsembleMessages</Value>
</Value>
<Value name="77">
<Value>DFINumberOfDaysToKeepEnsembleLogs</Value>
</Value>
<Value name="78">
<Value>DFINumberOfDaysToKeepDebugLogs</Value>
</Value>
<Value name="79">
<Value>DFINumberOfDaysToKeepFiles</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Debug.Logging">
<Description><![CDATA[
This is the standard Debug Logging class for the DFI Codebase<BR><BR>
All of the Robot.* classes have an Include statement in them<BR><BR>
Include DFIInclude<BR><BR>
The DFIInclude.inc file has the following #define in it<BR><BR>
#define DebugLog(%s1,%s2,%s3,%s34) do ##class(Robot.Common.Debug.Logging).CreateDebugLog($classname(),%s1,%s2,%s3,%s4)<BR><BR>
In Class Method Code you add calls to the Debug Logger as follows:<BR><BR>
$$$DebugLog($username,"MyKey","This is my Debug Message",.dSC)<BR><BR>
To enable Debug Logging execute the following code in the namespace where your production is running<BR><BR>
do ##class(Robot.Common.Debug.Logging).SetDebugingOnOff(1)<BR><br>
To find out if Debugging is On or Off:<br><br>
set pDebugging=##class(Robot.Common.Debug.Logging).GetDebugOnOff(.tSC)<br><br>
pDebugging will be set to 1 (ON) or 0 (OFF)<br>
The CreateDebugLog() method checks to see if Debugging is Turned On or OFF. Debug Logs are only
created if Debug Logging is turned ON.<br><br>
It is advisable to turn Debug Logging OFF in the Live Interface Production]]></Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent</Super>
<TimeChanged>65853,3740.012436</TimeChanged>
<TimeCreated>65483,49111.794042</TimeCreated>

<Property name="CreateTS">
<Description>
The CreateTS is the TimeStamp when the Debug Log Record is created</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($h,3)</InitialExpression>
</Property>

<Property name="ClassName">
<Description>
The Class Name that calls the Debug Log</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="150"/>
</Property>

<Property name="Username">
<Description>
The Username is $username by default but can be specified</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Key">
<Description>
The Key should be a meaningful reference to the area of code where the Debug Log record is being created from.</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Message">
<Description>
The Message is a Text string specified by the developer.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="3641144"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Index name="CDT">
<Properties>CreateTS</Properties>
</Index>

<Index name="CN">
<Properties>ClassName</Properties>
</Index>

<Index name="UN">
<Properties>Username</Properties>
</Index>

<Index name="Key">
<Properties>Key</Properties>
</Index>

<Method name="CreateDebugLog">
<Description><![CDATA[
The CreateDebugLog() method creates a new entry in the Debug Log Table.<br>
It defaults ClassName to the current class from which it was invoked.<br>
If pUsername is not supplied it will default to $username<br>
If you port the code to Production you can leave the debug calls in your code but
turn off debugging. The method GetDebugOnOff() returns the value in the Status Record
and if the property DebugingIsOn is False no record is created<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pClassName:%String="",pUsername:%String=$username,pKey:%String(MAXLEN=100)={$classmethod($classname(),"GetKey")},pMessage:%String(MAXLEN=3641144,TRUNCATE=1)="",&pStatus:%Status=$$$OK]]></FormalSpec>
<Implementation><![CDATA[
	set pStatus=$$$OK
	try {
		quit:'$classmethod($classname(),"GetDebugOnOff",.tSC)  set:pClassName="" pClassName=$classname()
		set obj=$classmethod($classname(),"%New") if pKey="" set pKey=..GetKey(pClassName)
		set obj.ClassName=pClassName,obj.Username=$s($l($g(pUsername))&&(pUsername'=$username):pUsername,1:$username),obj.Key=pKey,obj.Message=pMessage
		set pStatus=obj.%Save() if 'pStatus quit
	}
	catch ex {set pStatus=ex.AsStatus()}
	quit
]]></Implementation>
</Method>

<Method name="SetDebugOnOff">
<Description><![CDATA[
This method Sets a flag to indicate whether debugging is turned ON of OFF.<br>
The CreateDebugLog() method checks whether the value of this flag is ON or OFF. If Debugging is OFF
No Debug Log will be created. The SetDebugingOnOff() code can be overridden to get a value for
the flag from an application configuration class.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pOnOff:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set tSC=$$$OK,tSC=##class(Robot.Common.Debug.Status).SetDebugOnOff(pOnOff) quit tSC
]]></Implementation>
</Method>

<Method name="GetDebugOnOff">
<Description>
This method returns the value of the Debug Logging Flag. If the Robot.Common.Debug.Status record does not
exist it will be created with a default value of 1 (ON).</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&tSC:%Status]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	set tSC=$$$OK,return=##class(Robot.Common.Debug.Status).GetDebugOnOff(.tSC) quit return
]]></Implementation>
</Method>

<Method name="GetKey">
<Description><![CDATA[
If no key is specified in CreateDebugLog() then the method will generate a default key in the format
DebugKey_{N} where {N} is a sequential integer derived from the globsl ^Robot.Common.Debug.NextKey<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pClassname:%String=$classname()</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit pClassname_" Key: "_$i(^Robot.Common.Debug.NextKey)
]]></Implementation>
</Method>

<Method name="PurgeDebugLog">
<Description><![CDATA[
This method will purge all Debug logs older that Current Date - pNumberOfDays. It will passback the
number of Debug Log Rcords it has deleted. If a log record cannot be deleted an error will be displayed
and the method will continue execution<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pNumberOfDays:%Integer="",&pRowCount:%Integer]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,pRowCount=0
	try {
		if '+$g(pNumberOfDays) {
			set tSC=##class(Robot.Common.Configuration.ConfigurationSettings).GetConfigurationSettings("Robot.Common.Configuration.ConfigurationSettings",,.tSettings) quit:'tSC
			set pNumberOfDays=$g(tSettings("DFINumberOfDaysToKeepDebugLogs"),30)
		}
		set date=$zdt($h-pNumberOfDays,3),id=""
		for {
			set date=$o(^Robot.Common.Debug.LoggingI("CDT",date)) quit:date=""
			for {
				set id=$o(^Robot.Common.Debug.LoggingI("CDT",date,id)) quit:id=""
				set tSC=##class(Robot.Common.Debug.Logging).%DeleteId(id)
				if 'tSC {w !,"Unable to delete Debug Log with ID: "_id set tSC=$$$OK Continue}
				else {set pRowCount=pRowCount+1}
			}	
		}
	}
	catch ex {
		set tSC=ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="Test">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pUser:%String="Nigel",pKey:%String="Key1",pMessage:%String="Message 1",&pStatus:%Status]]></FormalSpec>
<Implementation><![CDATA[
	$$$DebugLog(pUser,pKey,pMessage,.dSC) if 'dSC set pStatus=dSC
	quit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.Debug.LoggingD</DataLocation>
<DefaultData>LoggingDefaultData</DefaultData>
<IdLocation>^Robot.Common.Debug.LoggingD</IdLocation>
<IndexLocation>^Robot.Common.Debug.LoggingI</IndexLocation>
<StreamLocation>^Robot.Common.Debug.LoggingS</StreamLocation>
<Data name="LoggingDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CreateTS</Value>
</Value>
<Value name="3">
<Value>ClassName</Value>
</Value>
<Value name="4">
<Value>Username</Value>
</Value>
<Value name="5">
<Value>Key</Value>
</Value>
<Value name="6">
<Value>Message</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Debug.Status">
<Description>
This class is basically a configuration settings class for the Debug Logging Component.
In DEV and QC namespaces where functionality is being tested then we typically want
debugging turned on but in Production we don't want that overhead and so we set the
property to 0 (false) and when the Debug Logger tries to create a new debug log record
this condition is tested and if if the value is 0 no record will be created
Much like $$$TRACE tests the Ensemble Production Setting "Log Trace Events"</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent</Super>
<TimeChanged>65853,3525.937416</TimeChanged>
<TimeCreated>65654,29502.090896</TimeCreated>

<Property name="RowId">
<Description>
The class has only one record with an ID of 1</Description>
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
<Private>1</Private>
</Property>

<Property name="DebuggingIsOn">
<Description>
This class has this one property and its purpose is to indicate if
Debugging is On or Not. I could have just tested to see if ^Robot.Common.Debug.Logging=1
but I am trying to avoid using raw global references in favour of proper
classes. </Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>RowId</Properties>
<Unique>1</Unique>
</Index>

<Method name="GetDebugOnOff">
<Description>
This method finds the first record in this table and returns the value of the property
DebuggingIsOn. The value of the property is set using a method in the EMCI.Debug.Logging
class.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&tSC:%Status]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,obj=""
	try {
		set obj=##class(Robot.Common.Debug.Status).%OpenId(1)
		if '$IsObject(obj) set obj=##class(Robot.Common.Debug.Status).%New(),obj.RowId=1,tSC=obj.%Save() quit:'tSC
	}
	catch ex {set tSC=ex.AsStatus()}
	quit $s('$IsObject(obj):1,1:+obj.DebuggingIsOn)
]]></Implementation>
</Method>

<Method name="SetDebugOnOff">
<Description>
This method sets the DebuggInOn Flag to the parameter pOnOff. pOnOff is a Boolean so pOnOff must be 0 or 1
If the Status Object does not exist it will be created with DebuggingIsOn=1</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pOnOff:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,obj="",pOnOff=+pOnOff
	try {
		set obj=##class(Robot.Common.Debug.Status).%OpenId(1)
		if '$IsObject(obj) set obj=##class(Robot.Common.Debug.Status).%New()
		set obj.DebuggingIsOn=pOnOff,tSC=obj.%Save() quit:'tSC
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.Debug.StatusD</DataLocation>
<DefaultData>StatusDefaultData</DefaultData>
<IdLocation>^Robot.Common.Debug.StatusD</IdLocation>
<IndexLocation>^Robot.Common.Debug.StatusI</IndexLocation>
<StreamLocation>^Robot.Common.Debug.StatusS</StreamLocation>
<Data name="StatusDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DebuggingIsOn</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.HL7MsgRouter.ABCRoutingRule">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65874,13440.306732</TimeChanged>
<TimeCreated>62858,5105.321898</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7MsgRouter.RuleAssistCompatible</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7MsgRouter.RoutingEngine" production="">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="Robot.Common.HL7MsgRouter.Schema"></constraint>
<when condition="((HL7.ParentId)!=(&quot;&quot;))">
<send transform="" target="Batch_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="2.3.1"></constraint>
<when condition="((HL7.ParentId)!=(&quot;&quot;))">
<send transform="" target="Batch_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="2.3.1"></constraint>
<constraint name="docType" value="FHS,BHS"></constraint>
<when condition="1">
<send transform="" target="Batch_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ADT_A08"></constraint>
<constraint name="docCategory" value="Robot.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ADT_A01"></constraint>
<when condition="1">
<send transform="" target="Priority_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ADT_A08"></constraint>
<constraint name="docCategory" value="Robot.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ADT_A01"></constraint>
<when condition="1">
<send transform="" target="ADT_A08_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<constraint name="docCategory" value="Robot.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ORM_O01"></constraint>
<when condition="((HL7.{PIDgrp.PV1grp.PV1:PatientClass})=(&quot;E&quot;))">
<send transform="" target="Priority_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<constraint name="docCategory" value="Robot.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ORM_O01"></constraint>
<when condition="1">
<send transform="" target="ORM_O01_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ADT_A31"></constraint>
<constraint name="docCategory" value="Robot.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ADT_A01"></constraint>
<when condition="1">
<send transform="" target="ADT_A31_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<constraint name="docCategory" value="2.3.1"></constraint>
<constraint name="docType" value="ORU_R01"></constraint>
<when condition="1">
<send transform="" target="Extra_Observations"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="Robot.Common.HL7MsgRouter.Schema"></constraint>
<when condition="1">
<send transform="" target="Regular_FileOperation"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.HL7MsgRouter.ADTLastNameTransform">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65874,13190.822536</TimeChanged>
<TimeCreated>60213,48389</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>0</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='Robot.Common.HL7MsgRouter.Schema:ADT_A01' targetDocType='2.3.1:ADT_A01' create='new' language='objectscript' >
<assign value='source.{MSH}' property='target.{MSH}' action='set'  />
<assign value='"ADT"' property='target.{MSH:9.1}' action='set'  />
<assign value='"A01"' property='target.{MSH:9.2}' action='set'  />
<assign value='"TEST"' property='target.{MSH:ReceivingApplication}' action='set'  />
<assign value='source.{EVN}' property='target.{EVN}' action='set'  />
<assign value='source.{PID}' property='target.{PID}' action='set'  />
<assign value='"NEWNAME"' property='target.{PID:5.1}' action='set'  />
<assign value='source.{PD1}' property='target.{PD1}' action='set'  />
<assign value='source.{NK1(1)}' property='target.{NK1(1)}' action='set'  />
<assign value='source.{PV1}' property='target.{PV1}' action='set'  />
<assign value='source.{PV2}' property='target.{PV2}' action='set'  />
<assign value='source.{DB1(1)}' property='target.{DB1(1)}' action='set'  />
<assign value='source.{OBX(1)}' property='target.{OBX(1)}' action='set'  />
<assign value='source.{AL1(1)}' property='target.{AL1(1)}' action='set'  />
<assign value='source.{DG1(1)}' property='target.{DG1(1)}' action='set'  />
<assign value='source.{DRG}' property='target.{DRG}' action='set'  />
<assign value='source.{PR1grp(1)}' property='target.{PR1grp(1)}' action='set'  />
<assign value='source.{GT1(1)}' property='target.{GT1(1)}' action='set'  />
<assign value='source.{IN1grp(1)}' property='target.{IN1grp(1)}' action='set'  />
<assign value='source.{ACC}' property='target.{ACC}' action='set'  />
<assign value='source.{UB1}' property='target.{UB1}' action='set'  />
<assign value='source.{UB2}' property='target.{UB2}' action='set'  />
</transform>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.HL7MsgRouter.AlertRule">
<Description>
See the AlertTable lookup table for a mapping of alert sources to email addresses. If no match is found in the lookup, EmailAlertTransformation sends the alert to the configured Recipient for the EMailAlertOperation.</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65874,13469.721758</TimeChanged>
<TimeCreated>62858,5105.314808</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.MsgRouter.RoutingEngine" production="">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="">
<constraint name="msgClass" value="Ens.AlertRequest"></constraint>
<when condition="1">
<send transform="Robot.Common.HL7MsgRouter.EmailAlertTransform" target="EMailAlertOperation"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.HL7MsgRouter.EmailAlertTransform">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65874,9481.629563</TimeChanged>
<TimeCreated>63260,3644.868482</TimeCreated>
<DependsOn>Ens.AlertRequest</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='Ens.AlertRequest' targetClass='Ens.AlertRequest' create='new' language='objectscript' >
<assign value='source.SourceConfigName' property='target.SourceConfigName' action='set'  />
<assign value='source.AlertText' property='target.AlertText' action='set'  />
<assign value='..Lookup("AlertTable",source.SourceConfigName)' property='target.AlertDestination' action='set'  />
</transform>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.HL7MsgRouter.Functions">
<Description>
Functions to use in rule definitions for the sample message router production.</Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.FunctionSet</Super>
<TimeChanged>65874,13217.94546</TimeChanged>
<TimeCreated>60211,45594.129234</TimeCreated>

<Method name="DayOfWeek">
<Description>
Returns the ordinal position of the day in the week, 
where 1 is Sunday, 2 is Monday, and so on.</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[$zd($H,10)
]]></Implementation>
</Method>

<Method name="TimeInSeconds">
<Description>
Returns the time as a number of seconds since midnight.</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[$p($H,",",2)
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Common.HL7MsgRouter.MainRoutingRule">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65874,14424.673125</TimeChanged>
<TimeCreated>62858,5105.321898</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7MsgRouter.RuleAssistCompatible</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7MsgRouter.RoutingEngine" production="">
<ruleSet name="MainRuleSet1">
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ADT_A08"></constraint>
<constraint name="docCategory" value="Robot.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ADT_A01"></constraint>
<when condition="1">
<send transform="" target="ADT_A08_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<constraint name="docCategory" value="Robot.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ORM_O01"></constraint>
<when condition="((HL7.{PIDgrp.PV1grp.PV1:PatientClass})=(&quot;E&quot;))">
<send transform="" target="Priority_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<constraint name="docCategory" value="Robot.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ORM_O01"></constraint>
<when condition="1">
<send transform="" target="ORM_O01_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ADT_A31"></constraint>
<constraint name="docCategory" value="Robot.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ADT_A01"></constraint>
<when condition="1">
<send transform="" target="ADT_A31_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<constraint name="docCategory" value="2.3.1"></constraint>
<constraint name="docType" value="ORU_R01"></constraint>
<when condition="1">
<send transform="" target="Extra_Observations"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="Robot.Common.HL7MsgRouter.Schema"></constraint>
<when condition="1">
<send transform="" target="DFI Regular FileOperation"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.HL7MsgRouter.NigelRule">
<Description>
Nigel Test Rule</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65874,16542.379463</TimeChanged>
<TimeCreated>65871,8974.966251</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7MsgRouter.RuleAssistCompatible</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7MsgRouter.RoutingEngine" production="">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="2.4"></constraint>
<constraint name="docName" value="ADT_A08"></constraint>
<when condition="1">
<send transform="" target="Regular_FileOperation"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.HL7MsgRouter.ORMLastNameTransform">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65874,11244</TimeChanged>
<TimeCreated>60213,48814</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>0</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='Robot.Common.HL7MsgRouter.Schema:ORM_O01' targetDocType='2.3.1:ORM_O01' create='new' language='objectscript' >
<assign value='source.{MSH}' property='target.{MSH}' action='set'  />
<assign value='source.{NTE(1)}' property='target.{NTE(1)}' action='set'  />
<assign value='source.{ORCgrp(1)}' property='target.{ORCgrp(1)}' action='set'  />
<assign value='source.{PIDgrp.PID}' property='target.{PIDgrp.PID}' action='set'  />
<assign value='"NEWNAME"' property='target.{PIDgrp.PID:5.1}' action='set'  />
</transform>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.HL7MsgRouter.XYZRoutingRule">
<Description>
Routing from the XYZ message source.</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65874,11244</TimeChanged>
<TimeCreated>62858,5105.884151</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7MsgRouter.RuleAssistCompatible</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7MsgRouter.RoutingEngine" production="">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="Robot.Common.HL7MsgRouter.Schema"></constraint>
<when condition="((HL7.ParentId)!=(&quot;&quot;))">
<send transform="" target="Batch_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="2.3.1"></constraint>
<constraint name="docType" value="FHS,BHS"></constraint>
<when condition="1">
<send transform="" target="Batch_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ADT_A08"></constraint>
<constraint name="docCategory" value="Robot.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ADT_A01"></constraint>
<when condition="(Contains(HL7.{PID:PatientName(1).familylastname},&quot;&lt;S&gt;&quot;))||(StartsWith(HL7.{PID:PatientName(1).familylastname},&quot;Z&quot;))">
<send transform="Robot.Common.HL7MsgRouter.ADTLastNameTransform" target="Other_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<constraint name="docCategory" value="Robot.Common.HL7MsgRouter.Schema"></constraint>
<constraint name="docType" value="ORM_O01"></constraint>
<when condition="(StartsWith(HL7.{PIDgrp.PID:PatientName(1).familylastname},&quot;S&quot;))||(StartsWith(HL7.{PIDgrp.PID:PatientName(1).familylastname},&quot;Z&quot;))">
<send transform="Robot.Common.HL7MsgRouter.ORMLastNameTransform" target="Other_FileOperation"></send>
<return></return>
</when>
</rule>
<rule name="">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="Robot.Common.HL7MsgRouter.Schema"></constraint>
<when condition="1">
<send transform="" target="Regular_FileOperation"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.Interface.InterfaceMappingDetails">
<Description><![CDATA[
This class resides in the ODS and contains a list of Interfaces that can be used by the method that every Clinicom
to ODS Trickle Feed Business Process that creates messages in each Message Queue in each Namespace.<br>
If the class and global are mapped to every Interface Namespace then that namespace can create its own
entry in this class using the method CreateInterfaceDefinitionInODS() in Robot.Common.Configuration.ConfigurationSettings<br>
The best approach is to copy this class to Robot.ODS.Interface.ODStoInterfaceMapping indicating that it should
reside (by class and global mapping) in the ODS Namespace.<br>]]></Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,%XML.Adaptor,%ZEN.DataModel.Adaptor,Cogs.JsonClass</Super>
<TimeChanged>65895,25806.134982</TimeChanged>
<TimeCreated>65817,82255.630887</TimeCreated>

<Parameter name="GlobalName">
<Default>^Robot.Common.Map.InterfaceDetail*</Default>
</Parameter>

<Property name="DataSource">
<Description>
Depending on the Data Source the pValues array that is passed to the CreateMessage() Method
of the Message Queue Classes will be specific to the available data at the time that the method
is called. If the Message Queue Class is being created in the Clinicom - ODS Trickle Feed then
the values are derived from the Transaction Request Message that flows through the Trickle Feed
Production. If The Data Source is EMCI then the Message Queue Fields will be the Master or Copy
Consumer RowId. If the Data Source is IHIS or aa Module in IHIS then the available fields will
be the Episode or Encounter reference and if that is linked to a Consumer Record then the appropriate
consumer class RowId will be passed. It is up to the Business Process in the Interface to know what
data is in the Message Queue Record and use that to retrieve the Source Object to Pass into the
Transformation Class</Description>
<Type>%String</Type>
<Parameter name="JSONNAME"/>
<Parameter name="VALUELIST" value=",ODSGeneral,ODSPatient,EMCIMaster,EMCICopy,IHIS{Module}"/>
</Property>

<Property name="ProductionClassName">
<Description>
The Interface Production Class Name is the Class Name of the DFI Interface that is running
in one of the Interface Namespaces</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="JSONNAME" value="productionClassName"/>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="InterfaceNamespace">
<Description>
The Namespace where the Interface is running</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="JSONNAME" value="interfaceNamespace"/>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="MessageQueueClassName">
<Description>
The Message Queue Class Name is required so that if the Message Queue Class has been inherited from
the base Message Queue Class Robot.Common.Queue.ODSMessageQueue. It is assumed that the code
will use $classmethod() to invoke the CreateMessage</Description>
<Type>%String</Type>
<Parameter name="JSONNAME" value="messageQueueClassName"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="IsActive">
<Description>
If the Iterface is not running then the IsActive flag should be set to 0</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
<Parameter name="JSONNAME" value="isActive"/>
</Property>

<Property name="IsProduction">
<Description>
IsProduction is a Boolean flag indicating whether the Production is running in a "LIVE" system
or NOT.</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="JSONNAME" value="isProduction"/>
</Property>

<Index name="PK">
<Description>
Create a Primary Key/IDKey on the Interface Name and Namespace. This enables us to have the same
Interface Name but running in more than one Namespace (i.e. QC and PRD)</Description>
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>DataSource,ProductionClassName,InterfaceNamespace</Properties>
<Unique>1</Unique>
</Index>

<Method name="UpdateInterfaceDetails">
<Description>
This method creates entries in this class</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataSource:%String="",pProductionClassName:%String(MAXLEN=200)="",pInterfaceNamespace:%String(MAXLEN=100)="",pMessageQueueClassName:%String(MAXLEN=100),pIsActive:%Boolean=0,pIsProduction:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		If '$l(pDataSource) set tSC=$$$ERROR(5001,"The Data Source Name must be specified") quit
		If '$l(pProductionClassName) set tSC=$$$ERROR(5001,"The Production Class Name must be specified") quit
		if '$l(pInterfaceNamespace) set tSC=$$$ERROR(5001,"The Interface Namespace Name must be specified") quit
		if $classmethod($classname(),"%ExistsId",pDataSource_"||"_pProductionClassName_"||"_pInterfaceNamespace) {set obj=$classmethod($classname(),"%OpenId",pDataSource_"||"_pProductionClassName_"||"_pInterfaceNamespace)}
		else {set obj=$classmethod($classname(),"%New"),obj.DataSource=pDataSource,obj.ProductionClassName=pProductionClassName,obj.InterfaceNamespace=pInterfaceNamespace}
		if $l(pMessageQueueClassName) set obj.MessageQueueClassName=pMessageQueueClassName
		if $l(pIsActive) set obj.IsActive=+pIsActive
		if $l(pIsProduction) set obj.IsProduction=+pIsProduction
		set tSC=obj.%Save() quit:'tSC
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"CreateInterfaceDetails","Create Interface Details Status: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="GetListOfInterfaces">
<Description>
This method returns a list of Objects from this class that will be used by the method that creates the
messages in each Interface. It ignores</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pInterfaces:%ListOfObjects]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set pInterfaces=##class(%ListOfObjects).%New()
		set tTable=$classname() if $l(tTable,".")>2 set tTable=$tr($p($classname(),".",1,$l($classname(),".")-1),": -","_")_"."_$p($classname(),".",$l($classname(),"."))
		set sql="select ID from "_tTable_" where IsActive = 1"
		set rs=##class(%ResultSet).%New("%DynamicQuery:SQL")
		set tSC=rs.Prepare(sql) if 'tSC quit
		set tSC=rs.Execute() if 'tSC quit
		while rs.Next() {
			set obj=$classmethod($classname(),"%OpenId",rs.Data("ID")) if '$IsObject(obj) {$$$DebugLog($username,"GetListOfInterfaces","The Interface Definition Details ("_$classname()_") for RowId: "_rs.Data("ID")_" does not exist",.dSC) continue}
			set tSC=pInterfaces.Insert(obj) if 'tSC {$$$DebugLog($username,"GetListOfInterfaces","Unable to Insert Object with ID: "_obj.%Id()_" with Error: "_$$$GetErrorText(tSC),.dSC) continue}
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"GetListOfInterfaces","Get List of Interfaces Status: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="CreateInterfaceMessages">
<Description>
This method builds a list of Interfaces where Messages must be created and then looks for the message properties in the array pValues
which is subscripted by InterfaceName, InterfaceNamespace, {Message_Property_Name})={value}
It returns an array of Message ID's for each message created per Interface and InterfaceNamespace
if pValues(InterfaceName,InterfaceNamespace)=-1 then ignore that Message Queue in that Interface/Namespace</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pValues:%String(MAXLEN=1000),&pMessageIDs:%String(MAXLEN=2000)]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=..GetListOfInterfaces(.pInterfaces) quit
		set key=""
		for {
			#dim pInterfaces as %ListOfObjects
			set obj=pInterfaces.GetNext(.key) quit:key=""  if '$IsObject(obj) $$$DebugLog($username,"Create Message Queue Records","The Object at Key: "_key_" is not a valid object",.dSC) continue
			set tDataSource=obj.DataSource,tProductionClassName=obj.ProductionClassName,tInterfaceNamespace=obj.InterfaceNamespace,tMessageQueueClass=obj.MessageQueueClassName
			if tDataSource="ODSPatient" {
				if $l($g(pValues("Messages.TransactionLog"))) {
					set tTransactionLog=pValues("Messages.TransactionLog")
					if $IsObject(tTransactionLog) {
						// Messages.TransactionLog
						// PatientNumber,EpisodeNumber,TransactionType,ClinicCode,DoctorCode,Action,ActivityDateTime,TrackingSequence,TrackingDate,LogType,VisitNumber
						set tValues("PatientNumber")=tTransactionLog.PatientNumber
						set tValues("EpisodeNumber")=tTransactionLog.EpisodeNumber
						set tValues("TransactionType")=tTransactionLog.TransactionType
						set tValues("ClinicCode")=tTransactionLog.ClinicCode
						set tValues("DoctorCode")=tTransactionLog.DoctorCode
						set tValues("Action")=tTransactionLog.Action
						set tValues("ActivityDateTime")=tTransactionLog.ActivityDateTime
						set tValues("TrackingSequence")=tTransactionLog.TrackingSequence
						set tValues("TrackingDate")=tTransactionLog.TrackingDate
						set tValues("LogType")=tTransactionLog.LogType
						set tValues("VisitNumber")=tTransactionLog.VisitNumber
						// The Class Name and Optionally the Method Name that created this Mesaage Queue Entry
						set tValues("ClassName")=$g(pValues("ClassName"))
						// Call the Message Queue Class CreateMessage() Method
						set tSC=$classmethod(tMessageQueueClass,"CreateMessage",.tValues,.tMessageId)
						if 'tSC {
							$$$DebugLog($username,"ODS Patient: CreateMessage",obj.MessageQueueClassName_" Create Message Error: "_$$$GetErrorText(tSC),.dSC)
							continue
						}
						set pMessageIDs(tDataSource,tProductionClassName,tInterfaceNamespace)=$g(tMessageId)
					}
					else {
						$$$DebugLog($username,"CreateInterfaceMessages","ODS Patient: Transaction Log is not an Object",.dSC)
						continue
					}
				}
				else {
					$$$DebugLog($username,"CreateInterfaceMessages","ODS Patient: No Messages.TransactionLog value passed in pValues",.dSC)
					continue
				}
			}
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"CreateInterfaceMessages","Data Source: "_tDataSource_" Call Interface: "_$g(tProductionClassName)_" Interface Namespace: "_$g(tInterfaceNamespace)_" Status: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.Map.InterfaceDetailsD</DataLocation>
<DefaultData>InterfaceMappingDetailsDefaultData</DefaultData>
<IdLocation>^Robot.Common.Map.InterfaceDetailsD</IdLocation>
<IndexLocation>^Robot.Common.Map.InterfaceDetailsI</IndexLocation>
<StreamLocation>^Robot.Common.Map.InterfaceDetailsS</StreamLocation>
<Data name="InterfaceMappingDetailsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>MessageQueueClassName</Value>
</Value>
<Value name="3">
<Value>IsActive</Value>
</Value>
<Value name="4">
<Value>IsProduction</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Messages.EMCIDataLoadRequest">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.Request</Super>
<TimeChanged>65889,29587.31463</TimeChanged>
<TimeCreated>65840,902.31977</TimeCreated>

<Property name="MessageId">
<Description>
This is the ID of the Message in the EMCIMessageQueue class</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>EMCIDataLoadRequestDefaultData</DefaultData>
<Data name="EMCIDataLoadRequestDefaultData">
<Structure>listnode</Structure>
<Subscript>"EMCIDataLoadRequest"</Subscript>
<Value name="1">
<Value>MessageId</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Messages.EMCIDataLoadResponse">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.Response</Super>
<TimeChanged>65889,28499.931492</TimeChanged>
<TimeCreated>65461,3027.851171</TimeCreated>

<Property name="MessageId">
<Type>%Integer</Type>
</Property>

<Property name="HTTPStatus">
<Type>Robot.Common.CodeTables.HTTPStatusCodes</Type>
<InitialExpression>201</InitialExpression>
</Property>

<Property name="HTTPOperationStatus">
<Type>%Status</Type>
</Property>

<Property name="FileOperationStatus">
<Type>%Status</Type>
<InitialExpression>$$$OK</InitialExpression>
</Property>

<Property name="ResponseStatus">
<Type>%Status</Type>
<InitialExpression>$$$OK</InitialExpression>
</Property>

<Method name="UpdateDataLoadResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pRequest:Robot.Common.Messages.EMCIDataLoadRequest="",&pResponse:Robot.Common.Messages.EMCIDataLoadResponse,pHTTPStatus:Robot.Common.CodeTables.HTTPStatusCodes,pHTTPOperationStatus:%String="",pFileOperationStatus:%Status=$$$OK,pResponseStatus:%Status=$$$OK]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if '$IsObject(pResponse) set pResponse=##class(Robot.Common.Messages.EMCIDataLoadResponse).%New()
		set pResponse.MessageId=pRequest.MessageId
		if $l(pResponseStatus) set pResponse.ResponseStatus=pResponseStatus
		if $l(pHTTPStatus) do pResponse.HTTPStatusSetObjectId(pHTTPStatus)
		if $l(pHTTPOperationStatus) set pResponse.HTTPOperationStatus=pH
		if $l(pFileOperationStatus) set pResponse.FileOperationStatus=pFileOperationStatus
		set tSC=pResponse.%Save() if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"EMCI Data Load Response","Update EMCI Data Load Response Message Status: "_$s(tSC:1,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>EMCIDataLoadResponseDefaultData</DefaultData>
<Data name="EMCIDataLoadResponseDefaultData">
<Subscript>"EMCIDataLoadResponse"</Subscript>
<Value name="1">
<Value>MessageId</Value>
</Value>
<Value name="2">
<Value>HTTPStatus</Value>
</Value>
<Value name="3">
<Value>HTTPOperationStatus</Value>
</Value>
<Value name="4">
<Value>FileOperationStatus</Value>
</Value>
<Value name="5">
<Value>ResponseStatus</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Messages.EMCITestRequest">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.Request</Super>
<TimeChanged>65888,30877.508399</TimeChanged>
<TimeCreated>65840,902.31977</TimeCreated>

<Property name="MessageId">
<Description>
This is the ID of the Message in the EMCIMessageQueue class</Description>
<Type>%String</Type>
</Property>

<Property name="Manifest">
<Type>Robot.Common.Batch.Manifest</Type>
</Property>

<Property name="RecordNumber">
<Type>%Integer</Type>
</Property>

<Property name="FHIRRequestBody">
<Type>%CharacterStream</Type>
</Property>

<Property name="FHIRHTTPMethod">
<Type>%String</Type>
<InitialExpression>"POST"</InitialExpression>
<Parameter name="VALUELIST" value=",POST,PUT,DELETE,LINK"/>
</Property>

<Property name="EMCIUId">
<Type>%String</Type>
</Property>

<Property name="ManifestFileDirectory">
<Type>%String</Type>
</Property>

<Property name="FHIRRequestFileName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Property name="FHIROperationOutcomeFileName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Method name="UpdateEMCIDLRequest">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pRequest:Robot.Common.Messages.EMCITestRequest="",pManifestId:%String="",pRecordNumber:%String="",pMessageId:%String="",pFHIRRequestBody:%CharacterStream,pFHIRHTTPMethod:%String,pEMCIUId:%String="",&pManifestFileDirectory:%String(MAXLEN=300)="",pFHIRRequestFileName:%String(MAXLEN=300)="",pFHIROperationOutcomeFileName:%String(MAXLEN=300)=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if '$IsObject(pRequest) set pRequest=##class(Robot.Common.Messages.EMCITestRequest).%New()
		if $l(pManifestDT) set pRequest.ManifestDT=pManifestDT
		if $l(pMessageId) set pRequest.MessageId=pMessageId
		if $l(pRecordNumber) set pRequest.RecordNumber=pRecordNumber
		if $l(pFHIRHTTPMethod) set pRequest.FHIRHTTPMethod=pFHIRHTTPMethod
		if $IsObject(pFHIRRequestBody) set tSC=pFHIRRequestBody.Rewind() quit:'tSC  set tSC=pRequest.FHIRRequestBody.CopyFrom(pFHIRRequestBody) quit:'tSC
		if $l(pManifestFileDirectory) set pRequest.ManifestFileDirectory=pManifestFileDirectory
		if $l(pFHIRRequestFileName) set pRequest.FHIRRequestFileName=pFHIRRequestFileName
		if $l(pFHIROperationOutcomeFileName) set pRequest.FHIROperationOutcomeFileName=pFHIROperationOutcomeFileName
		set tSC=pRequest.%Save() if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"EMCI Data Load Response","Update EMCI Test Response Message Status: "_$s(tSC:1,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>EMCITestRequestDefaultData</DefaultData>
<Data name="EMCITestRequestDefaultData">
<Structure>listnode</Structure>
<Subscript>"EMCITestRequest"</Subscript>
<Value name="1">
<Value>MessageId</Value>
</Value>
<Value name="2">
<Value>Manifest</Value>
</Value>
<Value name="3">
<Value>RecordNumber</Value>
</Value>
<Value name="4">
<Value>FHIRRequestBody</Value>
</Value>
<Value name="5">
<Value>FHIRHTTPMethod</Value>
</Value>
<Value name="6">
<Value>EMCIUId</Value>
</Value>
<Value name="7">
<Value>ManifestFileDirectory</Value>
</Value>
<Value name="8">
<Value>FHIRRequestFileName</Value>
</Value>
<Value name="9">
<Value>FHIROperationOutcomeFileName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Messages.EMCITestResponse">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.Response</Super>
<TimeChanged>65888,30721.466137</TimeChanged>
<TimeCreated>65461,3027.851171</TimeCreated>

<Property name="MessageId">
<Type>%Integer</Type>
</Property>

<Property name="ManifestDT">
<Type>%String</Type>
</Property>

<Property name="RecordNumber">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="ResponseStatus">
<Type>%Status</Type>
<InitialExpression>$$$OK</InitialExpression>
</Property>

<Property name="HTTPStatus">
<Type>Robot.Common.CodeTables.HTTPStatusCodes</Type>
<InitialExpression>201</InitialExpression>
</Property>

<Property name="FileStatus">
<Type>%Status</Type>
<InitialExpression>$$$OK</InitialExpression>
</Property>

<Property name="FHIRResponseBody">
<Type>%CharacterStream</Type>
</Property>

<Property name="ManifestFileDirectory">
<Type>%String</Type>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Property name="FHIROperationOutcomeFileName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Method name="UpdateEMCIDLResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pRequest:Robot.Common.Messages.EMCITestRequest="",&pResponse:Robot.Common.Messages.EMCITestResponse,pResponseStatus:%Status,pHTTPStatus:%String="",pFileStatus:%Status=$$$OK,pFHIRResponseBody:%CharacterStream,&pManifestFileDirectory:%String(MAXLEN=300)="",&pOperationOutcomeFileName:%String(MAXLEN=300)=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if '$IsObject(pResponse) set pResponse=##class(Robot.Common.Messages.EMCITestResponse).%New()
		set pResponse.ManifestId=pRequest.ManifestId
		set pResponse.MessageId=pRequest.MessageId
		set pResponse.RecordNumber=pRequest.RecordNumber
		if $l(pResponseStatus) set pResponse.ResponseStatus=pResponseStatus
		if $l(pHTTPStatus) do pResponse.HTTPStatusSetObjectId(pHTTPStatus)
		if $l(pFileStatus) set pResponse.FileStatus=pFileStatus
		if $IsObject(pFHIRResponseBody) set tSC=pFHIRResponseBody.Rewind() quit:'tSC  set tSC=pResponse.FHIRResponseBody.CopyFrom(pFHIRResponseBody) quit:'tSC
		if $l(pManifestFileDirectory) set pResponse.ManifestFileDirectory=pManifestFileDirectory
		if $l(pOperationOutcomeFileName) set pResponse.FHIROperationOutcomeFileName=pOperationOutcomeFileName
		set tSC=pResponse.%Save() if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"EMCI Data Load Response","Update EMCI Data Load Response Message Status: "_$s(tSC:1,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>EMCITestResponseDefaultData</DefaultData>
<Data name="EMCITestResponseDefaultData">
<Structure>listnode</Structure>
<Subscript>"EMCITestResponse"</Subscript>
<Value name="1">
<Value>MessageId</Value>
</Value>
<Value name="2">
<Value>ManifestDT</Value>
</Value>
<Value name="3">
<Value>RecordNumber</Value>
</Value>
<Value name="4">
<Value>ResponseStatus</Value>
</Value>
<Value name="5">
<Value>HTTPStatus</Value>
</Value>
<Value name="6">
<Value>FileStatus</Value>
</Value>
<Value name="7">
<Value>FHIRResponseBody</Value>
</Value>
<Value name="8">
<Value>ManifestFileDirectory</Value>
</Value>
<Value name="9">
<Value>FHIROperationOutcomeFileName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Messages.EMailResponseMessage">
<Super>Ens.Response</Super>
<TimeChanged>65845,86345.068916</TimeChanged>
<TimeCreated>65845,85696.127393</TimeCreated>

<Property name="Status">
<Type>%Status</Type>
</Property>

<Property name="FailedRecipients">
<Type>%ListOfDataTypes</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>EMailResponseMessageDefaultData</DefaultData>
<Data name="EMailResponseMessageDefaultData">
<Subscript>"EMailResponseMessage"</Subscript>
<Value name="1">
<Value>Status</Value>
</Value>
<Value name="2">
<Value>FailedRecipients</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Messages.EmailRequestMessage">
<Super>Ens.Request</Super>
<TimeChanged>65845,85870.536974</TimeChanged>
<TimeCreated>65845,85638.471219</TimeCreated>

<Property name="From">
<Type>%String</Type>
<InitialExpression>"nigel@healthsystems.co.za"</InitialExpression>
</Property>

<Property name="To">
<Description>
Seperate Recipients with a "," or ";"</Description>
<Type>%String</Type>
<InitialExpression>"nigel@healthsystems.co.za"</InitialExpression>
</Property>

<Property name="Subject">
<Type>%String</Type>
<InitialExpression>"A Message from the DFI Interface"</InitialExpression>
</Property>

<Property name="Text">
<Description>
Use Write() or WriteLine() Methods</Description>
<Type>%CharacterStream</Type>
</Property>

<Property name="Attachments">
<Description>
List of attachments seperated by ;</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="10000"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>EmailRequestMessageDefaultData</DefaultData>
<Data name="EmailRequestMessageDefaultData">
<Subscript>"EmailRequestMessage"</Subscript>
<Value name="1">
<Value>From</Value>
</Value>
<Value name="2">
<Value>To</Value>
</Value>
<Value name="3">
<Value>Subject</Value>
</Value>
<Value name="4">
<Value>Text</Value>
</Value>
<Value name="5">
<Value>Attachments</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Messages.FHIRFileRequest">
<Super>Ens.Request</Super>
<TimeChanged>65874,11244</TimeChanged>
<TimeCreated>65851,38679.561662</TimeCreated>

<Property name="MessageId">
<Type>%String</Type>
</Property>

<Property name="FHIRBody">
<Type>%CharacterStream</Type>
</Property>

<Property name="FileDirectory">
<Type>%String</Type>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Property name="FileName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>FHIRFileRequestDefaultData</DefaultData>
<Data name="FHIRFileRequestDefaultData">
<Structure>listnode</Structure>
<Subscript>"FHIRFileRequest"</Subscript>
<Value name="1">
<Value>MessageId</Value>
</Value>
<Value name="2">
<Value>FHIRBody</Value>
</Value>
<Value name="3">
<Value>FileDirectory</Value>
</Value>
<Value name="4">
<Value>FileName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Messages.FHIRFileResponse">
<Super>Ens.Response</Super>
<TimeChanged>65874,11244</TimeChanged>
<TimeCreated>65851,38852.902704</TimeCreated>

<Property name="MessageId">
<Type>%String</Type>
</Property>

<Property name="ResponseStatus">
<Type>%Status</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>FHIRFileResponseDefaultData</DefaultData>
<Data name="FHIRFileResponseDefaultData">
<Structure>listnode</Structure>
<Subscript>"FHIRFileResponse"</Subscript>
<Value name="1">
<Value>MessageId</Value>
</Value>
<Value name="2">
<Value>ResponseStatus</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Messages.FHIRHTTPRequest">
<Super>Ens.Request</Super>
<TimeChanged>65881,64716.089115</TimeChanged>
<TimeCreated>65851,38679.561662</TimeCreated>

<Property name="MessageId">
<Type>%String</Type>
</Property>

<Property name="FHIRBody">
<Type>%CharacterStream</Type>
</Property>

<Property name="HTTPMethod">
<Type>%String</Type>
</Property>

<Property name="URL">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>FHIRHTTPRequestDefaultData</DefaultData>
<Data name="FHIRHTTPRequestDefaultData">
<Subscript>"FHIRHTTPRequest"</Subscript>
<Value name="1">
<Value>MessageId</Value>
</Value>
<Value name="2">
<Value>FHIRBody</Value>
</Value>
<Value name="3">
<Value>HTTPMethod</Value>
</Value>
<Value name="4">
<Value>URL</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Messages.FHIRHTTPResponse">
<Super>Ens.Response</Super>
<TimeChanged>65874,11244</TimeChanged>
<TimeCreated>65851,38852.902704</TimeCreated>

<Property name="MessageId">
<Type>%String</Type>
</Property>

<Property name="FHIRResponseBody">
<Type>%CharacterStream</Type>
</Property>

<Property name="HTTPStatus">
<Type>%String</Type>
</Property>

<Property name="HTTPStatusText">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Location">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="ResponseStatus">
<Type>%Status</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>FHIRHTTPResponseDefaultData</DefaultData>
<Data name="FHIRHTTPResponseDefaultData">
<Structure>listnode</Structure>
<Subscript>"FHIRHTTPResponse"</Subscript>
<Value name="1">
<Value>MessageId</Value>
</Value>
<Value name="2">
<Value>FHIRResponseBody</Value>
</Value>
<Value name="3">
<Value>HTTPStatus</Value>
</Value>
<Value name="4">
<Value>HTTPStatusText</Value>
</Value>
<Value name="5">
<Value>Location</Value>
</Value>
<Value name="6">
<Value>ResponseStatus</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Messages.TransactionRequest">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.Request</Super>
<TimeChanged>65816,13233.519316</TimeChanged>
<TimeCreated>65461,3023.422992</TimeCreated>

<Property name="MessageID">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>TransactionRequestDefaultData</DefaultData>
<Data name="TransactionRequestDefaultData">
<Structure>listnode</Structure>
<Subscript>"TransactionRequest"</Subscript>
<Value name="1">
<Value>MessageID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Messages.TransactionResponse">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.Response</Super>
<TimeChanged>65895,23548.787227</TimeChanged>
<TimeCreated>65461,3027.851171</TimeCreated>

<Property name="MessageID">
<Type>%String</Type>
</Property>

<Property name="HTTPStatus">
<Type>Robot.Common.CodeTables.HTTPStatusCodes</Type>
</Property>

<Property name="FileStatus">
<Type>%Status</Type>
</Property>

<Property name="HL7ACKCode">
<Type>%String</Type>
</Property>

<Property name="HL7ACKMessage">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="ResponseStatus">
<Type>%Status</Type>
<InitialExpression>$$$OK</InitialExpression>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>TransactionResponseDefaultData</DefaultData>
<Data name="TransactionResponseDefaultData">
<Subscript>"TransactionResponse"</Subscript>
<Value name="1">
<Value>MessageID</Value>
</Value>
<Value name="2">
<Value>HTTPStatus</Value>
</Value>
<Value name="3">
<Value>FileStatus</Value>
</Value>
<Value name="4">
<Value>ResponseStatus</Value>
</Value>
<Value name="5">
<Value>HL7ACKCode</Value>
</Value>
<Value name="6">
<Value>HL7ACKMessage</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Operation.EMailOperation">
<Description>
This is the default Email Operation used by a DFI Interface. It is the Email Operation that the
DFI Common Alert Notification uses as well as any other Email requirement, e.g. Reports. This Email
Operation is not used by the Ensemble Alert Notification System which uses the Ens.Alert Email Operation.
</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65878,14081.438504</TimeChanged>
<TimeCreated>65825,40932.407814</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.EMail.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.EMail.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="SendEmail">
<FormalSpec>pRequest:Robot.Common.Messages.EmailRequestMessage,*pResponse:Robot.Common.Messages.EMailResponseMessage</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set pResponse=##class(Robot.Common.Messages.EMailResponseMessage).%New(),pResponse.Status=tSC
		s pMailMessage=##class(%Net.MailMessage).%New()
		s pMailMessage.From=pRequest.From
		set i="" for i=1:1:$length(pRequest.To,",") d pMailMessage.To.Insert($piece(pRequest.To,",",i))
		s pMailMessage.ContentType="text/html"
		s pMailMessage.Subject=pRequest.Subject
		if $l(pRequest.Attachements) {
			for i=1:1:$l(pRequest.Attachements,",") {
				set file=$p(pRequest.Attachments,",",i) set delim="\" if file["/" set delim="/"
				set dir=$p(file,delim,$l(file,delim)),filename=$p(file,dir,2)
				set tSC=pMailMessage.AttachFile(dir,filename) if 'tSC quit
			}
		}
		
		d pMailMessage.TextData.Rewind()
		d pMailMessage.TextData.CopyFrom(pRequest.Text)
		d pMailMessage.TextData.WriteLine("")
		set tSC=..Adapter.SendMail(pMailMessage,.tFailedRecipients) if 'tSC quit
		if $IsObject(tFailedRecipients) {
			set key="" for {set email=tFailedRecipients.Next(.key) quit:key=""  do pResponse.FailedRecipients.Insert(email)}
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	set msg="Email Send Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)) $$$TRACE(msg)
	$$$DebugLog($username,"SendEmail",msg,.dSC)
	set pResponse.Status=tSC
	quit tSC
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="Robot.Common.Messages.EMailRequestMessage"> 
		<Method>SendEmail</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>

<Method name="OnInit">
<Description>
This user callback method is called via initConfig() from %OnNew() or in the case of SOAP Services from OnPreSOAP()</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$TRACE("Class Name: "_$classname())
	$$$TRACE("Production Item Name: "_..%ConfigName)
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Common.Operation.FHIRFileOperation">
<Description>
This is the default DFI FHIR File Operation that is used to write FHIR JSDON Request and Response
messages to file. The File Path and File Name are xderived from the DFI Condfiguration Settings
for the specific Interface.</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65861,40287.138027</TimeChanged>
<TimeCreated>65484,80162.000625</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.File.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.File.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="WriteFHIRMessageToFile">
<FormalSpec>pRequest:Robot.Common.Messages.FHIRFileRequest,*pResponse:Robot.Common.Messages.FHIRFileResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set pResponse=##class(Robot.Common.Messages.FHIRFileResponse).%New(),pResponse.MessageId=pRequest.MessageId
		set tConfig=##class(Robot.Common.Configuration.ConfigurationSettings).GetConfigurationSettings(,$g(tConfig),.tSettings) if '$IsObject(tConfig) set tSC=$$$ERROR(5001,"Unable to Open Configuration Settings") quit
		if $l(pRequest.FileDirectory) {set tFilePath=pRequest.FileDirectory}
		elseif $l(..Adapter.FilePath) {set tFilePath=..Adapter.FilePath}
		elseif $l($g(tSettings("DFIFHIRFileDirectory"))) {set tFilePath=tSettings("DFIFHIRFileDirectory")}
		elseif $l($g(tSettings("DFIFileDirectory"))) {set tFilePath=tSettings("DFIFileDirectory")}
		else {set tFilePath="FHIR JSON Files"}
		set tFilePath=##class(%File).NormalizeDirectory(tFilePath)
		$$$TRACE("File Path: "_tFilePath)
		if $l(pRequest.FileName) {set tFileName=pRequest.FileName}
		elseif $l($g(tSettings("DFIFHIRResourceRequestJSONFileName"))) {set tFileName=tSettings("DFIFHIRResourceRequestJSONFileName")}
		else {set tFileName=$tr(..Adapter.CreateFilename("FHIR Message","%F_%Q"),"-","")}
		$$$TRACE("File Name: "_tFileName)
		set tFileName=tFilePath_tFileName
		$$$TRACE("Full File Name: "_tFileName)
		set tSC=..Adapter.PutStream(tFileName,pRequest.FHIRBody) if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	set msg="Output to File Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC))
	$$$DebugLog($username,"FHIRFileOperation",msg,.dSC) $$$TRACE(msg)
	quit tSC
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="Robot.Common.Messages.FHIRFileRequest"> 
		<Method>WriteFHIRMessageToFile</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.Operation.FHIRHTTPOperation">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65845,63807.469852</TimeChanged>
<TimeCreated>65482,84866.019574</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.HTTP.OutboundAdapter</Type>
</Property>

<Property name="HTTPRequest">
<Type>%Net.HttpRequest</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="SendFHIRHTTPMessage">
<FormalSpec>pRequest:Robot.Common.Messages.EMCIDataLoadRequest,*pResponse:Robot.Common.Messages.EMCIDataLoadResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK,pResponse="",tRetryCount=0
	Try {
		$$$TRACE("HTTP Operation Request")
Retry	;
		If tRetryCount $$$TRACE("Retry Attempt: "_tRetryCount)
		set pResponse=##class(Robot.Common.Messages.EMCIDataLoadResponse).%New()
		Set tResponse = ##class(%Net.HttpResponse).%New(),tResponse.ContentType="application/fhir+json"
		If '$IsObject(..HTTPRequest) {
			Set pHttpRequest = ##class(%Net.HttpRequest).%New()
			Set pHttpRequest.Server = ..Adapter.HTTPServer
			Set pHttpRequest.Port = ..Adapter.HTTPPort
			Set pHttpRequest.ProxyServer = ..Adapter.ProxyServer
			Set pHttpRequest.ProxyPort = ..Adapter.ProxyPort
			Set pHttpRequest.ProxyTunnel = ..Adapter.ProxyHttpTunnel
			Set pHttpRequest.ProxyHTTPS = 1
			Set pHttpRequest.SSLConfiguration = ..Adapter.SSLConfig
			Set pHttpRequest.UserAgent = "curl/7.29.0"
			Set pHttpRequest.ContentEncoding = "HL7-ER7"
			Set pHttpRequest.ContentCharset = "UTF-8"
			Set pHttpRequest.ContentType = "application/fhir+json"
			Set pHttpRequest.AcceptGzip = 0
			Set pHttpRequest.WriteRawMode = 0
			Set pHttpRequest.ReadRawMode = 0
			Set pHttpRequest.OpenTimeout = ..Adapter.ConnectTimeout
			Set pHttpRequest.Timeout = ..Adapter.ResponseTimeout
			Set pHttpRequest.WriteTimeout = ..Adapter.WriteTimeout
			Set pHttpRequest.SocketTimeout = 115
			do ..HTTPRequest.EntityBody.CopyFrom(pRequest.FHIRJSONBody)
		}
		Set ..HTTPRequest.HttpResponse=tResponse
		Do ..HTTPRequest.EntityBody.Write(message)
		Set tSC = ..HTTPRequest.Post(..Adapter.URL,0,1) if 'tSC {
			// I can link this to a <READ> error generated in the HTTPRequest Send() Method
			// So I log it in the debug log and attempt to resend. I will attempt to resend up to 5 times before abandoning
			$$$DebugLog($username,"HTTP Write","Error: "_$$$GetErrorText(tSC),.dSC)
			Set tRetryCount = tRetryCount+1 if tRetryCount>5 set tRetryCount=0 Quit
			$$$DebugLog($username,"HTTP Write","Attempting to Resend: "_tRetryCount,.dSC)
			$$$TRACE("Going to attempt Retry: "_tRetryCount) set tSC=$$$OK
			Goto Retry
		}
		Set response = ..HTTPRequest.HttpResponse
		$$$TRACE("HTTP Response Status: "_response.StatusCode)
		If response.StatusCode=200 {
			If $IsObject(response.Data) {
				Set message = "" while 'response.Data.AtEnd { Set message=message_response.Data.Read(,.tSC) if 'tSC quit }
				do pResponse.HTTPResponseBody.Write(message) set pResponse.HTTPStatus=200,pResponse.HTTPStatus=200
				set pResponse.DocumentType="F",pResponse.ManifestID=pRequest.ManifestID,pResponse.ResponseStatus=$$$OK
			}
		}
		Else {
			Set message = "" if $IsObject(response.Data) { Set message="" while 'response.Data.AtEnd { Set message=message_response.Data.Read(,.tSC) if 'tSC quit } }
			Set tSC = $$$ERROR(5001,"HTTP Response Status is "_response.StatusCode_" with Error Text: "_response.ReasonPhrase_" with Content: "_message)
			set pResponse.HTTPStatus=tResponse.StatusCode,pResponse.ManifestID=pRequest.ManifestID,pResponse.MessageId=pRequest.MessageID,pResponse.ResponseStatus=tSC
		}
	}
	Catch ex {
		Set tSC = ex.AsStatus()
	}
	$$$TRACE("Outcome of HTTP Operation: "_$Select(tSC:"Ok",1:"Error: "_$$$GetErrorText(tSC)))
	Quit $$$OK
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="Robot.Common.Messages.EMCIDataLoadRequest">
		<Method>SendFHIRHTTPMessage</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.Operation.FHIRHTTPSOperation">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65845,63860.970502</TimeChanged>
<TimeCreated>65482,84866.019574</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.HTTP.OutboundAdapter</Type>
</Property>

<Property name="HTTPRequest">
<Type>%Net.HttpRequest</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="SendFHIRHTTPMessage">
<FormalSpec>pRequest:Robot.Common.Messages.EMCIDataLoadRequest,*pResponse:Robot.Common.Messages.EMCIDataLoadResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK,pResponse="",tRetryCount=0
	Try {
		$$$TRACE("HTTP Operation Request")
Retry	;
		If tRetryCount $$$TRACE("Retry Attempt: "_tRetryCount)
		set pResponse=##class(Robot.Common.Messages.EMCIDataLoadResponse).%New()
		Set tResponse = ##class(%Net.HttpResponse).%New(),tResponse.ContentType="application/fhir+json"
		If '$IsObject(..HTTPRequest) {
			Set pHttpRequest = ##class(%Net.HttpRequest).%New()
			Set pHttpRequest.Server = ..Adapter.HTTPServer
			Set pHttpRequest.Port = ..Adapter.HTTPPort
			Set pHttpRequest.ProxyServer = ..Adapter.ProxyServer
			Set pHttpRequest.ProxyPort = ..Adapter.ProxyPort
			Set pHttpRequest.ProxyTunnel = ..Adapter.ProxyHttpTunnel
			Set pHttpRequest.ProxyHTTPS = 1
			Set pHttpRequest.SSLConfiguration = ..Adapter.SSLConfig
			Set pHttpRequest.UserAgent = "curl/7.29.0"
			Set pHttpRequest.ContentEncoding = "HL7-ER7"
			Set pHttpRequest.ContentCharset = "UTF-8"
			Set pHttpRequest.ContentType = "application/fhir+json"
			Set pHttpRequest.AcceptGzip = 0
			Set pHttpRequest.WriteRawMode = 0
			Set pHttpRequest.ReadRawMode = 0
			Set pHttpRequest.OpenTimeout = ..Adapter.ConnectTimeout
			Set pHttpRequest.Timeout = ..Adapter.ResponseTimeout
			Set pHttpRequest.WriteTimeout = ..Adapter.WriteTimeout
			Set pHttpRequest.SocketTimeout = 115
			do ..HTTPRequest.EntityBody.CopyFrom(pRequest.FHIRJSONBody)
		}
		Set ..HTTPRequest.HttpResponse=tResponse
		Do ..HTTPRequest.EntityBody.Write(message)
		Set tSC = ..HTTPRequest.Post(..Adapter.URL,0,1) if 'tSC {
			// I can link this to a <READ> error generated in the HTTPRequest Send() Method
			// So I log it in the debug log and attempt to resend. I will attempt to resend up to 5 times before abandoning
			$$$DebugLog($username,"HTTP Write","Error: "_$$$GetErrorText(tSC),.dSC)
			Set tRetryCount = tRetryCount+1 if tRetryCount>5 set tRetryCount=0 Quit
			$$$DebugLog($username,"HTTP Write","Attempting to Resend: "_tRetryCount,.dSC)
			$$$TRACE("Going to attempt Retry: "_tRetryCount) set tSC=$$$OK
			Goto Retry
		}
		Set response = ..HTTPRequest.HttpResponse
		$$$TRACE("HTTP Response Status: "_response.StatusCode)
		If response.StatusCode=200 {
			If $IsObject(response.Data) {
				Set message = "" while 'response.Data.AtEnd { Set message=message_response.Data.Read(,.tSC) if 'tSC quit }
				do pResponse.HTTPResponseBody.Write(message) set pResponse.HTTPStatus=200,pResponse.HTTPStatus=200
				set pResponse.DocumentType="F",pResponse.ManifestID=pRequest.ManifestID,pResponse.ResponseStatus=$$$OK
			}
		}
		Else {
			Set message = "" if $IsObject(response.Data) { Set message="" while 'response.Data.AtEnd { Set message=message_response.Data.Read(,.tSC) if 'tSC quit } }
			Set tSC = $$$ERROR(5001,"HTTP Response Status is "_response.StatusCode_" with Error Text: "_response.ReasonPhrase_" with Content: "_message)
			set pResponse.HTTPStatus=tResponse.StatusCode,pResponse.ManifestID=pRequest.ManifestID,pResponse.MessageId=pRequest.MessageID,pResponse.ResponseStatus=tSC
		}
	}
	Catch ex {
		Set tSC = ex.AsStatus()
	}
	$$$TRACE("Outcome of HTTP Operation: "_$Select(tSC:"Ok",1:"Error: "_$$$GetErrorText(tSC)))
	Quit $$$OK
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="Robot.Common.Messages.EMCIDataLoadRequest">
		<Method>SendFHIRHTTPMessage</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.Operation.PIXHL7FileOperation">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65881,5924.078521</TimeChanged>
<TimeCreated>65484,80162.000625</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.File.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.File.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="WriteHL7MessageToFile">
<FormalSpec>pRequest:EnsLib.HL7.Message,*pResponse:EnsLib.HL7.Message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tConfig=##class(Robot.Common.Configuration.ConfigurationSettings).GetConfigurationSettings(,$g(tConfig),.tSettings) if '$IsObject(tConfig) set tSC=$$$ERROR(5001,"Unable to Open Configuration Settings") quit
		if $l(..Adapter.FilePath) {set tFilePath=..Adapter.FilePath}
		elseif $l($g(tSettings("DFIHL7FileDirectory"))) {set tFilePath=tSettings("DFIHL7FileDirectory")}
		elseif $l($g(tSettings("DFIFileDirectory"))) {set tFilePath=tSettings("DFIFileDirectory")}
		else {set tFilePath="HL7 Files"}
		set tFilePath=##class(%File).NormalizeDirectory(tFilePath)
		set ..Adapter.FilePath=tFilePath
		$$$TRACE("File Path: "_tFilePath)
		if $l($g(tSettings("DFIHL7RequestFileName"))) {set tFileName=tSettings("DFIHL7RequestFileName")}
		else {set tFileName=$tr(..Adapter.CreateFilename("HL7 Request Message.txt","%F_%Q"),"-.","")_".json"}
		$$$TRACE("File Name: "_tFileName)
		set tFileName=tFilePath_tFileName
		$$$TRACE("Full File Name: "_tFileName)
		if $l(tFileName) {
			set tMessage=pRequest.OutputToString(,,.tSC) if 'tSC quit
			$$$TRACE(tMessage)
			set tSC=..Adapter.PutString(tFileName,tMessage) if 'tSC quit
		}
		else {
			set tSC=$$$ERROR(5001,"Invalid File Name: "_tFileName) quit
		}
	}
	catch ex {
		set tSC=ex.AsStatus()
	}
	set msg="HL7 Output to File Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC))
	$$$TRACE(msg) $$$DebugLog($username,"HL7OutputToFile",msg,.dSC)
	set aux=##class(Robot.Common.Transformations.CreateNACKDTL.AUX).%New(),aux.ACKCode=$s(tSC:"AA",1:"AE"),aux.ACKMessage=$s(tSC:"",1:$$$GetErrorText(tSC))
	set pResponse=##class(EnsLib.HL7.Message).%New()
	set tSC=##class(Robot.Common.Transformations.CreateNACKDTL).Transform(pRequest,.pResponse,aux) if 'tSC $$$TRACE("Error in CreateACK DTL: "_$$$GetErrorText(tSC)) set pResponse=""
	if $IsObject(pResponse) {$$$TRACE(pResponse.OutputToString(,,.tSC))}
	quit tSC
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="EnsLib.HL7.Message"> 
		<Method>WriteHL7MessageToFile</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.Operation.PIXHL7HTTPOperation">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65845,55144.040403</TimeChanged>
<TimeCreated>65482,84866.019574</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.HTTP.OutboundAdapter</Type>
</Property>

<Property name="HTTPRequest">
<Type>%Net.HttpRequest</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="SendHL7Message">
<FormalSpec>pRequest:EnsLib.HL7.Message,*pResponse:EnsLib.HL7.Message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK,pResponse="",tRetryCount=0
	Try {
		$$$TRACE("HL7 HTTP Operation Request")
Retry	;
		If tRetryCount $$$TRACE("Retry Attempt: "_tRetryCount)
		Set message = pRequest.OutputToString(,,.tSC) if 'tSC quit
		Set tResponse = ##class(%Net.HttpResponse).%New(),tResponse.ContentType="application/hl7-v2"
		If '$IsObject(..HTTPRequest) {
			Set pHttpRequest = ##class(%Net.HttpRequest).%New()
			Set pHttpRequest.Server = ..Adapter.HTTPServer
			Set pHttpRequest.Port = ..Adapter.HTTPPort
			Set pHttpRequest.UserAgent = "curl/7.29.0"
			Set pHttpRequest.ContentEncoding = "HL7-ER7"
			Set pHttpRequest.ContentCharset = "UTF-8"
			Set pHttpRequest.ContentType = "application/hl7-v2"
			Set pHttpRequest.AcceptGzip = 0
			Set pHttpRequest.WriteRawMode = 0
			Set pHttpRequest.ReadRawMode = 0
			Set pHttpRequest.OpenTimeout = ..Adapter.ConnectTimeout
			Set pHttpRequest.Timeout = ..Adapter.ResponseTimeout
			Set pHttpRequest.WriteTimeout = ..Adapter.WriteTimeout
			Set pHttpRequest.SocketTimeout = 115
			Set ..HTTPRequest=pHttpRequest
		}
		Set ..HTTPRequest.HttpResponse=tResponse
		Do ..HTTPRequest.EntityBody.Write(message)
		Set tSC = ..HTTPRequest.Post(..Adapter.URL,0,1) if 'tSC {
			// I can link this to a <READ> error generated in the HTTPRequest Send() Method
			// So I log it in the debug log and attempt to resend. I will attempt to resend up to 5 times before abandoning
			$$$DebugLog($username,"HTTP Write","Error: "_$$$GetErrorText(tSC),.dSC)
			Set tRetryCount = tRetryCount+1 if tRetryCount>5 set tRetryCount=0 Quit
			$$$DebugLog($username,"HTTP Write","Attempting to Resend: "_tRetryCount,.dSC)
			$$$TRACE("Going to attempt Retry: "_tRetryCount) set tSC=$$$OK
			Goto Retry
		}
		Set response = ..HTTPRequest.HttpResponse
		$$$TRACE("HTTP Response Status: "_response.StatusCode)
		If response.StatusCode=200 {
			If $IsObject(response.Data) {
				Set message = "" while 'response.Data.AtEnd { Set message=message_response.Data.Read(,.tSC) if 'tSC quit }
				Set pResponse = ##class(EnsLib.HL7.Message).ImportFromString(message,.tSC) if 'tSC $$$TRACE("An error occurred creating Respnse Message: "_$$$GetErrorText(tSC))
			}
		}
		Else {
			Set message = "" if $IsObject(response.Data) { Set message="" while 'response.Data.AtEnd { Set message=message_response.Data.Read(,.tSC) if 'tSC quit } }
			Set tSC = $$$ERROR(5001,"HTTP Response Status is "_response.StatusCode_" with Error Text: "_response.ReasonPhrase_" with Content: "_message)
			If response.StatusCode=502 {Set message=pRequest.OutputToString(,,.tSC) $$$DebugLog($username,"502 Error",message,.dSC) }
		}
	}
	Catch ex {
		Set tSC = ex.AsStatus()
	}
	If 'tSC,'$IsObject(pResponse) {
		Set pResponse = ##class(EnsLib.HL7.Message).%New(),aux=##class(Robot.Common.Transformations.CreateNACKDTL.AUX).%New()
		Set aux.ACKCode = "AE",aux.ACKMessage=$$$GetErrorText(tSC)
		Set sc = ##class(Robot.Common.Transformations.CreateNACKDTL).Transform(pRequest,.pResponse,.aux) if 'sc $$$TRACE("Unable to Create NACK Response HL7 Message")
	}
	$$$TRACE("Outcome of HTTP Operation: "_$Select(tSC:"Ok",1:"Error: "_$$$GetErrorText(tSC)))
	Quit $$$OK
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="EnsLib.HL7.Message">
		<Method>SendHL7Message</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.Operation.PIXHL7HTTPSOperation">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65845,55066.610061</TimeChanged>
<TimeCreated>65482,84866.019574</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.HTTP.OutboundAdapter</Type>
</Property>

<Property name="HTTPRequest">
<Type>%Net.HttpRequest</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="SendHL7Message">
<FormalSpec>pRequest:EnsLib.HL7.Message,*pResponse:EnsLib.HL7.Message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK,pResponse="",tRetryCount=0
	Try {
		$$$TRACE("HL7 HTTPS Operation Request")
Retry	;
		If tRetryCount $$$TRACE("Retry Attempt: "_tRetryCount)
		Set message = pRequest.OutputToString(,,.tSC) if 'tSC quit
		Set tResponse = ##class(%Net.HttpResponse).%New(),tResponse.ContentType="application/hl7-v2"
		If '$IsObject(..HTTPRequest) {
			Set pHttpRequest = ##class(%Net.HttpRequest).%New()
			Set pHttpRequest.Server = ..Adapter.HTTPServer
			Set pHttpRequest.Port = ..Adapter.HTTPPort
			Set pHttpRequest.ProxyServer = ..Adapter.ProxyServer
			Set pHttpRequest.ProxyPort = ..Adapter.ProxyPort
			Set pHttpRequest.ProxyTunnel = ..Adapter.ProxyHttpTunnel
			Set pHttpRequest.ProxyHTTPS = 1
			Set pHttpRequest.SSLConfiguration = ..Adapter.SSLConfig
			Set pHttpRequest.UserAgent = "curl/7.29.0"
			Set pHttpRequest.ContentEncoding = "HL7-ER7"
			Set pHttpRequest.ContentCharset = "UTF-8"
			Set pHttpRequest.ContentType = "application/hl7-v2"
			Set pHttpRequest.AcceptGzip = 0
			Set pHttpRequest.WriteRawMode = 0
			Set pHttpRequest.ReadRawMode = 0
			Set pHttpRequest.OpenTimeout = ..Adapter.ConnectTimeout
			Set pHttpRequest.Timeout = ..Adapter.ResponseTimeout
			Set pHttpRequest.WriteTimeout = ..Adapter.WriteTimeout
			Set pHttpRequest.SocketTimeout = 115
			Set ..HTTPRequest=pHttpRequest
		}
		Set ..HTTPRequest.HttpResponse=tResponse
		Do ..HTTPRequest.EntityBody.Write(message)
		Set tSC = ..HTTPRequest.Post(..Adapter.URL,0,1) if 'tSC {
			// I can link this to a <READ> error generated in the HTTPRequest Send() Method
			// So I log it in the debug log and attempt to resend. I will attempt to resend up to 5 times before abandoning
			$$$DebugLog($username,"HTTP Write","Error: "_$$$GetErrorText(tSC),.dSC)
			Set tRetryCount = tRetryCount+1 if tRetryCount>5 set tRetryCount=0 Quit
			$$$DebugLog($username,"HTTP Write","Attempting to Resend: "_tRetryCount,.dSC)
			$$$TRACE("Going to attempt Retry: "_tRetryCount) set tSC=$$$OK
			Goto Retry
		}
		Set response = ..HTTPRequest.HttpResponse
		$$$TRACE("HTTP Response Status: "_response.StatusCode)
		If response.StatusCode=200 {
			If $IsObject(response.Data) {
				Set message = "" while 'response.Data.AtEnd { Set message=message_response.Data.Read(,.tSC) if 'tSC quit }
				Set pResponse = ##class(EnsLib.HL7.Message).ImportFromString(message,.tSC) if 'tSC $$$TRACE("An error occurred creating Respnse Message: "_$$$GetErrorText(tSC))
			}
		}
		Else {
			Set message = "" if $IsObject(response.Data) { Set message="" while 'response.Data.AtEnd { Set message=message_response.Data.Read(,.tSC) if 'tSC quit } }
			Set tSC = $$$ERROR(5001,"HTTP Response Status is "_response.StatusCode_" with Error Text: "_response.ReasonPhrase_" with Content: "_message)
			If response.StatusCode=502 {Set message=pRequest.OutputToString(,,.tSC) $$$DebugLog($username,"502 Error",message,.dSC) }
		}
	}
	Catch ex {
		Set tSC = ex.AsStatus()
	}
	If 'tSC,'$IsObject(pResponse) {
		Set pResponse = ##class(EnsLib.HL7.Message).%New(),aux=##class(Robot.Common.Transformations.CreateNACKDTL.AUX).%New()
		Set aux.ACKCode = "AE",aux.ACKMessage=$$$GetErrorText(tSC)
		Set sc = ##class(Robot.Common.Transformations.CreateNACKDTL).Transform(pRequest,.pResponse,.aux) if 'sc $$$TRACE("Unable to Create NACK Response HL7 Message")
	}
	$$$TRACE("Outcome of HTTP Operation: "_$Select(tSC:"Ok",1:"Error: "_$$$GetErrorText(tSC)))
	Quit $$$OK
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="EnsLib.HL7.Message">
		<Method>SendHL7Message</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>




<Class name="Robot.Common.Process.ODStoWCGHL7STD">
<Description>
This is the original HPRS Business Process for Reference</Description>
<ClassType>persistent</ClassType>
<IncludeCode>HPRSInclude</IncludeCode>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>65874,12062.903695</TimeChanged>
<TimeCreated>65461,6854.671936</TimeCreated>

<Method name="OnRequest">
<FormalSpec>pRequest:HPRS.Messages.PatientTransactionRequest,*pResponse:HPRS.Messages.PatientTransactionResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	// Create a New Response Message
	Set pResponse = ##class(HPRS.Messages.PatientTransactionResponse).%New()
	Try {
		&sql(select ID into :tConfigID from HPRS_Configuration.InterfaceConfiguration) if SQLCODE set tSC=$$$ERROR(5001,"No Configuration Settings Found") quit
		Set tConfig = ##class(HPRS.Configuration.InterfaceConfiguration).%OpenId(tConfigID) if '$IsObject(tConfig) set tSC=$$$ERROR(5001,"Unable to Open Configuration Settings with ID: "_tConfigID) quit
		$$$TRACE("Message ID: "_pRequest.MessageID)
		Set pResponse.MessageID = pRequest.MessageID,tSendToFile=tConfig.SendHL7MessageToFile
		// Open the Message from the ODS Message Queue
		Set tMsg = ##class(Interfaces.HPRS.PatientQueueMessage).%OpenId(pRequest.MessageID)
		If '$IsObject(tMsg) set tSC=$$$ERROR(5001,"Unable to open ODS Message with Message ID: "_pRequest.MessageID) quit
		// Create a New AUX Object to pass to the Patient->HL7 Message DTL
		Set aux = ##class(Robot.Common.Transformations.PatientToHL7ADT.AUX).%New()
		Set aux.ReceivingApplication = tConfig.ReceivingApplication,aux.ReceivingFacility=tConfig.ReceivingFacility,aux.SendingApplication=tConfig.SendingApplication,aux.SendingFacility=tConfig.SendingFacility
		// Get the key identifiers from the ODS Message
		Set tPatientRef = tMsg.PatientNumber,tEpisode=tMsg.EpisodeNumber,tActivityDT=tMsg.ActivityDateTime
		Set tAction = tMsg.Action,tTransaction=tMsg.TransactionType,tLog=tMsg.LogType
		if tAction="" {
			if tLog="ADTL",tTransaction=41 {set tAction="DELETE"}
			elseif tLog="ADTL",tTransaction=42 {set tAction="ADD"}
			elseif tLog="CPTL",tTransaction=40 {set tAction="ADD"}
			elseif tTransaction=16 {set tAction="PURGE"}
			else {set tAction="NONE"}
		}
		// $$$TRACE("Log Type: "_tLog_" Transaction Type: "_tTransaction_" Action: "_tAction_" Activity Date/Time: "_tActivityDT) set tConfig=""
		// Try and open the HL7 Event Type Mapping Object for the combination of Log||Transaction||Action
		Set hl7msgtype = ##class(Robot.Common.CodeTables.HL7ADTEventTypeMapping).%OpenId(tLog_"||"_tTransaction_"||"_tAction)
		// Keep a track of Merge and Unmerge Activities for Development Purposes
		If tTransaction=41!(tTransaction=42) set sc=$$$DebugLog("Merge","Log Type: "_tLog_" Action: "_tAction_" Type: "_tTransaction_" MessageId: "_pRequest.MessageID)
		If '$IsObject(hl7msgtype) set tSC=$$$ERROR(5001,"No HL7 Event Type Mapping found for: "_tLog_"||"_tTransaction_"||"_tAction) quit
		If 'hl7msgtype.Enabled {
			// $$$TRACE("Log Type: "_tLog_" Action: "_tAction_" Type: "_tTransaction_" MessageId: "_pRequest.MessageID_" is not Enabled. Completing Message")			set sc=##class(Interfaces.HPRS.PatientQueueMessage).CompleteMessage(pRequest.MessageID,1,"AA","Transaction: "_tLog_"||"_tTransaction_"||"_tAction_" is not Enabled")
			Set sc = ##class(Interfaces.HPRS.PatientQueueMessage).CompleteMessage(pRequest.MessageID,1,"AA","Transaction: "_tLog_"||"_tTransaction_"||"_tAction_" is not Enabled")
			If 'sc $$$TRACE("Unable to Complete Message: "_pRequest.MessageID)
			Quit
		}
		// Update AUX object with the HL7 Message Trigger Code and Message Structure
		Set aux.HL7MessageCode = hl7msgtype.HL7MessageCode,aux.HL7TriggerEvent=hl7msgtype.HL7TriggerEvent,aux.HL7MessageStructure=hl7msgtype.HL7MessageStructure
		// Update the Aux Visit Type which can be N (Not Applicable - PMI), I (In-Patient) or O (Out-Patient or Service Group Appointment)
		Set aux.VisitType = hl7msgtype.VisitType.VisitTypeCode
		// If this event is for In-Patient or Out-Patient then attempt to find the Facility Code for the Event
		// and if it is NOT NULL then try and translate it into a 6 digit National Facility Code
		// The Event Facility is not required for Patient Merges
		If aux.VisitType'="N",tTransaction'=42 {
			Set tEpisodeStartTS = $Extract(tActivityDT,1,4)_"-"_$Extract(tActivityDT,5,6)_"-"_$Extract(tActivityDT,7,8)_" "_$Extract(tActivityDT,9,10)_":"_$Extract(tActivityDT,11,12)_":00"
			&sql(SELECT B.Code into :tFacilityCode FROM DW_Modules_InPatient.EpisodeLink as A, DW_Masterfiles.mfFacility as B
				WHERE A.CareEpisode->Patient->UniqueIdentity->InternalNo = :tPatientRef and (A.EpisodeNo=:tEpisode or A.CareEpisode->EpisodeStartDt = :tEpisodeStartTS) and A.CareEpisode->mfFacilityRel IS NOT NULL and A.CareEpisode->mfFacilityRel=B.ID)
			If 'SQLCODE {
				If $Length($Get(tFacilityCode)) {
					// $$$TRACE("WC Facility Code: "_tFacilityCode) set tSC=##class(HPRS.CodeTableMappings.FacilityCodeMappings).GetNationalCode(tFacilityCode,.tNationalCode) if 'tSC quit
					// $$$TRACE("DOH National Facility Code: "_tNationalCode) set aux.FacilityCode=tNationalCode
				}
			}
		}
		If tActivityDT="" set tActivityDT=$ZDatetime($Horolog,3)
		Set aux.EventTS = $Select($Length($Get(tEpisodeStartTS)):$Translate(tEpisodeStartTS,":- ",""),1:$Translate(tActivityDT,":- ",""))
		// Find the Patient where the Patients Internal Number is the Patient value in the ODS Transaction Message
		&sql(SELECT ID into :tPatient FROM DW_Modules_Pmi.Patient where UniqueIdentity->InternalNo=:tPatientRef)
		Set tPatientObj = ##class(DW.Modules.Pmi.Patient).%OpenId(tPatient)
		If '$IsObject(tPatientObj) set tSC=$$$ERROR(5001,"Unable to Open Patient: "_tPatient_" on Message: "_pRequest.MessageID) quit
		Set tRequest = ##class(EnsLib.HL7.Message).%New()
		Set tSC = ##class(Robot.Common.Transformations.PatientToHL7ADT).Transform(tPatientObj,.tRequest,.aux) if 'tSC quit
		// If we are sending a Merge we want to take the regular ADT we have created and transform
		// it into an ADT-A39(Merge) Message and add the identifier details of the Merged Patient
		// into the Merge Segment of the Message
		If tTransaction=42 {
			// $$$TRACE("Merge Initiated")
			&sql(SELECT Top 1 B.UniqueIdentityMerged->HID, B.UpdateDateTime into :tMergeId, :tMergeDate
				FROM DW_Modules_Pmi.Patient as A, DW_Modules.Merge as B
				where B.PatientRetained = :tPatient and A.Person=B.PersonRetained and A.UniqueIdentity = B.UniqueIdentityRetained
				order by B.PatientMerged DESC)
			If 'SQLCODE,$Length(tMergeId) {
				// $$$TRACE("Merge Transform")
				Set aux = ##class(Robot.Common.Transformations.CreateMergeHL7Message.AUX).%New(),aux.MergeDate=$Translate($Piece(tMergeDate," ",1),"-","")
				Set aux.MergeHID = ##class(HPRS.Utility.Functions).ConvertHIDtoHPRN(tMergeId) $$$TRACE("tMergeId: "_aux.MergeHID)
				Set tTarget = ##class(EnsLib.HL7.Message).%New()
				Set tSC = ##class(Robot.Common.Transformations.CreateMergeHL7Message).Transform(tRequest,.tTarget,aux) if 'tSC quit
				// Replace the current tRequest with the new Merge ADT Message
				Set tRequest = tTarget $$$TRACE("Merge Message: "_tRequest.OutputToString())
			}
			Else {
				Set tSC = $$$ERROR(5001,"No Merge Data found for Patient on Message: "_pRequest.MessageID) quit
			}
		}
		// Send the resultant HL7 Message to the outbound HTTP Operation
		If $IsObject(tRequest) $$$TRACE(tRequest.OutputToString(,,.tSC))
		Set tSC = ..SendRequestAsync("WCG STD PIX HTTP Operation",tRequest,1,"HL7 PIX HTTP Request") if 'tSC quit
		//if tSendToFile!(tTransaction=42) set tSC=..SendRequestAsync("FILE PIX File Operation",tRequest,1,"HL7 PIX File Request") if 'tSC quit
	}
	Catch ex {
		Set tSC = ex.AsStatus()
	}
	If 'tSC {
		$$$TRACE("An error Occurred. Completing Message")
		Set sc = ##class(Interfaces.HPRS.PatientQueueMessage).CompleteMessage(pRequest.MessageID,tSC,"AE",$$$GetErrorText(tSC)) if 'sc $$$TRACE("Unable to Complete Message: "_pRequest.MessageID)
	}
	$$$TRACE("On Request Status: "_$Select(tSC:"OK",1:$$$GetErrorText(tSC)))
	Set pResponse.ResponseStatus = tSC
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnResponse">
<FormalSpec><![CDATA[pRequest:HPRS.Messages.PatientTransactionRequest,&pResponse:HPRS.Messages.PatientTransactionResponse,tRequest:EnsLib.HL7.Message,&tResponse:EnsLib.HL7.Message,tCompletionKey:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		$$$TRACE("Response From: "_tCompletionKey)
		Set pResponse.MessageID = pRequest.MessageID
		Set pResponse.HL7ACKCode = $Select($IsObject(tResponse)&&$Length(tResponse.GetValueAt("MSA:AcknowledgmentCode")):tResponse.GetValueAt("MSA:AcknowledgmentCode"),1:"AA")
		Set pResponse.HL7ACKMessage = $Select($IsObject(tResponse)&&($Length(tResponse.GetValueAt("MSA:TextMessage"))):tResponse.GetValueAt("MSA:TextMessage"),1:"Message was correctly processed")
		Set sc = ##class(Interfaces.HPRS.PatientQueueMessage).CompleteMessage(pRequest.MessageID,tSC,pResponse.HL7ACKCode,pResponse.HL7ACKMessage) if 'sc $$$TRACE("Unable to Complete Message: "_pRequest.MessageID)
		$$$TRACE("Completed the Processing of Message: "_pRequest.MessageID)
	}
	Catch ex {
		Set tSC = ex.AsStatus()
	}
	If 'tSC $$$TRACE("On Response Error: "_$$$GetErrorText(tSC)) if '$Length(pResponse.HL7ACKMessage) set pResponse.HL7ACKMessage=$$$GetErrorText(tSC)
	Set pResponse.ResponseStatus = tSC
	Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="Robot.Common.Process.PrimaryBusinessProcess">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>65846,31939.196231</TimeChanged>
<TimeCreated>65846,30655.295578</TimeCreated>

<Method name="OnRequest">
<FormalSpec>pRequest:Ens.Request,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set pResponse=##class(Robot.Common.Messages.EMCIDataLoadResponse).%New()
	set pResponse.ResponseStatus=$$$OK
	$$$TRACE("Processing Request")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnResponse">
<Description>
Handle a 'Response'</Description>
<FormalSpec><![CDATA[pRequest:%Library.Persistent,&response:%Library.Persistent,callrequest:%Library.Persistent,callresponse:%Library.Persistent,pCompletionKey:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$TRACE("Processing Response")
	Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="Robot.Common.Production.HL7MsgRouter">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Production</Super>
<TimeChanged>65874,13895.272927</TimeChanged>
<TimeCreated>60208,69187</TimeCreated>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="Robot.Common.HL7MsgRouter.Production" TestingEnabled="false" LogGeneralTraceEvents="false">
  <Description>Routes HL7 messages based on message source and contents. To learn more, click on ABC_Router or XYZ_Router. Click View Rules to see message routing rules.The production uses a routing process Ens.Alert to route alerts. The rule in Ens.Alert consults a lookup table to see where to send the alert.To demonstrate alerts, give EMailAlertOperation a valid STMP server and Recipient. You may also edit the AlertTable lookup table. Temporarily assign a bad File Path to an enabled file service.</Description>
  <ActorPoolSize>1</ActorPoolSize>
  <Setting Target="Adapter" Name="AlertNotificationOperation">EMailAlertOperation</Setting>
  <Item Name="ABC_HL7FileService" Category="" ClassName="EnsLib.HL7.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="Test source of HL7 messages." LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Host" Name="AckTargetConfigNames">Regular_FileOperation</Setting>
    <Setting Target="Host" Name="Framing">Flexible</Setting>
    <Setting Target="Host" Name="TargetConfigNames">NigelRule</Setting>
    <Setting Target="Host" Name="SearchTableClass">Robot.Common.HL7MsgRouter.SearchTable</Setting>
    <Setting Target="Host" Name="LocalFacilityApplication"></Setting>
    <Setting Target="Host" Name="AckMode">App</Setting>
    <Setting Target="Host" Name="UseAckCommitCodes">1</Setting>
    <Setting Target="Host" Name="IgnoreInboundAck">1</Setting>
    <Setting Target="Host" Name="BatchHandling">Indiv</Setting>
    <Setting Target="Host" Name="MessageSchemaCategory">2.5</Setting>
    <Setting Target="Host" Name="DefCharEncoding">Latin1</Setting>
    <Setting Target="Host" Name="AlertGracePeriod">0</Setting>
    <Setting Target="Host" Name="AlertOnError">1</Setting>
    <Setting Target="Host" Name="ArchiveIO">0</Setting>
    <Setting Target="Adapter" Name="FilePath">C:\Practice\in</Setting>
    <Setting Target="Adapter" Name="FileSpec">*.txt</Setting>
    <Setting Target="Adapter" Name="ArchivePath">C:\Practice\inarchive</Setting>
    <Setting Target="Adapter" Name="WorkPath"></Setting>
    <Setting Target="Adapter" Name="Charset">Default</Setting>
    <Setting Target="Adapter" Name="FileAccessTimeout">10</Setting>
    <Setting Target="Adapter" Name="AppendTimestamp">1</Setting>
    <Setting Target="Adapter" Name="CallInterval">5</Setting>
    <Setting Target="Host" Name="SaveReplies">All</Setting>
  </Item>
  <Item Name="Ens.Alert" Category="" ClassName="EnsLib.MsgRouter.RoutingEngine" PoolSize="0" Enabled="true" Foreground="false" Comment="This handles Alert routing logic." LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Host" Name="BusinessRuleName">Robot.Common.HL7MsgRouter.AlertRule</Setting>
    <Setting Target="Host" Name="AlertOnError">0</Setting>
  </Item>
  <Item Name="EMailAlertOperation" Category="" ClassName="EnsLib.EMail.AlertOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="Alerts system administrators via e-mail." LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Host" Name="RetryInterval">15</Setting>
    <Setting Target="Host" Name="AlertRetryGracePeriod">10</Setting>
    <Setting Target="Host" Name="FailureTimeout">15</Setting>
    <Setting Target="Host" Name="AlertOnError">1</Setting>
    <Setting Target="Host" Name="ArchiveIO">0</Setting>
    <Setting Target="Adapter" Name="SMTPServer">smtp.gmail.com</Setting>
    <Setting Target="Adapter" Name="SMTPPort">587</Setting>
    <Setting Target="Adapter" Name="Credentials">email</Setting>
    <Setting Target="Adapter" Name="Recipient">nigel.salm@gmail.com</Setting>
    <Setting Target="Adapter" Name="Cc"></Setting>
    <Setting Target="Adapter" Name="From">nigel@healthsystems.co.za</Setting>
    <Setting Target="Host" Name="IncludeDetails">1</Setting>
    <Setting Target="Host" Name="IncludeNodeinSubject">1</Setting>
    <Setting Target="Host" Name="SubjectPrefix">HL7 Error</Setting>
    <Setting Target="Adapter" Name="SSLConfig">ISC.FeatureTracker.SSL.Config</Setting>
  </Item>
  <Item Name="Regular_FileOperation" Category="" ClassName="EnsLib.HL7.Operation.FileOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="Default destination for HL7 messages." LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Host" Name="Filename">%H%M_Regular_%F.txt</Setting>
    <Setting Target="Host" Name="Separators"><![CDATA[|^~\&]]]]><![CDATA[></Setting>
    <Setting Target="Host" Name="SearchTableClass"></Setting>
    <Setting Target="Host" Name="AlertRetryGracePeriod">0</Setting>
    <Setting Target="Host" Name="RetryInterval">5</Setting>
    <Setting Target="Host" Name="FailureTimeout">15</Setting>
    <Setting Target="Host" Name="AlertOnError">1</Setting>
    <Setting Target="Host" Name="ArchiveIO">0</Setting>
    <Setting Target="Host" Name="Framing">AsciiLF</Setting>
    <Setting Target="Adapter" Name="FilePath">C:\Practice\out</Setting>
    <Setting Target="Adapter" Name="Overwrite">0</Setting>
    <Setting Target="Adapter" Name="Charset">Default</Setting>
    <Setting Target="Adapter" Name="OpenTimeout">5</Setting>
  </Item>
  <Item Name="BadMessageHandler" Category="" ClassName="EnsLib.HL7.Operation.FileOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="Destination for bad messages." LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Host" Name="Filename">%H%M_Bad_%F.txt</Setting>
    <Setting Target="Host" Name="Separators"><![CDATA[|^~\&]]]]><![CDATA[></Setting>
    <Setting Target="Host" Name="SearchTableClass"></Setting>
    <Setting Target="Host" Name="AlertRetryGracePeriod">0</Setting>
    <Setting Target="Host" Name="RetryInterval">5</Setting>
    <Setting Target="Host" Name="FailureTimeout">15</Setting>
    <Setting Target="Host" Name="AlertOnError">1</Setting>
    <Setting Target="Host" Name="ArchiveIO">0</Setting>
    <Setting Target="Host" Name="Framing">AsciiLF</Setting>
    <Setting Target="Adapter" Name="FilePath">C:\Practice\out</Setting>
    <Setting Target="Adapter" Name="Overwrite">0</Setting>
    <Setting Target="Adapter" Name="Charset">Default</Setting>
    <Setting Target="Adapter" Name="OpenTimeout">5</Setting>
  </Item>
  <Item Name="NigelRule" Category="" ClassName="Robot.Common.HL7MsgRouter.NigelRule" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="Validation">dmf-z</Setting>
    <Setting Target="Host" Name="BusinessRuleName">Robot.Common.HL7MsgRouter.NigelRule</Setting>
    <Setting Target="Host" Name="AlertOnBadMessage">1</Setting>
    <Setting Target="Host" Name="BadMessageHandler">BadMessageHandler</Setting>
    <Setting Target="Host" Name="AlertOnError">1</Setting>
    <Setting Target="Host" Name="ActOnTransformError">1</Setting>
    <Setting Target="Host" Name="ActOnValidationError">1</Setting>
    <Setting Target="Host" Name="ReplyCodeActions">E=F</Setting>
    <Setting Target="Host" Name="ResponseFrom">Regular_FileOperation</Setting>
    <Setting Target="Host" Name="AddNackERR">1</Setting>
  </Item>
  <Item Name="Robot.Common.HL7MsgRouter.RoutingRule" Category="" ClassName="EnsLib.HL7MsgRouter.RoutingEngine" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="Validation"></Setting>
    <Setting Target="Host" Name="BusinessRuleName">Robot.Common.HL7MsgRouter.RoutingRule</Setting>
  </Item>
<Item Name="Robot.Common.REST.DirectoryService" Category="" ClassName="Robot.Common.REST.DirectoryService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="Port">9988</Setting>
    <Setting Target="Adapter" Name="JobPerConnection">0</Setting>
    <Setting Target="Adapter" Name="SSLConfig"></Setting>
  </Item>
  <Item Name="Robot.Common.REST.DirectoryOperation" Category="" ClassName="Robot.Common.REST.DirectoryOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="HTTPPort">9988</Setting>
    <Setting Target="Adapter" Name="HTTPServer">localhost</Setting>
    <Setting Target="Adapter" Name="URL">/directory</Setting>
    <Setting Target="Adapter" Name="SSLConfig"></Setting>
  </Item></Production>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.Production.InterfaceProduction">
<Super>Ens.Production</Super>
<TimeChanged>65895,24321.997323</TimeChanged>
<TimeCreated>65815,65097.660706</TimeCreated>

<Method name="GetCurrentProductionSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pSettings:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(Ens.Director).GetProductionSettings(.pSettings)
]]></Implementation>
</Method>

<Method name="GetProductionItemSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pProductionItem:%String="",&pSettings:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=##class(Ens.Director).GetItemSettings(pProductionItem,$LB("Target","Name","Value","ValueType","Default","DefaultType","Description","Type"),,pSettings) if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>

<Method name="SetAutoStart">
<ClassMethod>1</ClassMethod>
<FormalSpec>pProductionName:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if '$l(pProductionName) {
			set tSC=##class(Robot.Common.Configuration.ConfigurationSettings).GetConfigurationSettings(,.tConfig,.pSettings)
			set pProductionName=pSettings("DFIProductionName")
			if '$l(pProductionName) set tSC=$$$ERROR(5001,"Unable to determine Production Name") quit
		}
		set tSC=##class(Ens.Director).SetAutoStart(pProductionName)
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>

<Method name="GetSettingsArray">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>*pSettings</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[##class(Ens.Director).GetProductionSettings("",.pSettings)
]]></Implementation>
</Method>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="Robot.Common.Production.InterfaceProduction" TestingEnabled="true" LogGeneralTraceEvents="true">
  <Description>This is the default DFI Interface. It contains all of the current Common Production Services, Processes and Operations. The DFI Configuration Settings has Properties that specify the various Service, Process and Operation Production Item Names and corresponding underlying Class Names. The specific Interface Productions are identified by 'Robot.{Interface}.Production.InterfaceProduction</Description>
  <ActorPoolSize>2</ActorPoolSize>
  <Setting Target="Adapter" Name="AlertNotificationManager"></Setting>
  <Setting Target="Adapter" Name="AlertNotificationOperation">Ens.Alert</Setting>
  <Setting Target="Adapter" Name="AlertNotificationRecipients">nigel@healthsystems.co.za</Setting>
  <Setting Target="Adapter" Name="AlertNotificationOperation">EMailAlertOperation</Setting>
  <Item Name="DFI Housekeeping Service" Category="" ClassName="Robot.Common.Service.HouseKeeping" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="AlertOnError">1</Setting>
    <Setting Target="Adapter" Name="CallInterval">600</Setting>
  </Item>
  <Item Name="DFI Message Queue Service" Category="" ClassName="Robot.Common.Service.ProcessMessageQueue" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="Ens.Alert" Category="DFI Common Operation" ClassName="EnsLib.EMail.AlertOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="AlertGroups">HealthSystems</Setting>
    <Setting Target="Host" Name="AlertOnError">0</Setting>
    <Setting Target="Host" Name="AlertRetryGracePeriod">15</Setting>
    <Setting Target="Host" Name="BusinessPartner">DFI</Setting>
    <Setting Target="Host" Name="IncludeDetails">1</Setting>
    <Setting Target="Host" Name="IncludeNodeinSubject">1</Setting>
    <Setting Target="Host" Name="QueueCountAlert">20</Setting>
    <Setting Target="Host" Name="QueueWaitAlert">120</Setting>
    <Setting Target="Host" Name="ReplyCodeActions">E=F</Setting>
    <Setting Target="Host" Name="SubjectPrefix">DFI Interface Alert Notification</Setting>
    <Setting Target="Host" Name="SystemName">Robot.Cpmmon.Production.InterfaceProduction</Setting>
    <Setting Target="Adapter" Name="Credentials">EMail</Setting>
    <Setting Target="Adapter" Name="From">nigel@healthsystems.co.za</Setting>
    <Setting Target="Adapter" Name="Recipient">nigel@healthsystems.co.za</Setting>
    <Setting Target="Adapter" Name="SMTPPort">587</Setting>
    <Setting Target="Adapter" Name="SMTPServer">smtp.office365.com</Setting>
    <Setting Target="Adapter" Name="SSLConfig">ISC.FeatureTracker.SSL.Config</Setting>
  </Item>
  <Item Name="DFI Email Operation" Category="DFI Common Operation" ClassName="Robot.Common.Operation.EMailOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="This is the Email Operation that is used to send Alert Notification Emails and optionally any File Attachments that are a by product of the Production Functionality." LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="AlertGroups">HealthSystems</Setting>
    <Setting Target="Host" Name="AlertOnError">1</Setting>
    <Setting Target="Host" Name="AlertRetryGracePeriod">15</Setting>
    <Setting Target="Host" Name="BusinessPartner">DFI</Setting>
    <Setting Target="Host" Name="QueueCountAlert">20</Setting>
    <Setting Target="Host" Name="QueueWaitAlert">120</Setting>
    <Setting Target="Host" Name="ReplyCodeActions">E=F</Setting>
    <Setting Target="Adapter" Name="Credentials">EMail</Setting>
    <Setting Target="Adapter" Name="From">nigel@healthsystems.co.za</Setting>
    <Setting Target="Adapter" Name="Recipient">nigel@healthsystems.co.za</Setting>
    <Setting Target="Adapter" Name="SMTPPort">587</Setting>
    <Setting Target="Adapter" Name="SMTPServer">smtp.office365.com</Setting>
    <Setting Target="Adapter" Name="SSLConfig">ISC.FeatureTracker.SSL.Config</Setting>
  </Item>
  <Item Name="DFI Alert Service" Category="" ClassName="Robot.Common.Service.AlertNotificationService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="AlertGracePeriod">30</Setting>
    <Setting Target="Host" Name="AlertOnError">1</Setting>
  </Item>
  <Item Name="DFI PIX HL7 File Operation" Category="" ClassName="Robot.Common.Operation.PIXHL7FileOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="DFI PIX HL7 HTTP Operation" Category="" ClassName="Robot.Common.Operation.PIXHL7HTTPOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="AlertOnError">1</Setting>
    <Setting Target="Host" Name="AlertRetryGracePeriod">30</Setting>
    <Setting Target="Host" Name="BusinessPartner">DFI</Setting>
    <Setting Target="Host" Name="QueueCountAlert">10</Setting>
    <Setting Target="Host" Name="QueueWaitAlert">15</Setting>
    <Setting Target="Host" Name="ReplyCodeActions">E=F</Setting>
  </Item>
  <Item Name="DFI WCG HL7 STD Process" Category="" ClassName="Robot.WCGHL7STD.Process.ODStoWCGHL7STD" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
</Production>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.Production.REST">
<Super>Ens.Production</Super>
<TimeChanged>65874,13837.515563</TimeChanged>
<TimeCreated>62636,62570.295692</TimeCreated>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="Robot.Common.REST.Production" TestingEnabled="true" LogGeneralTraceEvents="false">
  <Description></Description>
  <ActorPoolSize>2</ActorPoolSize>
  <Item Name="Robot.Common.REST.DirectoryService" Category="" ClassName="Robot.Common.REST.DirectoryService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="Port">9988</Setting>
    <Setting Target="Adapter" Name="JobPerConnection">0</Setting>
    <Setting Target="Adapter" Name="SSLConfig"></Setting>
  </Item>
  <Item Name="Robot.Common.REST.DirectoryOperation" Category="" ClassName="Robot.Common.REST.DirectoryOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="HTTPPort">9988</Setting>
    <Setting Target="Adapter" Name="HTTPServer">localhost</Setting>
    <Setting Target="Adapter" Name="URL">/directory</Setting>
    <Setting Target="Adapter" Name="SSLConfig"></Setting>
  </Item>
</Production>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.Queue.EMCIMessageQueue">
<Description><![CDATA[
This Message Queue is a Template Queue Class where the source Databases either an EMCI
Database or the ODS. This Message Queue is used to send Master Consumers from one EMCI Database
to another EMCI Database. An EMCI to EMCI Interface will export a Master Consumer
record from the Source EMCI database, Transform it into a FHIR Patient Message and send
it via HTTP to the Target EMCI database. Alternatively the data source is used to retrieve
data from the ODS and send it via HTTP in HL7 format to a Target HL7 Server. The Message Queue
classes are used in all of the DFI Interfaces which include:<br><br>
1) ODS to HL7 Interfaces<br>
2) ODS to EMCI Interfaces<br>
3) ODS to IHIS Interfaces<br>
4) Testing the Target EMCI Interface<br>
5) Merge an EMCI Database into another EMCI Database<br>
6) The EMCI Test Module that uses an EMCI Source Database for the source records that
will be used for the different Test Scenarios.<br><br>

The Queue has all of the standard system queue Properties and Queue Methods. The
Standard Message Queue Properties are specified in the class:<br><br>
<b><i>Robot.Common.Abstract.MessageQueueBaseProperties</i></b> which is an [Abstract] class definition.<br><br>
The Standard Message Queue Methods are found in the %RegisteredObject class:<br><br>
<b><i>Robot.Common.Abstract.MessageQueueBaseMethods.</i></b><br><br>
When creating a new Message Queue Class you can either copy one of the Template
Queue Classes in the Package Robot.Common.Queue or you can create the Message Queue
class from scratch.<br>
The Message Queue class should extend the following classes:<br><br>
<b><i>%Persistent, %XML.Adaptor, %ZEN.DataModel.Adaptor</i></b> - System Classes<br>
<b><i>Robot.Common.Abstract.MessageQueueBaseProperties</i></b> - Standard Message Queue Properties<br>
<b><i>Robot.Common.Abstract.MessageQueueBaseMethods</i></b> - Standard Message Queue Methods.<br><br>
The EXTENDS syntax would then look like this:<br><br>
<b><i>class {classname}  Extends (%Persistent, %XML.Adaptor, %ZEN.DataModel.Adaptor, Robot.Common.Abstract.MessageQueueBaseProperties, Robot.Common.Abstract.MessageQueueBaseMethods)</i></b><br><br>
Index definitions specified in Abstract class definitions do not work when inherited
into another class and so the any Indices that you want in the new Message Queue Class
should be defined in the new class definition. As a bare minimum you should include
the following Indices on the Standard Time Stamp properties.<br>
The <b><i>CreateTS</i></b> indicate when the Message Queue Record was created and is set by default
when a new Message Queue Object is created<br>
The <b><i>ProcessTS</i></b> is set when a Message Queue Record has been picked off the Message
Queue in the Message Queue.<br>
The <b><i>CompletedTS</i></b> is set once the message has completed the full round trip from the Business
service through to the Business Process. Then the HTTP and optionally the File Operation. The
responses from the Operations are processed  by the Business Process and finally the 
response message returns to the Business Service where the Message Queue Record is
flagged as compete by setting the CompleetedTS as well as the final Message Status
which indicates the overall success of the message.<br>
The Index definitions that must be included in the Message Queue class are:<br><br>
<b><i>Index CreateIDX On CreateTS;</i></b><br>
<b><i>Index ProcessIDX On ProcessTS;</i></b><br>
<b><i>Index CompletedIDX On CompletedTS;</i></b><br><br>

So having created the core properties and functionality of a Message Queue class you
need to specify the properties that will be used to identify the Source Classs Record
that will be transformed into an HL7 or FHIR Message befor being sent to the Target
application. These properties are going to be specific to the source data class
that in the source database.<br>
Other data fields that will be used in the Interface are sourced from the following
DFI classes:<br><br>
<b><i>Robot.Common.Configuration.ConfigurationSettings.</i></b><br><br>
This class contains a lot of properties that give context to a specific Interface.
It includes properties that are used to populate fields in an HL7 Message, directory
and file name templates for any files that are created by an Interface, HTTP Methods
that will be used by the HTTP Operations.<br>
Read the documentatio on the Configuration class to see what properties are available
to you.<br>
The whole intention of the DFI Interface model is to abstract all information that
defines an Interface so that there is no need for any hard coding in any interface with
the exception of the Configuration Settings class itself. <br><br>

Then the properties that are specific to the Queue depends on the data source.<br>
There are two primary data sources, the ODS and an EMCI database. Within these
Data Sources there are options on which class will supply the message queue properties
that are used to identify the source data record that will be transformed in the
Interface Business Process that will transform the Source Data Record into a target
HL7 or FHIR message that will be sent to the target Server, whether that be an EMCI
FHIR Server, IHIS FHIR Server or an HL7 Server (e.g. HPRS, WCG Standard HL7 Server)
The data classes that are currently used for the Interfaces developed so far are:<br><br>

1) The DW.Messages.TransactionLog Request Message used in the Clinicom to ODS Trickle
Feed.<br>
2) The DW.Modules.PMI.Patient and DW.Modules.PMI.Person clases in the ODS. The properties
PatientRowId, PatientInternalNumber and PatientHID are drived from these classes.<br>
Two examples of Interfaces that use these classes to create the Messsage Queues are
the HPRS Bulk Export Interface and the EMCI Bulk Export.<br>
3) EMCI.MasterConsumer.MasterConsumer in an EMCI Database.<br>
4) Messages.Request.FHIRInput which is the Request Class used in the EMCI FHIR Server
Interface.<br><br>

This template Message Queue is focused on the Data Source being an EMCI Database. The
template Message Queue for data sourced from the ODS using the TransactioLog Request
message in the Clinicom to ODS Trickle Feed is Robot.Common.Queue.ODSTFMessageQueue.
The template Message Queue for data sourced from the ODS using the DW.Modules.PMI.Patient
is Robot.Common.Queue.ODSDWMessageQueue.<br><br>

When creating a new queue for a new Interface the Message Queue to be used in that
Interface can be a class copy of one of these template queues. The new Message queue
class should use the following naming conventions:<br><br>
<b><i>Robot.{Interface_Alias}.Queue.{ODS}[PMI]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{ODS}[TF]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Bulk]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Test]MessageQueue[Namespace]</i></b><br><br>
Where <b><i>{Interface_Alias}</i></b> is a String that is an abbreviation of the Interface name. For
example "WCGHL7STD" which is the alias for the WCG Standard HL7 Interface. Another
example "BulkExport" which is the alias for the EMCI Bulk Export from the ODS Interface<br>
<b><i>{ODS}</i></b> is the data source abbreviation for the Source Database being the ODS<br>
<b><i>{EMCI}</i></b> is the data source abbreviaion for the Source Database being an EMCI Database<br>
<b><i>[PMI]</i></b> is an optional indicator that the DW.Modules.PMI.Patient/Person class is used
to create the Message Queue Entries<br>
<b><i>[Bulk]</i></b> is an optional indicator that the Queue is used in a Bulk Export Interface<br>
<b><i>[Test]</i></b> is an optional indicator that the Queue is used in a Testing Interface<br>
<b><i>[TF]</i></b> is an optional indicator that the DW.Messages.TransactionLog Request message used
in the Clinicom to ODS Trickle Feed Interface<br>
<b><i>[Namespace]</i></b> is an optional indicator of the Namespace that the queue will be created in.<br>
This is relevant where there is a QC version of the Interface If the Interface is the
"Production" or "Live" Interface then by default if the is no [Namespace] indicator
then the Queue is the Production Queue. Optionally you can use [PRD] to indicate that
the queue is created in the "Production" database.<br><br>

Once a Message Queue class has been defined and compiled then there is one final task
to do and that is to change the Global Names that are generated by the class compiler
and replace the generated global name to a global name that has a specific format.<br>
The reason for doing this is that there is a lot of Package an Global Mapping functionality
in this whole project and it is easier to map globals if the global names follow a certain
convention.<br>
The message queue global names follow the following convention which match the message
queue naming conventions:<br><br>

<b><i>Robot.{Interface_Alias}.Queue.{ODS}[PMI]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{ODS}[TF]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Bulk]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Test]MessageQueue[Namespace]</i></b><br><br>

There is a PARAMETER setting in the Message Queue Classes:<br><br>
<b><i>PARAMETER GlobalName = "Robot.{Interface_Alias}.Queue.{Classname}*</i></b><br><br>
That indicates what global name has been used instead of the compiler auto generated global
name. It reminds developers that if the storgae definition of the class is recreated the
the global name must be replaced with the value in the Parameter in order to ensure that
the Global Mapping of the queue class will include this new message queue class global.]]></Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,Robot.Common.Abstract.MessageQueueBaseProperties,Robot.Common.Abstract.MessageQueueBaseMethods,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65889,85556.473314</TimeChanged>
<TimeCreated>65449,41785.490378</TimeCreated>

<Property name="MasterConsumerID">
<Description>
The MasterConsumer RowId in the EMCI.MasterConsumer.MasterConsumer class</Description>
<Type>%String</Type>
</Property>

<Property name="EMCIUId">
<Description>
The EMCIUId property is an alternative way of Identifying the Master Consumer Record</Description>
<Type>%String</Type>
</Property>

<Property name="EMCINSID">
<Description>
The NSID is another way of identifying a specific MasterConsumer</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="EMCIONSID">
<Description>
The ONSID is the final way of indentifying a Master Consumer and has the added advantage
of specifying the Managing Organization that will be specified in the FHIR Patient Message
sent to the EMCI FHIR Server</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Index name="CreateIDX">
<Properties>CreateTS</Properties>
</Index>

<Index name="ProcessIDX">
<Properties>ProcessTS</Properties>
</Index>

<Index name="CompletedIDX">
<Properties>CompletedTS</Properties>
</Index>

<Index name="RowIdIDX">
<Properties>MasterConsumerID</Properties>
</Index>

<Index name="UIDIDX">
<Properties>EMCIUId</Properties>
</Index>

<Index name="NSIDIDX">
<Properties>EMCINSID</Properties>
</Index>

<Index name="ONSIDIDX">
<Properties>EMCIONSID</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.Queue.EMCIMessageQueueD</DataLocation>
<DefaultData>EMCIMessageQueueDefaultData</DefaultData>
<IdLocation>^Robot.Common.Queue.EMCIMessageQueueD</IdLocation>
<IndexLocation>^Robot.Common.Queue.EMCIMessageQueueI</IndexLocation>
<StreamLocation>^Robot.Common.Queue.EMCIMessageQueueS</StreamLocation>
<Data name="EMCIMessageQueueDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CreateTS</Value>
</Value>
<Value name="3">
<Value>EMCIUId</Value>
</Value>
<Value name="4">
<Value>CompletedTS</Value>
</Value>
<Value name="5">
<Value>EMCIONSID</Value>
</Value>
<Value name="6">
<Value>MessageStatusText</Value>
</Value>
<Value name="7">
<Value>TargetDocumentType</Value>
</Value>
<Value name="8">
<Value>SourceHL7RequestMessage</Value>
</Value>
<Value name="9">
<Value>TargetHL7ResponseMessage</Value>
</Value>
<Value name="10">
<Value>SourceFHIRRequestMessage</Value>
</Value>
<Value name="11">
<Value>TargetFHIRResponseMessage</Value>
</Value>
<Value name="12">
<Value>TargetResponseLocation</Value>
</Value>
<Value name="13">
<Value>TargetResponseStatus</Value>
</Value>
<Value name="14">
<Value>TargetResponseStatusText</Value>
</Value>
<Value name="15">
<Value>TimeTakenFromCreateToComplete</Value>
</Value>
<Value name="16">
<Value>TimeTakenFromProcessingToComplete</Value>
</Value>
<Value name="17">
<Value>EMCINSID</Value>
</Value>
<Value name="18">
<Value>MasterConsumerID</Value>
</Value>
<Value name="19">
<Value>MessageStatus</Value>
</Value>
<Value name="20">
<Value>ProcessTS</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Queue.EMCITestMessageQueue">
<Description><![CDATA[
This Message Queue is a Template Queue Class where the source Databases either an EMCI
Database or the ODS. This Message Queue is used to send Master Consumers from one EMCI Database
to another EMCI Database. An EMCI to EMCI Interface will export a Master Consumer
record from the Source EMCI database, Transform it into a FHIR Patient Message and send
it via HTTP to the Target EMCI database. Alternatively the data source is used to retrieve
data from the ODS and send it via HTTP in HL7 format to a Target HL7 Server. The Message Queue
classes are used in all of the DFI Interfaces which include:<br><br>

1) ODS to HL7 Interfaces<br>
2) ODS to EMCI Interfaces<br>
3) ODS to IHIS Interfaces<br>
4) Testing the Target EMCI Interface<br>
5) Merge an EMCI Database into another EMCI Database<br>
6) The EMCI Test Module that uses an EMCI Source Database for the source records that
will be used for the different Test Scenarios.<br><br>

The Queue has all of the standard system queue Properties and Queue Methods. The
Standard Message Queue Properties are specified in the class:<br><br>
<b><i>Robot.Common.Abstract.MessageQueueBaseProperties</i></b> which is an [Abstract] class definition.<br><br>
The Standard Message Queue Methods are found in the %RegisteredObject class:<br><br>
<b><i>Robot.Common.Abstract.MessageQueueBaseMethods.</i></b><br><br>
When creating a new Message Queue Class you can either copy one of the Template
Queue Classes in the Package Robot.Common.Queue or you can create the Message Queue
class from scratch.<br>
The Message Queue class should extend the following classes:<br><br>
<b><i>%Persistent, %XML.Adaptor, %ZEN.DataModel.Adaptor</i></b> - System Classes<br>
<b><i>Robot.Common.Abstract.MessageQueueBaseProperties</i></b> - Standard Message Queue Properties<br>
<b><i>Robot.Common.Abstract.MessageQueueBaseMethods</i></b> - Standard Message Queue Methods.<br><br>
The EXTENDS syntax would then look like this:<br><br>
<b><i>class {classname}  Extends (%Persistent, %XML.Adaptor, %ZEN.DataModel.Adaptor, Robot.Common.Abstract.MessageQueueBaseProperties, Robot.Common.Abstract.MessageQueueBaseMethods)</i></b><br><br>
Index definitions specified in Abstract class definitions do not work when inherited
into another class and so the any Indices that you want in the new Message Queue Class
should be defined in the new class definition. As a bare minimum you should include
the following Indices on the Standard Time Stamp properties.<br>
The <b><i>CreateTS</i></b> indicate when the Message Queue Record was created and is set by default
when a new Message Queue Object is created<br>
The <b><i>ProcessTS</i></b> is set when a Message Queue Record has been picked off the Message
Queue in the Message Queue.<br>
The <b><i>CompletedTS</i></b> is set once the message has completed the full round trip from the Business
service through to the Business Process. Then the HTTP and optionally the File Operation. The
responses from the Operations are processed  by the Business Process and finally the 
response message returns to the Business Service where the Message Queue Record is
flagged as compete by setting the CompleetedTS as well as the final Message Status
which indicates the overall success of the message.<br>
The Index definitions that must be included in the Message Queue class are:<br><br>
<b><i>Index CreateIDX On CreateTS;</i></b><br>
<b><i>Index ProcessIDX On ProcessTS;</i></b><br>
<b><i>Index CompletedIDX On CompletedTS;</i></b><br><br>

So having created the core properties and functionality of a Message Queue class you
need to specify the properties that will be used to identify the Source Classs Record
that will be transformed into an HL7 or FHIR Message befor being sent to the Target
application. These properties are going to be specific to the source data class
that in the source database.<br>
Other data fields that will be used in the Interface are sourced from the following
DFI classes:<br><br>
<b><i>Robot.Common.Configuration.ConfigurationSettings.</i></b><br><br>
This class contains a lot of properties that give context to a specific Interface.
It includes properties that are used to populate fields in an HL7 Message, directory
and file name templates for any files that are created by an Interface, HTTP Methods
that will be used by the HTTP Operations.<br>
Read the documentatio on the Configuration class to see what properties are available
to you.<br>
The whole intention of the DFI Interface model is to abstract all information that
defines an Interface so that there is no need for any hard coding in any interface with
the exception of the Configuration Settings class itself. <br><br>

Then the properties that are specific to the Queue depends on the data source.<br>
There are two primary data sources, the ODS and an EMCI database. Within these
Data Sources there are options on which class will supply the message queue properties
that are used to identify the source data record that will be transformed in the
Interface Business Process that will transform the Source Data Record into a target
HL7 or FHIR message that will be sent to the target Server, whether that be an EMCI
FHIR Server, IHIS FHIR Server or an HL7 Server (e.g. HPRS, WCG Standard HL7 Server)
The data classes that are currently used for the Interfaces developed so far are:<br><br>

1) The DW.Messages.TransactionLog Request Message used in the Clinicom to ODS Trickle
Feed.<br>
2) The DW.Modules.PMI.Patient and DW.Modules.PMI.Person clases in the ODS. The properties
PatientRowId, PatientInternalNumber and PatientHID are drived from these classes.<br>
Two examples of Interfaces that use these classes to create the Messsage Queues are
the HPRS Bulk Export Interface and the EMCI Bulk Export.<br>
3) EMCI.MasterConsumer.MasterConsumer in an EMCI Database.<br>
4) Messages.Request.FHIRInput which is the Request Class used in the EMCI FHIR Server
Interface.<br><br>

This template Message Queue is focused on the Data Source being an EMCI Database. The
template Message Queue for data sourced from the ODS using the TransactioLog Request
message in the Clinicom to ODS Trickle Feed is Robot.Common.Queue.ODSTFMessageQueue.
The template Message Queue for data sourced from the ODS using the DW.Modules.PMI.Patient
is Robot.Common.Queue.ODSDWMessageQueue.<br><br>

When creating a new queue for a new Interface the Message Queue to be used in that
Interface can be a class copy of one of these template queues. The new Message queue
class should use the following naming conventions:<br><br>
<b><i>Robot.{Interface_Alias}.Queue.{ODS}[PMI]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{ODS}[TF]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Bulk]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Test]MessageQueue[Namespace]</i></b><br><br>
Where <b><i>{Interface_Alias}</i></b> is a String that is an abbreviation of the Interface name. For
example "WCGHL7STD" which is the alias for the WCG Standard HL7 Interface. Another
example "BulkExport" which is the alias for the EMCI Bulk Export from the ODS Interface<br>
<b><i>{ODS}</i></b> is the data source abbreviation for the Source Database being the ODS<br>
<b><i>{EMCI}</i></b> is the data source abbreviaion for the Source Database being an EMCI Database<br>
<b><i>[PMI]</i></b> is an optional indicator that the DW.Modules.PMI.Patient/Person class is used
to create the Message Queue Entries<br>
<b><i>[Bulk]</i></b> is an optional indicator that the Queue is used in a Bulk Export Interface<br>
<b><i>[Test]</i></b> is an optional indicator that the Queue is used in a Testing Interface<br>
<b><i>[TF]</i></b> is an optional indicator that the DW.Messages.TransactionLog Request message used
in the Clinicom to ODS Trickle Feed Interface<br>
<b><i>[Namespace]</i></b> is an optional indicator of the Namespace that the queue will be created in.<br>
This is relevant where there is a QC version of the Interface If the Interface is the
"Production" or "Live" Interface then by default if the is no [Namespace] indicator
then the Queue is the Production Queue. Optionally you can use [PRD] to indicate that
the queue is created in the "Production" database.<br><br>

Once a Message Queue class has been defined and compiled then there is one final task
to do and that is to change the Global Names that are generated by the class compiler
and replace the generated global name to a global name that has a specific format.<br>
The reason for doing this is that there is a lot of Package an Global Mapping functionality
in this whole project and it is easier to map globals if the global names follow a certain
convention.<br>
The message queue global names follow the following convention which match the message
queue naming conventions:<br><br>

<b><i>Robot.{Interface_Alias}.Queue.{ODS}[PMI]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{ODS}[TF]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Bulk]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Test]MessageQueue[Namespace]</i></b><br><br>

There is a PARAMETER setting in the Message Queue Classes:<br><br>
<b><i>PARAMETER GlobalName = "Robot.{Interface_Alias}.Queue.{Classname}*</i></b><br><br>
That indicates what global name has been used instead of the compiler auto generated global
name. It reminds developers that if the storgae definition of the class is recreated the
the global name must be replaced with the value in the Parameter in order to ensure that
the Global Mapping of the queue class will include this new message queue class global.]]></Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,Robot.Common.Abstract.MessageQueueBaseProperties,Robot.Common.Abstract.MessageQueueBaseMethods,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65895,17105.745442</TimeChanged>
<TimeCreated>65449,41785.490378</TimeCreated>

<Parameter name="GlobalName">
<Default>^Robot.Common.Queue.TestMessageQueue*</Default>
</Parameter>

<Property name="ManifestId">
<Description>
The Manifest contains all of the records processed for this Message and Test Conditions
The Manifest Records dtail the HTTP Response Status and other Status Flags.
The Manifest itself indicates if it is ok or not
Manifests are optional. Manifests server two purposes:
1) They allow you to process a batch of records as one transaction
2) The Manifest (and Manifest records) are JSON aware and therefore can be exported as JSON content.
3) The Manifest Report or Manifest JSON can be analyed to confirm that the records the Interface
thinks it has sent correesponds with the records received by the Target server
4) The Manifest Records contain the HL7 or FHIR JSON bodies for the request and response messages
and can be viewed. They also contain pointers to the files into which the HL7 or JSON content is written.
This provides another way for the request and response messages to be reviewed.
5) The files can be edited and reposted to see what outcome you get</Description>
<Type>%String</Type>
</Property>

<Index name="CreateIDX">
<Properties>CreateTS</Properties>
</Index>

<Index name="ProcessIDX">
<Properties>ProcessTS</Properties>
</Index>

<Index name="CompletedIDX">
<Properties>CompletedTS</Properties>
</Index>

<Index name="ManifestIDX">
<Properties>ManifestId</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.Queue.TestMessageQueueD</DataLocation>
<DefaultData>EMCITestMessageQueueDefaultData</DefaultData>
<IdLocation>^Robot.Common.Queue.TestMessageQueueD</IdLocation>
<IndexLocation>^Robot.Common.Queue.TestMessageQueueI</IndexLocation>
<StreamLocation>^Robot.Common.Queue.TestMessageQueueS</StreamLocation>
<Data name="EMCITestMessageQueueDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CreateTS</Value>
</Value>
<Value name="3">
<Value>ProcessTS</Value>
</Value>
<Value name="4">
<Value>CompletedTS</Value>
</Value>
<Value name="5">
<Value>MessageStatus</Value>
</Value>
<Value name="6">
<Value>MessageStatusText</Value>
</Value>
<Value name="7">
<Value>TargetDocumentType</Value>
</Value>
<Value name="8">
<Value>SourceHL7RequestMessage</Value>
</Value>
<Value name="9">
<Value>TargetHL7ResponseMessage</Value>
</Value>
<Value name="10">
<Value>SourceFHIRRequestMessage</Value>
</Value>
<Value name="11">
<Value>TargetFHIRResponseMessage</Value>
</Value>
<Value name="12">
<Value>TargetResponseLocation</Value>
</Value>
<Value name="13">
<Value>TargetResponseStatus</Value>
</Value>
<Value name="14">
<Value>TargetResponseStatusText</Value>
</Value>
<Value name="15">
<Value>TimeTakenFromCreateToComplete</Value>
</Value>
<Value name="16">
<Value>TimeTakenFromProcessingToComplete</Value>
</Value>
<Value name="17">
<Value>ManifestId</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Queue.ODSBulkExportQueue">
<Description><![CDATA[
This Message Queue is a Template Queue Class where the source Databases either an EMCI
Database or the ODS. This Message Queue is used to send Master Consumers from one EMCI Database
to another EMCI Database. An EMCI to EMCI Interface will export a Master Consumer
record from the Source EMCI database, Transform it into a FHIR Patient Message and send
it via HTTP to the Target EMCI database. Alternatively the data source is used to retrieve
data from the ODS and send it via HTTP in HL7 format to a Target HL7 Server. The Message Queue
classes are used in all of the DFI Interfaces which include:<br><br>
1) ODS to HL7 Interfaces<br>
2) ODS to EMCI Interfaces<br>
3) ODS to IHIS Interfaces<br>
4) Testing the Target EMCI Interface<br>
5) Merge an EMCI Database into another EMCI Database<br>
6) The EMCI Test Module that uses an EMCI Source Database for the source records that
will be used for the different Test Scenarios.<br><br>

The Queue has all of the standard system queue Properties and Queue Methods. The
Standard Message Queue Properties are specified in the class:<br><br>
<b><i>Robot.Common.Abstract.MessageQueueBaseProperties</i></b> which is an [Abstract] class definition.<br><br>
The Standard Message Queue Methods are found in the %RegisteredObject class:<br><br>
<b><i>Robot.Common.Abstract.MessageQueueBaseMethods.</i></b><br><br>
When creating a new Message Queue Class you can either copy one of the Template
Queue Classes in the Package Robot.Common.Queue or you can create the Message Queue
class from scratch.<br>
The Message Queue class should extend the following classes:<br><br>
<b><i>%Persistent, %XML.Adaptor, %ZEN.DataModel.Adaptor</i></b> - System Classes<br>
<b><i>Robot.Common.Abstract.MessageQueueBaseProperties</i></b> - Standard Message Queue Properties<br>
<b><i>Robot.Common.Abstract.MessageQueueBaseMethods</i></b> - Standard Message Queue Methods.<br><br>
The EXTENDS syntax would then look like this:<br><br>
<b><i>class {classname}  Extends (%Persistent, %XML.Adaptor, %ZEN.DataModel.Adaptor, Robot.Common.Abstract.MessageQueueBaseProperties, Robot.Common.Abstract.MessageQueueBaseMethods)</i></b><br><br>
Index definitions specified in Abstract class definitions do not work when inherited
into another class and so the any Indices that you want in the new Message Queue Class
should be defined in the new class definition. As a bare minimum you should include
the following Indices on the Standard Time Stamp properties.<br>
The <b><i>CreateTS</i></b> indicate when the Message Queue Record was created and is set by default
when a new Message Queue Object is created<br>
The <b><i>ProcessTS</i></b> is set when a Message Queue Record has been picked off the Message
Queue in the Message Queue.<br>
The <b><i>CompletedTS</i></b> is set once the message has completed the full round trip from the Business
service through to the Business Process. Then the HTTP and optionally the File Operation. The
responses from the Operations are processed  by the Business Process and finally the 
response message returns to the Business Service where the Message Queue Record is
flagged as compete by setting the CompleetedTS as well as the final Message Status
which indicates the overall success of the message.<br>
The Index definitions that must be included in the Message Queue class are:<br><br>
<b><i>Index CreateIDX On CreateTS;</i></b><br>
<b><i>Index ProcessIDX On ProcessTS;</i></b><br>
<b><i>Index CompletedIDX On CompletedTS;</i></b><br><br>

So having created the core properties and functionality of a Message Queue class you
need to specify the properties that will be used to identify the Source Classs Record
that will be transformed into an HL7 or FHIR Message befor being sent to the Target
application. These properties are going to be specific to the source data class
that in the source database.<br>
Other data fields that will be used in the Interface are sourced from the following
DFI classes:<br><br>
<b><i>Robot.Common.Configuration.ConfigurationSettings.</i></b><br><br>
This class contains a lot of properties that give context to a specific Interface.
It includes properties that are used to populate fields in an HL7 Message, directory
and file name templates for any files that are created by an Interface, HTTP Methods
that will be used by the HTTP Operations.<br>
Read the documentatio on the Configuration class to see what properties are available
to you.<br>
The whole intention of the DFI Interface model is to abstract all information that
defines an Interface so that there is no need for any hard coding in any interface with
the exception of the Configuration Settings class itself. <br><br>

Then the properties that are specific to the Queue depends on the data source.<br>
There are two primary data sources, the ODS and an EMCI database. Within these
Data Sources there are options on which class will supply the message queue properties
that are used to identify the source data record that will be transformed in the
Interface Business Process that will transform the Source Data Record into a target
HL7 or FHIR message that will be sent to the target Server, whether that be an EMCI
FHIR Server, IHIS FHIR Server or an HL7 Server (e.g. HPRS, WCG Standard HL7 Server)
The data classes that are currently used for the Interfaces developed so far are:<br><br>

1) The DW.Messages.TransactionLog Request Message used in the Clinicom to ODS Trickle
Feed.<br>
2) The DW.Modules.PMI.Patient and DW.Modules.PMI.Person clases in the ODS. The properties
PatientRowId, PatientInternalNumber and PatientHID are drived from these classes.<br>
Two examples of Interfaces that use these classes to create the Messsage Queues are
the HPRS Bulk Export Interface and the EMCI Bulk Export.<br>
3) EMCI.MasterConsumer.MasterConsumer in an EMCI Database.<br>
4) Messages.Request.FHIRInput which is the Request Class used in the EMCI FHIR Server
Interface.<br><br>

This template Message Queue is focused on the Data Source being an EMCI Database. The
template Message Queue for data sourced from the ODS using the TransactioLog Request
message in the Clinicom to ODS Trickle Feed is Robot.Common.Queue.ODSTFMessageQueue.
The template Message Queue for data sourced from the ODS using the DW.Modules.PMI.Patient
is Robot.Common.Queue.ODSDWMessageQueue.<br><br>

When creating a new queue for a new Interface the Message Queue to be used in that
Interface can be a class copy of one of these template queues. The new Message queue
class should use the following naming conventions:<br><br>
<b><i>Robot.{Interface_Alias}.Queue.{ODS}[PMI]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{ODS}[TF]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Bulk]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Test]MessageQueue[Namespace]</i></b><br><br>
Where <b><i>{Interface_Alias}</i></b> is a String that is an abbreviation of the Interface name. For
example "WCGHL7STD" which is the alias for the WCG Standard HL7 Interface. Another
example "BulkExport" which is the alias for the EMCI Bulk Export from the ODS Interface<br>
<b><i>{ODS}</i></b> is the data source abbreviation for the Source Database being the ODS<br>
<b><i>{EMCI}</i></b> is the data source abbreviaion for the Source Database being an EMCI Database<br>
<b><i>[PMI]</i></b> is an optional indicator that the DW.Modules.PMI.Patient/Person class is used
to create the Message Queue Entries<br>
<b><i>[Bulk]</i></b> is an optional indicator that the Queue is used in a Bulk Export Interface<br>
<b><i>[Test]</i></b> is an optional indicator that the Queue is used in a Testing Interface<br>
<b><i>[TF]</i></b> is an optional indicator that the DW.Messages.TransactionLog Request message used
in the Clinicom to ODS Trickle Feed Interface<br>
<b><i>[Namespace]</i></b> is an optional indicator of the Namespace that the queue will be created in.<br>
This is relevant where there is a QC version of the Interface If the Interface is the
"Production" or "Live" Interface then by default if the is no [Namespace] indicator
then the Queue is the Production Queue. Optionally you can use [PRD] to indicate that
the queue is created in the "Production" database.<br><br>

Once a Message Queue class has been defined and compiled then there is one final task
to do and that is to change the Global Names that are generated by the class compiler
and replace the generated global name to a global name that has a specific format.<br>
The reason for doing this is that there is a lot of Package an Global Mapping functionality
in this whole project and it is easier to map globals if the global names follow a certain
convention.<br>
The message queue global names follow the following convention which match the message
queue naming conventions:<br><br>

<b><i>Robot.{Interface_Alias}.Queue.{ODS}[PMI]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{ODS}[TF]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Bulk]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Test]MessageQueue[Namespace]</i></b><br><br>

There is a PARAMETER setting in the Message Queue Classes:<br><br>
<b><i>PARAMETER GlobalName = "Robot.{Interface_Alias}.Queue.{Classname}*</i></b><br><br>
That indicates what global name has been used instead of the compiler auto generated global
name. It reminds developers that if the storgae definition of the class is recreated the
the global name must be replaced with the value in the Parameter in order to ensure that
the Global Mapping of the queue class will include this new message queue class global.]]></Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,Robot.Common.Abstract.MessageQueueBaseProperties,Robot.Common.Abstract.MessageQueueBaseMethods,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65890,1689.065157</TimeChanged>
<TimeCreated>65449,41785.490378</TimeCreated>

<Parameter name="GlobalName">
<Default>^Robot.Common.Queue.ODSBulkExportQueue*</Default>
</Parameter>

<Property name="PatientId">
<Type>%String</Type>
</Property>

<Property name="PatientInternalNumber">
<Type>%Integer</Type>
</Property>

<Property name="PatientHID">
<Type>%String</Type>
</Property>

<Index name="CTS">
<Properties>CreateTS</Properties>
</Index>

<Index name="PTS">
<Properties>ProcessTS</Properties>
</Index>

<Index name="CPTS">
<Properties>CompletedTS</Properties>
</Index>

<Index name="PID">
<Properties>PatientId</Properties>
</Index>

<Index name="PIN">
<Properties>PatientInternalNumber</Properties>
</Index>

<Index name="pHID">
<Properties>PatientHID</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.Queue.ODSBulkExportQueueD</DataLocation>
<DefaultData>ODSBulkExportQueueDefaultData</DefaultData>
<IdLocation>^Robot.Common.Queue.ODSBulkExportQueueD</IdLocation>
<IndexLocation>^Robot.Common.Queue.ODSBulkExportQueueI</IndexLocation>
<StreamLocation>^Robot.Common.Queue.ODSBulkExportQueueS</StreamLocation>
<Data name="ODSBulkExportQueueDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CreateTS</Value>
</Value>
<Value name="3">
<Value>PatientId</Value>
</Value>
<Value name="4">
<Value>CompletedTS</Value>
</Value>
<Value name="5">
<Value>MessageStatus</Value>
</Value>
<Value name="6">
<Value>MessageStatusText</Value>
</Value>
<Value name="7">
<Value>TargetDocumentType</Value>
</Value>
<Value name="8">
<Value>SourceHL7RequestMessage</Value>
</Value>
<Value name="9">
<Value>TargetHL7ResponseMessage</Value>
</Value>
<Value name="10">
<Value>SourceFHIRRequestMessage</Value>
</Value>
<Value name="11">
<Value>TargetFHIRResponseMessage</Value>
</Value>
<Value name="12">
<Value>TargetResponseLocation</Value>
</Value>
<Value name="13">
<Value>TargetResponseStatus</Value>
</Value>
<Value name="14">
<Value>TargetResponseStatusText</Value>
</Value>
<Value name="15">
<Value>TimeTakenFromCreateToComplete</Value>
</Value>
<Value name="16">
<Value>TimeTakenFromProcessingToComplete</Value>
</Value>
<Value name="17">
<Value>PatientHID</Value>
</Value>
<Value name="18">
<Value>PatientInternalNumber</Value>
</Value>
<Value name="19">
<Value>ProcessTS</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Queue.ODSMessageQueue">
<Description><![CDATA[
This Message Queue is a Template Queue Class where the source Databases either an EMCI
Database or the ODS. This Message Queue is used to send Master Consumers from one EMCI Database
to another EMCI Database. An EMCI to EMCI Interface will export a Master Consumer
record from the Source EMCI database, Transform it into a FHIR Patient Message and send
it via HTTP to the Target EMCI database. Alternatively the data source is used to retrieve
data from the ODS and send it via HTTP in HL7 format to a Target HL7 Server. The Message Queue
classes are used in all of the DFI Interfaces which include:<br><br>
1) ODS to HL7 Interfaces<br>
2) ODS to EMCI Interfaces<br>
3) ODS to IHIS Interfaces<br>
4) Testing the Target EMCI Interface<br>
5) Merge an EMCI Database into another EMCI Database<br>
6) The EMCI Test Module that uses an EMCI Source Database for the source records that
will be used for the different Test Scenarios.<br><br>

The Queue has all of the standard system queue Properties and Queue Methods. The
Standard Message Queue Properties are specified in the class:<br><br>
<b><i>Robot.Common.Abstract.MessageQueueBaseProperties</i></b> which is an [Abstract] class definition.<br><br>
The Standard Message Queue Methods are found in the %RegisteredObject class:<br><br>
<b><i>Robot.Common.Abstract.MessageQueueBaseMethods.</i></b><br><br>
When creating a new Message Queue Class you can either copy one of the Template
Queue Classes in the Package Robot.Common.Queue or you can create the Message Queue
class from scratch.<br>
The Message Queue class should extend the following classes:<br><br>
<b><i>%Persistent, %XML.Adaptor, %ZEN.DataModel.Adaptor</i></b> - System Classes<br>
<b><i>Robot.Common.Abstract.MessageQueueBaseProperties</i></b> - Standard Message Queue Properties<br>
<b><i>Robot.Common.Abstract.MessageQueueBaseMethods</i></b> - Standard Message Queue Methods.<br><br>
The EXTENDS syntax would then look like this:<br><br>
<b><i>class {classname}  Extends (%Persistent, %XML.Adaptor, %ZEN.DataModel.Adaptor, Robot.Common.Abstract.MessageQueueBaseProperties, Robot.Common.Abstract.MessageQueueBaseMethods)</i></b><br><br>
Index definitions specified in Abstract class definitions do not work when inherited
into another class and so the any Indices that you want in the new Message Queue Class
should be defined in the new class definition. As a bare minimum you should include
the following Indices on the Standard Time Stamp properties.<br>
The <b><i>CreateTS</i></b> indicate when the Message Queue Record was created and is set by default
when a new Message Queue Object is created<br>
The <b><i>ProcessTS</i></b> is set when a Message Queue Record has been picked off the Message
Queue in the Message Queue.<br>
The <b><i>CompletedTS</i></b> is set once the message has completed the full round trip from the Business
service through to the Business Process. Then the HTTP and optionally the File Operation. The
responses from the Operations are processed  by the Business Process and finally the 
response message returns to the Business Service where the Message Queue Record is
flagged as compete by setting the CompleetedTS as well as the final Message Status
which indicates the overall success of the message.<br>
The Index definitions that must be included in the Message Queue class are:<br><br>
<b><i>Index CreateIDX On CreateTS;</i></b><br>
<b><i>Index ProcessIDX On ProcessTS;</i></b><br>
<b><i>Index CompletedIDX On CompletedTS;</i></b><br><br>

So having created the core properties and functionality of a Message Queue class you
need to specify the properties that will be used to identify the Source Classs Record
that will be transformed into an HL7 or FHIR Message befor being sent to the Target
application. These properties are going to be specific to the source data class
that in the source database.<br>
Other data fields that will be used in the Interface are sourced from the following
DFI classes:<br><br>
<b><i>Robot.Common.Configuration.ConfigurationSettings.</i></b><br><br>
This class contains a lot of properties that give context to a specific Interface.
It includes properties that are used to populate fields in an HL7 Message, directory
and file name templates for any files that are created by an Interface, HTTP Methods
that will be used by the HTTP Operations.<br>
Read the documentatio on the Configuration class to see what properties are available
to you.<br>
The whole intention of the DFI Interface model is to abstract all information that
defines an Interface so that there is no need for any hard coding in any interface with
the exception of the Configuration Settings class itself. <br><br>

Then the properties that are specific to the Queue depends on the data source.<br>
There are two primary data sources, the ODS and an EMCI database. Within these
Data Sources there are options on which class will supply the message queue properties
that are used to identify the source data record that will be transformed in the
Interface Business Process that will transform the Source Data Record into a target
HL7 or FHIR message that will be sent to the target Server, whether that be an EMCI
FHIR Server, IHIS FHIR Server or an HL7 Server (e.g. HPRS, WCG Standard HL7 Server)
The data classes that are currently used for the Interfaces developed so far are:<br><br>

1) The DW.Messages.TransactionLog Request Message used in the Clinicom to ODS Trickle
Feed.<br>
2) The DW.Modules.PMI.Patient and DW.Modules.PMI.Person clases in the ODS. The properties
PatientRowId, PatientInternalNumber and PatientHID are drived from these classes.<br>
Two examples of Interfaces that use these classes to create the Messsage Queues are
the HPRS Bulk Export Interface and the EMCI Bulk Export.<br>
3) EMCI.MasterConsumer.MasterConsumer in an EMCI Database.<br>
4) Messages.Request.FHIRInput which is the Request Class used in the EMCI FHIR Server
Interface.<br><br>

This template Message Queue is focused on the Data Source being an EMCI Database. The
template Message Queue for data sourced from the ODS using the TransactioLog Request
message in the Clinicom to ODS Trickle Feed is Robot.Common.Queue.ODSTFMessageQueue.
The template Message Queue for data sourced from the ODS using the DW.Modules.PMI.Patient
is Robot.Common.Queue.ODSDWMessageQueue.<br><br>

When creating a new queue for a new Interface the Message Queue to be used in that
Interface can be a class copy of one of these template queues. The new Message queue
class should use the following naming conventions:<br><br>
<b><i>Robot.{Interface_Alias}.Queue.{ODS}[PMI]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{ODS}[TF]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Bulk]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Test]MessageQueue[Namespace]</i></b><br><br>
Where <b><i>{Interface_Alias}</i></b> is a String that is an abbreviation of the Interface name. For
example "WCGHL7STD" which is the alias for the WCG Standard HL7 Interface. Another
example "BulkExport" which is the alias for the EMCI Bulk Export from the ODS Interface<br>
<b><i>{ODS}</i></b> is the data source abbreviation for the Source Database being the ODS<br>
<b><i>{EMCI}</i></b> is the data source abbreviaion for the Source Database being an EMCI Database<br>
<b><i>[PMI]</i></b> is an optional indicator that the DW.Modules.PMI.Patient/Person class is used
to create the Message Queue Entries<br>
<b><i>[Bulk]</i></b> is an optional indicator that the Queue is used in a Bulk Export Interface<br>
<b><i>[Test]</i></b> is an optional indicator that the Queue is used in a Testing Interface<br>
<b><i>[TF]</i></b> is an optional indicator that the DW.Messages.TransactionLog Request message used
in the Clinicom to ODS Trickle Feed Interface<br>
<b><i>[Namespace]</i></b> is an optional indicator of the Namespace that the queue will be created in.<br>
This is relevant where there is a QC version of the Interface If the Interface is the
"Production" or "Live" Interface then by default if the is no [Namespace] indicator
then the Queue is the Production Queue. Optionally you can use [PRD] to indicate that
the queue is created in the "Production" database.<br><br>

Once a Message Queue class has been defined and compiled then there is one final task
to do and that is to change the Global Names that are generated by the class compiler
and replace the generated global name to a global name that has a specific format.<br>
The reason for doing this is that there is a lot of Package an Global Mapping functionality
in this whole project and it is easier to map globals if the global names follow a certain
convention.<br>
The message queue global names follow the following convention which match the message
queue naming conventions:<br><br>

<b><i>Robot.{Interface_Alias}.Queue.{ODS}[PMI]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{ODS}[TF]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Bulk]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Test]MessageQueue[Namespace]</i></b><br><br>

There is a PARAMETER setting in the Message Queue Classes:<br><br>
<b><i>PARAMETER GlobalName = "Robot.{Interface_Alias}.Queue.{Classname}*</i></b><br><br>
That indicates what global name has been used instead of the compiler auto generated global
name. It reminds developers that if the storgae definition of the class is recreated the
the global name must be replaced with the value in the Parameter in order to ensure that
the Global Mapping of the queue class will include this new message queue class global.]]></Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,Robot.Common.Abstract.MessageQueueBaseProperties,Robot.Common.Abstract.MessageQueueBaseMethods,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65890,1815.17054</TimeChanged>
<TimeCreated>65449,41785.490378</TimeCreated>

<Parameter name="GlobalName">
<Default>Robot.Common.Queue.ODSMessageQueue*</Default>
</Parameter>

<Property name="PatientNumber">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="EpisodeNumber">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="TransactionType">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="ClinicCode">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="DoctorCode">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="Action">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="ActivityDateTime">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="TrackingSequence">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="TrackingDate">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="LogType">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="VisitNumber">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Index name="CreateIDX">
<Properties>CreateTS</Properties>
</Index>

<Index name="ProcessIDX">
<Properties>ProcessTS</Properties>
</Index>

<Index name="CompletedIDX">
<Properties>CompletedTS</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.Queue.ODSMessageQueueD</DataLocation>
<DefaultData>ODSMessageQueueDefaultData</DefaultData>
<IdLocation>^Robot.Common.Queue.ODSMessageQueueD</IdLocation>
<IndexLocation>^Robot.Common.Queue.ODSMessageQueueI</IndexLocation>
<StreamLocation>^Robot.Common.Queue.ODSMessageQueueS</StreamLocation>
<Data name="ODSMessageQueueDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CreateTS</Value>
</Value>
<Value name="3">
<Value>EpisodeNumber</Value>
</Value>
<Value name="4">
<Value>CompletedTS</Value>
</Value>
<Value name="5">
<Value>ClinicCode</Value>
</Value>
<Value name="6">
<Value>DoctorCode</Value>
</Value>
<Value name="7">
<Value>Action</Value>
</Value>
<Value name="8">
<Value>ActivityDateTime</Value>
</Value>
<Value name="9">
<Value>TargetHL7ResponseMessage</Value>
</Value>
<Value name="10">
<Value>SourceFHIRRequestMessage</Value>
</Value>
<Value name="11">
<Value>LogType</Value>
</Value>
<Value name="12">
<Value>TargetResponseLocation</Value>
</Value>
<Value name="13">
<Value>TargetResponseStatus</Value>
</Value>
<Value name="14">
<Value>TargetResponseStatusText</Value>
</Value>
<Value name="15">
<Value>TimeTakenFromCreateToComplete</Value>
</Value>
<Value name="16">
<Value>TimeTakenFromProcessingToComplete</Value>
</Value>
<Value name="17">
<Value>MessageStatus</Value>
</Value>
<Value name="18">
<Value>MessageStatusText</Value>
</Value>
<Value name="19">
<Value>PatientNumber</Value>
</Value>
<Value name="20">
<Value>ProcessTS</Value>
</Value>
<Value name="21">
<Value>SourceHL7RequestMessage</Value>
</Value>
<Value name="22">
<Value>TargetDocumentType</Value>
</Value>
<Value name="23">
<Value>TargetFHIRResponseMessage</Value>
</Value>
<Value name="24">
<Value>TrackingDate</Value>
</Value>
<Value name="25">
<Value>TrackingSequence</Value>
</Value>
<Value name="26">
<Value>TransactionType</Value>
</Value>
<Value name="27">
<Value>VisitNumber</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Queue.ODSTFMessageQueue">
<Description><![CDATA[
This Message Queue is a Template Queue Class where the source Databases either an EMCI
Database or the ODS. This Message Queue is used to send Master Consumers from one EMCI Database
to another EMCI Database. An EMCI to EMCI Interface will export a Master Consumer
record from the Source EMCI database, Transform it into a FHIR Patient Message and send
it via HTTP to the Target EMCI database. Alternatively the data source is used to retrieve
data from the ODS and send it via HTTP in HL7 format to a Target HL7 Server. The Message Queue
classes are used in all of the DFI Interfaces which include:<br><br>
1) ODS to HL7 Interfaces<br>
2) ODS to EMCI Interfaces<br>
3) ODS to IHIS Interfaces<br>
4) Testing the Target EMCI Interface<br>
5) Merge an EMCI Database into another EMCI Database<br>
6) The EMCI Test Module that uses an EMCI Source Database for the source records that
will be used for the different Test Scenarios.<br><br>

The Queue has all of the standard system queue Properties and Queue Methods. The
Standard Message Queue Properties are specified in the class:<br><br>
<b><i>Robot.Common.Abstract.MessageQueueBaseProperties</i></b> which is an [Abstract] class definition.<br><br>
The Standard Message Queue Methods are found in the %RegisteredObject class:<br><br>
<b><i>Robot.Common.Abstract.MessageQueueBaseMethods.</i></b><br><br>
When creating a new Message Queue Class you can either copy one of the Template
Queue Classes in the Package Robot.Common.Queue or you can create the Message Queue
class from scratch.<br>
The Message Queue class should extend the following classes:<br><br>
<b><i>%Persistent, %XML.Adaptor, %ZEN.DataModel.Adaptor</i></b> - System Classes<br>
<b><i>Robot.Common.Abstract.MessageQueueBaseProperties</i></b> - Standard Message Queue Properties<br>
<b><i>Robot.Common.Abstract.MessageQueueBaseMethods</i></b> - Standard Message Queue Methods.<br><br>
The EXTENDS syntax would then look like this:<br><br>
<b><i>class {classname}  Extends (%Persistent, %XML.Adaptor, %ZEN.DataModel.Adaptor, Robot.Common.Abstract.MessageQueueBaseProperties, Robot.Common.Abstract.MessageQueueBaseMethods)</i></b><br><br>
Index definitions specified in Abstract class definitions do not work when inherited
into another class and so the any Indices that you want in the new Message Queue Class
should be defined in the new class definition. As a bare minimum you should include
the following Indices on the Standard Time Stamp properties.<br>
The <b><i>CreateTS</i></b> indicate when the Message Queue Record was created and is set by default
when a new Message Queue Object is created<br>
The <b><i>ProcessTS</i></b> is set when a Message Queue Record has been picked off the Message
Queue in the Message Queue.<br>
The <b><i>CompletedTS</i></b> is set once the message has completed the full round trip from the Business
service through to the Business Process. Then the HTTP and optionally the File Operation. The
responses from the Operations are processed  by the Business Process and finally the 
response message returns to the Business Service where the Message Queue Record is
flagged as compete by setting the CompleetedTS as well as the final Message Status
which indicates the overall success of the message.<br>
The Index definitions that must be included in the Message Queue class are:<br><br>
<b><i>Index CreateIDX On CreateTS;</i></b><br>
<b><i>Index ProcessIDX On ProcessTS;</i></b><br>
<b><i>Index CompletedIDX On CompletedTS;</i></b><br><br>

So having created the core properties and functionality of a Message Queue class you
need to specify the properties that will be used to identify the Source Classs Record
that will be transformed into an HL7 or FHIR Message befor being sent to the Target
application. These properties are going to be specific to the source data class
that in the source database.<br>
Other data fields that will be used in the Interface are sourced from the following
DFI classes:<br><br>
<b><i>Robot.Common.Configuration.ConfigurationSettings.</i></b><br><br>
This class contains a lot of properties that give context to a specific Interface.
It includes properties that are used to populate fields in an HL7 Message, directory
and file name templates for any files that are created by an Interface, HTTP Methods
that will be used by the HTTP Operations.<br>
Read the documentatio on the Configuration class to see what properties are available
to you.<br>
The whole intention of the DFI Interface model is to abstract all information that
defines an Interface so that there is no need for any hard coding in any interface with
the exception of the Configuration Settings class itself. <br><br>

Then the properties that are specific to the Queue depends on the data source.<br>
There are two primary data sources, the ODS and an EMCI database. Within these
Data Sources there are options on which class will supply the message queue properties
that are used to identify the source data record that will be transformed in the
Interface Business Process that will transform the Source Data Record into a target
HL7 or FHIR message that will be sent to the target Server, whether that be an EMCI
FHIR Server, IHIS FHIR Server or an HL7 Server (e.g. HPRS, WCG Standard HL7 Server)
The data classes that are currently used for the Interfaces developed so far are:<br><br>

1) The DW.Messages.TransactionLog Request Message used in the Clinicom to ODS Trickle
Feed.<br>
2) The DW.Modules.PMI.Patient and DW.Modules.PMI.Person clases in the ODS. The properties
PatientRowId, PatientInternalNumber and PatientHID are drived from these classes.<br>
Two examples of Interfaces that use these classes to create the Messsage Queues are
the HPRS Bulk Export Interface and the EMCI Bulk Export.<br>
3) EMCI.MasterConsumer.MasterConsumer in an EMCI Database.<br>
4) Messages.Request.FHIRInput which is the Request Class used in the EMCI FHIR Server
Interface.<br><br>

This template Message Queue is focused on the Data Source being an EMCI Database. The
template Message Queue for data sourced from the ODS using the TransactioLog Request
message in the Clinicom to ODS Trickle Feed is Robot.Common.Queue.ODSTFMessageQueue.
The template Message Queue for data sourced from the ODS using the DW.Modules.PMI.Patient
is Robot.Common.Queue.ODSDWMessageQueue.<br><br>

When creating a new queue for a new Interface the Message Queue to be used in that
Interface can be a class copy of one of these template queues. The new Message queue
class should use the following naming conventions:<br><br>
<b><i>Robot.{Interface_Alias}.Queue.{ODS}[PMI]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{ODS}[TF]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Bulk]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Test]MessageQueue[Namespace]</i></b><br><br>
Where <b><i>{Interface_Alias}</i></b> is a String that is an abbreviation of the Interface name. For
example "WCGHL7STD" which is the alias for the WCG Standard HL7 Interface. Another
example "BulkExport" which is the alias for the EMCI Bulk Export from the ODS Interface<br>
<b><i>{ODS}</i></b> is the data source abbreviation for the Source Database being the ODS<br>
<b><i>{EMCI}</i></b> is the data source abbreviaion for the Source Database being an EMCI Database<br>
<b><i>[PMI]</i></b> is an optional indicator that the DW.Modules.PMI.Patient/Person class is used
to create the Message Queue Entries<br>
<b><i>[Bulk]</i></b> is an optional indicator that the Queue is used in a Bulk Export Interface<br>
<b><i>[Test]</i></b> is an optional indicator that the Queue is used in a Testing Interface<br>
<b><i>[TF]</i></b> is an optional indicator that the DW.Messages.TransactionLog Request message used
in the Clinicom to ODS Trickle Feed Interface<br>
<b><i>[Namespace]</i></b> is an optional indicator of the Namespace that the queue will be created in.<br>
This is relevant where there is a QC version of the Interface If the Interface is the
"Production" or "Live" Interface then by default if the is no [Namespace] indicator
then the Queue is the Production Queue. Optionally you can use [PRD] to indicate that
the queue is created in the "Production" database.<br><br>

Once a Message Queue class has been defined and compiled then there is one final task
to do and that is to change the Global Names that are generated by the class compiler
and replace the generated global name to a global name that has a specific format.<br>
The reason for doing this is that there is a lot of Package an Global Mapping functionality
in this whole project and it is easier to map globals if the global names follow a certain
convention.<br>
The message queue global names follow the following convention which match the message
queue naming conventions:<br><br>

<b><i>Robot.{Interface_Alias}.Queue.{ODS}[PMI]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{ODS}[TF]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Bulk]MessageQueue[Namespace]</i></b><br>
<b><i>Robot.{Interface_Alias}.Queue.{EMCI}[Test]MessageQueue[Namespace]</i></b><br><br>

There is a PARAMETER setting in the Message Queue Classes:<br><br>
<b><i>PARAMETER GlobalName = "Robot.{Interface_Alias}.Queue.{Classname}*</i></b><br><br>
That indicates what global name has been used instead of the compiler auto generated global
name. It reminds developers that if the storgae definition of the class is recreated the
the global name must be replaced with the value in the Parameter in order to ensure that
the Global Mapping of the queue class will include this new message queue class global.]]></Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,Robot.Common.Abstract.MessageQueueBaseProperties,Robot.Common.Abstract.MessageQueueBaseMethods,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65890,1877.891556</TimeChanged>
<TimeCreated>65449,41785.490378</TimeCreated>

<Parameter name="GlobalName">
<Default>^Robot.Common.Queue.ODSTFMessageQueue*</Default>
</Parameter>

<Property name="PatientNumber">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="EpisodeNumber">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="TransactionType">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="ClinicCode">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="DoctorCode">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="Action">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="ActivityDateTime">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="TrackingSequence">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="TrackingDate">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="LogType">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Property name="VisitNumber">
<Description>
Property derived from the ODS TransactionLog Request Message. The value for this must be passed in pValues() in
the CreateMessage() method</Description>
<Type>%String</Type>
</Property>

<Index name="CreateIDX">
<Properties>CreateTS</Properties>
</Index>

<Index name="ProcessIDX">
<Properties>ProcessTS</Properties>
</Index>

<Index name="CompletedIDX">
<Properties>CompletedTS</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.Queue.ODSTFMessageQueueD</DataLocation>
<DefaultData>ODSTFMessageQueueDefaultData</DefaultData>
<IdLocation>^Robot.Common.Queue.ODSTFMessageQueueD</IdLocation>
<IndexLocation>^Robot.Common.Queue.ODSTFMessageQueueI</IndexLocation>
<StreamLocation>^Robot.Common.Queue.ODSTFMessageQueueS</StreamLocation>
<Data name="ODSTFMessageQueueDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CreateTS</Value>
</Value>
<Value name="3">
<Value>PatientNumber</Value>
</Value>
<Value name="4">
<Value>CompletedTS</Value>
</Value>
<Value name="5">
<Value>MessageStatus</Value>
</Value>
<Value name="6">
<Value>ClinicCode</Value>
</Value>
<Value name="7">
<Value>DoctorCode</Value>
</Value>
<Value name="8">
<Value>Action</Value>
</Value>
<Value name="9">
<Value>ActivityDateTime</Value>
</Value>
<Value name="10">
<Value>SourceFHIRRequestMessage</Value>
</Value>
<Value name="11">
<Value>TargetFHIRResponseMessage</Value>
</Value>
<Value name="12">
<Value>LogType</Value>
</Value>
<Value name="13">
<Value>TargetResponseStatus</Value>
</Value>
<Value name="14">
<Value>TargetResponseStatusText</Value>
</Value>
<Value name="15">
<Value>TimeTakenFromCreateToComplete</Value>
</Value>
<Value name="16">
<Value>TimeTakenFromProcessingToComplete</Value>
</Value>
<Value name="17">
<Value>EpisodeNumber</Value>
</Value>
<Value name="18">
<Value>MessageStatusText</Value>
</Value>
<Value name="19">
<Value>ProcessTS</Value>
</Value>
<Value name="20">
<Value>SourceHL7RequestMessage</Value>
</Value>
<Value name="21">
<Value>TargetDocumentType</Value>
</Value>
<Value name="22">
<Value>TargetHL7ResponseMessage</Value>
</Value>
<Value name="23">
<Value>TargetResponseLocation</Value>
</Value>
<Value name="24">
<Value>TrackingDate</Value>
</Value>
<Value name="25">
<Value>TrackingSequence</Value>
</Value>
<Value name="26">
<Value>TransactionType</Value>
</Value>
<Value name="27">
<Value>VisitNumber</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.REST.DirectoryOperation">
<Description>
This business operation accepts a request for Person or Employee directory services. The request specifies the action to be taken and any additional parameters needed.
Then the remote REST service is invoked using the appropriate HTTP command, URL, and JSON formatted payload.  The REST HTTP response is then parsed and the values are returned in a response object.
This demonstrates automatically and manually constructing and sending a JSON payload, and retrieving and parsing a JSON object or collection response.
It also demonstrates use of the four CRUD operations in the RESTful HTTP context: Create/PUT, Retrieve/GET, Update/POST, and Delete/DELETE.</Description>
<Super>EnsLib.REST.Operation</Super>
<TimeChanged>65874,10785.058829</TimeChanged>
<TimeCreated>59235,56913.819</TimeCreated>

<Method name="OnMessage">
<FormalSpec>pRequest:Robot.Common.REST.DirectoryRequest,*pResponse:Robot.Common.REST.DirectoryResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try {
		If (pRequest.Type="") || (pRequest.Key="") || (pRequest.KeyValue="") {
			Set tSC=$$$ERROR($$$EnsErrGeneral,"Fields Type, Key and KeyValue are mandatory")
			Quit
		}
		Set tCmd=$ZConvert(pRequest.Command,"U")
		If tCmd = "GET" {
			Set tURL=..Adapter.URL_"/"_pRequest.Type_"/"_pRequest.Key_"/"_$$$URLENCODE(pRequest.KeyValue)_$S(""=pRequest.Field:"",1:"/"_pRequest.Field)
			Set tSC=..Adapter.GetURL(tURL,.tHttpResponse)
			Set:$$$ISERR(tSC)&&$IsObject(tHttpResponse)&&$IsObject(tHttpResponse.Data)&&tHttpResponse.Data.Size tSC=$$$ERROR($$$EnsErrGeneral,$$$StatusDisplayString(tSC)_":"_tHttpResponse.Data.Read())
			Set tSC1 = pRequest.NewResponse(.pResponse)  Set:$$$ISERR(tSC1) tSC=$$$ADDSC(tSC,tSC1)
			Set pResponse.SessionId=..%RequestHeader.SessionId
			Set pResponse.RequestURL="Get "_tURL
			Quit:$$$ISERR(tSC)
			If $$$IsdefObject(tHttpResponse)&&$IsObject(tHttpResponse.Data)&&tHttpResponse.Data.Size {
				For i=0:1:31 { Continue:$Case(i,9:1,10:1,13:1,:0)  Set tArr($I(tArr))=$C(i), tArr($I(tArr))="" } ; strip control chars from raw stream copy
				Do ##class(%IO.MetaCharacterStream).%New(tHttpResponse.Data).CopyReplaceArray(pResponse.RawResponse,,,,,,,"IO",.tSC,.tArr)
				If pRequest.KeyValue=$TR(pRequest.KeyValue,"*?") {
					Set tSC=..JSONStreamToObject(tHttpResponse.Data,.tProxy)  Quit:$$$ISERR(tSC)
					Do tProxy.%CopyToArray(.tRec)
					If $Case(pRequest.Field, "":1, "*":1, :0) {
						Do ..getPersonProps(.tRec,pResponse.Properties)
						$$$TRACE("Got "_pResponse.Properties.Count()_" property records")
					} Else {
						$$$ASSERT($G(tRec(pRequest.Key))=pRequest.KeyValue)
						Kill tRec(pRequest.Key)
						Set tVal=$G(tRec(pRequest.Field),$C(0))
						Kill tRec(pRequest.Field)
						$$$ASSERT(tVal'=$C(0)&&'$D(tRec)) ; should not have returned any other fields
						Set pResponse.Value=tVal
						$$$TRACE("Got "_pRequest.Field_" = "_tVal_" for key "_pRequest.Key)
					}
				} Else {
					Set tSC=..JSONStreamToObjectArray(tHttpResponse.Data,.tProxyArray)  Quit:$$$ISERR(tSC)
					For i=1:1:tProxyArray { Set tProxy=tProxyArray(i)
						Kill tRec
						Do tProxy.%CopyToArray(.tRec)
						If $Case(pRequest.Field, "":1, "*":1, :0) {
							Set rec=##class(%ArrayOfDataTypes).%New()
							Do ..getPersonProps(.tRec,rec)
							Do pResponse.Records.SetAt(rec,i)
						} Else {
							Set tVal=$G(tRec(pRequest.Field),$C(0))
							Kill tRec(pRequest.Field)
							$$$ASSERT(tVal'=$C(0)) ; should not have returned other fields
							Do pResponse.Properties.SetAt(pRequest.Key_"="_$S($ZCVT(pRequest.Field,"L")=$ZCVT(pRequest.Key,"L"):tVal,1:tRec(pRequest.Key))_" : "_pRequest.Field_"="_tVal,i)
						}
					}
					$$$TRACE("Got "_tProxyArray_" records")
				}
			} Else { /* Set tSC=$$$ERROR($$$EnsErrGeneral,"No response data")  Quit */ }
		} ElseIf tCmd = "POST" {
			Set tURL=..Adapter.URL_"/"_pRequest.Type_"/"_pRequest.Key_"/"_$$$URLENCODE(pRequest.KeyValue)
			Set tSC=..Adapter.PostURL(tURL,.tHttpResponse,"",pRequest.Body)
			Set:$$$ISERR(tSC)&&$IsObject(tHttpResponse)&&$IsObject(tHttpResponse.Data)&&tHttpResponse.Data.Size tSC=$$$ERROR($$$EnsErrGeneral,$$$StatusDisplayString(tSC)_":"_tHttpResponse.Data.Read())
			Set tSC1=pRequest.NewResponse(.pResponse)  Set:$$$ISERR(tSC1) tSC=$$$ADDSC(tSC,tSC1)
			Set pResponse.SessionId=..%RequestHeader.SessionId
			Set pResponse.RequestURL="Post "_tURL
			If $IsObject(tHttpResponse) {
				Do pResponse.RawResponse.CopyFrom(tHttpResponse.Data)  Do tHttpResponse.Data.Rewind()
				Set pResponse.Value=tHttpResponse.Data.Read() ; count
			}
			
		} ElseIf tCmd = "DELETE" {
			Set tURL=..Adapter.URL_"/"_pRequest.Type_"/"_pRequest.Key_"/"_$$$URLENCODE(pRequest.KeyValue)_$S(""=pRequest.Field:"",1:"/"_pRequest.Field)
			Set tSC=..Adapter.DeleteURL(tURL,.tHttpResponse)
			Set:$$$ISERR(tSC)&&$IsObject(tHttpResponse)&&$IsObject(tHttpResponse.Data)&&tHttpResponse.Data.Size tSC=$$$ERROR($$$EnsErrGeneral,$$$StatusDisplayString(tSC)_":"_tHttpResponse.Data.Read())
			Set tSC1=pRequest.NewResponse(.pResponse) Set:$$$ISERR(tSC1) tSC=$$$ADDSC(tSC,tSC1) 
			Quit:$$$ISERR(tSC)
			Set pResponse.SessionId=..%RequestHeader.SessionId
			Set pResponse.RequestURL="Delete "_tURL
			Do pResponse.RawResponse.CopyFrom(tHttpResponse.Data)  Do tHttpResponse.Data.Rewind()
			Set pResponse.Value=tHttpResponse.Data.Read() ; count

		} ElseIf tCmd = "PUT" {
			Set tURL=..Adapter.URL_"/"_pRequest.Type
			Set tSC=..Adapter.PutURL(tURL,.tHttpResponse,"",pRequest.Body)
			Set:$$$ISERR(tSC)&&$IsObject(tHttpResponse)&&$IsObject(tHttpResponse.Data)&&tHttpResponse.Data.Size tSC=$$$ERROR($$$EnsErrGeneral,$$$StatusDisplayString(tSC)_":"_tHttpResponse.Data.Read())
			Set tSC1=pRequest.NewResponse(.pResponse)  Set:$$$ISERR(tSC1) tSC=$$$ADDSC(tSC,tSC1)
			Quit:$$$ISERR(tSC)
			Set pResponse.SessionId=..%RequestHeader.SessionId
			Set pResponse.RequestURL="Put "_tURL
			Do pResponse.RawResponse.CopyFrom(tHttpResponse.Data)  Do tHttpResponse.Data.Rewind()
			Set pResponse.Value=tHttpResponse.Data.Read() ; ID
		} Else {
			Set tSC=$$$ERROR($$$EnsErrGeneral,"Command "_pRequest.Command_" not implemented")
		}
	} catch {
		Set tSC=$$$SystemError
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="getPersonProps">
<Description>
copy Person properties from COS array to %ArrayOfDataTypes object, handling various data types appropriately</Description>
<FormalSpec>pArray,pCollectionObj</FormalSpec>
<Implementation><![CDATA[
	Set k="" For { Set k=$O(pArray(k),1,val)  Quit:""=k
		If '$IsObject(val) {
			Do pCollectionObj.SetAt($S($L(val)<=50:val,1:$E(val,1,47)_"..."),k) ; truncate strings longer than 50 chars
		} ElseIf $Case(k,"Spouse":1,"Company":1,:0) {
			Do pCollectionObj.SetAt(val.Name,k) ; don't drill in to nested Spouse and Company objects, just keep their name
		} ElseIf val.%Extends("%Library.ListOfDataTypes") || val.%Extends("%Library.ListOfObjects") {
			Set val2="" For j=1:1:val.Count() { Set val2=val2_","_val.GetAt(j) } ; concatenate lists of values into a single string (i.e. FavoriteColors)
			Do pCollectionObj.SetAt($E(val2,2,*),k)
		} ElseIf val.%Extends("%ZEN.proxyObject") {
			Kill tRec2  Do val.%CopyToArray(.tRec2)
			Set j="" For { Set j=$O(tRec2(j),1,val2)  Quit:""=j
				Do pCollectionObj.SetAt(val2,k_"."_j) ; unroll nested proxy object properties using a dot in the property name
			}
		} Else {
			Do pCollectionObj.SetAt(val,k) ; just store the oref string
		}
	}
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Common.REST.DirectoryPage">
<Description>
StartProduction</Description>
<IncludeCode>EnsConstants,EnsUI,Ensemble</IncludeCode>
<Super>%CSP.UI.Portal.Template</Super>
<TimeChanged>65874,11244</TimeChanged>
<TimeCreated>60310,50851.071342</TimeCreated>

<Parameter name="DOMAIN">
<Default>ENSDEMO</Default>
</Parameter>

<Parameter name="RESOURCE">
<Description>
User needs USE permissions on the %Ens_MessageContent resource to view this page.</Description>
<Default>%Ens_MessageContent:USE</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Demo REST Directory Service</Default>
</Parameter>

<Parameter name="CSSINCLUDES">
<Default>ensemble/Ensemble_Wizards.css</Default>
</Parameter>

<Parameter name="AUTOLOGOUT">
<Description>
If true, then attempt to refresh this page when its session timeout period has expired.
This will cause a login page to display if the current session has ended
and security is set to require login.</Description>
<Type>BOOLEAN</Type>
<Default>0</Default>
</Parameter>

<XData name="contentPane">
<Description>
This XML block defines the contents of the page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane>
<jsonProvider id="jpResponseInfo" OnGetTargetObject="GetResponseInfo">
<parameter id="riId" paramName="responseId"/>
</jsonProvider>
<hgroup cellVAlign="top">
<pane id="paneSelect" paneName="paneSelect"/>
<spacer width="15"/>
<pane id="paneInfo" paneName="paneInfo" width="40%" />
<pane id="paneDetails" paneName="paneDetails"/>
</hgroup>
<hgroup>
<spacer width="15"/>
<vgroup>
<text name="txSession" id="txSession" label="Session ID" labelClass="labelRequired"
          title="View the Trace diagram for the REST service request and response." />
<text name="txURL" id="txURL" label="URL sent" labelClass="labelRequired" size="210" 
          title="The text of the REST service URL submitted to the server." />
<textarea name="txRawResponse" id="txRawResponse" label="Raw Response JSON" labelClass="labelRequired" height="100" width="400"
          title="The full REST / JSON response received from the server." />
</vgroup>
</hgroup>
</pane>
]]></Data>
</XData>

<XData name="paneSelect">
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen" >
<vgroup id="mainPanel" cellAlign="center" groupClass="" enclosingClass="menuPanel"  valign="top">
<form name="fmSelect" id="fmSelect" layout="vertical" cellStyle="padding: 2px 10px; font-size:0.8em;">
<radioSet required="true" readOnly="false" hidden="false" value=""
  name="rsPersonEmployee" id="rsPersonEmployee" label="Record Type" 
  labelClass="labelRequired"  enclosingStyle="padding-bottom:4px;" 
  title="Which type of directory record to work with"
  valueList="Person,Employee" displayList="Person,Employee" originalValue="Person"
  onclick="zenPage.changeType('rsPersonEmployee');"
	/>
<hgroup>
<radioSet required="true" readOnly="false" hidden="false" value=""
  name="rsNameSSN" id="rsNameSSN" label="Retrieval Key Field" 
  labelClass="labelRequired"  enclosingStyle="padding-bottom:4px;" 
  title="Which key field to use to identify directory records"
  valueList="Name,SSN" displayList="Name,SSN" originalValue="Name"
  onclick="zenPage.changeType('rsNameSSN');"
	/>
<spacer width="10" />
<text name="txKeyVal" id="txKeyVal" label="Key Value" labelClass="labelRequired" size="21" 
          title="Enter a key value to use in identifying which directory records to work with. May contain wildcards * and ?." />
</hgroup>
<hgroup>
<radioSet required="true" readOnly="false" hidden="false" value=""
  name="rsField" id="rsField" label="Retrieve Field(s)" 
  labelClass="labelRequired"  enclosingStyle="padding-bottom:4px;" 
  title="Which field value to retrieve"
  valueList="All,Single" displayList="All,Single" originalValue="All"
  onclick="zenPage.changeType('rsField');"
	/>
<spacer width="10" />
<text name="txField" id="txField" label="Field Name" labelClass="labelRequired" size="21" hidden="true"
          title="Enter a field name to retrieve the value of (case insensitive)." />
</hgroup>
<button controlClass="commandButton" id="btnRetrieve" caption="Retrieve" onclick="zenPage.retrieveRec();"
		title="Retrieve directory records matching the above retrieval criteria" />
</form>
</vgroup>
</pane>
]]></Data>
</XData>

<XData name="paneInfo">
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane>
<label name="txValue" id="txValue" label="Retrieved Value" labelClass="labelRequired" controlClass="labelRequired"
          title="Value retrieved for a single-record, single-field query." />
<html id="htmlInfo" OnDrawContent="DrawInfoTable" />
</pane>
]]></Data>
</XData>

<XData name="paneDetails">
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane>
<form name="fmDetails" id="fmDetails" layout="vertical" cellStyle="padding: 2px 10px; font-size:0.8em;">
<html id="htmlDetails" OnDrawContent="DrawDetailsTable" />
<hgroup>
<button controlClass="commandButton" id="btnUpdate" caption="Update" onclick="zenPage.updateRec();"
		title="Update the current directory record using the above field values" />
<button controlClass="commandButton" id="btnDelete" caption="Delete" onclick="zenPage.deleteRec();"
		title="Delete the current directory record" />
<button controlClass="commandButton" id="btnCreate" caption="Create" onclick="zenPage.createRec();"
		title="Create a new directory record using the above field values" />
</hgroup>
</form>
</pane>
]]></Data>
</XData>

<Method name="DrawInfoTable">
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 &html<<table id="infoTable" border="1" style="cursor:default;visibility:hidden;" title="Click a row to select">
	<thead>
		<tr>
			<th id="infoKey">Key</th>
			<th id="infoVal">Value</th>
		</tr>
 	</thead>
 	<tbody id="infoBody">
 	</tbody>
	</table>

	<table id="recordsTable" border="1" style="cursor:default;visibility:hidden;" title="Click a row to select">
	<thead>
		<tr>
			<th id="recordsName">Name</th>
			<th id="recordsSSN">SSN</th>
		</tr>
	</thead>
	<tbody id="recordsBody">
	</tbody>
	</table>>
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawDetailsTable">
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 &html<<table id="detailTable" border="1">
	<thead>
		<tr>
			<th id="detailProp">Property</th>
			<th id="detailVal">Value</th>
		</tr>
	</thead>
	<tbody id="detailBody">
	</tbody>
	</table>>
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Description>
This client event, if present, is fired when the page is loaded.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	zen('rsPersonEmployee').setValue('Person');
	zen('rsNameSSN').setValue('Name');
	zen('rsField').setValue('All');
]]></Implementation>
</Method>

<Method name="retrieveRec">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var type = zen('rsPersonEmployee').getValue();
	var key = zen('rsNameSSN').getValue();
	var val = zen('txKeyVal').getValue();
	var field = zen('txField').getValue();
	if ('All' == zen('rsField').getValue()) field='*';

	if ('' == val) { alert($$$Text('You must enter a key value. You may use wildcards * and ?.')); return }
	if ('' == field) { alert($$$Text('You must enter a field value or select "All".')); return }

	var result = zenPage.DoRetrieve(type,key,val,field);
	var parm = zen('riId');
	var ids = result.split('|');
	var id = parseInt(ids[1]);
	if (id > 0) {
		parm.value = id;
		/*zenPage.currRespId = id;
		zenPage.currType = type;
		zenPage.currKey = key;
		zenPage.currKeyVal = val;
		zenpage.currField = field;*/
	} else {
		parm.value = '';
		var err = result;
		if (err && ('' != err)) alert(err);
	}
	zenPage.refresh();
]]></Implementation>
</Method>

<Method name="updateRec">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var key = zenPage.findKey();
	if ('' == key) return;
	var keyval = key.split('=');
	var obj = zenPage.getDetailObj();
	if (!obj) return;
	var type = zen('rsPersonEmployee').getValue();
	var result = zenPage.DoUpdate(type,keyval[0],keyval[1],obj);
	var parm = zen('riId');
	var ids = result.split('|');
	var id = parseInt(ids[1]);
	var updid = parseInt(ids[0]);
	if (updid > 0) {
		parm.value = id;
		zenPage.refresh();
		alert('record '+updid+' updated');
	} else {
		parm.value = '';
		var err = result;
		if (err && ('' != err)) alert(err);
	}
]]></Implementation>
</Method>

<Method name="deleteRec">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var key = zenPage.findKey();
	if ('' == key) return;
	var keyval = key.split('=');
	var result = zenPage.DoDelete(keyval[0],keyval[1]);
	var parm = zen('riId');
	var ids = result.split('|');
	var id = parseInt(ids[1]);
	var count = parseInt(ids[0]);
	if (count > 0) {
		if (count == 1) { alert('one record deleted'); }
		else { alert(count + ' RECORDS DELETED'); }
		parm.value = id;
		zenPage.refresh();
	} else {
		parm.value = '';
		var err = result;
		if (err && ('' != err)) alert(err);
	}
]]></Implementation>
</Method>

<Method name="createRec">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var key = zenPage.findKey();
	if ('' == key) return;
	var keyval = key.split('=');
	var obj = zenPage.getDetailObj()
	if (!obj) return;
	var type = zen('rsPersonEmployee').getValue();
	// An Employee is a Person, but setting one of these properties for a Person object will cause Property error
	if ((type = "Person") && ((obj.Company) || (obj.Title) || (obj.Salary) || (obj.Notes) || (obj.Picture))){
		type = "Employee"
	}
	var result = zenPage.DoCreate(type,keyval[0],keyval[1],obj);
	var parm = zen('riId');
	var ids = result.split('|');
	var id = parseInt(ids[1]);
	var newid = parseInt(ids[0]);
	if (newid > 0) {
		parm.value = id;
		zenPage.refresh();
		alert('Create succeeded, new id=' + newid);
	} else {
		parm.value = '';
		var err = result;
		if (err && ('' != err)) alert(err);
	}
]]></Implementation>
</Method>

<Method name="getDetailObj">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var obj = new zenProxy();
	var dbod = self.document.getElementById('detailTable').children[1];
	var numProps = 0;
	for (var rownum in dbod.rows) {
		var row=dbod.rows[rownum];
		if (!row.cells)continue;
		var prop = row.cells[0].textContent;
		var val = row.cells[1].children[0].value;
		obj[prop] = val;
		numProps = numProps + 1;
	}
	if (numProps > 0) return obj;
	alert('No directory record selected');
	return null;
]]></Implementation>
</Method>

<Method name="findKey">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var dbod = self.document.getElementById('detailTable').children[1];
	if (dbod.rows.length===0) {
		alert('No record to modify.');
		return '';	
	}
	var name = '';
	for (var rownum in dbod.rows) {
		var row=dbod.rows[rownum];
		if (!row.cells) continue;
		var prop = row.cells[0].textContent;
		if (prop.toLowerCase() == 'ssn') {
			var ssn = row.cells[1].children[0].value;
			if ('' != ssn) return 'ssn='+ssn;
		}
		if (prop.toLowerCase() == 'name') {
			name = row.cells[1].children[0].value;
			if (name != '') return 'name='+name;
		}
	}
	alert('Can\'t find key in current directory record');
	return '';
]]></Implementation>
</Method>

<Method name="DoRetrieve">
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String,key:%String,val:%String,field:%String</FormalSpec>
<ReturnType>%ZEN.Datatype.string</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tSC = ##class(Ens.Director).CreateBusinessService("EnsLib.Testing.Service",.tService)  Quit:$$$ISERR(tSC) $$$StatusDisplayString(tSC)
	Set tTestRequest = ##class(EnsLib.Testing.Request).%New()  $$$ASSERT($IsObject(tTestRequest))
	Set tTestRequest.Target = "Robot.Common.REST.DirectoryOperation"
	Set tTestRequest.SyncCall = 1
	Set tRequest=##class(Robot.Common.REST.DirectoryRequest).%New()
	Set tRequest.Command = "GET"
	// An Employee is a Person, but if don't look in Employee data, will get Property error for these properties
	Set:$Case(field,"Company":1,"Title":1,"Salary":1,"Notes":1,"Picture":1,:0) type = "Employee"
	Set tRequest.Type = $ZConvert(type,"L")
	Set tRequest.Key = $ZConvert(key,"L")
	Set tRequest.KeyValue = val
	Set tRequest.Field = $S("*"=field:"",1:field)
	Set tTestRequest.Request = tRequest
	Set tSC = tService.ProcessInput(tTestRequest,.tResponse)
	Quit:$$$ISERR(tSC) $$$StatusDisplayString(tSC)

	#; display response
	Quit $S($$$IsdefObject(tResponse):1_"|"_tResponse.%Id(),1:"No Response from Robot.Common.REST.DirectoryOperation GET")
]]></Implementation>
</Method>

<Method name="DoUpdate">
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String,key:%String,val:%String,obj:%ZEN.proxyObject</FormalSpec>
<ReturnType>%ZEN.Datatype.string</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tSC = ##class(Ens.Director).CreateBusinessService("EnsLib.Testing.Service",.tService)  Quit:$$$ISERR(tSC) $$$StatusDisplayString(tSC)
	Set tTestRequest = ##class(EnsLib.Testing.Request).%New()  $$$ASSERT($IsObject(tTestRequest))
	Set tTestRequest.Target = "Robot.Common.REST.DirectoryOperation"
	Set tTestRequest.SyncCall = 1
	Set tRequest=##class(Robot.Common.REST.DirectoryRequest).%New()
	Set tRequest.Command = "POST"
	Set tRequest.Type = $ZConvert(type,"L")
	Set tRequest.Key = $ZConvert(key,"L")
	Set tRequest.KeyValue = val
	Set tSC=##class(Ens.Util.JSON).ObjectToJSONStream(obj,tRequest.Body)
	If $$$ISOK(tSC) {
		Set tTestRequest.Request = tRequest
		Set tSC = tService.ProcessInput(tTestRequest,.tResponse)
	}
	Quit:$$$ISERR(tSC) $$$StatusDisplayString(tSC)

	#; display response
	Quit $S($$$IsdefObject(tResponse):tResponse.Value_"|"_tResponse.%Id(),1:"No Response from Robot.Common.REST.DirectoryOperation POST")
]]></Implementation>
</Method>

<Method name="DoDelete">
<ClassMethod>1</ClassMethod>
<FormalSpec>key:%String,val:%String</FormalSpec>
<ReturnType>%ZEN.Datatype.string</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tSC = ##class(Ens.Director).CreateBusinessService("EnsLib.Testing.Service",.tService)  Quit:$$$ISERR(tSC) $$$StatusDisplayString(tSC)
	Set tTestRequest = ##class(EnsLib.Testing.Request).%New()  $$$ASSERT($IsObject(tTestRequest))
	Set tTestRequest.Target = "Robot.Common.REST.DirectoryOperation"
	Set tTestRequest.SyncCall = 1
	Set tRequest=##class(Robot.Common.REST.DirectoryRequest).%New()
	Set tRequest.Command = "DELETE"
	Set tRequest.Type = "person"
	Set tRequest.Key = $ZConvert(key,"L")
	Set tRequest.KeyValue = val
	Set tTestRequest.Request = tRequest
	Set tSC = tService.ProcessInput(tTestRequest,.tResponse)
	Quit:$$$ISERR(tSC) $$$StatusDisplayString(tSC)

	#; display response
	Quit $S($$$IsdefObject(tResponse):tResponse.Value_"|"_tResponse.%Id(),1:"No Response from Robot.Common.REST.DirectoryOperation DELETE")
]]></Implementation>
</Method>

<Method name="DoCreate">
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String,key:%String,keyvalue:%String,obj:%ZEN.proxyObject</FormalSpec>
<ReturnType>%ZEN.Datatype.string</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tSC = ##class(Ens.Director).CreateBusinessService("EnsLib.Testing.Service",.tService)  Quit:$$$ISERR(tSC) $$$StatusDisplayString(tSC)
	Set tTestRequest = ##class(EnsLib.Testing.Request).%New()  $$$ASSERT($IsObject(tTestRequest))
	Set tTestRequest.Target = "Robot.Common.REST.DirectoryOperation"
	Set tTestRequest.SyncCall = 1
	Set tRequest=##class(Robot.Common.REST.DirectoryRequest).%New()
	Set tRequest.Command = "PUT"
	Set tRequest.Type = $ZConvert(type,"L")
	Set tRequest.Key = key
	Set tRequest.KeyValue = keyvalue
	Set tSC=##class(Ens.Util.JSON).ObjectToJSONStream(obj,tRequest.Body)
	If $$$ISOK(tSC) {
		Set tTestRequest.Request = tRequest
		Set tSC = tService.ProcessInput(tTestRequest,.tResponse)
	}
	Quit:$$$ISERR(tSC) $$$StatusDisplayString(tSC)

	#; display response
	Quit $S($$$IsdefObject(tResponse):tResponse.Value_"|"_tResponse.%Id(),1:"No Response from Robot.Common.REST.DirectoryOperation PUT")
]]></Implementation>
</Method>

<Method name="refresh">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var json = this.getComponentById('jpResponseInfo');
	json.reloadContents();
	var resp = json.getContentObject();
	var ctl;
	ctl = zen('txURL');
	ctl.setValue(resp ? resp.RequestURL : '');

	ctl = zen('txRawResponse');
	ctl.setValue(resp ? resp.RawResponse : '');

	var ctl=zen('txValue')
	ctl.setValue(resp ? resp.Value : '');

	var records = '';
	var rows = '';
	var i = 0;
	if (resp) {
		var showing = this.getComponentById('rsField').getValue();
		for (var prop in resp.Properties) {
			i = i + 1;
			if (showing == "All") {
				var val = resp.Properties[prop];
				rows = rows+'<tr onclick="zenPage.propClick(\''+prop+'\');"><td>'+prop+'</td><td>'+val+'</td></tr>';
			} else {
				var parts = resp.Properties[prop].split(':');
				var key = parts[0];
				parts[0] = null;
				rows = rows+'<tr onclick="zenPage.propClick(\''+prop+'\');"><td>'+key+'</td><td>'+parts.join(':')+'</td></tr>';
			}
		}

		for (var num in resp.Records) {
			var rec = resp.Records[num];
			records = records+'<tr onclick="zenPage.recClick(\''+num+'\');"><td>'+rec.Name+'</td><td>'+rec.SSN+'</td></tr>';
		}
	}
	ctl.setHidden(rows != '' || records != '');
	self.document.getElementById('infoTable').style.visibility = (rows == '') ? "hidden" : "visible";
	self.document.getElementById('recordsTable').style.visibility = (records == '') ? "hidden" : "visible";

	var bod = self.document.getElementById('infoTable').children[1];
	zenPage.setInnerHTML(bod,rows);

	var bod2 = self.document.getElementById('recordsTable').children[1];
	zenPage.setInnerHTML(bod2, records);

	var sctl = zen('txSession');
	sctl.setValue(resp ? resp.SessionId : '');
	//Set ..%GetComponentById("lblSessionId").value = "<b>"_$$$Text("Session Id:")_"</b> "_tSessionId_" &nbsp;&nbsp;<a href=""#"" class=""ribbonSortOption"" style=""font-size:10pt"" onClick=""zenPage.launchPopupWindow(zenLink('EnsPortal.VisualTrace.zen?SESSIONID="_tSessionId_"'),'Trace','status=no,scrollbars=auto,resizable=yes,top=200,left=200,width=1000,height=800');"" title="""_$$$Text("Display the Visual Trace diagram for this REST service invocation")_""">"_$$$Text("Visual Trace")_"</a>"

	var dbod = self.document.getElementById('detailTable').children[1];
	zenPage.setInnerHTML(dbod,'');
]]></Implementation>
</Method>

<Method name="setInnerHTML">
<Description>
Allow innerHTML value to be edited even in IE</Description>
<FormalSpec>body,html</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var temp = document.createElement('div');
	temp.innerHTML = '<table><tbody>' + html + '</tbody></table>';
	body.parentNode.replaceChild(temp.firstChild.firstChild, body);
]]></Implementation>
</Method>

<Method name="propClick">
<FormalSpec>prop</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var json = this.getComponentById('jpResponseInfo');
	var resp = json.getContentObject();
	var rows='';
	if (parseInt(prop) == prop) {
		var parts = resp.Properties[prop].split(':');
		var key = parts[0];
		var vals;
		vals = key.split('=');
		rows = rows+'<tr><td>'+vals[0]+'</td><td><input type="text" value=\''+vals[1]+'\'/></td></tr>';
		vals = parts[1].split('=');
		rows = rows+'<tr><td>'+vals[0]+'</td><td><input type="text" value=\''+vals[1]+'\'/></td></tr>';
	}
	else {
		var val;
		val = resp.Properties[prop];
		rows = rows+'<tr><td>'+prop+'</td><td><input type="text" value=\''+val+'\'/></td></tr>';
	}
	var bod = self.document.getElementById('detailTable').children[1];
	zenPage.setInnerHTML(bod,rows);
]]></Implementation>
</Method>

<Method name="recClick">
<FormalSpec>num</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var json = this.getComponentById('jpResponseInfo');
	var resp = json.getContentObject();
	var rows='';
	var rec = resp.Records[num];
	for (var prop in rec) {
		if ('_' == prop[0]) continue;
		rows = rows+'<tr><td>'+prop+'</td><td><input type="text" value=\''+rec[prop]+'\'/></td></tr>';
	}
	var bod = self.document.getElementById('detailTable').children[1];
	zenPage.setInnerHTML(bod,rows);
]]></Implementation>
</Method>

<Method name="GetResponseInfo">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParameters,*pObj]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC=$$$OK, pObj=$$$NULLOREF
	try {
		Set tResponseId = $G(pParameters("responseId"))
		If tResponseId {
			Set pObj=##class(Robot.Common.REST.DirectoryResponse).%OpenId(tResponseId,,.tSC)  Quit:$$$ISERR(tSC)
		}
	} catch {
		Set tSC = $$$SystemError
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="changeType">
<Description>
What to do when the user selects a new radio button value.</Description>
<FormalSpec>id</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ctl = zen(id);
	var val = ctl.getValue();
	if (id == 'rsField') {
		var tx = zen('txField');
		tx.setHidden((val=='All') ? 1 : 0);
	}
]]></Implementation>
</Method>

<Method name="%OnGetTitle">
<Description>
Get the (localized) title string for the page.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ..%OnGetPageName()
]]></Implementation>
</Method>

<Method name="%OnGetPageName">
<Description>
Get the (localized) name of the page.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set txt = $$$Text(..#PAGENAME)
	Quit txt
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description>
Decorate the page.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Do ##super()
	
	Set tSC = $$$OK
	
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Common.REST.DirectoryRequest">
<IncludeCode>Ensemble</IncludeCode>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65874,11244</TimeChanged>
<TimeCreated>62636,28344.589637</TimeCreated>

<Parameter name="RESPONSECLASSNAME">
<Default>Robot.Common.REST.DirectoryResponse</Default>
</Parameter>

<Property name="Command">
<Type>%String</Type>
<InitialExpression>"GET"</InitialExpression>
</Property>

<Property name="Type">
<Type>%String</Type>
<InitialExpression>"person"</InitialExpression>
</Property>

<Property name="Key">
<Type>%String</Type>
<InitialExpression>"name"</InitialExpression>
</Property>

<Property name="KeyValue">
<Type>%String</Type>
</Property>

<Property name="Field">
<Type>%String</Type>
</Property>

<Property name="Body">
<Description>
For JSON content submission</Description>
<Type>%GlobalCharacterStream</Type>
</Property>

<Method name="NewResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try {
		Set pResponse = $classmethod(..#RESPONSECLASSNAME,"%New")  Set tSC=$S($IsObject(pResponse):$$$OK, 1:%objlasterror)
	} catch {
		Set tSC=$$$SystemError
	}
	Quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common1095.DirectoryReE2FFD</DataLocation>
<DefaultData>DirectoryRequestDefaultData</DefaultData>
<IdLocation>^Robot.Common1095.DirectoryReE2FFD</IdLocation>
<IndexLocation>^Robot.Common1095.DirectoryReE2FFI</IndexLocation>
<StreamLocation>^Robot.Common1095.DirectoryReE2FFS</StreamLocation>
<Data name="DirectoryRequestDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Command</Value>
</Value>
<Value name="3">
<Value>Type</Value>
</Value>
<Value name="4">
<Value>Key</Value>
</Value>
<Value name="5">
<Value>KeyValue</Value>
</Value>
<Value name="6">
<Value>Field</Value>
</Value>
<Value name="7">
<Value>Body</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.REST.DirectoryResponse">
<IncludeCode>Ensemble</IncludeCode>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65874,11244</TimeChanged>
<TimeCreated>62636,28360.099318</TimeCreated>

<Property name="Value">
<Description>
Single result value</Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Properties">
<Description>
Single record properties or list of records' single values</Description>
<Type>%String</Type>
<Collection>array</Collection>
<Parameter name="MAXLEN"/>
<Parameter name="XMLITEMNAME" value="Value"/>
<Parameter name="XMLKEYNAME" value="Key"/>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>

<Property name="Records">
<Description>
Array of records' properties</Description>
<Type>%ArrayOfDataTypes</Type>
<Collection>array</Collection>
<Parameter name="XMLITEMNAME" value="Record"/>
<Parameter name="XMLKEYNAME" value="num"/>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="RequestURL">
<Description>
For the record: submitted Request URL</Description>
<Type>%String</Type>
<Internal>1</Internal>
<Parameter name="MAXLEN"/>
</Property>

<Property name="RawResponse">
<Description>
For the record: raw HTTP response body resulting from request URL</Description>
<Type>%Stream.GlobalCharacter</Type>
<Internal>1</Internal>
</Property>

<Property name="SessionId">
<Description>
For the record: ID of the session used to retrieve this response</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common1095.DirectoryRe673ED</DataLocation>
<DefaultData>DirectoryResponseDefaultData</DefaultData>
<IdLocation>^Robot.Common1095.DirectoryRe673ED</IdLocation>
<IndexLocation>^Robot.Common1095.DirectoryRe673EI</IndexLocation>
<StreamLocation>^Robot.Common1095.DirectoryRe673ES</StreamLocation>
<Data name="DirectoryResponseDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Value</Value>
</Value>
<Value name="3">
<Value>RequestURL</Value>
</Value>
<Value name="4">
<Value>RawResponse</Value>
</Value>
<Value name="5">
<Value>SessionId</Value>
</Value>
</Data>
<Data name="Properties">
<Attribute>Properties</Attribute>
<Structure>subnode</Structure>
<Subscript>"Properties"</Subscript>
</Data>
<Data name="Records">
<Attribute>Records</Attribute>
<Structure>subnode</Structure>
<Subscript>"Records"</Subscript>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.REST.DirectoryService">
<Description>
This is a sample REST service implementing a directory of Person and Employee records. Not every Person is an Employee.
The CRUD (Create,Retrieve,Update,Delete) interface is implemented via the REST/HTTP commands PUT,GET,POST,and DELETE respectively.
Records of interest may be retrieved via type and key fields "name" and "ssn".  Wildcards containing * and ? are supported.
The resulting HTTP body of a successful GET query may be a partially or fully populated JSON object, depending on the field requested, or a JSON array of such JSON objects if a wildcard was used.
Example REST URLs:
GET /directory/employee/name/Q*/salary
GET /directory/employee/name/Quentin, Fred A.
GET /directory/employee/ssn/123-45-6789/*</Description>
<Super>EnsLib.REST.Service</Super>
<TimeChanged>65874,10220.241502</TimeChanged>
<TimeCreated>62538,45933.322065</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.InboundAdapter</Default>
</Parameter>

<XData name="UrlMap">
<XMLNamespace>http://www.intersystems.com/urlmap</XMLNamespace>
<Data><![CDATA[
<Routes>
<Route Url="/:personType" Method="PUT" Call="createPerson"/>
<Route Url="/:personType/:keyfield/:keyval/:getfield" Method="GET" Call="retrievePerson"/>
<Route Url="/:personType/:keyfield/:keyval" Method="GET" Call="retrievePerson"/>
<Route Url="/:personType/:keyfield/:keyval" Method="POST" Call="updatePerson"/>
<Route Url="/:personType/:keyfield/:keyval" Method="DELETE" Call="deletePerson"/>
</Routes>
]]></Data>
</XData>

<Parameter name="EnsServicePrefix">
<Default>|directory</Default>
</Parameter>

<Method name="createPerson">
<Description>
Create or replace</Description>
<FormalSpec>pInput:%Library.AbstractStream,*pOutput:%Stream.Object,pPersonType:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tType=$ZConvert(pPersonType,"L")  Quit:$Case(tType,"employee":0, "person":0, :1) $$$ERROR($$$EnsErrGeneral,"Directory type "_..#EnsServicePrefix_"/"_tType_"/ not supported.")
	Set $E(tType)=$ZConvert($E(tType),"U")
	Set tNS=$Namespace

	Set tSC=..JSONStreamToObject(pInput,.tProxy) Quit:$$$ISERR(tSC) tSC
	Do tProxy.%CopyToArray(.tRec)
	ZNSpace "SAMPLES"
	try {
		Set tObj=$classmethod("Sample."_tType,"%New")  Quit:$$$ISERR(tSC)
		Set tSC=..updateObject(tObj,.tRec)  Quit:$$$ISERR(tSC)
		Set tSC=tObj.%Save()  Quit:$$$ISERR(tSC)
		Set tID=tObj.%Id()
		Kill tRS
		ZNSpace tNS
		Do pOutput.Write(tID)
	} catch {
		Kill tRS
		ZNSpace tNS
		Set tSC=$$$SystemError
	}
	Kill tRS
	ZNSpace tNS

	// return 201 if successfully created
	Do:$$$ISOK(tSC) pOutput.SetAttribute("ResponseCode","201 Created")
	Quit tSC
]]></Implementation>
</Method>

<Method name="retrievePerson">
<Description>
Retrieve</Description>
<FormalSpec>pInput:%Library.AbstractStream,*pOutput:%Stream.Object,pPersonType:%String,pKeyField:%String,pKeyVal:%String,pGetField:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tType=$ZConvert(pPersonType,"L")  Quit:$Case(tType,"employee":0, "person":0, :1) $$$ERROR($$$EnsErrGeneral,"Directory type "_..#EnsServicePrefix_"/"_tType_"/ not supported.")
	Set $E(tType)=$ZConvert($E(tType),"U")
	Set tKeyIn=pKeyField, tKey=$ZConvert(tKeyIn,"L")  Quit:$Case(tKey,"name":0, "ssn":0, :1) $$$ERROR($$$EnsErrGeneral,"Directory key "_..#EnsServicePrefix_"/"_tType_"/"_tKey_" not supported.")
	Set tKeyVal=$Replace($ZConvert(pKeyVal,"I","URL"),"'","''")
	Set tField=pGetField  Set:""=tField tField="*"  Quit:tField["," $$$ERROR($$$EnsErrGeneral,"Commas not allowed in selection field; found: .../"_tField)
	Set tNS=$Namespace

	Set tKeyWild=$Translate(pKeyVal,"*?","%_")
	Do:tKeyWild'=pKeyVal pOutput.Write("[")
	ZNSpace "SAMPLES"
	try {
		Set tSel=$S("*"=tField:"ID",1:tField)
		Set tSQL="SELECT "_tSel_$S("*"=tField||(tKey=tSel):"", 1:","_tKey)_$Case("ID",tKey:"",tSel:"",:",ID")_" FROM Sample."_tType_" WHERE "_tKey_" LIKE '"_tKeyWild_"'"
		Set tRS=##class(%ResultSet).%New()
		Set tSC=tRS.Prepare(tSQL)  Quit:$$$ISERR(tSC)
		Set tSC=tRS.Execute()  Quit:$$$ISERR(tSC)
		Set tFirst=1
		Set tOut=##class(%IO.StringStream).%New()
		While tRS.Next(.tSC) && $$$ISOK(tSC) {
			#; first normalize the case of the key and sel property names
			If tFirst {
				Set k="" For { Set k=$O(tRS.Data(k))  Quit:""=k
					If $ZConvert(k,"L")=$Zconvert(tSel,"L") Set tSelN=k
					If $ZConvert(k,"L")=$Zconvert(tKey,"L") Set tKeyN=k
				}
			}
			If $Case(tSelN, "Company":1, "Notes":1, "Home":1, "Office":1, :0) {
				Set tVal=tRS.Data("ID")
				Set tObj=$classmethod("Sample."_tType,"%OpenId",tVal,,.tSC)  Quit:$$$ISERR(tSC)
				Set tVal=$property(tObj,tSelN)
				Set tSelX = $Case(tSelN, "Home":"Addr", "Office":"Addr", :tSelN)
				Set tVal=$Case(tSelX, "Company":tVal.Name, "Notes":tVal.Read(), "Addr":tVal.Street_", "_tVal.City_" "_tVal.State_" "_tVal.Zip, :tVal)
			} Else {
				Set tVal=tRS.Data(tSelN)
			}
			If "*"=tField {
				Set tObj=$classmethod("Sample."_tType,"%OpenId",tVal,,.tSC)  Quit:$$$ISERR(tSC)
				Set tProxyObj=..buildProxyObj(tObj)
				Do tOut.Write($S(tFirst:"",1:","))
				Set tSC=..ObjectToJSONStream(tProxyObj,.tOut)
			} Else {
				Set:tKeyN'=tSelN tKeyFound=tRS.Data(tKeyN)
				Do tOut.Write($S(tFirst:"",1:",")_"{"_$S(tKeyN=tSelN:"",1:""""_tKeyIn_""":"""_tKeyFound_""", ")_""""_tSel_""":"""_tVal_"""}"_$C(13,10))
			}
			Set tFirst=0
			ZNSpace tNS
			Do tOut.Rewind()  Set tSC1=pOutput.Write(tOut.Read())  Do tOut.Clear()  Set:$$$ISOK(tSC) tSC=tSC1  Quit:$$$ISERR(tSC)
			ZNSpace "SAMPLES"
		} Quit:$$$ISERR(tSC)
		Do:tKeyWild'=tKeyVal pOutput.Write("]"_$C(13,10))
	} catch {
		Kill tRS
		ZNSpace tNS
		Set tSC=$$$SystemError
	}
	Kill tRS
	ZNSpace tNS
	Do:$$$ISOK(tSC) pOutput.SetAttribute("Content-Type","application/json")
	Quit tSC
]]></Implementation>
</Method>

<Method name="updatePerson">
<Description>
Update: For given service, replaces primary Person or Person with given name</Description>
<FormalSpec>pInput:%Library.AbstractStream,*pOutput:%Stream.Object,pPersonType:%String,pKeyField:%String,pKeyVal:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tType=$ZConvert(pPersonType,"L")  Quit:$Case(tType,"employee":0, "person":0, :1) $$$ERROR($$$EnsErrGeneral,"Directory type "_..#EnsServicePrefix_"/"_tType_"/ not supported.")
	Set $E(tType)=$ZConvert($E(tType),"U")
	Set tKeyIn=pKeyField, tKey=$ZConvert(tKeyIn,"L")  Quit:$Case(tKey,"name":0, "ssn":0, :1) $$$ERROR($$$EnsErrGeneral,"Directory key "_..#EnsServicePrefix_"/"_tType_"/"_tKey_" not supported.")
	Set tKeyVal=$Replace($ZConvert(pKeyVal,"I","URL"),"'","''")
	Set tNS=$Namespace

	Set tSC=..JSONStreamToObject(pInput,.tProxy) Quit:$$$ISERR(tSC) tSC
	Do tProxy.%CopyToArray(.tRec)
	ZNSpace "SAMPLES"
	try {
		Set tSQL="SELECT ID FROM Sample."_tType_" WHERE "_tKey_" = '"_tKeyVal_"'"
		Set tRS=##class(%ResultSet).%New()
		Set tSC=tRS.Prepare(tSQL)  Quit:$$$ISERR(tSC)
		Set tSC=tRS.Execute()  Quit:$$$ISERR(tSC)
		If 'tRS.Next(.tSC) || $$$ISERR(tSC) Set:$$$ISOK(tSC) tSC=$$$ERROR($$$EnsErrGeneral,"No "_tType_" record found with key field "_tKey_" = '"_tKeyVal_"'")  Quit

		Set tID=tRS.Data("ID")
		If +tID'=tID Set tSC=$$$ERROR($$$EnsErrGeneral,"No "_tType_" ID found for key field "_tKey_" = '"_tKeyVal_"'")  Quit
		Kill tRS

		Set tObj=$classmethod("Sample."_tType,"%OpenId",tID,,.tSC)  Quit:$$$ISERR(tSC)
		Set tSC=..updateObject(tObj,.tRec,tKey,tKeyVal)  Quit:$$$ISERR(tSC)
		Set tSC=$method(tObj,"%Save")  Quit:$$$ISERR(tSC)

		Kill tRS
		ZNSpace tNS
		Do pOutput.Write(tID)
	} catch {
		Kill tRS
		ZNSpace tNS
		Set tSC=$$$SystemError
	}
	Kill tRS
	ZNSpace tNS
	Do:$$$ISOK(tSC) pOutput.SetAttribute("Content-Type","application/json")
	Quit tSC
]]></Implementation>
</Method>

<Method name="deletePerson">
<FormalSpec>pInput:%Library.AbstractStream,*pOutput:%Stream.Object,pPersonType:%String,pKeyField:%String,pKeyVal:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tType=$ZConvert(pPersonType,"L")  Quit:$Case(tType,"employee":0, "person":0, :1) $$$ERROR($$$EnsErrGeneral,"Directory type "_..#EnsServicePrefix_"/"_tType_"/ not supported.")
	Set $E(tType)=$ZConvert($E(tType),"U")
	Set tKeyIn=pKeyField, tKey=$ZConvert(tKeyIn,"L")  Quit:$Case(tKey,"name":0, "ssn":0, :1) $$$ERROR($$$EnsErrGeneral,"Directory key "_..#EnsServicePrefix_"/"_tType_"/"_tKey_" not supported.")
	Set tKeyVal=$Replace($ZConvert(pKeyVal,"I","URL"),"'","''")
	Set tNS=$Namespace

	ZNSpace "SAMPLES"
	try {
		Set tSQL="DELETE FROM Sample."_tType_" WHERE "_tKey_" = '"_tKeyVal_"'"
		Set tRS=##class(%ResultSet).%New()
		Set tSC=tRS.Prepare(tSQL)  Quit:$$$ISERR(tSC)
		Set tSC=tRS.Execute()  Quit:$$$ISERR(tSC)
		Set tRowCount=tRS.%ROWCOUNT
		Kill tRS
		ZNSpace tNS
		Do pOutput.Write(tRowCount)
	} catch {
		Kill tRS
		ZNSpace tNS
		Set tSC=$$$SystemError
	}
	Kill tRS
	ZNSpace tNS

	// return 204 if successfully deleted
	Do:$$$ISOK(tSC) pOutput.SetAttribute("ResponseCode","204 No Content")
	Quit tSC
]]></Implementation>
</Method>

<Method name="updateObject">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pObj:%RegisteredObject,&pArray,pKeyField:%String="",pKeyVal="xxx"]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC=$$$OK, tDOB=0, tAge=0, tHasKey=0, tKFU=$ZCVT(pKeyVal,"U")
	Set prop="" For { Set tVal="" Set prop=$O(pArray(prop),1,tVal)  Quit:""=prop  Set propU=$ZConvert(prop,"U")
		If propU=pKeyField && (tKFU'=tVal) Set tSC=$$$ERROR($$$EnsErrGeneral,"Attempt to assign key value "_pKeyField_" ='"_tVal_"' where existing value = '"_pKeyVal_"'")  Quit
		Set:$Case(propU,"SSN":""'=tVal,"NAME":""'=tVal,:0) tHasKey=tHasKey+1
		Set:0=tAge&&("AGE"=propU) tAge=tVal
		Continue:$Case(propU,"ID":1,"AGE":1,:("_"=$E(prop)))
		If propU="COMPANY" {
			If ""=tVal {
				Set tCo=$$$NULLOREF
			} Else {
				&sql()
				Set tSQL="SELECT ID FROM Sample.Company WHERE Name = '"_tVal_"'"
				Set tRS=##class(%ResultSet).%New()
				Set tSC=tRS.Prepare(tSQL)  Quit:$$$ISERR(tSC)
				Set tSC=tRS.Execute()  Quit:$$$ISERR(tSC)
				If 'tRS.Next(.tSC) || $$$ISERR(tSC) Set:$$$ISOK(tSC) tSC=$$$ERROR($$$EnsErrGeneral,"No company found named '"_tVal_"'")  Quit
				Set tCoID=tRS.Data("ID")
				Set tCo=##class(Sample.Company).%OpenId(tCoID)
				If '$IsObject(tCo) Set tSC=$$$ERROR($$$EnsErrGeneral,"Couldn't open Company object '"_tVal_"' with ID="_tCoID)  Quit
			}
			Set pObj.Company=tCo
			Kill tCo
		} ElseIf propU="SPOUSE" {
			If ""=tVal {
				Set tSpouse=$$$NULLOREF
			} Else {
				&sql()
				Set tSQL="SELECT ID FROM Sample.Person WHERE Name = '"_tVal_"'"
				Set tRS=##class(%ResultSet).%New()
				Set tSC=tRS.Prepare(tSQL)  Quit:$$$ISERR(tSC)
				Set tSC=tRS.Execute()  Quit:$$$ISERR(tSC)
				If 'tRS.Next(.tSC) || $$$ISERR(tSC) Set:$$$ISOK(tSC) tSC=$$$ERROR($$$EnsErrGeneral,"No spouse person found named '"_tVal_"'")  Quit
				Set tSpouseID=tRS.Data("ID")
				Set tSpouse=##class(Sample.Person).%OpenId(tSpouseID)
				If '$IsObject(tSpouse) Set tSC=$$$ERROR($$$EnsErrGeneral,"Couldn't open spouse Person object '"_tVal_"' with ID="_tSpouseID)  Quit
			}
			Set pObj.Spouse=tSpouse
			Kill tSpouse
		} ElseIf propU="NOTES" {
			Set tStream=$property(pObj,prop)
			Do tStream.Clear()
			Set tSC=tStream.Write(tVal)
		} ElseIf prop["." {
			Set tChild=$property(pObj,$P(prop,"."))
			If $IsObject(tChild) Set $property(tChild,$P(prop,".",2))=tVal
		} Else {
			Set:0=tDOB&&("DOB"=propU) tDOB=1, tVal=$P($ZDTH(tVal,3),",")
			Set $property(pObj,prop)=tVal
		}
	}
	Quit:""=pKeyField&&(tHasKey<2) $$$ERROR($$$EnsErrGeneral,"Can't create object unless Name and SSN fields have values")
	Set:tAge&&(0=tDOB) pObj.DOB=($P($H,",")-(tAge*365))
	Quit tSC
]]></Implementation>
</Method>

<Method name="buildProxyObj">
<Description>
Normalize the Person or Employee info by copying its properties to a proxy object in a selective way</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pObj:%Persistent</FormalSpec>
<Implementation><![CDATA[
	Set tProxy = ##class(%ZEN.proxyObject).%New()
	Set tProxy.ID=pObj.%Id()
	Set tProxy.Name=pObj.Name
	Set tProxy.Age=pObj.Age
	Set tProxy.DOB=$ZDateTime(pObj.DOB,3)
	Set tProxy.SSN=pObj.SSN
	Set tProxy.FavoriteColors=pObj.FavoriteColors
	Set tProxy.Spouse=pObj.Spouse.Name
	Set tProxy.Home=..buildProxyAddr(pObj.Home)
	Set tProxy.Office=..buildProxyAddr(pObj.Office)
	If pObj.%IsA("Sample.Employee") {
		Set tProxy.Company=pObj.Company.Name
		Set tProxy.Notes=$S($IsObject(pObj.Notes):pObj.Notes.Read(),1:"")
	}
	Quit tProxy
]]></Implementation>
</Method>

<Method name="buildProxyAddr">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pObj:%SerialObject</FormalSpec>
<Implementation><![CDATA[
	Set tProxy = ##class(%ZEN.proxyObject).%New()
	Set tProxy.Street=pObj.Street
	Set tProxy.City=pObj.City
	Set tProxy.State=pObj.State
	Set tProxy.Zip=pObj.Zip
	Quit tProxy
]]></Implementation>
</Method>

<Method name="OnErrorStream">
<Description>
Control the type and content of error returned to the REST caller</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStatus:%Status</FormalSpec>
<Implementation><![CDATA[
 	Set tStream = ##class(%GlobalBinaryStream).%New()  $$$ASSERT($IsObject(tStream))
	Do tStream.Write($ZConvert($$$StatusDisplayString(pStatus)_$C(13,10),"O","UTF8"))
	Set tStream.Attributes("Content-Type")=" text/plain; charset=""UTF-8"""
	Set tStream.Attributes("ResponseCode")="500 Internal Server Error"
 	Quit tStream
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Common.REST.MathService">
<Description><![CDATA[
Simple REST Service in Ensemble  

It is a Math service with a RESTful interface returning JSON:		/sum/2/3  =>  { "Sum" : 5 }

There are two ways to call this REST interface. You can test both ways using a Browser: 

1) Calling the adapter port directly

		http://IP:AdapterPort/sum/2/3

2) Or using the CSP Gateway mechanism. In order for this way to work, a web application has to be created first.
	   For example, create a new web app with the following minimum parameters:  
		Web App Name = /rest
		Namespace = yourNamespace
		Dispatch class = EnsLib.REST.Service

		http://IP:WebServerPort/rest/servicename/sum/2/3
]]></Description>
<Super>EnsLib.REST.Service</Super>
<TimeChanged>65874,10240.271765</TimeChanged>
<TimeCreated>63211,41324.236163</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.InboundAdapter</Default>
</Parameter>

<Parameter name="EnsServicePrefix">
<Default>|sum</Default>
</Parameter>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
<Route Url="/:number1/:number2" Method="GET" Call="Sum"/>
</Routes>
]]></Data>
</XData>

<Method name="Sum">
<Description>

This method returns the sum of pnumber1 and pnumber2
</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pInput:%Library.AbstractStream,*pOutput:%Stream.Object,pnumber1:%Integer,pnumber2:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	try{
 		// Do whatever you need to do and get back an object
 		set result = pnumber1 + pnumber2
 		set tProxy = ##class(%ZEN.proxyObject).%New()
 		set tProxy.Sum = result
 		
 		// You could just write the output manually or use helper methods like ..ObjectToJSONStream() to generate JSON
 		do pOutput.SetAttribute("Content-Type","application/json")
 		do pOutput.Write("[")
 		
 		Set tOut=##class(%IO.StringStream).%New()
 		do ..ObjectToJSONStream(tProxy,.tOut)	
 		
 		do tOut.Rewind()
 		do pOutput.Write( tOut.Read() )
 		do pOutput.Write("]"_$C(13,10))
 		
	} catch (e) {
		set status = e.AsStatus()
	}
      quit status
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Common.SearchTable.HL7MsgRouter">
<Description>
Defines a set of properties derived from Document objects of class 'EnsLib.HL7.Message'
that can be used in SQL to identify messages of interest.
Extends EnsLib.HL7.SearchTable; adds more searchable properties to the ones defined in that class.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.HL7.SearchTable</Super>
<TimeChanged>65874,11244</TimeChanged>
<TimeCreated>59946,61139</TimeCreated>
<LegacyInstanceContext>1</LegacyInstanceContext>

<XData name="SearchSpec">
<XMLNamespace>http://www.intersystems.com/EnsSearchTable</XMLNamespace>
<Data><![CDATA[
<Items>
<!--
	Items that do not depend on DocType, indexing any HL7 message.
	The | character cannot be used in IDKEY indexes. So using a + in this example
	Any | in the data (i.e. not used as a possible HL7 separator) will be converted
	on filing to the Search Table as a +
	Original HL7 data remains unchanged.
-->
<Item DocType=""               PropName="SendingFacilApp"  >{1:4}_"+"_{1:3}</Item>
<Item DocType=""               PropName="RecvingFacilApp"  >{1:6}_"+"_{1:5 }</Item>
<Item DocType=""               PropName="MSHDateTime" PropType='DateTime:HL7' >{1:7}</Item>

<!-- Get fields from named segments found in any HL7 message -->
<Item DocType=""               PropName="InsuranceCo"      >[IN1:4()]</Item>

<!-- Get specific field from specific segment HL7 message assigned a specific DocType  -->
<Item DocType="Robot.Common.HL7MsgRouter.Schema:ORM_O01 "  PropName="ServiceId">{ORCgrp().OBRuniongrp.OBRunion.OBR:UniversalServiceID.text}</Item>
<Item DocType="2.3.1:ORU_R01 "                      PropName="ServiceId">{PIDgrpgrp().ORCgrp(1).OBR:UniversalServiceID.text}</Item>
</Items>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="Robot.Common.Service.AlertNotificationService">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessService</Super>
<TimeChanged>65881,3551.1412</TimeChanged>
<TimeCreated>63739,40952.661038</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>Ens.InboundAdapter</Type>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		$$$TRACE("DFI Alert Service Started at: "_$zdt($h,3))
		set rs=##class(%ResultSet).%New("Robot.Common.Alerts.ProductionAlerts:Extent")
		set tSC=rs.Prepare() if 'tSC quit
		set tSC=rs.Execute() if 'tSC quit
		while rs.Next(){
			set tID=rs.Data("ID")
			if $d(^Ens.Runtime("ConfigItem",tID)) {
				set item=##class(Robot.Common.Alerts.ProductionAlerts).%OpenId(tID)
				if $IsObject(item) {
					// First lets check queues
					// If Queue Count Alert value = -1 then this means there is no alert on queues for this item
					if item.QueueSizeAlert'=-1 {
						if $g(^Ens.Queue(tID,0,"count"))>item.QueueSizeAlert {
							if $system.SQL.DATEDIFF("s",item.QueueSizeAlertLastDT,$zdt($h,3))>item.QueueSizeAlertInterval {
								set msg="The Queue Count on item "_tID_" is "_$g(^Ens.Queue(tID,0,"count"))_" which is greater than the expected count of "_item.QueueSizeAlert
								$$$DebugLog($username,"OnProcessInput","Queue Email Text: "_msg,.dSC) $$$TRACE(msg)
								set sc=..SendAlertMessage(tID, msg, item.RecipientList)  if 'sc $$$DebugLog($username,"OnProcessInput","Alert Error Send Alert Status: "_$s(sc:"OK",1:$$$GetErrorText(sc)),.dSC)
								set item.QueueSizeAlertLastDT=$zdt($h,3)
							}
						}
						else {if $system.SQL.DATEDIFF("y",item.QueueSizeAlertLastDT,$zdt($h,3))>item.QueueSizeAlertInterval {set item.QueueSizeAlertLastDT=$zdt($h,3)}}
					}
					// Now lets check Error Counts
					$$$TRACE("Process Errors: Into Error Check")
					set key="" for {
						set error=item.Errors.GetNext(.key) quit:key=""
						// If the ErrorCountAlert=-1 no Notification is sent
						if error.ErrorCountAlert'=-1 {
							if error.ErrorCount>error.ErrorCountAlert {
								if $system.SQL.DATEDIFF("s",error.LastAlertDT,$zdt($h,3))>error.ErrorCountAlertInterval {
									set msg="Production Item "_tID_" has has an error count of "_error.ErrorCount_" for error: "_error.ErrorID_" which is greater than the allowed count of "_error.ErrorCountAlert_" at "_$zdt($h,3)
									$$$DebugLog($username,"OnProcessInput","Error Email Text: "_msg,.dSC) $$$TRACE(msg)
									set sc=..SendAlertMessage(tID, msg, $s($l(item.RecipientList):item.RecipientList,1:"")_$s(($l(item.RecipientList)&$l(error.RecipientList)):";",1:"")_error.RecipientList) if 'sc $$$DebugLog($username,"OnProcessInput","Alert Error Send Alert Status: "_$s(sc:"OK",1:$$$GetErrorText(sc)),.dSC)
									set error.LastAlertDT=$zdt($h,3),error.ErrorCount=0
								}
							}
							else {
								if $system.SQL.DATEDIFF("s",error.LastAlertDT,$zdt($h,3))>error.ErrorCountAlertInterval {set error.ErrorCount=0,error.LastAlertDT=$zdt($h,3)}
							}
							set sc=error.%Save() if 'sc $$$DebugLog($username,"OnProcessInput","Alert Error Save Status: "_$s(sc:"OK",1:$$$GetErrorText(sc)),.dSC)
						}
					}
					// Now lets check for Conditions
					$$$TRACE("Process Conditions: Into Condition Check")
					set key="" for {
						set condition=item.Conditions.GetNext(.key) quit:key=""
						// If ConditionCountAlert=-1 then no Notification is sent
						if condition.ConditionCountAlert'=-1 {
							if condition.ConditionCount>condition.ConditionCountAlert {
								if $system.SQL.DATEDIFF("s",condition.LastAlertDT,$zdt($h,3))>condition.ConditionCountAlertInterval {
									set msg="Item "_tID_" has has a condition count of "_condition.ConditionCount_" for condition """_condition.ConditionID_""" which is greater than the allowed count of "_condition.ConditionCountAlert_" at "_$zdt($h,3)
									$$$DebugLog($username,"OnProcessInput","Error Email Text: "_msg,.dSC) $$$TRACE(msg)
									set sc=..SendAlertMessage(tID, msg, $s($l(item.RecipientList):item.RecipientList,1:"")_$s(($l(item.RecipientList)&$l(error.RecipientList)):";",1:"")_error.RecipientList) if 'sc $$$DebugLog($username,"OnProcessInput","Alert Condition Send Alert Status: "_$s(sc:"OK",1:$$$GetErrorText(sc)),.dSC)
									set condition.LastAlertDT=$zdt($h,3),condition.ConditionCount=0
								}
							}
							else {
								if $system.SQL.DATEDIFF("s",condition.LastAlertDT,$zdt($h,3))>condition.CountAlertInterval {set condition.ConditionCount=0,condition.LastAlertDT=$zdt($h,3)}
							}
							set sc=condition.%Save() if 'sc $$$DebugLog($username,"OnProcessInput","Alert Condition Save Status: "_$s(sc:"OK",1:$$$GetErrorText(sc)),.dSC)
						}
					}
				set tSC=item.%Save() $$$DebugLog($username,"OnProcessInput","Alert Production Item Save Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
				}
			}
		quit:'tSC
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"OnProcessInput","The OnProcessInput() Status is "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="SendAlertMessage">
<FormalSpec>source:%String(MAXLEN=200),msg:%String(MAXLEN=1000),recipients:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set alert=##class(Ens.AlertRequest).%New()
		if $l($g(recipients)) set alert.AlertDestination=recipients
		set alert.AlertText=msg
		set alert.SourceConfigName=$g(source)
		do ..SendAlert(alert)
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"SendAlertMessage","The SendAlertMessage() Status is "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Common.Service.HL7FileService">
<Super>Ens.BusinessService</Super>
<TimeChanged>65871,6646.443933</TimeChanged>
<TimeCreated>65871,6646.443933</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.File.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.File.InboundAdapter</Type>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:%Stream.Object,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Common.Service.HTTPHL7Service">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessService</Super>
<TimeChanged>65870,45181.940586</TimeChanged>
<TimeCreated>65870,45181.940586</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.HTTP.InboundAdapter</Type>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:%GlobalCharacterStream,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set hl7Message=##class(EnsLib.HL7.Message).ImportFromLibraryStream(pInput,.tSC,.pConfig)
		$$$TRACE("HL7 Message: "_hl7Message)
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
	    Set ..Adapter.ParseBodyFormVars=1
	    set settings=..Adapter.GetSettings(.pSettings)
	}
	catch ex {set tSC=ex.AsStatus()}
    Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Common.Service.HouseKeeping">
<Description><![CDATA[
This class runs as a Business Service in the Data Flow Integration Interfaces<br>
Its purpose is to clean up data generated by the Interface Production. Data is retained for a Number of days<br>
which are specified in the Robot.Common.InferfaceConfiguration Table.<br>
The four types of data the service monitors are:<br>
1) Ensemble Messages<br>
2) Ensemble Trace Logs<br>
3) DFI Debug Logs<br>
4) The DFI Inbound Message Queue created in the ODS and processed by the DFI ODS Message Service<br>]]></Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessService</Super>
<TimeChanged>65878,19817.137032</TimeChanged>
<TimeCreated>65496,65253.309208</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>Ens.InboundAdapter</Type>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		$$$TRACE("DFI Interface Data Cleanup is Starting")
		
		// Get Configuration Settings
		set tSC=##class(Robot.Common.Configuration.ConfigurationSettings).GetConfigurationSettings(,.tConfig,.tSettings) if 'tSC quit
		set tInterfaceName=$g(tSettings("DFIProductionName")),tNameSpace=$namespace
		// Delete Message Queue
		set daysToKeep=+$g(tSettings("DFINumberOfDaysToKeepQueueMessages")) 
		set datetime=$zd($h-daysToKeep,3)
		$$$TRACE("Deleting ODS Messages older than "_datetime)
		set tMessageQueueName=$g(tSettings("DFIMessageQueueClassName"))
		if '$l(tMessageQueueName) set tSC=$$$ERROR(5001,"DFI Message Queue Name Setting is not Defined") quit
		set tInterfaceTable=tMessageQueueName
		if $l(tInterfaceTable,".")>2 set tInterfaceTable=$tr($p(tInterfaceTable,".",1,$l(tInterfaceTable,".")-2),".","_")_"_"_$p(tMessageQueueName,".",$l(tMessageQueueName,".")-1,$l(tMessageQueueName,"."))
		set tSQL="delete from "_tInterfaceTable_" where CompletedTS IS NOT NULL and CompletedTS < '"_datetime_"'"
		$$$TRACE("tSQL: "_tSQL)
		set rs=##class(%ResultSet).%New("%DynamicQuery:SQL")
		set tSC=rs.Prepare(tSQL) if 'tSC quit
		set tSC=rs.Execute() if 'tSC quit
		$$$TRACE("The Number of ODS Messages Deleted is "_rs.%ROWCOUNT)
		
		// Delete Debug Logs
		set datetime=$zd($h-$g(tSettings("DFIDaysToKeepDebugLogs")),3)
		$$$TRACE("Deleting Debug Logs older than "_datetime)
		&sql(delete from Robot_Common_Debug.Logging where CreateTS<:datetime)
		$$$TRACE("The Number of Debug Logs Deleted is "_%ROWCOUNT)
		
		// Delete Ensemble $$$TRACE, $$$ERROR and $$$INFO messsages
		set datetime=$zdt($h-$g(tSettings("DFINumberOfDaysToKeepEnsembleLogs")),3),rowcount=0
		$$$TRACE("Deleting Debug Logs older than "_datetime)
		set tSC=##class(Ens.Purge).PurgeEventLogsByDate(+$g(tSettings("DFINumberOfDaysToKeepEnsembleLogs")),.rowcount) if 'tSC $$$TRACE("Error Deleting Ensemble Logs: "_$$$GetErrorText(tSC)) set tSC=$$$OK
		$$$TRACE("The Number of Ensemble Logs Deleted is "_(+$g(rowcount)))
		
		// Delete Ensemble Messages (Request/Response/HL7 Messages)
		set datetime=$zdt($h-$g(tSettings("DFINumberOfDaysToKeepEnsembleMessages")),3),rowcount=0
		$$$TRACE("Deleting Ensemble Messages older than "_datetime)
		set tSC=##class(Ens.Purge).PurgeMessagesByDate($g(tSettings("DFINumberOfDaysToKeepEnsembleMessages")),.rowcount,1,1) if 'tSC $$$TRACE("Error Deleting Ensemble Messages: "_$$$GetErrorText(tSC)) set tSC=$$$OK
		$$$TRACE("The Number of Ensemble Messages Deleted is "_rowcount)
		
		// Delete Files
		for directory="DFIFileDirectory","DFIFHIRFileDirectory","DFIHL7FileDirectory","DFIManifestFileDirectory" {
			if $l($g(tSettings(directory))) {
				$$$TRACE("Deleting files in: ("_directory_") is starting")
				set rs=##class(%ResultSet).%New("%Library.File:FileSet"),dt=$tr($zdt($h-1,3),":- ","")
				set tSC=rs.Execute(tSettings(directory),"*.*") if 'tSC quit
				while rs.Next() {if $tr(rs.Data("DateCreated"),":- ","")<dt set ok=##class(%Library.File).Delete(rs.Data("Name")) $$$TRACE("File: "_rs.Data("Name")_" Delete Status: "_$s(ok:"Yes",1:"Not OK"))}
				do rs.Close()
				$$$TRACE("Deleting files in: ("_directory_") is complete")
			}
		}
		
		// Purge is complete
		$$$TRACE("DFI Interface Data Cleanup is Complete")
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Common.Service.ProcessEMCIMessageQueue">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessService</Super>
<TimeChanged>65853,44963.211309</TimeChanged>
<TimeCreated>65478,83896.555477</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>Ens.InboundAdapter</Type>
</Property>

<Property name="MaxNumberOfLoops">
<Type>%Integer</Type>
<InitialExpression>200</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Parameter SETTINGS = "Organization:Basic:selector?context={IHIS.Production.ContextSearch/Organizations}, IsMasterSummary:Basic";

]]></Content>
</UDLText>

<Parameter name="SETTINGS">
<Default>MaxNumberOfLoops:Basic</Default>
</Parameter>

<Method name="OnProcessInput">
<Description><![CDATA[
This is a copy of the Generic ProcessMessageQueue. There is nothing in here that is specific to EMCI Message Queue
However if I ever want an EMCI Message Queue to be processed differently then I would overwrite the code
in this Method<br><br>
The OnProcssInput Method of the Robot.Common.Service.ProcessMessageQueue is common to all Interfaces
that are driven a Message Queue. For example the Clinicom to ODS Trickle feed that processes the
Clinicom Transactions in the Business Processes of the Trickle Feed Production. The easiest way
to ensure that each Interface only processes the messages for its own Production/Namespace is to
have a list of Namespaces/ProductionNames/MessageQueueClass table in the Source Database and depending
on the nature of name.<br><br>
The Message queue Class can be used in every namespace if the class definition
resides in the ODS and is mapped to each Interface Namespace. However the underlying global will not be
mapped and so the data created will reside in the Namespace of the Interface.<br><br>
I don't want to use direct global Accessing. Nor do I want the Message queue to reside in the ODS
and be subscripted by the Interface Name (or a combination of Namespace and Interface Name).<br><br>
The Message Queue Class can also be inherited into a sub-class that can contain the name of the Interface
in the Queue Class name. However the Business Process method that executes in the logic of the Clinicom Trickle
Feed will need to access the Configuration Settings of each Interface in order to get the Interface Name,
Namespace and MessageQueueClass Name. There is one assumption and that is that the ODS will need to
have a class that defines each Interface, the namespace that it is running in, the Interface Name
and the MessageQueueClassName.<br><br>
Then I have a few options:<BR><BR>
1) Use Class Mapping to map the Message Queue Class to each individual Namespace where the Message Queue Class Name<br>
is either the base Robot.Common.Queue.ODSMessageQueue or a class copied from Robot.Common.Queue.ODSMessageQueue<br>
with a name such as Robot.Common.Queue.ODStoEMCIDF01 or Robot.DF01.Queue.ODSMessageQueue<BR>
2) As long as you do not Map The Default Message Queue Global to the Interface Namespace then the<br>
Message Queue Global will be created in each Namespace and prevents queue globals spanning<br>
More than one Interface.<br>
3) You could use Subscript Level Mapping but that would but that would Involve too many changes in the<br>
existing code which I don't want to modify at this stage.<br>]]></Description>
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=##class(Robot.Common.Configuration.ConfigurationSettings).GetMessageQueueData(.pInterfaceName,.pNamespace,.pQueueClassName,.pIsProduction,.pIsProductionActive) if 'tSC quit
		for i=1:1:..MaxNumberOfLoops {
			set tSC=$classmethod(pQueueClassName,"GetNextMessage",.pMessageId) if 'tSC quit
			if pMessageId="" continue
			// Have the option of directing messages to different Business Processes depending
			// on the Transaction Type and Log Type as per the Main BPL in the ODS Production
			// That class is called: BusinessProcesses.TransactionRouter.BPL and and it routes
			// messages from Clinicom to specific Business Processes that handle the PMI,
			// Admissions and Discharges, Transfers and so on.
			$$$TRACE("ODS Message: "_pMessageId_" found")
			set tRequest=##class(Robot.Common.Messages.PatientTransactionRequest).%New()
			set tRequest.MessageID=pMessageId
			set tSC=..SendRequestSync("DFI Process Message",tRequest,.tResponse,,"Sending Async Request for Message ID: "_pMessageId) if 'tSC quit
			$$$TRACE("Message: "_pMessageId_" Sent OK")
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$TRACE("Service Outcome: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)))
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Common.Service.ProcessMessageQueue">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessService</Super>
<TimeChanged>65846,30966.933401</TimeChanged>
<TimeCreated>65478,83896.555477</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>Ens.InboundAdapter</Type>
</Property>

<Property name="MaxNumberOfLoops">
<Type>%Integer</Type>
<InitialExpression>200</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Parameter SETTINGS = "Organization:Basic:selector?context={IHIS.Production.ContextSearch/Organizations}, IsMasterSummary:Basic";

]]></Content>
</UDLText>

<Parameter name="SETTINGS">
<Default>MaxNumberOfLoops:Basic</Default>
</Parameter>

<Method name="OnProcessInput">
<Description>
The OnProcssInput Method of the Robot.Common.Service.ProcessMessageQueue is common to all Interfaces
that are driven by the Clinicom to ODS Trickle feed that processes the Clinicom Transactions in the Business Processes 
of the Trickle Feed Production. The easiest way to ensure that each Interface only processes the messages for
its own Production/Namespace is to have a list of Namespaces/Production Names/Interface Name/MessageQueueClass
name. The Message queue Class can be used in every namespace if the class definition resides in the ODS and is
mapped to each Interface Namespace. However the underlying global will not be mapped and so the data created will
reside in the Namespace of the Interface.I don't want to use direct global Accessing. Nor do I want the Message queue
to reside in the ODS and be subscripted by the Interface Name (or a combination of Namespace and Interface Name).
The Message Queue Class can also be inherited into a sub-class that can contain the name of the Interface
in the Queue Class name. However the method that executes in the Business Processes of the Clinicom Trickle Feed
will need to access the Configuration Settings of each Interface in order to get the Interface Name, Namespace and
MessageQueueClass Name. There is one assumption and that is that the ODS will need to have a class that defines
each Interface, the namespace that it is running in, the Interface Name and the MessageQueueClassName.
Then I have two options:
1) Use Class Mapping to map the Message Queue Class to each individual Namespace where the Message Queue Class Name
		is either the base Robot.Common.Queue.ODSMessageQueue or an Inherited class with a name such as
		Robot.Common.Queue.ODStoEMCIDFI1.
1.1)	The advantage of using the original class name mapped into every namespace is that the class mapping always uses
		the same classname in each new Interface Namespace and Namespace Mapping
1.2) The problem with having different Message Queue Class Names is that a mapping would have to be created for each
		Message Queue Class Name in each namespace for that Interface to take into account a QC and Production
		namespace however if we use the same Message Queue Class Name is that we would have to implement 1.3 and 1.4
1.3)	That could be achieved by creating all Indices with {Namespace} and {Interface Name} built into the Index definition
1.4)	for example ID,{Namespace},{InterfaceName}, CreateTS,{Namespace},{InterfaceName}
		and any other Indices that are created
		Or would we?
2) The easiest way to handle this is facilitate either option. In which case we don't want to build the Class Name and Namespace
		into the Message Queue Class Definition. We have to have a Class in the ODS that lists the Interfaces, their namespace
		and MessageQueueClassName which should be created when the ClassMapping is created
3) The Third option is to either be able to call the Queue Class Methods in the namespace where they reside and I don't
		know if that is possible. Or we have to change namespace, call the Create Message Method and then change back to
		the ODS. This works but if the code crashes then you can be left in the wrong namespace. Which can be corrected
		with appropriate code in the exception handler of that method.</Description>
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=##class(Robot.Common.Configuration.ConfigurationSettings).GetConfigurationSettings(,.pConfig,.pSettings) if 'tSC quit
		$$$TRACE("Message Queue Class: "_pSettings("DFIMessageQueueClassName"))
		$$$TRACE("Production Name: "_pSettings("DFIProductionName"))
		$$$TRACE("DFIRequestMessageClassName: "_pSettings("DFIRequestMessageClassName"))
		$$$TRACE("Business Process Name: "_pSettings("DFIPrimaryBusinessProcessName"))
		set tQueueClassName=pSettings("DFIMessageQueueClassName")
		set tPrimaryBP=pSettings("DFIPrimaryBusinessProcessName")
		set tRequestClassName=pSettings("DFIRequestMessageClassName")
		for i=1:1:..MaxNumberOfLoops {
			$$$TRACE("Into Loop")
			set tSC=$classmethod(tQueueClassName,"GetNextMessage",.pMessageId) if 'tSC quit
			if pMessageId="" $$$DebugLog($username,"OnProcessInput","Get Next Message returns: "_pMessageId,.dSC) continue
			// Have the option of directing messages to different Business Processes depending
			// on the Transaction Type and Log Type as per the Main BPL in the ODS Production
			// That class is called: BusinessProcesses.TransactionRouter.BPL and and it routes
			// messages from Clinicom to specific Business Processes that handle the PMI,
			// Admissions and Discharges, Transfers and so on.
			$$$TRACE("Queue Message: "_pMessageId_" found")
			set tRequest=$classmethod(tRequestClassName,"%New")
			set tRequest.MessageId=pMessageId
			set tSC=..SendRequestSync(tPrimaryBP,tRequest,.tResponse,,"Sending Async Request for Message ID: "_pMessageId) if 'tSC quit
			$$$TRACE("Message: "_pMessageId_" Sent OK")
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"OnProcessInput","On Process Input Status: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	$$$TRACE("Service Outcome: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)))
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Common.Service.ProcessODSMessageQueue">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.BusinessService</Super>
<TimeChanged>65840,16140.121428</TimeChanged>
<TimeCreated>65478,83896.555477</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>Ens.InboundAdapter</Type>
</Property>

<Property name="MaxNumberOfLoops">
<Type>%Integer</Type>
<InitialExpression>200</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Parameter SETTINGS = "Organization:Basic:selector?context={IHIS.Production.ContextSearch/Organizations}, IsMasterSummary:Basic";

]]></Content>
</UDLText>

<Parameter name="SETTINGS">
<Default>MaxNumberOfLoops:Basic</Default>
</Parameter>

<Method name="OnProcessInput">
<Description>
This is a copy of the Generic ProcessMessageQueue. There is nothing in here that is specific to ODS Message Queue
However if I ever want an EMCI Message Queue to be processed differently then I would overwrite the code
in this Method
The OnProcssInput Method of the Robot.Common.Service.ProcessMessageQueue is common to all Interfaces
that are driven by the Clinicom to ODS Trickle feed that processes the Clinicom Transactions in the Business Processes 
of the Trickle Feed Production. The easiest way to ensure that each Interface only processes the messages for
its own Production/Namespace is to have a list of Namespaces/Production Names/Interface Name/MessageQueueClass
name. The Message queue Class can be used in every namespace if the class definition resides in the ODS and is
mapped to each Interface Namespace. However the underlying global will not be mapped and so the data created will
reside in the Namespace of the Interface.I don't want to use direct global Accessing. Nor do I want the Message queue
to reside in the ODS and be subscripted by the Interface Name (or a combination of Namespace and Interface Name).
The Message Queue Class can also be inherited into a sub-class that can contain the name of the Interface
in the Queue Class name. However the method that executes in the Business Processes of the Clinicom Trickle Feed
will need to access the Configuration Settings of each Interface in order to get the Interface Name, Namespace and
MessageQueueClass Name. There is one assumption and that is that the ODS will need to have a class that defines
each Interface, the namespace that it is running in, the Interface Name and the MessageQueueClassName.
Then I have two options:
1) Use Class Mapping to map the Message Queue Class to each individual Namespace where the Message Queue Class Name
		is either the base Robot.Common.Queue.ODSMessageQueue or an Inherited class with a name such as
		Robot.Common.Queue.ODStoEMCIDFI1.
1.1)	The advantage of using the original class name mapped into every namespace is that the class mapping always uses
		the same classname in each new Interface Namespace and Namespace Mapping
1.2) The problem with having different Message Queue Class Names is that a mapping would have to be created for each
		Message Queue Class Name in each namespace for that Interface to take into account a QC and Production
		namespace however if we use the same Message Queue Class Name is that we would have to implement 1.3 and 1.4
1.3)	That could be achieved by creating all Indices with {Namespace} and {Interface Name} built into the Index definition
1.4)	for example ID,{Namespace},{InterfaceName}, CreateTS,{Namespace},{InterfaceName}
		and any other Indices that are created
		Or would we?
2) The easiest way to handle this is facilitate either option. In which case we don't want to build the Class Name and Namespace
		into the Message Queue Class Definition. We have to have a Class in the ODS that lists the Interfaces, their namespace
		and MessageQueueClassName which should be created when the ClassMapping is created
3) The Third option is to either be able to call the Queue Class Methods in the namespace where they reside and I don't
		know if that is possible. Or we have to change namespace, call the Create Message Method and then change back to
		the ODS. This works but if the code crashes then you can be left in the wrong namespace. Which can be corrected
		with appropriate code in the exception handler of that method.</Description>
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=##class(Robot.Common.Configuration.ConfigurationSettings).GetMessageQueueData(.pInterfaceName,.pNamespace,.pQueueClassName,.pIsProduction,.pIsProductionActive) if 'tSC quit
		for i=1:1:..MaxNumberOfLoops {
			set tSC=$classmethod(pQueueClassName,"GetNextMessage",.pMessageId) if 'tSC quit
			if pMessageId="" continue
			// Have the option of directing messages to different Business Processes depending
			// on the Transaction Type and Log Type as per the Main BPL in the ODS Production
			// That class is called: BusinessProcesses.TransactionRouter.BPL and and it routes
			// messages from Clinicom to specific Business Processes that handle the PMI,
			// Admissions and Discharges, Transfers and so on.
			$$$TRACE("ODS Message: "_pMessageId_" found")
			set tRequest=##class(Robot.Common.Messages.PatientTransactionRequest).%New()
			set tRequest.MessageID=pMessageId
			set tSC=..SendRequestSync("DFI Process Message",tRequest,.tResponse,,"Sending Async Request for Message ID: "_pMessageId) if 'tSC quit
			$$$TRACE("Message: "_pMessageId_" Sent OK")
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$TRACE("Service Outcome: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)))
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Common.TestModule.EMCIConsumerProperties">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65890,2375.003548</TimeChanged>
<TimeCreated>65852,18430.884902</TimeCreated>

<Property name="EMCIPropertyName">
<Description>
Logical Pseudo EMCI Consumer Property Name</Description>
<Type>%String</Type>
</Property>

<Property name="ProperEMCIConsumerPropertyReference">
<Description>
Actual EMCI Consumer Property Reference. Note: Must take int consideration Collections and Relationship Syntax</Description>
<Type>%String</Type>
</Property>

<Property name="TestCondition">
<Type>Robot.Common.TestModule.TestConditions</Type>
<Cardinality>one</Cardinality>
<Inverse>EMCIConsumerPropertiesRel</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>EMCIPropertyName</Properties>
<Unique>1</Unique>
</Index>

<Index name="TestConditionIndex">
<Properties>TestCondition</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.CommonD7BE.EMCIConsume2EB7D</DataLocation>
<DefaultData>EMCIConsumerPropertiesDefaultData</DefaultData>
<IdLocation>^Robot.CommonD7BE.EMCIConsume2EB7D</IdLocation>
<IndexLocation>^Robot.CommonD7BE.EMCIConsume2EB7I</IndexLocation>
<StreamLocation>^Robot.CommonD7BE.EMCIConsume2EB7S</StreamLocation>
<Data name="EMCIConsumerPropertiesDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ProperEMCIConsumerPropertyReference</Value>
</Value>
<Value name="3">
<Value>TestCondition</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.TestModule.Manifest">
<Description>
A manifest is a mechanism for recording a collection of Records which are the Data Records from
a Data Source that are Transformed into FHIR JSON and sent to either the EMCI or IHIS FHIR Server.
Typically a Manifest is linkedd to a Test Definition though it can be used purely to emmulate a
Collection or Batch of Data Records.</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,%XML.Adaptor,%ZEN.DataModel.Adaptor,Cogs.JsonClass</Super>
<TimeChanged>65890,6507.924099</TimeChanged>
<TimeCreated>65835,12863.337009</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// The ManifestId and RecordNumber constitute the RowId of the Manifest

]]></Content>
</UDLText>

<Property name="ManifestId">
<Type>%String</Type>
<InitialExpression>"Manifest:"_$i(^Robot.Common.TestModule.NextManifest)</InitialExpression>
<Parameter name="JSONNAME" value="manifestID"/>
</Property>

<Property name="ManifestCreateTS">
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($h,3)</InitialExpression>
<Required>1</Required>
<Parameter name="JSONNAME" value="manifestCreateTS"/>
</Property>

<Property name="PreviousManifestFK">
<Type>Robot.Common.TestModule.Manifest</Type>
<Parameter name="JSONNAME" value="previousManifest"/>
</Property>

<ForeignKey name="PreviousManifestFK">
<Properties>PreviousManifestFK</Properties>
<ReferencedClass>Robot.Common.TestModule.Manifest</ReferencedClass>
</ForeignKey>

<Property name="NextManifestFK">
<Type>Robot.Common.TestModule.Manifest</Type>
<Parameter name="JSONNAME" value="nextManifest"/>
</Property>

<ForeignKey name="NextManifestFK">
<Properties>NextManifestFK</Properties>
<ReferencedClass>Robot.Common.TestModule.Manifest</ReferencedClass>
</ForeignKey>

<Property name="NumberOfRecords">
<Type>%Integer</Type>
<Calculated>1</Calculated>
<InitialExpression>1</InitialExpression>
<Parameter name="JSONNAME" value="numberOfRecords"/>
</Property>

<Property name="TestDefinitionFK">
<Type>Robot.Common.TestModule.TestDefinitions</Type>
<Parameter name="JSONNAME" value="testDefinition"/>
</Property>

<ForeignKey name="TestDefnitionFK">
<Properties>TestDefinitionFK</Properties>
<ReferencedClass>Robot.Common.TestModule.TestDefinitions</ReferencedClass>
</ForeignKey>

<Property name="FromConsumerId">
<Type>%String</Type>
<Parameter name="JSONNAME" value="fromConsumerId"/>
</Property>

<Property name="ToConsumerId">
<Type>%String</Type>
<Parameter name="JSONNAME" value="toConsumerId"/>
</Property>

<Property name="ManifestStatus">
<Type>%Status</Type>
<InitialExpression>$$$OK</InitialExpression>
<Parameter name="JSONNAME" value="manifestStatus"/>
</Property>

<Property name="ManifestStatusText">
<Type>%String</Type>
<Parameter name="JSONNAME" value="manifestStatusText"/>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="ManifestFileDirectory">
<Type>%String</Type>
<Parameter name="JSONNAME" value="manifestFileDirectory"/>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="ManifestFileName">
<Type>%String</Type>
<Parameter name="JSONNAME" value="manifestFileName"/>
<Parameter name="MAXLEN" value="3000"/>
</Property>

<Property name="ManifestRecords">
<Type>Robot.Common.TestModule.ManifestRecords</Type>
<Cardinality>children</Cardinality>
<Inverse>Manifest</Inverse>
<Relationship>1</Relationship>
<Parameter name="JSONNAME" value="manifestRecords"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>ManifestId</Properties>
<Unique>1</Unique>
</Index>

<Method name="NumberOfRecordsGet">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	quit +..ManifestRecords.Count()
]]></Implementation>
</Method>

<Method name="%OnNew">
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=##class(Robot.Common.Configuration.ConfigurationSettings).GetConfigurationSettings(,.pConfig,.pSettings) if 'tSC quit
		set ..ManifestFileDirectory=$g(pSettings("DFIManifestFileDirectory"))
		set ..ManifestFileName=$g(pSettings("DFIManifestFileName"))
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"%OnNew","The Status of %OnNew() is: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="CreateManifest">
<Description>
We need to pass in PreviousManifestid, TestReference
Then we pass in the array of Name/Value Pairs for the Test Related Fields in the arrray pTests
The Fields for array are: NumberOfRecords, RandomSelection, SelectedRecords, PassEMCIUId, ChangeAddress, ChangePhoneNumber, ChangeFamilyName</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pPreviousManifest:%String="",pNextManifest:%String="",pTestDefinition:%String,&pValues:%String(MAXLEN=1000),&pManifest:Robot.Common.TestModule.Manifest]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<SqlProc>1</SqlProc>
<WebMethod>1</WebMethod>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set pManifest=$classmethod($classname(),"%New") if '$IsObject(pManifest) set tSC=$$$ERROR(5001,"Unable to create Manifest") quit
		if $l(pPreviousManifest) do pManifest.PreviousManifestSetObjectId(pPreviousManifest)
		if $l(pNextManifest) do pManifest.NextManifestSetObjectId(pNextManifest)
		if $l(pTestDefinition) do pManifest.TestDefinitionSetObjectId(pTestDefinition)
		set tProp="" for {
			set tProp=$o(pValues(tProp)) quit:tProp=""
			if $l(pValues(tProp)) {set $property(pManifest,tProp)=pValues(tProp)}
			elseif 'l(pValues(tProp)),+$g(pValues(tProp,"Force")) {set $property(pManifest,tProp)=""}
		}
		set tSC=pManifest.%Save() if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	if 'tSC set pManifest=""
	$$$DebugLog($username,"CreateManifest","Create Manifest ("_$s($IsObject(pManifest):pManifest.ManifestId,1:"NULL")_") Status: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="UpdateManifest">
<Description>
We cannot change the ManifestId, PreviousManifest, and the TestDefinition
We can Modifiy any other Property
Note that the properties, PreviousManifest, NextManifest, and TestDefinition cannot
be changed </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pManifestId:%String="",pFromConsumerId:%String="",pToConsumerId:%String="",pManifestStatus:%Status=$$$OK,pManifestStatusText:%String(MAXLEN=500)="",pManifestFileDirectory:%String="",pManifestFileName:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<SqlProc>1</SqlProc>
<WebMethod>1</WebMethod>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if pManifestId="" set tSC=$$$ERROR(5001,"ManifestId is Null") quit
		set obj=$classmethod($classname(),"%OpenId",pManifestId) if '$IsObject(obj) set tSC=$$$ERROR(5001,"Manifest with ID: "_pManifestId_" does not Exist") quit
		if $l(pFromConsumerId) set obj.FromConsumerId=pFromConsumerId
		if $l(pToConsumerId) set obj.ToConsumerId=pToConsumerId
		if $l(pManifestStatus) set obj.ManifestStatus=pManifestStatus
		if $l(pManifestStatusText) set obj.ManifestStatusText=obj.ManifestStatusText_$s($l(obj.ManifestStatusText):" ",1:"")_pManifestStatusText
		if $l(pManifestFileDirectory) set obj.ManifestFileDirectory=pManifestFileDirectory
		if $l(pManifestFileName) set obj.ManifestFileName=pManifestFileName
		set tSC=obj.%Save() if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"UpdateManifest","The Update Manifest Status is: "_$s(tSC:$$$OK,1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="CreateManifestFile">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pManifestId:%TimeStamp="",&pManifestDirectory:%String(MAXLEN=100)="",&pManifestFileName:%String(MAXLEN=200)="",&pManifestFile:%String(MAXLEN=400)]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<SqlProc>1</SqlProc>
<WebMethod>1</WebMethod>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if pManifestId="" set tSC=$$$ERROR(5001,"Manifest Date is Null") quit
		set tManifest=$classmethod($classname(),"%OpenId",pManifestId) if '$IsObject(tManifest) set tSC=$$$ERROR(5001,"Manifest with ManifestId: "_pManifestId_" does not exist") quit
		set tSC=##class(Robot.Common.Configuration.ConfigurationSettings).GetConfigurationSettings("Robot.Common.Configuration.ConfigurationSettings",,.pConfig,.pSettings) quit:'tSC  set pConfig=""
		if pManifestDirectory="" set pManifestDirectory=pSettings("DFIManifestFileDirectory")
		if pManifestFileName="" set pManifestFileName=pSettings("DFIManifestFileName")
		set file=pManifestFileName
		if file ["{FromCosumerId}" set file=$p(file,"{FromCosumerId}",1)_tManifest.FromConsumerId_$p(file,"{FromConsumerId}",2,99)
		if file["{ToConsumerId}" set file=$p(file,"{ToConsumerId}",1)_tManifest.ToConsumerId_$p(file,"{ToConsumeId}",2,99)
		if file["{TestDefinition" set file=$p(file,"{TestDefinition}",1)_tManifest.TestDefinition.Name_$p(file,"{TestDefinition}",2,99)
		if file["{ManifestId}" set file=$p(file,"{ManifestId}",1)_pManifestId_$p(file,"{ManifestId}",2,99)
		if file["{Date}" set file=$p(file,"{Date}",1)_$tr($zdt($h,3),": -")_$p(file,"{Date}",2,99)
		set file=pManifestDirectory_file
		open file:("WNS"):0
		if '$t {set tSC=$$$ERROR(5001,"Unable to Open file: "_file) quit}
		// Write Header Line 1
		use file write "Manifest",$c(9),"PreviousManifest",$c(9),"NumberOfRecords:",$c(9),"RandomSelection",$c(9),"Selected Records",$c(9),"TestDefintion",$c(9),"From ConsumerId",$c(9),"To ConsumerId",$c(9),"Manifest Status",$c(9),"Manifest Status Text",!
		// Write Header 2
		use file write pManifestId,$c(9),tManifest.PreviousManifest,$c(9),tManifest.NumberOfRecords,$c(9),tManifest.RandomSelection,$c(9),$c(9),tManifest.SelectedRecords,$c(9),tManifest.TestDefinition,$c(9),tManifest.FromConsumerId,$c(9),tManifest.ToConsumerId,$c(9),$s(tManifest.ManifestStatus:"OK",1:$$$GetErrorText(tManifest.ManifestStatus)),$c(9),tManifest.ManifestStatusText,!
		// Write Header 3
		use file write "RecordNumber",$c(9),"CopyConsumerId",$c(9),"MasterConsumerId",$c(9),"EMCIUId",$c(9),"EMCIEventQueueId",$c(9),"MessageStatus",$c(9),"MessageStatusText",$c(9),"FHIRRequestJSONFileName",$c(9),"FHIROperationOutcomeFileName",$c(9),"HTTPStatus",!
		for i=1:1:tManifest.ManifestRecords.Count() {
			set rec=tManifest.ManifestRecords.GetAt(i) if '$IsObject(rec) $$$DebugLog($username,"Create Manifest File","Manifest Record: "_i_" does not exist",.dSC) continue
			use file write rec.RecordNumber,$c(9),rec.CopyConsumerId,$c(9),rec.MasterConsumerId,$c(9),rec.EMCIUId,$c(9),rec.EMCIEventQueueId,$c(9),$s(rec.MessageStatus:"OK",1:$$$GetErrorText(rec.ManifestStatus)),$c(9),rec.MessageStatusText,$c(9),rec.FHIRRequestJSONFileName,$c(9),rec.FHIROperationOutcomeFileName,$c(9),rec.HTTPStatus,!
			use file write "<END OF FILE>"
		}
		close file
		set pManifestFile=file
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.TestMoD7BE.ManifestD</DataLocation>
<DefaultData>ManifestDefaultData</DefaultData>
<IdLocation>^Robot.Common.TestMoD7BE.ManifestD</IdLocation>
<IndexLocation>^Robot.Common.TestMoD7BE.ManifestI</IndexLocation>
<StreamLocation>^Robot.Common.TestMoD7BE.ManifestS</StreamLocation>
<Data name="ManifestDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ManifestCreateTS</Value>
</Value>
<Value name="3">
<Value>PreviousManifestRel</Value>
</Value>
<Value name="4">
<Value>NextManifestRel</Value>
</Value>
<Value name="5">
<Value>TestDefinition</Value>
</Value>
<Value name="6">
<Value>FromConsumerId</Value>
</Value>
<Value name="7">
<Value>ToConsumerId</Value>
</Value>
<Value name="8">
<Value>ManifestStatus</Value>
</Value>
<Value name="9">
<Value>ManifestStatusText</Value>
</Value>
<Value name="10">
<Value>ManifestFileDirectory</Value>
</Value>
<Value name="11">
<Value>ManifestFileName</Value>
</Value>
<Value name="12">
<Value>PreviousManifestFK</Value>
</Value>
<Value name="13">
<Value>NextManifestFK</Value>
</Value>
<Value name="14">
<Value>TestDefinitionFK</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.TestModule.ManifestRecords">
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,%XML.Adaptor,%ZEN.DataModel.Adaptor,Cogs.JsonClass</Super>
<TimeChanged>65890,3292.972791</TimeChanged>
<TimeCreated>65835,12863.337009</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// The RecordNumber is the PK on the Manifest Records. The Parent is the Manifest

]]></Content>
</UDLText>

<Property name="Manifest">
<Type>Robot.Common.TestModule.Manifest</Type>
<Cardinality>parent</Cardinality>
<Inverse>ManifestRecords</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="RecordNumber">
<Type>%Integer</Type>
<Parameter name="JSONNAME" value="recordNumber"/>
</Property>

<Property name="CopyConsumerId">
<Type>%String</Type>
<Parameter name="JSONNAME" value="copyConsumerId"/>
</Property>

<Property name="MasterConsumerId">
<Type>%String</Type>
<Parameter name="JSONNAME" value="masterConsumerId"/>
</Property>

<Property name="EMCIUId">
<Type>%String</Type>
<Parameter name="JSONNAME" value="emciUId"/>
</Property>

<Property name="EMCIEventQueueId">
<Type>%String</Type>
<Parameter name="JSONNAME" value="emciEventQueueId"/>
</Property>

<Property name="MessageStatus">
<Type>%Status</Type>
<InitialExpression>$$$OK</InitialExpression>
<Parameter name="JSONNAME" value="messaageStatus"/>
</Property>

<Property name="MessageStatusText">
<Type>%String</Type>
<Parameter name="JSONNAME" value="messageStatusText"/>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="FHIRRequestBody">
<Type>%CharacterStream</Type>
<Parameter name="JSONNAME" value="fhirRequestBody"/>
</Property>

<Property name="FHIRResponseBody">
<Type>%CharacterStream</Type>
<Parameter name="JSONNAME" value="fhirResponseBody"/>
</Property>

<Property name="FHIRRequestJSONFileName">
<Type>%String</Type>
<Parameter name="JSONNAME" value="fhirRequestJSONFileName"/>
<Parameter name="MAXLEN" value="50000"/>
</Property>

<Property name="FHIROperationOutcomeFileName">
<Type>%String</Type>
<Parameter name="JSONNAME" value="fhirOperationOutcomeFileName"/>
<Parameter name="MAXLEN" value="50000"/>
</Property>

<Property name="HTTPStatus">
<Type>Robot.Common.CodeTables.HTTPStatusCodes</Type>
<Parameter name="JSONNAME" value="httpStatus"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>RecordNumber</Properties>
<Unique>1</Unique>
</Index>

<Method name="UpdateManifestRecord">
<Description>
Updates or Creates Manifest Record keyed on ManifestId and RecordNumber
pManifestDT, pRecordNumber, pMasterConsumerId, pCopyConsumerId, pEMCIUId, pEMCIEventQueueId, pMessageStatus, pMessageStatusText, pFHIRRequestFileName, pFHIROpOutcomeFileName, pHTTPStatus</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pManifestId:%String="",pRecordNumber:%Integer="",pMasterConsumerId:%String="",pCopyConsumerId:%String="",pEMCIUId:%String="",pEMCIEventQueueId:%String="",pMessageStatus:%Status=$$$OK,pMessageStatusText:%String(MAXLEN=1000)="",pFHIRRequestBody:%CharacterStream,pFHIRResponseBody:%CharacterStream,pFHIRRequestFileName:%String(MAXLEN=1000)="",pFHIROpOutcomeFileName:%String(MAXLEN=1000)="",pHTTPStatus:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<SqlProc>1</SqlProc>
<WebMethod>1</WebMethod>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		if pManifestId="" set tSC=$$$ERROR(5001,"Manifest ID is Null") quit
		if '+$g(pRecordNumber) set tSC=$$$ERROR(5001,"Record Number must be greater than 0") quit
		set obj=$classmethod($classname(),"%OpenId",pManifestId_"||"_pRecordNumber)
		if '$IsObject(obj) {
			set obj=$classmethod($classname(),"%New")
			set obj.RecordNumber=pRecordNumber
			do obj.ManifestIdSetObjectId(pManifestId)
		}
		if $l(pMasterConsumerId) set obj.MasterConsumerId=pMasterConsumerId
		if $l(pCopyConsumerId) set obj.CopyConsumerId=pCopyConsumerId
		if $l(pEMCIUId) set obj.EMCIUId=pEMCIUId
		if $l(pEMCIEventQueueId) set obj.EMCIEventQueueId=pEMCIEventQueueId
		if $l(pMessageStatus) set obj.MessageStatus=pMessageStatus
		if $l(pMessageStatusText),'(+pMessageStatus) {set obj.MessageStatusText=obj.MessageStatusText_$s($l(obj.MessageStatusText):" ",1:"")_pMessageStatusText}
		if $IsObject(pFHIRRequestBody) set tSC=pFHIRRequestBody.Rewind() quit:'tSC  set tSC=obj.FHIRRequestBody.CopyFrom(pFHIRRequestBody) quit:'tSC
		if $IsObject(pFHIRResponseBody) set tSC=pFHIRResponseBody.Rewind() quit:'tSC  set tSC=obj.FHIRResponseBody.CopyFrom(pFHIRRequestBody) quit:'tSC
		if $l(pFHIRRequestFileName) set obj.FHIRRequestJSONFileName=pFHIRRequestFileName
		if $l(pFHIROpOutcomeFileName) set obj.FHIROperationOutcomeFileName=pFHIROpOutcomeFileName
		if $l(pHTTPStatus) do obj.HTTPStatusSetObjectId(pHTTPStatus)
		set tSC=obj.%Save() if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("ManifestRecords")</DataLocation>
<DefaultData>ManifestRecordsDefaultData</DefaultData>
<IdLocation>^Robot.Common.TestMoD7BE.ManifestC("ManifestRecords")</IdLocation>
<IndexLocation>^Robot.CommonD7BE.ManifestRecF60AI</IndexLocation>
<StreamLocation>^Robot.CommonD7BE.ManifestRecF60AS</StreamLocation>
<Data name="ManifestRecordsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CopyConsumerId</Value>
</Value>
<Value name="3">
<Value>MasterConsumerId</Value>
</Value>
<Value name="4">
<Value>EMCIUId</Value>
</Value>
<Value name="5">
<Value>EMCIEventQueueId</Value>
</Value>
<Value name="6">
<Value>MessageStatus</Value>
</Value>
<Value name="7">
<Value>MessageStatusText</Value>
</Value>
<Value name="8">
<Value>FHIRRequestBody</Value>
</Value>
<Value name="9">
<Value>FHIRResponseBody</Value>
</Value>
<Value name="10">
<Value>FHIRRequestJSONFileName</Value>
</Value>
<Value name="11">
<Value>FHIROperationOutcomeFileName</Value>
</Value>
<Value name="12">
<Value>HTTPStatus</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.TestModule.TestConditions">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65890,2375.046064</TimeChanged>
<TimeCreated>65852,18281.035924</TimeCreated>

<Property name="TestConditionName">
<Description>
A mesningful name for the Test Condition</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="TestConditionType">
<Description>
Test </Description>
<Type>%String</Type>
</Property>

<Property name="EMCIConsumerPropertiesRel">
<Description>
The Property or Properties that will be Created or Modifed or Removed from the Source Data Table.
The Property Names use a pseudo notation {Source_Table_Name}.{Property_Name}. If the source
is a Patient Record which could be EMCI.MasterConsumer.MasterConsumer or DW.Modules.PMI.Patient
and the Property is DateOfBirth then the pseudo filed name is {Patient}.{BirthDate} or
{Patient}.{DateOfBirth}. The source table will be rconciled at compilation time and will
depend on the the source table name. The Property Name must be the actual name of the Property
in the Source Table.
In the case of Collections such as Addresses then the syntax would be
{Source_Table_Name}.{Addresses}.{k1(n){:k1(N)}}.{Address_Property_Name}
where {k1(n)} can be a literal value e.g. 1, if {:k1(N)} is specified it too can be a literal e.g. 2
and would read {Patient}.{Addresses}.(1).{Suburb} through {Patient}.{Addresses}.(2).{Suburb}
the key words 'first' and 'last' can be used for {k1(n)} and/or {k1(N)} e.g {first:last} implies all
addresses in the list of Addresses. If there is a collection within a collection such as:
{Patient}.{Contacts}.{k1(n){:k1(N)}}.{ContactPoint}.{k2(n){:k2(N)}}.{rContactPointUseId}
This allows the system to differentiate between the inner and outer loops.</Description>
<Type>Robot.Common.TestModule.EMCIConsumerProperties</Type>
<Cardinality>many</Cardinality>
<Inverse>TestCondition</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="RemoveListProperty">
<Description>
If you want to remove an Identifier for example then set the flag RemoveListProperty to 1 (True)</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="RemoveListPropertyItem">
<Description>
This property works in combination with the property RemoveListProperty Property above being TRUE
And allows you to specify which Identifier you wish to remove</Description>
<Type>%String</Type>
<Parameter name="DISPLAYLIST" value=",First,Last,Random,All"/>
<Parameter name="VALUELIST" value=",F,L,R,A"/>
</Property>

<Property name="RemoveListPropertyUSEValue">
<Description>
This property allows you to specify a list item to be removed based on the 'use' attribute rather than
by specifying an item in the list by its position (RemoveListPropertyItem). At the moment the possible
values are 'official', 'usual' and 'old'. Others may be added ata later stage</Description>
<Type>%String</Type>
<Parameter name="VALUELIST" value=",official,usual,old,secondary"/>
</Property>

<Property name="AddListProperty">
<Description>
AddListProperty works in the opposite way from the RemoveListItem functionality</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="AddListPropertyCount">
<Description>
How many Items to Add, currently constrained to 1,2 or 3 new Items</Description>
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
<Parameter name="MAXVAL" value="3"/>
<Parameter name="MINVAL" value="1"/>
</Property>

<Property name="AddListPropertyUse">
<Description>
The USE attribute value of the List Item to use. If you are adding up to 3 new items then
the USE value will correspond to the value in that position in he list of USE values
The possible values are "usual","old","secondary","official"
If you are adding 3 new items then you would specify the list of USE values as
"usual,old,old" as an example. The values Usual and official can only appear once in the list
The vakue of the actual property will be generated using one of the data generator methods</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="RemovePropertyData">
<Description>
Set the Property Value to NULL or 0 in the case of a Boolean Property</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="ScrambleData">
<Description>
If scamble data is true then the property value will replaced with a value generated by one of the data
generator methods</Description>
<Type>%Boolean</Type>
</Property>

<Property name="ScrambleDataClassMethodName">
<Description>
A Classmethod Name from the DFI Common Utility Data Generators Class</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="CallClassName">
<Description>
An Alternative Class containing the method to use instead of a method within the Utility Data Generator
Class.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="CallClassMethodName">
<Description>
An alternative method name within the CallClassName to use instead of the Utility Data Generator Class</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="CallMethodParameterValues">
<Description>
These are the values to pass to the custom method. The number of items in the list cannot be more than the
the number of parameters in the method signature</Description>
<Type>%ListOfDataTypes</Type>
</Property>

<Property name="TestDefinition">
<Description>
Inverse relationship property name back to Test Definition</Description>
<Type>Robot.Common.TestModule.TestDefinitions</Type>
<Cardinality>one</Cardinality>
<Inverse>TestConditions</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="TestDefinitionIndex">
<Description>
Index to support the 1:many relationship between Test Definition and Test Conditions</Description>
<Properties>TestDefinition</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.CommonD7BE.TestConditionsD</DataLocation>
<DefaultData>TestConditionsDefaultData</DefaultData>
<IdLocation>^Robot.CommonD7BE.TestConditionsD</IdLocation>
<IndexLocation>^Robot.CommonD7BE.TestConditionsI</IndexLocation>
<StreamLocation>^Robot.CommonD7BE.TestConditionsS</StreamLocation>
<Data name="TestConditionsDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>TestConditionName</Value>
</Value>
<Value name="3">
<Value>TestConditionType</Value>
</Value>
<Value name="4">
<Value>RemoveListProperty</Value>
</Value>
<Value name="5">
<Value>RemoveListPropertyItem</Value>
</Value>
<Value name="6">
<Value>RemoveListPropertyUSEValue</Value>
</Value>
<Value name="7">
<Value>AddListProperty</Value>
</Value>
<Value name="8">
<Value>AddListPropertyCount</Value>
</Value>
<Value name="9">
<Value>AddListPropertyUse</Value>
</Value>
<Value name="10">
<Value>RemovePropertyData</Value>
</Value>
<Value name="11">
<Value>ScrambleData</Value>
</Value>
<Value name="12">
<Value>ScrambleDataClassMethodName</Value>
</Value>
<Value name="13">
<Value>CallClassName</Value>
</Value>
<Value name="14">
<Value>CallClassMethodName</Value>
</Value>
<Value name="15">
<Value>CallMethodParameterValues</Value>
</Value>
<Value name="16">
<Value>TestDefinition</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.TestModule.TestDefinitions">
<Description>
This Class is used to Define Tests to Run against the EMCI or IHIS FHIR Server. Tests are wrapped within
a Manifest and the Man</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor,Cogs.JsonClass</Super>
<TimeChanged>65876,46602.450707</TimeChanged>
<TimeCreated>65852,19944.003668</TimeCreated>

<Property name="TestName">
<Description>
A meaningful but short Name for the Test</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="JSONNAME" value="testName"/>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="TestDescription">
<Description>
A longer description of the Test, what it is trying to Test, what Interacion is expected,
what the expected outcome is. The combination of the Test Name, Test Description and other
Properties in the TestDefinition should be meaningful and form part of the documentation of
the Test. Therefore the more precise this Description is as well as the HTTP Method, the Test
Rules and environment Settings (mfConfig Settings) combine to generate a comprehensive 
Test Document that forms part of the Testing Strategy</Description>
<Type>%String</Type>
<Parameter name="JSONNAME" value="testDescription"/>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="PassEMCIUId">
<Description>
This Test send the EMCIUId as the 'Official' Identifier. If Test=0 this field is True, else false
and is Test 1 if the following properties are all false</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
<Parameter name="JSONNAME" value="passEMCIUId"/>
</Property>

<Property name="RandomSelection">
<Description><![CDATA[
If TRUE (1) this property will make the record selection process generate a random number between 1 and the
number of records to be included in the Batch Manifest and it will skip that many records in the
in the source data before picking up the next source record to Process.<br>
If the value is FALSE (0) then the process that processes the Source Data walks through the source
data table based on the source record ID (internal ID) in a sequential order from the first record
through to the last record.]]></Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="JSONNAME" value="randomSelection"/>
</Property>

<Property name="UseManifestRecordSourceRowIds">
<Description><![CDATA[
This property tells the Test Processor to use the record information in the Manifest Recordsof
this Manifest to retrieve the source data from the source data source. So instead of walking
trough the source data tables' Internal RowId it uses the RowId that is stored in the Manifest
Record (Property CopyConsumerId or MasterConsumerId).<br>
If this proeperty is set to 1 (TRUE) then the Property 'RandomSelection' is ignored.]]></Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="JSONNAME" value="useManifestRecordSourceRowIds"/>
</Property>

<Property name="SelectedRecords">
<Description>
If this property is populated with a list of Manifest Record ID's (The RowId of the Manifest Records
within the Manifest then only those records will be used in the test. The Manifest needs to have been
populated at least once before this option will work. Essentially this allows you to reprocess the
items pointed to by the Manifest Record Properties such as Copy Consumer ID or Master Consumer ID and
other IHIS Entities once they are enabled. This setting will override the RandomSelection option
and the UseManifestRecordSourceRowIds (which is implicitly what this setting does)</Description>
<Type>%String</Type>
<Parameter name="JSONNAME" value="selectedRecords"/>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="ExpectedOutcome">
<Description>
A description of the expected outcome of the Tests performed on the Rows retrieved, transformed and
sent to the EMCI or IHIS server</Description>
<Type>%String</Type>
<Parameter name="JSONNAME" value="expectedOutcome"/>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="ActualOutcome">
<Description>
A description of the actual outcome of the tests. This description will detail those rows that either
resulted in the expected Outcome and those that did not. The outcomes that were not expected should
be investigated as to why they did not perform as expected, The reason should be explained in the
Operation Outcome of the FHIR Request</Description>
<Type>%String</Type>
<Parameter name="JSONNAME" value="actualOutcome"/>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="HTTPMethod">
<Description>
The HTTP Method to use in the HTTP or HTTPS Operation</Description>
<Type>Robot.Common.CodeTables.HTTPMethods</Type>
<Parameter name="JSONNAME" value="httpMethod"/>
</Property>

<Property name="TargetDocumentType">
<Description>
The type of Document determines the HTTP Operation that is used to send the data to the Target
Application (EMCI, IHIS, IHIS Module). Typically this is going to be FHIR JSON or HL7 though
TCP is an option </Description>
<Type>%String</Type>
<Parameter name="DISPLAYLIST" value=",FHIR JSON,HL7"/>
<Parameter name="JSONNAME" value="targetDocumentType"/>
<Parameter name="VALUELIST" value=",F,H"/>
</Property>

<Property name="ManagingOrganization">
<Description>
The Managing Organization Default. This should be specified in the FHIR JSON. If not specified it
should default to Clinicom</Description>
<Type>%String</Type>
<Parameter name="JSONNAME" value="managingOrganization"/>
</Property>

<Property name="UseMasterConsumer">
<Description>
Use the Master Consumer Class as opposed to the CopyConsumer Class</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
<Parameter name="JSONNAME" value="useMasterConsumer"/>
</Property>

<Property name="TestConditions">
<Description>
A collection of Test Conditions that are invoked by the Testing Module Business Process(es), The Test CVonditions
are typically applied to a specific field in the source data tables.</Description>
<Type>Robot.Common.TestModule.TestConditions</Type>
<Cardinality>many</Cardinality>
<Inverse>TestDefinition</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="mfConfigTestSettings">
<Description>
When the Tests (Test Definitions) are run the Testing Module can set mfConfig settings in the Target
EMCI or IHIS FHIR Server to test certain scenarios. The mfConfig settings are returned to their prior
state after the tests have completed.</Description>
<Type>Robot.Common.TestModule.mfConfigSettings</Type>
<Cardinality>many</Cardinality>
<Inverse>TestDefinition</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.CommonD7BE.TestDefinit565BD</DataLocation>
<DefaultData>TestDefinitionsDefaultData</DefaultData>
<IdLocation>^Robot.CommonD7BE.TestDefinit565BD</IdLocation>
<IndexLocation>^Robot.CommonD7BE.TestDefinit565BI</IndexLocation>
<StreamLocation>^Robot.CommonD7BE.TestDefinit565BS</StreamLocation>
<Data name="TestDefinitionsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>TestName</Value>
</Value>
<Value name="3">
<Value>TestDescription</Value>
</Value>
<Value name="4">
<Value>PassEMCIUId</Value>
</Value>
<Value name="5">
<Value>RandomSelection</Value>
</Value>
<Value name="6">
<Value>UseManifestRecordSourceRowIds</Value>
</Value>
<Value name="7">
<Value>SelectedRecords</Value>
</Value>
<Value name="8">
<Value>ExpectedOutcome</Value>
</Value>
<Value name="9">
<Value>ActualOutcome</Value>
</Value>
<Value name="10">
<Value>HTTPMethod</Value>
</Value>
<Value name="11">
<Value>TargetDocumentType</Value>
</Value>
<Value name="12">
<Value>ManagingOrganization</Value>
</Value>
<Value name="13">
<Value>UseMasterConsumer</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.TestModule.mfConfigSettings">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65875,43394.197105</TimeChanged>
<TimeCreated>65852,19660.717982</TimeCreated>

<Property name="mfConfigPropertyName">
<Type>%String</Type>
</Property>

<Property name="mfConfigPropertyPriorValue">
<Type>%String</Type>
</Property>

<Property name="mfConfigPropertyTestValue">
<Type>%String</Type>
</Property>

<Property name="ReturnmfConfigPropertyValuetoPrior">
<Type>%Boolean</Type>
</Property>

<Property name="mfConfigPropertyValue">
<Type>%String</Type>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>mfConfigPropertyName</Properties>
<Unique>1</Unique>
</Index>

<Property name="TestDefinition">
<Type>Robot.Common.TestModule.TestDefinitions</Type>
<Cardinality>one</Cardinality>
<Inverse>mfConfigTestSettings</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="TestDefinitionIndex">
<Properties>TestDefinition</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.CommonD7BE.mfConfigSetC2D4D</DataLocation>
<DefaultData>mfConfigSettingsDefaultData</DefaultData>
<IdLocation>^Robot.CommonD7BE.mfConfigSetC2D4D</IdLocation>
<IndexLocation>^Robot.CommonD7BE.mfConfigSetC2D4I</IndexLocation>
<StreamLocation>^Robot.CommonD7BE.mfConfigSetC2D4S</StreamLocation>
<Data name="mfConfigSettingsDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>mfConfigPropertyPriorValue</Value>
</Value>
<Value name="3">
<Value>mfConfigPropertyTestValue</Value>
</Value>
<Value name="4">
<Value>ReturnmfConfigPropertyValuetoPrior</Value>
</Value>
<Value name="5">
<Value>mfConfigPropertyValue</Value>
</Value>
<Value name="6">
<Value>TestDefinition</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Transformations.CreateMergeHL7Message.AUX">
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent</Super>
<TimeChanged>65825,72055.168077</TimeChanged>
<TimeCreated>65495,71427.711196</TimeCreated>

<Property name="MergeHID">
<Type>%String</Type>
</Property>

<Property name="MergeDate">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.Transformat9334.AUXD</DataLocation>
<DefaultData>AUXDefaultData</DefaultData>
<IdLocation>^Robot.Common.Transformat9334.AUXD</IdLocation>
<IndexLocation>^Robot.Common.Transformat9334.AUXI</IndexLocation>
<StreamLocation>^Robot.Common.Transformat9334.AUXS</StreamLocation>
<Data name="AUXDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>MergeHID</Value>
</Value>
<Value name="3">
<Value>MergeDate</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Transformations.CreateMergeHL7Message">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65825,72135.298542</TimeChanged>
<TimeCreated>65495,71150.566349</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='2.5:ADT_A01' targetDocType='2.5:ADT_A39' create='new' language='objectscript' >
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='"ADT"' property='target.{MSH:MessageType.MessageCode}' action='set' />
<assign value='"A40"' property='target.{MSH:MessageType.TriggerEvent}' action='set' />
<assign value='"ADT_A39"' property='target.{MSH:MessageType.MessageStructure}' action='set' />
<assign value='$TR($zdt($NOW(),3),".:- ","")' property='target.{MSH:MessageControlID}' action='set' />
<assign value='source.{EVN}' property='target.{EVN}' action='set' />
<assign value='"A40"' property='target.{EVN:EventTypeCode}' action='set' />
<assign value='aux.MergeDate' property='target.{EVN:RecordedDateTime}' action='set' />
<assign value='source.{PID}' property='target.{PIDgrp(1).PID}' action='set' />
<assign value='aux.MergeHID' property='target.{PIDgrp(1).MRG:PriorPatientIdentifierList(1).IDNumber}' action='set' />
<assign value='"DOH"' property='target.{PIDgrp(1).MRG:PriorPatientIdentifierList(1).AssigningAuthority.NamespaceID}' action='set' />
<assign value='"www.health.gov.za"' property='target.{PIDgrp(1).MRG:PriorPatientIdentifierList(1).AssigningAuthority.UniversalID}' action='set' />
<assign value='"DNS"' property='target.{PIDgrp(1).MRG:PriorPatientIdentifierList(1).AssigningAuthority.UniversalIDType}' action='set' />
<assign value='"NH"' property='target.{PIDgrp(1).MRG:PriorPatientIdentifierList(1).IdentifierTypeCode}' action='set' />
<assign value='aux.MergeDate' property='target.{PIDgrp().MRG:PriorPatientIdentifierList().EffectiveDate}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.Transformations.CreateNACKDTL.AUX">
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent</Super>
<TimeChanged>65825,72038.23249</TimeChanged>
<TimeCreated>65487,68862.649614</TimeCreated>

<Property name="ACKCode">
<Type>%String</Type>
</Property>

<Property name="ACKMessage">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.TransformatD0D7.AUXD</DataLocation>
<DefaultData>AUXDefaultData</DefaultData>
<IdLocation>^Robot.Common.TransformatD0D7.AUXD</IdLocation>
<IndexLocation>^Robot.Common.TransformatD0D7.AUXI</IndexLocation>
<StreamLocation>^Robot.Common.TransformatD0D7.AUXS</StreamLocation>
<Data name="AUXDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ACKCode</Value>
</Value>
<Value name="3">
<Value>ACKMessage</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Transformations.CreateNACKDTL">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65893,39175.74305</TimeChanged>
<TimeCreated>65483,1051.625061</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='2.5.1:ADT_A01' targetDocType='2.5.1:ACK' create='new' language='objectscript' >
<assign value='source.{MSH:FieldSeparator}' property='target.{MSH:FieldSeparator}' action='set' />
<assign value='source.{MSH:EncodingCharacters}' property='target.{MSH:EncodingCharacters}' action='set' />
<assign value='source.{MSH:SendingApplication.NamespaceID}' property='target.{MSH:SendingApplication.NamespaceID}' action='set' />
<assign value='source.{MSH:SendingApplication.UniversalID}' property='target.{MSH:SendingApplication.UniversalID}' action='set' />
<assign value='source.{MSH:SendingApplication.UniversalIDType}' property='target.{MSH:SendingApplication.UniversalIDType}' action='set' />
<assign value='source.{MSH:SendingFacility.NamespaceID}' property='target.{MSH:SendingFacility.NamespaceID}' action='set' />
<assign value='source.{MSH:SendingFacility.UniversalID}' property='target.{MSH:SendingFacility.UniversalID}' action='set' />
<assign value='source.{MSH:SendingFacility.UniversalIDType}' property='target.{MSH:SendingFacility.UniversalIDType}' action='set' />
<assign value='source.{MSH:ReceivingApplication.NamespaceID}' property='target.{MSH:ReceivingApplication.NamespaceID}' action='set' />
<assign value='source.{MSH:ReceivingApplication.UniversalID}' property='target.{MSH:ReceivingApplication.UniversalID}' action='set' />
<assign value='source.{MSH:ReceivingApplication.UniversalIDType}' property='target.{MSH:ReceivingApplication.UniversalIDType}' action='set' />
<assign value='source.{MSH:ReceivingFacility.NamespaceID}' property='target.{MSH:ReceivingFacility.NamespaceID}' action='set' />
<assign value='source.{MSH:ReceivingFacility.UniversalID}' property='target.{MSH:ReceivingFacility.UniversalID}' action='set' />
<assign value='source.{MSH:ReceivingFacility.UniversalIDType}' property='target.{MSH:ReceivingFacility.UniversalIDType}' action='set' />
<assign value='$tr($zdt($h,3),",: ","")' property='target.{MSH:DateTimeOfMessage}' action='set' />
<assign value='source.{MSH:Security}' property='target.{MSH:Security}' action='set' />
<assign value='source.{MSH:MessageControlID}' property='target.{MSH:MessageControlID}' action='set' />
<assign value='"ACK"' property='target.{MSH:MessageType.MessageCode}' action='set' />
<assign value='source.{MSH:MessageType.TriggerEvent}' property='target.{MSH:MessageType.TriggerEvent}' action='set' />
<assign value='"ACK"_target.{MSH:MessageType.TriggerEvent}' property='target.{MSH:MessageType.MessageStructure}' action='set' />
<assign value='source.{MSH:ProcessingID}' property='target.{MSH:ProcessingID}' action='set' />
<assign value='source.{MSH:VersionID}' property='target.{MSH:VersionID}' action='set' />
<assign value='source.{MSH:SequenceNumber}' property='target.{MSH:SequenceNumber}' action='set' />
<assign value='source.{MSH:ContinuationPointer}' property='target.{MSH:ContinuationPointer}' action='set' />
<assign value='source.{MSH:AcceptAcknowledgmentType}' property='target.{MSH:AcceptAcknowledgmentType}' action='set' />
<assign value='source.{MSH:ApplicationAcknowledgmentTyp}' property='target.{MSH:ApplicationAcknowledgmentTyp}' action='set' />
<assign value='source.{MSH:CountryCode}' property='target.{MSH:CountryCode}' action='set' />
<assign value='source.{MSH:PrincipalLanguageOfMessage}' property='target.{MSH:PrincipalLanguageOfMessage}' action='set' />
<assign value='source.{MSH:AltCharsetHandlingScheme}' property='target.{MSH:AltCharsetHandlingScheme}' action='set' />
<assign value='aux.ACKCode' property='target.{MSA:AcknowledgmentCode}' action='set' />
<assign value='aux.ACKMessage' property='target.{MSA:TextMessage}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.Transformations.DWToFHIRPatient">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65852,25011.398823</TimeChanged>
<TimeCreated>64887,31985.249489</TimeCreated>
<DependsOn>DW.Modules.Pmi.Patient,FHIR.Patient</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='DW.Modules.Pmi.Patient' targetClass='FHIR.Patient' create='new' language='objectscript' >
<annotation>To convert the DW Patient to a FHIR Patient</annotation>
<assign value='"Patient"' property='target.ResourceType' action='set' />
<assign value='"POST"' property='target.HTTPMethod' action='set' />
<assign value='$zdt($h,3)' property='target.CreatedDateTime' action='set' />
<assign value='##class(FHIR.LookupReference).Lookup("Gender",source.Person.MfGenderRel.Code,"unknown")' property='target.Gender' action='set' />
<assign value='source.Person.DateOfBirth' property='target.BirthDate' action='set' />
<assign value='$SELECT(source.IsDeleted=1:0,1:1)' property='target.Active' action='set' />
<assign value='source.Person.DeathIndicator' property='target.DeceasedBoolean' action='set' />
<assign value='source.Person.DeathDT' property='target.DeceasedDateTime' action='set' />
<assign value='##class(FHIR.CodeableConcept).%New()' property='target.MaritalStatus' action='set' />
<assign value='##class(FHIR.Coding).%New()' property='target.MaritalStatus.Coding.(1)' action='set' />
<assign value='"http://hst.co.za/MaritalStatus/"_##class(FHIR.LookupReference).Lookup("MaritalStatus",source.Person.mfMaritalStatus.Code,"15")' property='target.MaritalStatus.Coding.(1).System' action='set' />
<assign value='1' property='target.MaritalStatus.Coding.(1).UserSelected' action='set' />
<assign value='source.Person.mfMaritalStatus.Description' property='target.MaritalStatus.Text' action='set' />
<assign value='0' property='AddressCount' action='set' />
<if condition='source.Person.PersonAddress.(1).mfAddress.PostalCode&apos;=""||##class(FHIR.LookupReference).Lookup("Country",source.Person.PersonAddress.(1).mfAddress.mfCountryRel.Code)&apos;=""||##class(FHIR.LookupReference).Lookup("AddressType",source.Person.PersonAddress.(1).mfAddressType.Code)&apos;=""||source.Person.PersonAddress.(1).mfAddress.City&apos;=""||source.Person.PersonAddress.(1).mfAddress.AddressLine1&apos;=""||source.Person.PersonAddress.(1).mfAddress.AddressLine2&apos;=""||source.Person.PersonAddress.(1).mfAddress.StartDT&apos;=""||source.Person.PersonAddress.(1).mfAddress.EndDT&apos;=""' >
<true>
<assign value='source.Person.PersonAddress.(1).mfAddress.EndDT' property='target.Address.(1).Period.End' action='set' />
<assign value='source.Person.PersonAddress.(1).mfAddress.StartDT' property='target.Address.(1).Period.Start' action='set' />
<assign value='source.Person.PersonAddress.(1).mfAddress.City' property='target.Address.(1).City' action='set' />
<assign value='"physical"' property='target.Address.(1).Type' action='set' />
<assign value='##class(FHIR.LookupReference).Lookup("Country",source.Person.mfCountry.Code)' property='target.Address.(1).Country' action='set' />
<assign value='source.Person.PersonAddress.(1).mfAddress.PostalCode' property='target.Address.(1).PostalCode' action='set' />
<assign value='source.Person.PersonAddress.(1).mfAddress.AddressLine1' property='target.Address.(1).Line.(1)' action='set' />
<assign value='source.Person.PersonAddress.(1).mfAddress.AddressLine2' property='target.Address.(1).Line.(2)' action='set' />
<assign value='source.Person.mfProvince.Code' property='target.Address.(1).State' action='set' />
<assign value='source.Person.PersonAddress.(1).mfAddress.Suburb' property='target.Address.(1).District' action='set' />
<assign value='"home"' property='target.Address.(1).Use' action='set' />
<assign value='source.Person.PersonAddress.(1).mfAddress.AddressLine1_" "_source.Person.PersonAddress.(1).mfAddress.AddressLine2' property='target.Address.(1).Text' action='set' />
<assign value='(AddressCount+1)' property='AddressCount' action='set' />
</true>
</if>
<if condition='source.NextOfKin&apos;=""' >
<true>
<assign value='"other"' property='target.Contact.(1).Gender' action='set' />
<assign value='##class(FHIR.Contact).%New()' property='target.Contact.(1)' action='set' />
<assign value='##class(FHIR.HumanName).%New()' property='target.Contact.(1).Name' action='set' />
<assign value='1' property='Counter' action='set' />
<assign value='"usual"' property='target.Contact.(1).Name.Use' action='set' />
<assign value='source.NextOfKin.CreatedDT' property='target.Contact.(1).Name.Period.Start' action='set' />
<assign value='$L(source.NextOfKin.Name," ")' property='Len' action='set' />
<code>
<![CDATA[ for Counter=1:1:Len
 {
   if ((Counter=Len)&&(Len'=1))
   {
    set target.Contact.GetAt(1).Name.Family = $P(source.NextOfKin.Name," ",Counter)
   }else
   {
    do target.Contact.GetAt(1).Name.Given.SetAt($P(source.NextOfKin.Name," ",Counter),Counter)
    set target.Contact.GetAt(1).Name.Text = target.Contact.GetAt(1).Name.Text_" "_$P(source.NextOfKin.Name," ",Counter)
   }
 }]]]]><![CDATA[></code>
<if condition='source.NextOfKin.mfNOKRelationshipRel.Code&apos;=""||source.NextOfKin.mfNOKRelationshipRel.Description&apos;=""' >
<true>
<assign value='##class(FHIR.CodeableConcept).%New()' property='target.Contact.(1).Relationship.(1)' action='set' />
<assign value='##class(FHIR.Coding).%New()' property='target.Contact.(1).Relationship.(1).Coding.(1)' action='set' />
<assign value='"http://hst.co.za/ContactRoles/8"' property='target.Contact.(1).Relationship.(1).Coding.(1).System' action='set' />
<assign value='1' property='target.Contact.(1).Relationship.(1).Coding.(1).UserSelected' action='set' />
<assign value='"Other"' property='target.Contact.(1).Relationship.(1).Text' action='set' />
</true>
</if>
<foreach property='source.NextOfKin.NextOfKinContactDetails.(k1)' key='k1' >
<if condition='source.NextOfKin.NextOfKinContactDetails.(k1).ContactValue&apos;=""' >
<true>
<assign value='##class(FHIR.ContactPoint).%New()' property='target.Contact.(1).Telecom.(k1)' action='set' />
<assign value='##class(FHIR.LookupReference).Lookup("ContactType",source.NextOfKin.NextOfKinContactDetails.(k1).MfContactTypeRel.Code,"phone")' property='target.Contact.(1).Telecom.(k1).System' action='set' />
<assign value='k1' property='target.Contact.(1).Telecom.(k1).Rank' action='set' />
<assign value='source.NextOfKin.NextOfKinContactDetails.(k1).ContactValue' property='target.Contact.(1).Telecom.(k1).Value' action='set' />
<assign value='"mobile"' property='target.Contact.(1).Telecom.(k1).Use' action='set' />
</true>
</if>
</foreach>
<if condition='source.NextOfKin.mfAddress.StartDT&apos;=""||source.NextOfKin.mfAddress.EndDT&apos;=""||source.NextOfKin.mfAddress.AddressLine1&apos;=""||source.NextOfKin.mfAddress.AddressLine2&apos;=""||source.NextOfKin.mfAddress.City&apos;=""||source.NextOfKin.mfAddress.PostalCode&apos;=""||##class(FHIR.LookupReference).Lookup("Country",source.NextOfKin.mfAddress.mfCountryRel.Code)&apos;=""' >
<true>
<assign value='##class(FHIR.Address).%New()' property='target.Contact.(1).Address' action='set' />
<assign value='source.NextOfKin.mfAddress.AddressLine1' property='target.Contact.(1).Address.Line.(1)' action='set' />
<assign value='source.NextOfKin.mfAddress.AddressLine2' property='target.Contact.(1).Address.Line.(2)' action='set' />
<assign value='source.NextOfKin.mfAddress.StartDT' property='target.Contact.(1).Address.Period.Start' action='set' />
<assign value='source.NextOfKin.mfAddress.EndDT' property='target.Contact.(1).Address.Period.End' action='set' />
<assign value='"home"' property='target.Contact.(1).Address.Use' action='set' />
<assign value='"physical"' property='target.Contact.(1).Address.Type' action='set' />
<assign value='source.NextOfKin.mfAddress.AddressLine1_" "_source.NextOfKin.mfAddress.AddressLine2' property='target.Contact.(1).Address.Text' action='set' />
<assign value='source.NextOfKin.mfAddress.Suburb' property='target.Contact.(1).Address.District' action='set' />
<assign value='source.NextOfKin.mfAddress.mfProvinceRel.Code' property='target.Contact.(1).Address.State' action='set' />
<assign value='source.NextOfKin.mfAddress.City' property='target.Contact.(1).Address.City' action='set' />
<assign value='source.NextOfKin.mfAddress.PostalCode' property='target.Contact.(1).Address.PostalCode' action='set' />
<assign value='##class(FHIR.LookupReference).Lookup("Country",source.NextOfKin.mfAddress.mfCountryRel.Code)' property='target.Contact.(1).Address.Country' action='set' />
<assign value='source.NextOfKin.CreatedDT' property='target.Contact.(1).Period.Start' action='set' />
</true>
</if>
</true>
</if>
<assign value='0' property='NameCount' action='set' />
<if condition='source.Person.Name&apos;=""||source.Person.Surname&apos;=""||source.Person.Title&apos;=""' >
<true>
<assign value='##class(FHIR.HumanName).%New()' property='target.Name.(1)' action='set' />
<assign value='1' property='Counter' action='set' />
<assign value='"usual"' property='target.Name.(1).Use' action='set' />
<assign value='source.Person.Surname' property='target.Name.(1).Family' action='set' />
<assign value='source.Person.CreatedDT' property='target.Name.(1).Period.Start' action='set' />
<assign value='source.Person.Title' property='target.Name.(1).Prefix.(1)' action='set' />
<assign value='"usual"' property='target.Name.(1).Use' action='set' />
<assign value='source.Person.Surname' property='target.Name.(1).Family' action='set' />
<code>
<![CDATA[ s NameList = ##class(DW.Utils.Common).GetGivenNames(source.Person.Name)
 s Len = $LL(NameList)
 for Counter=1:1:Len
 {
    do target.Name.GetAt(1).Given.SetAt($LG(NameList,Counter),Counter)
    set target.Name.GetAt(1).Text = target.Name.GetAt(1).Text_" "_$LG(NameList,Counter)
 }]]]]><![CDATA[></code>
<assign value='(NameCount+1)' property='NameCount' action='set' />
<if condition='(source.Person.MaidenSurname&apos;="")&amp;&amp;(source.Person.MaidenSurname&apos;=source.Person.Surname)' >
<true>
<assign value='##class(FHIR.HumanName).%New()' property='target.Name.(NameCount)' action='set' />
<assign value='"maiden"' property='target.Name.(NameCount).Use' action='set' />
<assign value='source.Person.CreatedDT' property='target.Name.(NameCount).Period.Start' action='set' />
<assign value='source.Person.MaidenSurname' property='target.Name.(NameCount).Family' action='set' />
<assign value='source.Person.Title' property='target.Name.(NameCount).Prefix.(1)' action='set' />
<code>
<![CDATA[ s NameList = ##class(DW.Utils.Common).GetGivenNames(source.Person.Name)
 s Len = $LL(NameList)
 for Counter=1:1:Len
 {
    do target.Name.GetAt(1).Given.SetAt($LG(NameList,Counter),Counter)
    set target.Name.GetAt(1).Text = target.Name.GetAt(1).Text_" "_$LG(NameList,Counter)
 }
 ]]]]><![CDATA[></code>
</true>
</if>
</true>
</if>
<assign value='0' property='TelecomCount' action='set' />
<foreach property='source.Person.PersonContactDetails.(k1)' key='k1' >
<if condition='source.Person.PersonContactDetails.(k1).ContactValue&apos;=""' >
<true>
<assign value='##class(FHIR.ContactPoint).%New()' property='target.Telecom.(k1)' action='set' />
<assign value='source.Person.PersonContactDetails.(k1).CreatedDT' property='target.Telecom.(k1).Period.Start' action='set' />
<assign value='source.Person.PersonContactDetails.(k1).ContactValue' property='target.Telecom.(k1).Value' action='set' />
<assign value='k1' property='target.Telecom.(k1).Rank' action='set' />
<assign value='##class(FHIR.LookupReference).Lookup("ContactType",source.Person.PersonContactDetails.(k1).smfGenContactTypeRel.Code,"phone")' property='target.Telecom.(k1).System' action='set' />
<assign value='"mobile"' property='target.Telecom.(k1).Use' action='set' />
<assign value='(TelecomCount+1)' property='TelecomCount' action='set' />
</true>
</if>
</foreach>
<assign value='0' property='ComCount' action='set' />
<if condition='##class(FHIR.LookupReference).Lookup("Language",source.Person.mfHomeLanguage.Code)&apos;=""||source.Person.mfHomeLanguage.Description&apos;=""' >
<true>
<assign value='##class(FHIR.Communication).%New()' property='target.Communication.(1)' action='set' />
<assign value='##class(FHIR.CodeableConcept).%New()' property='target.Communication.(1).Language' action='set' />
<assign value='##class(FHIR.Coding).%New()' property='target.Communication.(1).Language.Coding.(1)' action='set' />
<assign value='1' property='target.Communication.(1).Language.Coding.(1).UserSelected' action='set' />
<assign value='"http://hst.co.za/CommonLanguages/"_##class(FHIR.LookupReference).Lookup("Language",source.Person.mfHomeLanguage.Code,"186")' property='target.Communication.(1).Language.Coding.(1).System' action='set' />
<assign value='source.Person.mfHomeLanguage.Description' property='target.Communication.(1).Language.Text' action='set' />
<assign value='1' property='target.Communication.(1).Preferred' action='set' />
<assign value='(ComCount+1)' property='ComCount' action='set' />
</true>
</if>
<assign value='##class(FHIR.Extension).%New()' property='target.Extension.(1)' action='set' />
<assign value='##class(FHIR.LookupReference).Lookup("Nationality",source.Person.mfNationality.Code)' property='target.Extension.(1).ValueCode' action='set' />
<assign value='"http://hst.co.za/Nationality/"' property='target.Extension.(1).Url' action='set' />
<assign value='##class(FHIR.Extension).%New()' property='target.Extension.(2)' action='set' />
<assign value='""' property='target.Extension.(2).ValueCode' action='set' />
<assign value='"http://hst.co.za/EthnicGroup/"' property='target.Extension.(2).Url' action='set' />
<assign value='##class(FHIR.Extension).%New()' property='target.Extension.(3)' action='set' />
<assign value='source.Person.IsDateOfBirthApproximate' property='target.Extension.(3).ValueCode' action='set' />
<assign value='"http://hst.co.za/IsDateOfBirthApproximate/"' property='target.Extension.(3).Url' action='set' />
<assign value='##class(FHIR.Extension).%New()' property='target.Extension.(4)' action='set' />
<assign value='##class(FHIR.LookupReference).Lookup("Race",source.Person.mfEthnicGroup.Code,"UM")' property='target.Extension.(4).ValueCode' action='set' />
<assign value='"http://hst.co.za/Race/"' property='target.Extension.(4).Url' action='set' />
<foreach property='source.Person.PersonHistory.(k1)' key='k1' >
<if condition='((k1&gt;1)&amp;&amp;(((source.Person.PersonHistory.(k1-1).Forename&apos;=source.Person.PersonHistory.(k1).Forename)&amp;&amp;(source.Person.PersonHistory.(k1).Forename&apos;=""))||((source.Person.PersonHistory.(k1-1).ForenamePrefix&apos;=source.Person.PersonHistory.(k1).ForenamePrefix)&amp;&amp;(source.Person.PersonHistory.(k1).ForenamePrefix&apos;=""))||((source.Person.PersonHistory.(k1-1).Surname&apos;=source.Person.PersonHistory.(k1).Surname)&amp;&amp;(source.Person.PersonHistory.(k1).Surname&apos;=""))))' >
<true>
<assign value='(NameCount+1)' property='NameCount' action='set' />
<assign value='##class(FHIR.HumanName).%New()' property='target.Name.(NameCount)' action='set' />
<assign value='"old"' property='target.Name.(NameCount).Use' action='set' />
<assign value='source.Person.PersonHistory.(k1).Surname' property='target.Name.(NameCount).Family' action='set' />
<assign value='source.Person.PersonHistory.(k1).ForenamePrefix' property='target.Name.(NameCount).Prefix.(1)' action='set' />
<assign value='$P(source.Person.PersonHistory.(k1).Forename,1)' property='target.Name.(NameCount).Given.(1)' action='set' />
<assign value='1' property='Counter' action='set' />
<code>
<![CDATA[ s NameList = ##class(DW.Utils.Common).GetGivenNames(source.Person.PersonHistory.GetAt(k1).Forename)
 s Len = $LL(NameList)
 for Counter=1:1:Len
 {
    do target.Name.GetAt(NameCount).Given.SetAt($LG(NameList,Counter),Counter)
    set target.Name.GetAt(NameCount).Text = target.Name.GetAt(NameCount).Text_" "_$LG(NameList,Counter)
 }]]]]><![CDATA[></code>
</true>
</if>
</foreach>
<foreach property='source.Person.PersonHistory.(k1)' key='k1' >
<if condition='(k1&gt;1)&amp;&amp;((source.Person.PersonHistory.(k1-1).MobilePhoneNumber&apos;=source.Person.PersonHistory.(k1).MobilePhoneNumber)&amp;&amp;((source.Person.PersonHistory.(k1).MobilePhoneNumber&apos;="")&amp;&amp;(source.Person.PersonHistory.(k1-1).MobilePhoneNumber&apos;="")))' >
<true>
<assign value='(TelecomCount+1)' property='TelecomCount' action='set' />
<assign value='##class(FHIR.ContactPoint).%New()' property='target.Telecom.(TelecomCount)' action='set' />
<assign value='source.Person.PersonHistory.(k1).MobilePhoneNumber' property='target.Telecom.(TelecomCount).Value' action='set' />
<assign value='"phone"' property='target.Telecom.(TelecomCount).System' action='set' />
<assign value='"old"' property='target.Telecom.(TelecomCount).Use' action='set' />
</true>
</if>
<if condition='(k1&gt;1)&amp;&amp;((source.Person.PersonHistory.(k1-1).HomeTelephoneNumber&apos;=source.Person.PersonHistory.(k1).HomeTelephoneNumber)&amp;&amp;((source.Person.PersonHistory.(k1).HomeTelephoneNumber&apos;="")&amp;&amp;(source.Person.PersonHistory.(k1-1).HomeTelephoneNumber&apos;="")))' >
<true>
<assign value='(TelecomCount+1)' property='TelecomCount' action='set' />
<assign value='##class(FHIR.ContactPoint).%New()' property='target.Telecom.(TelecomCount)' action='set' />
<assign value='source.Person.PersonHistory.(k1).HomeTelephoneNumber' property='target.Telecom.(TelecomCount).Value' action='set' />
<assign value='"phone"' property='target.Telecom.(TelecomCount).System' action='set' />
<assign value='"old"' property='target.Telecom.(TelecomCount).Use' action='set' />
</true>
</if>
<if condition='(k1&gt;1)&amp;&amp;((source.Person.PersonHistory.(k1-1).ContactTelephoneNumber&apos;=source.Person.PersonHistory.(k1).ContactTelephoneNumber)&amp;&amp;((source.Person.PersonHistory.(k1).ContactTelephoneNumber&apos;="")&amp;&amp;(source.Person.PersonHistory.(k1-1).ContactTelephoneNumber&apos;="")))' >
<true>
<assign value='(TelecomCount+1)' property='TelecomCount' action='set' />
<assign value='##class(FHIR.ContactPoint).%New()' property='target.Telecom.(TelecomCount)' action='set' />
<assign value='source.Person.PersonHistory.(k1).ContactTelephoneNumber' property='target.Telecom.(TelecomCount).Value' action='set' />
<assign value='"phone"' property='target.Telecom.(TelecomCount).System' action='set' />
<assign value='"old"' property='target.Telecom.(TelecomCount).Use' action='set' />
</true>
</if>
<if condition='(k1&gt;1)&amp;&amp;((source.Person.PersonHistory.(k1-1).FaxNumber&apos;=source.Person.PersonHistory.(k1).FaxNumber)&amp;&amp;((source.Person.PersonHistory.(k1).FaxNumber&apos;="")&amp;&amp;(source.Person.PersonHistory.(k1-1).FaxNumber&apos;="")))' >
<true>
<assign value='(TelecomCount+1)' property='TelecomCount' action='set' />
<assign value='##class(FHIR.ContactPoint).%New()' property='target.Telecom.(TelecomCount)' action='set' />
<assign value='source.Person.PersonHistory.(k1).FaxNumber' property='target.Telecom.(TelecomCount).Value' action='set' />
<assign value='"fax"' property='target.Telecom.(TelecomCount).System' action='set' />
<assign value='"old"' property='target.Telecom.(TelecomCount).Use' action='set' />
</true>
</if>
<if condition='(k1&gt;1)&amp;&amp;((source.Person.PersonHistory.(k1-1).EmailAddress&apos;=source.Person.PersonHistory.(k1).EmailAddress)&amp;&amp;((source.Person.PersonHistory.(k1).EmailAddress&apos;="")&amp;&amp;(source.Person.PersonHistory.(k1-1).EmailAddress&apos;="")))' >
<true>
<assign value='(TelecomCount+1)' property='TelecomCount' action='set' />
<assign value='##class(FHIR.ContactPoint).%New()' property='target.Telecom.(TelecomCount)' action='set' />
<assign value='source.Person.PersonHistory.(k1).EmailAddress' property='target.Telecom.(TelecomCount).Value' action='set' />
<assign value='"email"' property='target.Telecom.(TelecomCount).System' action='set' />
<assign value='"old"' property='target.Telecom.(TelecomCount).Use' action='set' />
</true>
</if>
</foreach>
<foreach property='source.Person.PersonHistory.(k1)' key='k1' >
<if condition='(k1&gt;1)&amp;&amp;((source.Person.PersonHistory.(k1-1).LanguageCode&apos;=source.Person.PersonHistory.(k1).LanguageCode)&amp;&amp;(source.Person.PersonHistory.(k1).LanguageCode&apos;=""))' >
<true>
<assign value='(ComCount+1)' property='ComCount' action='set' />
<assign value='##class(FHIR.Communication).%New()' property='target.Communication.(ComCount)' action='set' />
<assign value='##class(FHIR.CodeableConcept).%New()' property='target.Communication.(ComCount).Language' action='set' />
<assign value='##class(FHIR.Coding).%New()' property='target.Communication.(ComCount).Language.Coding.(1)' action='set' />
<assign value='"http://hst.co.za/CommonLanguages/"_##class(FHIR.LookupReference).Lookup("Language",source.Person.PersonHistory.(k1).LanguageCode,"186")' property='target.Communication.(ComCount).Language.Coding.(1).System' action='set' />
<assign value='0' property='target.Communication.(ComCount).Language.Coding.(1).UserSelected' action='set' />
</true>
</if>
</foreach>
<foreach property='source.Person.PersonHistory.(k1)' key='k1' >
<if condition='(k1&gt;1)&amp;&amp;(((source.Person.PersonHistory.(k1-1).PostalAddressLine4&apos;=source.Person.PersonHistory.(k1).PostalAddressLine4)&amp;&amp;(source.Person.PersonHistory.(k1).PostalAddressLine4&apos;=""))||((source.Person.PersonHistory.(k1-1).PostalAddressLine1&apos;=source.Person.PersonHistory.(k1).PostalAddressLine1)&amp;&amp;(source.Person.PersonHistory.(k1).PostalAddressLine1&apos;=""))||((source.Person.PersonHistory.(k1).PostalAddressLine2&apos;=source.Person.PersonHistory.(k1).PostalAddressLine2)&amp;&amp;(source.Person.PersonHistory.(k1).PostalAddressLine2&apos;=""))||((source.Person.PersonHistory.(k1-1).PostalAddressPostCode&apos;=source.Person.PersonHistory.(k1).PostalAddressPostCode)&amp;&amp;(source.Person.PersonHistory.(k1).PostalAddressPostCode)))' >
<true>
<assign value='(AddressCount+1)' property='AddressCount' action='set' />
<assign value='##class(FHIR.Address).%New()' property='target.Address.(AddressCount)' action='set' />
<assign value='"old"' property='target.Address.(AddressCount).Use' action='set' />
<assign value='"postal"' property='target.Address.(AddressCount).Type' action='set' />
<assign value='source.Person.PersonHistory.(k1).PostalAddressPostCode' property='target.Address.(AddressCount).PostalCode' action='set' />
<assign value='source.Person.PersonHistory.(k1).PostalAddressLine1' property='target.Address.(AddressCount).Line.(1)' action='set' />
<assign value='source.Person.PersonHistory.(k1).PostalAddressLine2' property='target.Address.(AddressCount).Line.(2)' action='set' />
<assign value='source.Person.PersonHistory.(k1).PostalAddressLine3' property='target.Address.(AddressCount).District' action='set' />
<assign value='source.Person.PersonHistory.(k1).PostalAddressLine4' property='target.Address.(AddressCount).City' action='set' />
<assign value='"ZAF"' property='target.Address.(AddressCount).Country' action='set' />
<assign value='source.Person.PersonHistory.(k1).ProvinceCode' property='target.Address.(AddressCount).State' action='set' />
</true>
</if>
</foreach>
<foreach property='source.Person.PersonHistory.(k1)' key='k1' >
<if condition='(k1&gt;1)&amp;&amp;(((source.Person.PersonHistory.(k1-1).AddressLine4&apos;=source.Person.PersonHistory.(k1).AddressLine4)&amp;&amp;(source.Person.PersonHistory.(k1).AddressLine4&apos;=""))||((source.Person.PersonHistory.(k1-1).AddressLine1&apos;=source.Person.PersonHistory.(k1).AddressLine1)&amp;&amp;(source.Person.PersonHistory.(k1).AddressLine1&apos;=""))||((source.Person.PersonHistory.(k1).AddressLine2&apos;=source.Person.PersonHistory.(k1).AddressLine2)&amp;&amp;(source.Person.PersonHistory.(k1).AddressLine2&apos;=""))||((source.Person.PersonHistory.(k1-1).PostCode&apos;=source.Person.PersonHistory.(k1).PostCode)&amp;&amp;(source.Person.PersonHistory.(k1).PostCode)))' >
<true>
<assign value='(AddressCount+1)' property='AddressCount' action='set' />
<assign value='##class(FHIR.Address).%New()' property='target.Address.(AddressCount)' action='set' />
<assign value='"old"' property='target.Address.(AddressCount).Use' action='set' />
<assign value='"physical"' property='target.Address.(AddressCount).Type' action='set' />
<assign value='source.Person.PersonHistory.(k1).PostCode' property='target.Address.(AddressCount).PostalCode' action='set' />
<assign value='source.Person.PersonHistory.(k1).AddressLine1' property='target.Address.(AddressCount).Line.(1)' action='set' />
<assign value='source.Person.PersonHistory.(k1).AddressLine2' property='target.Address.(AddressCount).Line.(2)' action='set' />
<assign value='source.Person.PersonHistory.(k1).AddressLine3' property='target.Address.(AddressCount).District' action='set' />
<assign value='source.Person.PersonHistory.(k1).AddressLine4' property='target.Address.(AddressCount).City' action='set' />
<assign value='"ZAF"' property='target.Address.(AddressCount).Country' action='set' />
<assign value='source.Person.PersonHistory.(k1).ProvinceCode' property='target.Address.(AddressCount).State' action='set' />
</true>
</if>
</foreach>
<assign value='1' property='k1' action='set' />
<if condition='source.Person.SAIDNo&apos;=""' >
<true>
<assign value='##class(FHIR.Identifier).%New()' property='target.Identifier.(k1)' action='set' />
<assign value='"usual"' property='target.Identifier.(k1).Use' action='set' />
<assign value='"http://hst.co.za/NamingSystem/5"' property='target.Identifier.(k1).System' action='set' />
<assign value='source.Person.SAIDNo' property='target.Identifier.(k1).Value' action='set' />
<assign value='##class(FHIR.Reference).%New()' property='target.Identifier.(k1).Assigner' action='set' />
<assign value='"http://hst.co.za/Organization/4"' property='target.Identifier.(k1).Assigner.Reference' action='set' />
<assign value='"South African Government"' property='target.Identifier.(k1).Assigner.Display' action='set' />
<assign value='(k1+1)' property='k1' action='set' />
</true>
</if>
<if condition='source.Person.PassportNo&apos;=""' >
<true>
<assign value='##class(FHIR.Identifier).%New()' property='target.Identifier.(k1)' action='set' />
<assign value='"usual"' property='target.Identifier.(k1).Use' action='set' />
<assign value='"http://hst.co.za/NamingSystem/32"' property='target.Identifier.(k1).System' action='set' />
<assign value='source.Person.PassportNo' property='target.Identifier.(k1).Value' action='set' />
<assign value='##class(FHIR.Reference).%New()' property='target.Identifier.(k1).Assigner' action='set' />
<assign value='"http://hst.co.za/Organization/4"' property='target.Identifier.(k1).Assigner.Reference' action='set' />
<assign value='"South African Government"' property='target.Identifier.(k1).Assigner.Display' action='set' />
<assign value='(k1+1)' property='k1' action='set' />
</true>
</if>
<if condition='source.UniqueIdentity.HID&apos;=""' >
<true>
<assign value='##class(FHIR.ManagingOrganization).%New()' property='target.ManagingOrganization' action='set' />
<assign value='"http://hst.co.za/Organization/62"' property='target.ManagingOrganization.Reference' action='set' />
<assign value='"Western Cape Government Health"' property='target.ManagingOrganization.Display' action='set' />
<assign value='##class(FHIR.Identifier).%New()' property='target.Identifier.(k1)' action='set' />
<assign value='"official"' property='target.Identifier.(k1).Use' action='set' />
<assign value='"http://hst.co.za/NamingSystem/78"' property='target.Identifier.(k1).System' action='set' />
<assign value='source.UniqueIdentity.HID' property='target.Identifier.(k1).Value' action='set' />
<assign value='##class(FHIR.Reference).%New()' property='target.Identifier.(k1).Assigner' action='set' />
<assign value='"http://hst.co.za/Organization/62"' property='target.Identifier.(k1).Assigner.Reference' action='set' />
<assign value='"Western Cape Government"' property='target.Identifier.(k1).Assigner.Display' action='set' />
<assign value='k1+1' property='k1' action='set' />
</true>
</if>
<assign value='""' property='PrevValue' action='set' />
<foreach property='source.Person.PersonHistory.(k2)' key='k2' >
<if condition='(source.Person.PersonHistory.(k2).NationalId&apos;="")&amp;&amp;(source.Person.PersonHistory.(k2).NationalId&apos;=source.Person.SAIDNo)&amp;&amp;(source.Person.PersonHistory.(k2).NationalId&apos;=PrevValue)' >
<true>
<assign value='##class(FHIR.Identifier).%New()' property='target.Identifier.(k1)' action='set' />
<assign value='"old"' property='target.Identifier.(k1).Use' action='set' />
<assign value='"http://hst.co.za/NamingSystem/19"' property='target.Identifier.(k1).System' action='set' />
<assign value='source.Person.PersonHistory.(k2).NationalId' property='target.Identifier.(k1).Value' action='set' />
<assign value='source.Person.PersonHistory.(k2).NationalId' property='PrevValue' action='set' />
<assign value='##class(FHIR.Reference).%New()' property='target.Identifier.(k1).Assigner' action='set' />
<assign value='"http://hst.co.za/Organization/4"' property='target.Identifier.(k1).Assigner.Reference' action='set' />
<assign value='"South African Government"' property='target.Identifier.(k1).Assigner.Display' action='set' />
<assign value='k1 + 1' property='k1' action='set' />
</true>
</if>
</foreach>
</transform>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.Transformations.EMCIPatientToExt">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65853,34491.317259</TimeChanged>
<TimeCreated>65175,38296.401528</TimeCreated>
<DependsOn>EMCI.MasterConsumer.MasterConsumer,FHIR.Patient</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EMCI.MasterConsumer.MasterConsumer' targetClass='FHIR.Patient' create='existing' language='objectscript' >
<if condition='target.System=""' >
<true>
<assign value='"FHIR"' property='target.System' action='set' />
</true>
</if>
<if condition='target.SystemVersion=""' >
<true>
<assign value='3' property='target.SystemVersion' action='set' />
</true>
</if>
<assign value='""' property='tURL' action='set' />
<code>
<![CDATA[ &SQL(SELECT ResourceIndexURL INTO :tURL FROM EMCI_Masterfiles.mfDomainConfiguration WHERE ActivePeriod_IsActive = 1)]]]]><![CDATA[></code>
<assign value='$ZDH(source.BirthDateTime,3,,,,,,,"")' property='target.BirthDate' action='set' />
<assign value='"Patient"' property='target.ResourceType' action='set' />
<assign value='source.EMCIUId' property='target.ResourceId' action='set' />
<if condition='(source.IsActive = "")||(source.IsActive="null")' >
<true>
<assign value='1' property='target.Active' action='set' />
</true>
<false>
<assign value='source.IsActive' property='target.Active' action='set' />
</false>
</if>
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("Race")' property='target.Extension.(1).Url' action='set' />
<if condition='source.rRaceId&apos;=""' >
<true>
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeFromIDMap(target.System, target.SystemVersion, "Race", source.rRaceId.%Id())' property='target.Extension.(1).ValueCode' action='set' />
</true>
</if>
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("EthnicGroup")' property='target.Extension.(2).Url' action='set' />
<if condition='source.rEthnicGroupId&apos;=""' >
<true>
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "EthnicGroup", source.rEthnicGroupId.CB.Code)' property='target.Extension.(2).ValueCode' action='set' />
</true>
</if>
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "CommonLanguages", source.rPreferredCommunicationId.rLanguageId.CB.Code)' property='target.Extension.(3).ValueCode' action='set' disabled='1' />
<assign value='tURL_"/PreferredCommunication"' property='target.Extension.(3).Url' action='set' disabled='1' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "ContactPointTechnology",source.rPreferredContactPointId.rTechnologyId.CB.Code)' property='target.Extension.(4).ValueCode' action='set' disabled='1' />
<assign value='tURL_"/PreferredContactPoint"' property='target.Extension.(4).Url' action='set' disabled='1' />
<assign value='source.rReplacedByConsumerId.EMCIUId' property='target.Extension.(5).ValueCode' action='set' disabled='1' />
<assign value='tURL_"/ReplacedByConsumer"' property='target.Extension.(5).Url' action='set' disabled='1' />
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("Nationality")' property='target.Extension.(3).Url' action='set' />
<if condition='source.rNationalityCountryId&apos;=""' >
<true>
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeFromIDMap(target.System, target.SystemVersion, "CountryCodes",source.rNationalityCountryId.%Id())' property='target.Extension.(3).ValueCode' action='set' />
</true>
</if>
<assign value='$P(source.BirthDateTime," ",2)' property='target.Extension.(4).ValueTime' action='set' />
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("TimeOfBirth")' property='target.Extension.(4).Url' action='set' />
<assign value='source.IsDateOfBirthApproximate' property='target.Extension.(5).ValueBoolean' action='set' />
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("IsDateOfBirthApproximate")' property='target.Extension.(5).Url' action='set' />
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("Religion")' property='target.Extension.(6).Url' action='set' />
<if condition='source.rReligionId&apos;=""' >
<true>
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeFromIDMap(target.System, target.SystemVersion, "Religion", source.rReligionId.%Id())' property='target.Extension.(6).ValueCode' action='set' />
</true>
</if>
<assign value='source.Comment' property='target.Extension.(7).ValueString' action='set' />
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("Comment")' property='target.Extension.(7).Url' action='set' />
<assign value='source.PlaceOfBirth' property='target.Extension.(8).ValueString' action='set' />
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("PlaceOfBirth")' property='target.Extension.(8).Url' action='set' />
<assign value='source.School' property='target.Extension.(9).ValueString' action='set' />
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("School")' property='target.Extension.(9).Url' action='set' />
<assign value='source.CarerSupport' property='target.Extension.(10).ValueBoolean' action='set' />
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("CarerSupport")' property='target.Extension.(10).Url' action='set' />
<assign value='source.Occupation' property='target.Extension.(11).ValueString' action='set' />
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("Occupation")' property='target.Extension.(11).Url' action='set' />
<assign value='source.OccupationSpouse' property='target.Extension.(12).ValueString' action='set' />
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("OccupationSpouse")' property='target.Extension.(12).Url' action='set' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "Gender",source.rGenderId.CB.Code)' property='target.Gender' action='set' />
<assign value='source.DeceasedDateTime' property='target.DeceasedDateTime' action='set' disabled='1' />
<assign value='source.IsDeceased' property='target.DeceasedBoolean' action='set' />
<assign value='source.NumberInMultipleBirth' property='target.MultipleBirthInteger' action='set' disabled='1' />
<assign value='source.IsOneOfMultipleBirth' property='target.MultipleBirthBoolean' action='set' />
<assign value='source.rManagingOrganizationId.IdentifierValue' property='target.ManagingOrganization.Identifier.Value' action='set' disabled='1' />
<assign value='source.rManagingOrganizationId.Name' property='target.ManagingOrganization.Identifier.Label' action='set' disabled='1' />
<assign value='source.rManagingOrganizationId.ActivePeriod.StartDate' property='target.ManagingOrganization.Identifier.Period.Start' action='set' disabled='1' />
<assign value='source.rManagingOrganizationId.ActivePeriod.EndDate' property='target.ManagingOrganization.Identifier.Period.End' action='set' disabled='1' />
<assign value='source.rManagingOrganizationId.rIdentifierNamingSystemId.Name' property='target.ManagingOrganization.Identifier.System' action='set' disabled='1' />
<assign value='source.rManagingOrganizationId.rOrganizationTypeId.CB.Code' property='target.ManagingOrganization.Identifier.Type.Coding.Code' action='set' disabled='1' />
<assign value='source.rManagingOrganizationId.rOrganizationTypeId.CB.Display' property='target.ManagingOrganization.Identifier.Type.Coding.Display' action='set' disabled='1' />
<assign value='source.rManagingOrganizationId.rOrganizationTypeId.CB.Display' property='target.ManagingOrganization.Identifier.Type.Text' action='set' disabled='1' />
<if condition='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "MaritalStatus",source.rMaritalStatusId.CB.Code) &apos;= ""' >
<true>
<assign value='source.rMaritalStatusId.CB.Display' property='target.MaritalStatus.Text' action='set' />
<assign value='##class(FHIR.DTLFunctions).GetResourceSystemFromName("MaritalStatus")' property='target.MaritalStatus.Coding.(1).System' action='set' />
<assign value='source.rMaritalStatusId.CB.Display' property='target.MaritalStatus.Coding.(1).Display' action='set' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "MaritalStatus",source.rMaritalStatusId.CB.Code)' property='target.MaritalStatus.Coding.(1).Code' action='set' />
</true>
</if>
<foreach property='source.rMasterConsumerPhotos.(k1)' key='k1' >
<assign value='source.rMasterConsumerPhotos.(k1).Attachment.Data' property='target.Photo.(k1).Data' action='set' />
<assign value='source.rMasterConsumerPhotos.(k1).Attachment.Uri' property='target.Photo.(k1).URL' action='set' />
<assign value='source.rMasterConsumerPhotos.(k1).Attachment.Size' property='target.Photo.(k1).Size' action='set' />
<assign value='source.rMasterConsumerPhotos.(k1).Attachment.Hash' property='target.Photo.(k1).Hash' action='set' />
<assign value='source.rMasterConsumerPhotos.(k1).Attachment.Title' property='target.Photo.(k1).Title' action='set' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "CommonLanguages", source.rMasterConsumerPhotos.(k1).rLanguageId.CB.Code)' property='target.Photo.(k1).Language' action='set' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "AttachmentTypes", source.rMasterConsumerPhotos.(k1).rAttachmentTypeId.MimeType)' property='target.Photo.(k1).ContentType' action='set' />
<assign value='source.rMasterConsumerPhotos.(k1).AM.CreatedDateTime' property='target.Photo.(k1).Creation' action='set' />
</foreach>
<foreach property='source.rMasterConsumerAddresses.(k1)' key='k1' >
<assign value='##class(FHIR.Address).%New()' property='target.Address.(k1)' action='set' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "AddressType",source.rMasterConsumerAddresses.(k1).rAddressTypeId.CB.Code)' property='target.Address.(k1).Type' action='set' />
<if condition='source.rMasterConsumerAddresses.(k1).rCountryId&apos;=""' >
<true>
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeFromIDMap(target.System, target.SystemVersion, "CountryCodes",source.rMasterConsumerAddresses.(k1).rCountryId.%Id())' property='target.Address.(k1).Country' action='set' />
</true>
</if>
<assign value='source.rMasterConsumerAddresses.(k1).Address.Line1' property='target.Address.(k1).Line.(1)' action='set' />
<assign value='source.rMasterConsumerAddresses.(k1).Address.Line2' property='target.Address.(k1).Line.(2)' action='set' />
<if condition='source.rMasterConsumerAddresses.(k1).Address.ActivePeriod.StartDate&apos;=""' >
<true>
<assign value='$ZD(source.rMasterConsumerAddresses.(k1).Address.ActivePeriod.StartDate,3)' property='target.Address.(k1).Period.Start' action='set' />
</true>
</if>
<if condition='source.rMasterConsumerAddresses.(k1).Address.ActivePeriod.EndDate&apos;=""' >
<true>
<assign value='$ZD(source.rMasterConsumerAddresses.(k1).Address.ActivePeriod.EndDate,3)' property='target.Address.(k1).Period.End' action='set' />
</true>
</if>
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "AddressUse",source.rMasterConsumerAddresses.(k1).rAddressUseId.CB.Code)' property='target.Address.(k1).Use' action='set' />
<assign value='source.rMasterConsumerAddresses.(k1).Address.City' property='target.Address.(k1).City' action='set' />
<assign value='source.rMasterConsumerAddresses.(k1).Address.Province' property='target.Address.(k1).State' action='set' />
<assign value='source.rMasterConsumerAddresses.(k1).Address.Suburb' property='target.Address.(k1).District' action='set' />
<assign value='source.rMasterConsumerAddresses.(k1).Address.PostalCode' property='target.Address.(k1).PostalCode' action='set' />
<assign value='source.rMasterConsumerAddresses.(k1).Address.Text' property='target.Address.(k1).Text' action='set' />
<assign value='1' property='tAddressExtCount' action='set' />
<if condition='source.rMasterConsumerAddresses.(k1).rAddressCategoryId &apos;= ""' >
<true>
<assign value='tAddressExtCount + 1' property='tAddressExtCount' action='set' />
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("AddressCategory")' property='target.Address.(k1).Extension.(1).Url' action='set' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "AddressCategory",source.rMasterConsumerAddresses.(k1).rAddressCategoryId.CB.Code)' property='target.Address.(k1).Extension.(1).ValueCode' action='set' />
</true>
</if>
<if condition='source.rMasterConsumerAddresses.(k1).IsMaster = 1' >
<true>
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("IsMaster")' property='target.Address.(k1).Extension.(tAddressExtCount).Url' action='set' />
<assign value='1' property='target.Address.(k1).Extension.(tAddressExtCount).ValueBoolean' action='set' />
</true>
</if>
</foreach>
<foreach property='source.rMasterConsumerNames.(k1)' key='k1' >
<if condition='source.rMasterConsumerNames.(k1).IsMaster = 1' >
<true>
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("IsMaster")' property='target.Name.(k1).Extension.(1).Url' action='set' />
<assign value='1' property='target.Name.(k1).Extension.(1).ValueBoolean' action='set' />
</true>
</if>
<assign value='source.rMasterConsumerNames.(k1).HumanName.Text' property='target.Name.(k1).Text' action='set' />
<assign value='source.rMasterConsumerNames.(k1).HumanName.Family' property='target.Name.(k1).Family' action='set' />
<assign value='source.rMasterConsumerNames.(k1).HumanName.Prefix' property='target.Name.(k1).Prefix.(1)' action='set' />
<assign value='source.rMasterConsumerNames.(k1).HumanName.Suffix' property='target.Name.(k1).Suffix.(1)' action='set' />
<assign value='source.rMasterConsumerNames.(k1).rNameUseId.CB.Code' property='target.Name.(k1).Use' action='set' />
<if condition='source.rMasterConsumerNames.(k1).ActivePeriod.StartDate&apos;=""' >
<true>
<assign value='$ZD(source.rMasterConsumerNames.(k1).ActivePeriod.StartDate,3)' property='target.Name.(k1).Period.Start' action='set' />
</true>
</if>
<if condition='source.rMasterConsumerNames.(k1).ActivePeriod.EndDate&apos;=""' >
<true>
<assign value='$ZD(source.rMasterConsumerNames.(k1).ActivePeriod.EndDate,3)' property='target.Name.(k1).Period.End' action='set' />
</true>
</if>
<foreach property='source.rMasterConsumerNames.(k1).rMasterConsumerGivenNames.(k2)' key='k2' >
<assign value='source.rMasterConsumerNames.(k1).rMasterConsumerGivenNames.(k2).GivenName.Name' property='target.Name.(k1).Given.(k2)' action='set' />
</foreach>
</foreach>
<foreach property='source.rMasterConsumerCommunications.(k1)' key='k1' >
<assign value='source.rMasterConsumerCommunications.(k1).rLanguageId.CB.Display' property='target.Communication.(k1).Language.Text' action='set' />
<assign value='source.rMasterConsumerCommunications.(k1).rLanguageId.CB.Code' property='target.Communication.(k1).Language.Coding.(1).Code' action='set' />
<assign value='##class(FHIR.DTLFunctions).GetResourceSystemFromName("CommonLanguages")' property='target.Communication.(k1).Language.Coding.(1).System' action='set' />
<assign value='source.rMasterConsumerCommunications.(k1).rLanguageId.CB.Display' property='target.Communication.(k1).Language.Coding.(1).Display' action='set' />
</foreach>
<foreach property='source.rMasterConsumerContacts.(k1)' key='k1' >
<assign value='source.rMasterConsumerContacts.(k1).HumanName.Text' property='target.Contact.(k1).Name.Text' action='set' />
<assign value='source.rMasterConsumerContacts.(k1).HumanName.Family' property='target.Contact.(k1).Name.Family' action='set' />
<assign value='source.rMasterConsumerContacts.(k1).HumanName.Prefix' property='target.Contact.(k1).Name.Prefix.(1)' action='set' />
<assign value='source.rMasterConsumerContacts.(k1).HumanName.Suffix' property='target.Contact.(k1).Name.Suffix.(1)' action='set' />
<if condition='source.rMasterConsumerContacts.(k1).ActivePeriod.StartDate&apos;=""' >
<true>
<assign value='$ZD(source.rMasterConsumerContacts.(k1).ActivePeriod.StartDate,3)' property='target.Contact.(k1).Period.Start' action='set' />
</true>
</if>
<if condition='source.rMasterConsumerContacts.(k1).ActivePeriod.EndDate&apos;=""' >
<true>
<assign value='$ZD(source.rMasterConsumerContacts.(k1).ActivePeriod.EndDate,3)' property='target.Contact.(k1).Period.End' action='set' />
</true>
</if>
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "Gender",source.rMasterConsumerContacts.(k1).rGenderId.CB.Code)' property='target.Contact.(k1).Gender' action='set' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "AddressUse",source.rMasterConsumerContacts.(k1).rAddressUseId.CB.Code)' property='target.Contact.(k1).Address.Use' action='set' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "AddressType",source.rMasterConsumerContacts.(k1).rAddressTypeId.CB.Code)' property='target.Contact.(k1).Address.Type' action='set' />
<assign value='source.rMasterConsumerContacts.(k1).Address.Text' property='target.Contact.(k1).Address.Text' action='set' />
<assign value='source.rMasterConsumerContacts.(k1).Address.Line1' property='target.Contact.(k1).Address.Line.(1)' action='set' />
<assign value='source.rMasterConsumerContacts.(k1).Address.Line2' property='target.Contact.(k1).Address.Line.(2)' action='set' />
<assign value='source.rMasterConsumerContacts.(k1).Address.City' property='target.Contact.(k1).Address.City' action='set' />
<assign value='source.rMasterConsumerContacts.(k1).Address.Province' property='target.Contact.(k1).Address.State' action='set' />
<assign value='source.rMasterConsumerContacts.(k1).Address.Suburb' property='target.Contact.(k1).Address.District' action='set' />
<assign value='source.rMasterConsumerContacts.(k1).Address.PostalCode' property='target.Contact.(k1).Address.PostalCode' action='set' />
<if condition='source.rMasterConsumerContacts.(k1).rCountryId&apos;=""' >
<true>
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeFromIDMap(target.System, target.SystemVersion, "CountryCodes",source.rMasterConsumerContacts.(k1).rCountryId.%Id())' property='target.Contact.(k1).Address.Country' action='set' />
</true>
</if>
<if condition='source.rMasterConsumerContacts.(k1).Address.ActivePeriod.StartDate&apos;=""' >
<true>
<assign value='$ZD(source.rMasterConsumerContacts.(k1).Address.ActivePeriod.StartDate,3)' property='target.Contact.(k1).Address.Period.Start' action='set' />
</true>
</if>
<if condition='source.rMasterConsumerContacts.(k1).Address.ActivePeriod.EndDate&apos;=""' >
<true>
<assign value='$ZD(source.rMasterConsumerContacts.(k1).Address.ActivePeriod.EndDate,3)' property='target.Contact.(k1).Address.Period.End' action='set' />
</true>
</if>
<if condition='source.rMasterConsumerContacts.(k1).rAddressCategoryId &apos;= ""' >
<true>
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("AddressCategory")' property='target.Contact.(k1).Address.Extension.(1).Url' action='set' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "AddressCategory",source.rMasterConsumerContacts.(k1).rAddressCategoryId.CB.Code)' property='target.Contact.(k1).Address.Extension.(1).ValueCode' action='set' />
</true>
</if>
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "NameUse",source.rMasterConsumerContacts.(k1).rNameUseId.CB.Code)' property='target.Contact.(k1).Name.Use' action='set' />
<foreach property='source.rMasterConsumerContacts.(k1).rMasterConsumerContactGivenNames.(k2)' key='k2' >
<assign value='source.rMasterConsumerContacts.(k1).rMasterConsumerContactGivenNames.(k2).GivenName.Name' property='target.Contact.(k1).Name.Given.(k2)' action='set' />
</foreach>
<foreach property='source.rMasterConsumerContacts.(k1).rMasterContactContactRoles.(k2)' key='k2' >
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "ContactRoles",source.rMasterConsumerContacts.(k1).rMasterContactContactRoles.(k2).rContactRoleId.CB.Code)' property='target.Contact.(k1).Relationship.(k2).Coding.(1).Code' action='set' />
<assign value='##class(FHIR.DTLFunctions).GetResourceSystemFromName("ContactRoles")' property='target.Contact.(k1).Relationship.(k2).Coding.(1).System' action='set' />
<assign value='source.rMasterConsumerContacts.(k1).rMasterContactContactRoles.(k2).rContactRoleId.CB.Display' property='target.Contact.(k1).Relationship.(k2).Coding.(1).Display' action='set' />
<assign value='source.rMasterConsumerContacts.(k1).rMasterContactContactRoles.(k2).rContactRoleId.CB.Display' property='target.Contact.(k1).Relationship.(k2).Text' action='set' />
</foreach>
<assign value='source.rMasterConsumerContacts.(k1).rOrganizationId.Name' property='target.Contact.(k1).Organization.Display' action='set' />
<assign value='tURL_"/Organization/"_##class(EMCI.SystemStandards.SystemCodes).OrganizationLookup(source.rMasterConsumerContacts.(k1).rOrganizationId.Name)' property='target.Contact.(k1).Organization.Reference' action='set' />
<assign value='source.rMasterConsumerContacts.(k1).rOrganizationId.IdentifierValue' property='target.Contact.(k1).Organization.Identifier.Value' action='set' disabled='1' />
<assign value='source.rMasterConsumerContacts.(k1).rOrganizationId.Name' property='target.Contact.(k1).Organization.Identifier.Label' action='set' disabled='1' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "NamingSystem",source.rMasterConsumerContacts.(k1).rOrganizationId.rIdentifierNamingSystemId.Name)' property='target.Contact.(k1).Organization.Identifier.System' action='set' disabled='1' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "IdentifierType",source.rMasterConsumerContacts.(k1).rOrganizationId.rOrganizationTypeId.CB.Code)' property='target.Contact.(k1).Organization.Identifier.Type.Coding.Code' action='set' disabled='1' />
<assign value='source.rMasterConsumerContacts.(k1).rOrganizationId.rOrganizationTypeId.CB.Display' property='target.Contact.(k1).Organization.Identifier.Type.Coding.Display' action='set' disabled='1' />
<assign value='source.rMasterConsumerContacts.(k1).rOrganizationId.rOrganizationTypeId.CB.Display' property='target.Contact.(k1).Organization.Identifier.Type.Text' action='set' disabled='1' />
<foreach property='source.rMasterConsumerContacts.(k1).rMasterConsumerContactContactPoints.(k2)' key='k2' >
<assign value='source.rMasterConsumerContacts.(k1).rMasterConsumerContactContactPoints.(k2).ContactPoint.Value' property='target.Contact.(k1).Telecom.(k2).Value' action='set' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "ContactPointTechnology",source.rMasterConsumerContacts.(k1).rMasterConsumerContactContactPoints.(k2).rTechnologyId.CB.Code)' property='target.Contact.(k1).Telecom.(k2).System' action='set' />
<if condition='source.rMasterConsumerContacts.(k1).rMasterConsumerContactContactPoints.(k2).ActivePeriod.StartDate&apos;=""' >
<true>
<assign value='$ZD(source.rMasterConsumerContacts.(k1).rMasterConsumerContactContactPoints.(k2).ActivePeriod.StartDate,3)' property='target.Contact.(k1).Telecom.(k2).Period.Start' action='set' />
</true>
</if>
<if condition='source.rMasterConsumerContacts.(k1).rMasterConsumerContactContactPoints.(k2).ActivePeriod.EndDate&apos;=""' >
<true>
<assign value='$ZD(source.rMasterConsumerContacts.(k1).rMasterConsumerContactContactPoints.(k2).ActivePeriod.EndDate,3)' property='target.Contact.(k1).Telecom.(k2).Period.End' action='set' />
</true>
</if>
<assign value='source.rMasterConsumerContacts.(k1).rMasterConsumerContactContactPoints.(k2).ContactPoint.Rank' property='target.Contact.(k1).Telecom.(k2).Rank' action='set' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "ContactPointUse",source.rMasterConsumerContacts.(k1).rMasterConsumerContactContactPoints.(k2).rContactPointUseId.CB.Code)' property='target.Contact.(k1).Telecom.(k2).Use' action='set' />
</foreach>
<assign value='source.rMasterConsumerContacts.(k1).Comment' property='target.Contact.(k1).Extension.(1).ValueString' action='set' />
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("Comment")' property='target.Contact.(k1).Extension.(1).Url' action='set' />
<assign value='source.rMasterConsumerContacts.(k1).EmployerName' property='target.Contact.(k1).Extension.(2).ValueString' action='set' />
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("EmployerName")' property='target.Contact.(k1).Extension.(2).Url' action='set' />
<assign value='3' property='tContactExtCount' action='set' />
<if condition='source.rMasterConsumerContacts.(k1).rRelationshipId&apos;=""' >
<true>
<assign value='tContactExtCount+1' property='tContactExtCount' action='set' />
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("Relationship")' property='target.Contact.(k1).Extension.(3).Url' action='set' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "Relationship",source.rMasterConsumerContacts.(k1).rRelationshipId.CB.Code)' property='target.Contact.(k1).Extension.(3).ValueCode' action='set' />
</true>
</if>
<if condition='source.rMasterConsumerContacts.(k1).IsMaster=1' >
<true>
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("IsMaster")' property='target.Contact.(k1).Extension.(tContactExtCount).Url' action='set' />
<assign value='1' property='target.Contact.(k1).Extension.(tContactExtCount).ValueBoolean' action='set' />
</true>
</if>
</foreach>
<assign value='0' property='tIDCount ' action='set' />
<foreach property='source.rMasterConsumerIdentifiers.(k1)' key='k1' >
<assign value='tIDCount+1' property='tIDCount' action='set' />
<assign value='source.rMasterConsumerIdentifiers.(k1).IdentifierValue' property='target.Identifier.(k1).Value' action='set' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "IdentifierUse",source.rMasterConsumerIdentifiers.(k1).rIdentifierUseId.CB.Code)' property='target.Identifier.(k1).Use' action='set' />
<assign value='tURL_"/NamingSystem/"_##class(EMCI.SystemStandards.SystemCodes).NamingSystemLookup(source.rMasterConsumerIdentifiers.(k1).rNamingSystemId.Name)' property='target.Identifier.(k1).System' action='set' />
<assign value='##class(FHIR.Type).%New()' property='target.Identifier.(k1).Type' action='set' />
<assign value='##class(FHIR.Coding).%New()' property='target.Identifier.(k1).Type.Coding.(1)' action='set' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "IdentifierType",source.rMasterConsumerIdentifiers.(k1).rIdentifierTypeId.CB.Code)' property='target.Identifier.(k1).Type.Coding.(1).Code' action='set' />
<assign value='source.rMasterConsumerIdentifiers.(k1).rIdentifierTypeId.CB.Display' property='target.Identifier.(k1).Type.Coding.(1).Display' action='set' />
<assign value='##class(FHIR.DTLFunctions).GetResourceSystemFromName("IdentifierType")' property='target.Identifier.(k1).Type.Coding.(1).System' action='set' />
<assign value='source.rMasterConsumerIdentifiers.(k1).rIdentifierTypeId.CB.Display' property='target.Identifier.(k1).Type.Text' action='set' />
<if condition='source.rMasterConsumerIdentifiers.(k1).Activeperiod.StartDate&apos;=""' >
<true>
<assign value='$ZD(source.rMasterConsumerIdentifiers.(k1).Activeperiod.StartDate,3)' property='target.Identifier.(k1).Period.Start' action='set' />
</true>
</if>
<if condition='source.rMasterConsumerIdentifiers.(k1).Activeperiod.EndDate&apos;=""' >
<true>
<assign value='$ZD(source.rMasterConsumerIdentifiers.(k1).Activeperiod.EndDate,3)' property='target.Identifier.(k1).Period.End' action='set' />
</true>
</if>
<assign value='source.rMasterConsumerIdentifiers.(k1).rOrganizationId.IdentifierValue' property='target.Identifier.(k1).Assigner.Identifier.Value' action='set' disabled='1' />
<assign value='source.rMasterConsumerIdentifiers.(k1).rOrganizationId.Name' property='target.Identifier.(k1).Assigner.Display' action='set' />
<assign value='tURL_"/Organization/"_##class(EMCI.SystemStandards.SystemCodes).OrganizationLookup(source.rMasterConsumerIdentifiers.(k1).rOrganizationId.Name)' property='target.Identifier.(k1).Assigner.Reference' action='set' />
<assign value='source.rMasterConsumerIdentifiers.(k1).rOrganizationId.Name' property='target.Identifier.(k1).Assigner.Identifier.Label' action='set' disabled='1' />
</foreach>
<assign value='tIDCount' property='k2' action='set' />
<foreach property='source.rMasterConsumerSecondaryIdentifiers.(k1)' key='k1' >
<assign value='k2+1' property='k2' action='set' />
<assign value='source.rMasterConsumerSecondaryIdentifiers.(k1).IdentifierValue' property='target.Identifier.(k2).Value' action='set' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "IdentifierUse",source.rMasterConsumerSecondaryIdentifiers.(k1).rIdentifierUseId.CB.Code)' property='target.Identifier.(k2).Use' action='set' />
<assign value='tURL_"/NamingSystem/"_##class(EMCI.SystemStandards.SystemCodes).NamingSystemLookup(source.rMasterConsumerSecondaryIdentifiers.(k1).rNamingSystemId.Name)' property='target.Identifier.(k2).System' action='set' />
<assign value='##class(FHIR.Type).%New()' property='target.Identifier.(k2).Type' action='set' />
<assign value='##class(FHIR.Coding).%New()' property='target.Identifier.(k2).Type.Coding.(1)' action='set' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "IdentifierType",source.rMasterConsumerSecondaryIdentifiers.(k1).rIdentifierTypeId.CB.Code)' property='target.Identifier.(k2).Type.Coding.(1).Code' action='set' />
<assign value='source.rMasterConsumerSecondaryIdentifiers.(k1).rIdentifierTypeId.CB.Display' property='target.Identifier.(k2).Type.Coding.(1).Display' action='set' />
<assign value='##class(FHIR.DTLFunctions).GetResourceSystemFromName("IdentifierType")' property='target.Identifier.(k2).Type.Coding.(1).System' action='set' />
<assign value='source.rMasterConsumerSecondaryIdentifiers.(k1).rIdentifierTypeId.CB.Display' property='target.Identifier.(k2).Type.Text' action='set' />
<if condition='source.rMasterConsumerSecondaryIdentifiers.(k1).Activeperiod.StartDate&apos;=""' >
<true>
<assign value='$ZD(source.rMasterConsumerSecondaryIdentifiers.(k1).Activeperiod.StartDate,3)' property='target.Identifier.(k2).Period.Start' action='set' />
</true>
</if>
<if condition='source.rMasterConsumerSecondaryIdentifiers.(k1).Activeperiod.EndDate&apos;=""' >
<true>
<assign value='$ZD(source.rMasterConsumerSecondaryIdentifiers.(k1).Activeperiod.EndDate,3)' property='target.Identifier.(k2).Period.End' action='set' />
</true>
</if>
<assign value='source.rMasterConsumerSecondaryIdentifiers.(k1).rOrganizationId.Name' property='target.Identifier.(k2).Assigner.Display' action='set' />
<assign value='tURL_"/Organization/"_##class(EMCI.SystemStandards.SystemCodes).OrganizationLookup(source.rMasterConsumerSecondaryIdentifiers.(k1).rOrganizationId.Name)' property='target.Identifier.(k2).Assigner.Reference' action='set' />
</foreach>
<foreach property='source.rMasterConsumerContactPoints.(k1)' key='k1' >
<assign value='source.rMasterConsumerContactPoints.(k1).ContactPoint.Value' property='target.Telecom.(k1).Value' action='set' />
<if condition='source.rMasterConsumerContactPoints.(k1).ActivePeriod.StartDate&apos;=""' >
<true>
<assign value='$ZD(source.rMasterConsumerContactPoints.(k1).ActivePeriod.StartDate,3)' property='target.Telecom.(k1).Period.Start' action='set' />
</true>
</if>
<if condition='source.rMasterConsumerContactPoints.(k1).ActivePeriod.EndDate&apos;=""' >
<true>
<assign value='$ZD(source.rMasterConsumerContactPoints.(k1).ActivePeriod.EndDate,3)' property='target.Telecom.(k1).Period.End' action='set' />
</true>
</if>
<assign value='source.rMasterConsumerContactPoints.(k1).ContactPoint.Rank' property='target.Telecom.(k1).Rank' action='set' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "ContactPointTechnology",source.rMasterConsumerContactPoints.(k1).rTechnologyId.CB.Code)' property='target.Telecom.(k1).System' action='set' />
<assign value='##class(EMCI.SystemStandards.SystemCodes).LookupExternalCodeMap(target.System, target.SystemVersion, "ContactPointUse",source.rMasterConsumerContactPoints.(k1).rContactPointUseId.CB.Code)' property='target.Telecom.(k1).Use' action='set' />
<if condition='source.rMasterConsumerContactPoints.(k1).IsMaster = 1' >
<true>
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("IsMaster")' property='target.Telecom.(k1).Extension.(1).Url ' action='set' />
<assign value='1' property='target.Telecom.(k1).Extension.(1).ValueBoolean' action='set' />
</true>
</if>
</foreach>
<if condition='source.GeneralPractitionerUrl&apos;=""' disabled='1' >
<true>
<assign value='source.GeneralPractitionerIdentifier' property='target.GeneralPractitioner.(1).Display' action='set' />
<assign value='source.GeneralPractitionerUrl' property='target.GeneralPractitioner.(1).Reference' action='set' />
</true>
</if>
<assign value='0' property='LinkCounter' action='set' />
<foreach property='source.rMasterConsumerLinkedToConsumers1.(k1)' key='k1' >
<assign value='LinkCounter+1' property='LinkCounter' action='set' />
<assign value='tURL_"/Patient/"_source.rMasterConsumerLinkedToConsumers1.(k1).rLinkedToConsumerId.EMCIUId' property='target.Link.(LinkCounter).Other.Reference' action='set' />
<if condition='$IsObject(source.rMasterConsumerLinkedToConsumers1.(k1).rLinkedToConsumerId.rMasterConsumerNames.(1))=1' >
<true>
<assign value='source.rMasterConsumerLinkedToConsumers1.(k1).rLinkedToConsumerId.rMasterConsumerNames.(1).HumanName.Text_" "_source.rMasterConsumerLinkedToConsumers1.(k1).rLinkedToConsumerId.rMasterConsumerNames.(1).HumanName.Family' property='target.Link.(LinkCounter).Other.Display' action='set' />
</true>
</if>
<assign value='"refer"' property='target.Link.(LinkCounter).Type' action='set' />
<assign value='##class(FHIR.DTLFunctions).GetExtURLFromName("Relationship")' property='target.Link.(LinkCounter).Extension.Url' action='set' />
<assign value='source.rMasterConsumerLinkedToConsumers1.(k1).rRelationShipId.CB.Code' property='target.Link.(LinkCounter).Extension.ValueCode' action='set' />
</foreach>
<foreach property='source.rMasterConsumerReplacesConsumer1.(k1)' key='k1' >
<assign value='LinkCounter+1' property='LinkCounter' action='set' />
<assign value='tURL_"/Patient/"_source.rMasterConsumerReplacesConsumer1.(k1).rReplacesConsumerId.EMCIUId' property='target.Link.(LinkCounter).Other.Reference' action='set' />
<if condition='$IsObject(source.rMasterConsumerReplacesConsumer1.(k1).rReplacesConsumerId.rMasterConsumerNames.(1).HumanName)=1'>
<true>
<assign value='source.rMasterConsumerReplacesConsumer1.(k1).rReplacesConsumerId.rMasterConsumerNames.(1).HumanName.Text_" "_source.rMasterConsumerReplacesConsumer1.(k1).rReplacesConsumerId.rMasterConsumerNames.(1).HumanName.Family' property='target.Link.(LinkCounter).Other.Display' action='set' />
</true>
</if>
<assign value='"replaces"' property='target.Link.(k1).Type' action='set' />
</foreach>
</transform>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.Transformations.PatientToHL7ADT.AUX">
<Description>
The AUX class is a mechanism to pass data into a DTL that cannot be sourced from the DTL Source Class
It is passed to the DTL Transform Method as the third parameter in the Method signature</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%Persistent</Super>
<TimeChanged>65825,72022.399726</TimeChanged>
<TimeCreated>65454,6882.009348</TimeCreated>

<Property name="HL7MessageCode">
<Type>%String</Type>
</Property>

<Property name="HL7TriggerEvent">
<Type>%String</Type>
</Property>

<Property name="HL7MessageStructure">
<Type>%String</Type>
</Property>

<Property name="ReceivingApplication">
<Type>%String</Type>
</Property>

<Property name="ReceivingFacility">
<Type>%String</Type>
</Property>

<Property name="SendingApplication">
<Type>%String</Type>
</Property>

<Property name="SendingFacility">
<Type>%String</Type>
</Property>

<Property name="VisitType">
<Type>%String</Type>
</Property>

<Property name="EventTS">
<Type>%String</Type>
</Property>

<Property name="DischargeTS">
<Type>%String</Type>
</Property>

<Property name="FacilityCode">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Common.Transformat7FB9.AUXD</DataLocation>
<DefaultData>AUXDefaultData</DefaultData>
<IdLocation>^Robot.Common.Transformat7FB9.AUXD</IdLocation>
<IndexLocation>^Robot.Common.Transformat7FB9.AUXI</IndexLocation>
<StreamLocation>^Robot.Common.Transformat7FB9.AUXS</StreamLocation>
<Data name="AUXDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>HL7MessageCode</Value>
</Value>
<Value name="3">
<Value>HL7TriggerEvent</Value>
</Value>
<Value name="4">
<Value>HL7MessageStructure</Value>
</Value>
<Value name="5">
<Value>ReceivingApplication</Value>
</Value>
<Value name="6">
<Value>ReceivingFacility</Value>
</Value>
<Value name="7">
<Value>SendingApplication</Value>
</Value>
<Value name="8">
<Value>SendingFacility</Value>
</Value>
<Value name="9">
<Value>VisitType</Value>
</Value>
<Value name="10">
<Value>EventTS</Value>
</Value>
<Value name="11">
<Value>DischargeTS</Value>
</Value>
<Value name="12">
<Value>FacilityCode</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Common.Transformations.PatientToHL7ADT">
<IncludeCode>DFIInclude</IncludeCode>
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65825,72963.941366</TimeChanged>
<TimeCreated>65464,20870.10938</TimeCreated>
<DependsOn>DW.Modules.Pmi.Patient,EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='DW.Modules.Pmi.Patient' targetClass='EnsLib.HL7.Message' targetDocType='2.5:ADT_A01' create='new' language='objectscript' >
<assign value='aux.ReceivingApplication' property='target.{MSH:ReceivingApplication.NamespaceID}' action='set' />
<assign value='aux.ReceivingFacility' property='target.{MSH:ReceivingFacility.NamespaceID}' action='set' />
<assign value='aux.SendingFacility' property='target.{MSH:SendingFacility}' action='set' />
<assign value='aux.SendingApplication' property='target.{MSH:SendingApplication.NamespaceID}' action='set' />
<assign value='..Translate($ZDatetime($Horolog,3),"- :")' property='target.{MSH:MessageControlID}' action='set' />
<assign value='$Translate(..CurrentDateTime(),":- ","")' property='target.{MSH:DateTimeOfMessage.Time}' action='set' />
<assign value='aux.HL7MessageCode' property='target.{MSH:MessageType.MessageCode}' action='set' />
<assign value='aux.HL7TriggerEvent' property='target.{MSH:MessageType.TriggerEvent}' action='set' />
<assign value='aux.HL7MessageStructure' property='target.{MSH:MessageType.MessageStructure}' action='set' />
<assign value='"P"' property='target.{MSH:ProcessingID.ProcessingID}' action='set' />
<assign value='"2.5.1"' property='target.{MSH:VersionID.VersionID}' action='set' />
<assign value='"AL"' property='target.{MSH:AcceptAcknowledgmentType}' action='set' />
<assign value='"AL"' property='target.{MSH:ApplicationAcknowledgmentTyp}' action='set' />
<assign value='1' property='tCounter' action='set' />
<assign value='$$$GetHPRNfromHID(source.UniqueIdentity.HID)' property='target.{PID:PatientIdentifierList(tCounter).IDNumber}' action='set' />
<assign value='"DOH"' property='target.{PID:PatientIdentifierList(tCounter).AssigningAuthority.NamespaceID}' action='set' />
<assign value='"www.health.gov.za"' property='target.{PID:PatientIdentifierList(tCounter).AssigningAuthority.UniversalID}' action='set' />
<assign value='"DNS"' property='target.{PID:PatientIdentifierList(tCounter).AssigningAuthority.UniversalIDType}' action='set' />
<assign value='"NH"' property='target.{PID:PatientIdentifierList(tCounter).IdentifierTypeCode}' action='set' />
<assign value='tCounter+1' property='tCounter' action='set' />
<assign value='source.Person.SAIDNo' property='target.{PID:PatientIdentifierList(tCounter).IDNumber}' action='set' />
<assign value='"DHA"' property='target.{PID:PatientIdentifierList(tCounter).AssigningAuthority.NamespaceID}' action='set' />
<assign value='"NNZAF"' property='target.{PID:PatientIdentifierList(tCounter).IdentifierTypeCode}' action='set' />
<assign value='tCounter+1' property='tCounter' action='set' />
<if condition='source.Person.PassportNo&apos;=""' >
<true>
<assign value='source.Person.PassportNo' property='target.{PID:PatientIdentifierList(tCounter).IDNumber}' action='set' />
<assign value='"FOREIGN_GOVT"' property='target.{PID:PatientIdentifierList(tCounter).AssigningAuthority.NamespaceID}' action='set' />
<assign value='"PPN"' property='target.{PID:PatientIdentifierList(tCounter).IdentifierTypeCode}' action='set' />
</true>
</if>
<assign value='$$$GetSurname(source.Person.Surname)' property='target.{PID:PatientName(1).FamilyName.Surname}' action='set' />
<assign value='$$$GetGivenName(source.Person.Name)' property='target.{PID:PatientName(1).GivenName}' action='set' />
<assign value='$Select($Length($$$GetGivenNameOther(source.Person.Name)):$$$GetGivenNameOther(source.Person.Name),1:"")_$Select($Length(source.Person.CallName):" "_$$$GetGivenName(source.Person.CallName),1:"")_$Select($Length($$$GetGivenNameOther(source.Person.CallName)):" "_$$$GetGivenNameOther(source.Person.CallName),1:"")' property='target.{PID:PatientName(1).SecondandFurtherGivenNamesor}' action='set' />
<assign value='source.Person.Title' property='target.{PID:PatientName(1).Prefix}' action='set' />
<assign value='"L"' property='target.{PID:PatientName(1).NameTypeCode}' action='set' />
<assign value='source.Person.mfReligion.Code' property='target.{PID:Religion.Identifier}' action='set' />
<if condition='source.Person.MaidenSurname&apos;=""' >
<true>
<assign value='$Translate(source.Person.MaidenSurname,",&amp;"," ")' property='target.{PID:PatientName(2).FamilyName.Surname}' action='set' />
<assign value='"M"' property='target.{PID:PatientName(2).NameTypeCode}' action='set' />
</true>
</if>
<assign value='$ZStrip(source.Person.mfReligion.Description,"&lt;&gt;W")' property='target.{PID:Religion.Text}' action='set' />
<assign value='##class(Robot.Common.CodeTableMappings.HL7GenderTypeMappings).GetHL7GenderCode(source.Person.MfGenderRel.Key)' property='target.{PID:AdministrativeSex}' action='set' />
<assign value='##class(Robot.Common.CodeTableMappings.HL7MaritalStatusMappings).GetHL7MaritalStatusCode(source.Person.mfMaritalStatus.Code)' property='target.{PID:MaritalStatus.Identifier}' action='set' />
<assign value='##class(Robot.Common.CodeTableMappings.HL7MaritalStatusMappings).GetHL7MaritalStatusDescription(source.Person.mfMaritalStatus.Code)' property='target.{PID:MaritalStatus.Text}' action='set' />
<assign value='source.Person.mfEthnicGroup.Code' property='target.{PID:EthnicGroup(1).Identifier}' action='set' />
<assign value='$ZStrip(source.Person.mfEthnicGroup.Description,"&lt;&gt;W")' property='target.{PID:EthnicGroup(1).Text}' action='set' />
<assign value='source.Person.mfNationality.Code' property='target.{PID:Nationality.Identifier}' action='set' />
<assign value='$ZStrip(source.Person.mfNationality.Description,"&lt;&gt;W")' property='target.{PID:Nationality.Text}' action='set' />
<foreach property='source.Person.PersonAddress.(k1)' key='k1' >
<if condition='source.Person.PersonAddress.(k1).mfAddress&apos;=""' >
<true>
<assign value='$$$GetCleanAddress(source.Person.PersonAddress.(k1).mfAddress.AddressLine1)' property='target.{PID:PatientAddress(k1).StreetAddress.StreetorMailingAddress}' action='set' />
<assign value='$$$GetCleanAddress(source.Person.PersonAddress.(k1).mfAddress.AddressLine2)' property='target.{PID:PatientAddress(k1).OtherDesignation}' action='set' />
<assign value='$$$GetCleanAddress(source.Person.PersonAddress.(k1).mfAddress.Suburb)' property='target.{PID:PatientAddress(k1).OtherGeographicDesignation}' action='set' />
<assign value='source.Person.PersonAddress.(k1).mfAddress.City' property='target.{PID:PatientAddress(k1).City}' action='set' />
<assign value='source.Person.PersonAddress.(k1).mfAddress.PostalCode' property='target.{PID:PatientAddress(k1).ZiporPostalCode}' action='set' />
<assign value='source.Person.PersonAddress.(k1).mfAddress.mfProvinceRel.Code' property='target.{PID:PatientAddress(k1).StateorProvince}' action='set' />
<assign value='source.Person.PersonAddress.(k1).mfAddress.mfCountryRel.Code' property='target.{PID:PatientAddress(k1).Country}' action='set' />
</true>
</if>
<if condition='source.Person.PersonAddress.(k1).mfAddressType&apos;=""' >
<true>
<assign value='##class(Robot.Common.CodeTableMappings.HL7AddressTypeMappings).GetHL7AddressTypeCode(source.Person.PersonAddress.(k1).mfAddressType.Code)' property='target.{PID:PatientAddress(k1).AddressType}' action='set' />
</true>
</if>
</foreach>
<assign value='source.Person.mfHomeLanguage.Code' property='target.{PID:PrimaryLanguage.Identifier}' action='set' />
<assign value='$ZStrip(source.Person.mfHomeLanguage.Description,"&lt;&gt;W")' property='target.{PID:PrimaryLanguage.Text}' action='set' />
<if condition='source.Person.UpdateDateTime&apos;=""' >
<true>
<assign value='$Translate(source.Person.UpdateDateTime,":- ","")' property='target.{PID:LastUpdateDateTime}' action='set' />
</true>
</if>
<assign value='source.Person.DeathIndicator' property='target.{PID:PatientDeathIndicator}' action='set' />
<if condition='source.Person.DeathDT&apos;=""' >
<true>
<assign value='$Translate($ZDatetime(source.Person.DeathDT,3),":- ","")' property='target.{PID:PatientDeathDateandTime}' action='set' />
</true>
</if>
<if condition='source.Person.DateOfBirth&apos;=""' >
<true>
<assign value='$Translate($ZDatetime(source.Person.DateOfBirth,3),";- ","")' property='target.{PID:DateTimeofBirth}' action='set' />
</true>
</if>
<assign value='source.Person.mfCountry.Code' property='target.{PID:CountyCode}' action='set' />
<foreach property='source.Person.PersonContactDetails.(k1)' key='k1' >
<assign value='1' property='tHCounter' action='set' />
<assign value='1' property='tBCounter' action='set' />
<if condition='source.Person.PersonContactDetails.(k1).MfContactTypeRel.Code&apos;=""' >
<true>
<if condition='source.Person.PersonContactDetails.(k1).MfContactTypeRel.Code="E"' >
<true>
<if condition='##class(Robot.Common.Utility.Functions).IsValidEmail(source.Person.PersonContactDetails.(k1).ContactValue)&apos;=""' >
<true>
<assign value='##class(Robot.Common.Utility.Functions).IsValidEmail(source.Person.PersonContactDetails.(k1).ContactValue)' property='target.{PID:PhoneNumberHome(tHCounter).EmailAddress}' action='set' />
<assign value='##class(Robot.Common.CodeTableMappings.HL7ContactType).GetHL7ContactTypeCode(source.Person.PersonContactDetails.(k1).MfContactTypeRel.Code)' property='target.{PID:PhoneNumberHome(tHCounter).TelecommunicationUseCode}' action='set' />
<assign value='##class(Robot.Common.CodeTableMappings.HL7ContactType).GetHL7ContactEquipmentTypeCode(source.Person.PersonContactDetails.(k1).MfContactTypeRel.Code)' property='target.{PID:PhoneNumberHome(tHCounter).TelecommunicationEquipmentTy}' action='set' />
<assign value='tHCounter+1' property='tHCounter' action='set' />
</true>
</if>
</true>
</if>
<if condition='"H,M,C"[source.Person.PersonContactDetails.(k1).MfContactTypeRel.Code' >
<true>
<if condition='$$$IsValidTelephone(source.Person.PersonContactDetails.(k1).ContactValue)&apos;=""' >
<true>
<assign value='$$$IsValidTelephone(source.Person.PersonContactDetails.(k1).ContactValue)' property='target.{PID:PhoneNumberHome(tHCounter).TelephoneNumber}' action='set' />
<assign value='##class(Robot.Common.CodeTableMappings.HL7ContactType).GetHL7ContactTypeCode(source.Person.PersonContactDetails.(k1).MfContactTypeRel.Code)' property='target.{PID:PhoneNumberHome(tHCounter).TelecommunicationUseCode}' action='set' />
<assign value='##class(Robot.Common.CodeTableMappings.HL7ContactType).GetHL7ContactEquipmentTypeCode(source.Person.PersonContactDetails.(k1).MfContactTypeRel.Code)' property='target.{PID:PhoneNumberHome(tHCounter).TelecommunicationEquipmentTy}' action='set' />
<assign value='tHCounter+1' property='tHCounter' action='set' />
</true>
</if>
</true>
</if>
<if condition='"F,W"[source.Person.PersonContactDetails.(k1).MfContactTypeRel.Code' >
<true>
<if condition='##class(Robot.Common.Utility.Functions).IsValidTelephone(source.Person.PersonContactDetails.(k1).ContactValue)&apos;=""' >
<true>
<assign value='##class(Robot.Common.Utility.Functions).IsValidTelephone(source.Person.PersonContactDetails.(k1).ContactValue)' property='target.{PID:PhoneNumberBusiness(tBCounter).TelephoneNumber}' action='set' />
<assign value='##class(Robot.Common.CodeTableMappings.HL7ContactType).GetHL7ContactTypeCode(source.Person.PersonContactDetails.(k1).MfContactTypeRel.Code)' property='target.{PID:PhoneNumberBusiness(tBCounter).TelecommunicationUseCode}' action='set' />
<assign value='##class(Robot.Common.CodeTableMappings.HL7ContactType).GetHL7ContactEquipmentTypeCode(source.Person.PersonContactDetails.(k1).MfContactTypeRel.Code)' property='target.{PID:PhoneNumberBusiness(tBCounter).TelecommunicationEquipmentTy}' action='set' />
<assign value='tBCounter+1' property='tBCounter' action='set' />
</true>
</if>
</true>
</if>
</true>
</if>
</foreach>
<if condition='source.NextOfKin&apos;=""' >
<true>
<if condition='$Length(source.NextOfKin.Name)'>
<true>
<assign value='$$$GetNOKGivenName(source.NextOfKin.Name)' property='target.{NK1(1):Name(1).GivenName}' action='set' />
<assign value='$$$GetNOKGivenNameOther(source.NextOfKin.Name)' property='target.{NK1(1):Name(1).SecondandFurtherGivenNamesor}' action='set' />
<assign value='$$$GetNOKSurname(source.NextOfKin.Name)' property='target.{NK1(1):Name(1).FamilyName.Surname}' action='set' />
</true>
</if>
<assign value='source.NextOfKin.mfAddress.City' property='target.{NK1(1):Address(1).City}' action='set' />
<assign value='source.NextOfKin.mfAddress.PostalCode' property='target.{NK1(1):Address(1).ZiporPostalCode}' action='set' />
<assign value='source.NextOfKin.mfAddress.mfProvinceRel.Code' property='target.{NK1(1):Address(1).StateorProvince}' action='set' />
<assign value='source.NextOfKin.mfAddress.mfCountryRel.Code' property='target.{NK1(1):Address(1).Country}' action='set' />
<assign value='source.NextOfKin.mfAddress.smfGenPhysicalAddressTypeRel.Code' property='target.{NK1(1):Address(1).AddressType}' action='set' />
<assign value='$$$GetCleanAddress(source.NextOfKin.mfAddress.AddressLine1)' property='target.{NK1(1):Address(1).StreetAddress.StreetorMailingAddress}' action='set' />
<assign value='$$$GetCleanAddress(source.NextOfKin.mfAddress.AddressLine2)' property='target.{NK1(1):Address(1).OtherDesignation}' action='set' />
<assign value='$$$GetCleanAddress(source.NextOfKin.mfAddress.Suburb)' property='target.{NK1(1):Address(1).OtherGeographicDesignation}' action='set' />
<assign value='##class(Robot.Common.CodeTableMappings.HL7NOKRelationshipMappings).GetHL7NextOfKinRelationshipCode(source.NextOfKin.mfNOKRelationshipRel.Code)' property='target.{NK1(1):Relationship.Identifier}' action='set' />
<assign value='##class(Robot.Common.CodeTableMappings.HL7NOKRelationshipMappings).GetHL7NextOfKinRelationshipDescription(source.NextOfKin.mfNOKRelationshipRel.Code)' property='target.{NK1(1):Relationship.Text}' action='set' />
</true>
</if>
<foreach property='source.PatientAllergy.(k1)' key='k1' >
<assign value='source.PatientAllergy.(k1).mfAllergy.Description' property='target.{AL1(k1):AllergenTypeCode.Text}' action='set' />
<assign value='source.PatientAllergy.(k1).mfAllergy.Code' property='target.{AL1(k1):AllergenTypeCode.Identifier}' action='set' />
</foreach>
<assign value='aux.HL7TriggerEvent' property='target.{EVN:EventTypeCode}' action='set' />
<assign value='aux.EventTS' property='target.{EVN:RecordedDateTime}' action='set' />
<assign value='aux.FacilityCode' property='target.{EVN:EventFacility.NamespaceID}' action='set' />
<assign value='aux.VisitType' property='target.{PV1:PatientClass}' action='set' />
<assign value='aux.EventTS' property='target.{PV1:AdmitDateTime}' action='set' />
<assign value='aux.DischargeTS' property='target.{PV1:DischargeDateTime()}' action='set' />
<assign value='aux.FacilityCode' property='target.{PV1:AssignedPatientLocation.Facility.NamespaceID}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="Robot.Common.Utility.CleanupSet">
<Description>
The methods in this class are intended as an example for remediation of situations where your message classes do not have appropriate delete triggers to clean up after themselves.
Their operation depends on how your class definitions are constructed. They are not able to purge every conceivable class structure.</Description>
<IncludeCode>Ensemble</IncludeCode>
<IncludeGenerator>%occInclude</IncludeGenerator>
<Super>%RegisteredObject</Super>
<TimeChanged>65874,10901.635607</TimeChanged>
<TimeCreated>59262,38857.143</TimeCreated>

<Method name="GetDeepPurgeSet">
<Description>
Caution: this method is intended only for remediation of situations where your message classes do not have appropriate delete triggers to clean up after themselves. Its operation depends on your class definitions and is not able to purge every conceivable class structure. It is up to you to examine and test the operation of this method to verify that it is useful in your environment.
Return an array of all persistent or stream classes referred to as property or collection types in any of the body classes
identified to be purged in the date range given by pDaysToKeep, or in any of their properties' properties, etc.
Also include message headers and identify the range of message ids to be deleted for each class based on pDaysToKeep.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pSet,pDaysToKeep:%Integer=7,pUseIdRange:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pSet  Set SQLCODE=0, tSC=$$$OK
	#; Find the highest header ID that is lower than the given time cutoff
	Set tTopKillHdr="", tDoNotDeleteDate = $$$timeUTCHtoUTC($s($ZTimezone'<0:($H-pDaysToKeep+1)_","_($ZTimezone*60),1:($H-pDaysToKeep)_","_($ztimezone*60+86400)))
	&sql(Select Top 1 ID Into :tTopKillHdr From Ens.MessageHeader Where (TimeCreated < :tDoNotDeleteDate) Order By ID Desc)
	If SQLCODE=100 { Set tTopKillHdr="" }
	ElseIf SQLCODE { Quit $$$ERROR($$$EnsErrGeneral,"Couldn't find DaysToKeep ("_pDaysToKeep_") message header Id in GetMessagePurgeSet, sqlcode="_SQLCODE) }
	Set tSC=..GetBodiesCleanupSet(.pSet,1,tTopKillHdr,pUseIdRange)
	Set:$$$ISOK(tSC) pSet("Ens.MessageHeader")=tTopKillHdr
	Quit tSC
]]></Implementation>
</Method>

<Method name="GetBodiesCleanupSet">
<Description>
Caution: this method is intended only for remediation of situations where your message classes do not have appropriate delete triggers to clean up after themselves. Its operation depends on your class definitions and is not able to purge every conceivable class structure. It is up to you to examine and test the operation of this method to verify that it is useful in your environment.
Return an array of all persistent or stream classes used as message bodies.
If pIncludeProps=1, include persistent or stream classes referred to as property or collection types in any of the body classes, or in any of their properties' properties, etc.
Also note that no cleanup at all is possible if the message body class has a custom IDKEY because we can't depend on these to be allocated sequentially.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pSet,pIncludeProps:%Boolean=1,pTopKillHdr:%Integer="",pUseIdRange:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pSet  Set SQLCODE=0, tSC=$$$OK
	#; Find all the body classes referenced in the target 
	If ""=pTopKillHdr {
		#; No top header Id to kill is given - search them all (The target headers have already been purged; we're relying on the remaining ones to reference the same classes)
		&sql(Declare C1 Cursor For Select %Exact(MessageBodyClassname) Into :tBodyClass From Ens.MessageHeader Group By MessageBodyClassname)
		&sql(OPEN C1) For { &sql(FETCH C1)  Quit:SQLCODE  Continue:""=tBodyClass
			Set tCustomIDKEY=..findCustomIDKEY(tBodyClass)
			If ""'=tCustomIDKEY Set pSet("_CustomIDKEY")=1, pSet(tBodyClass)="_CustomIDKEY:"_tCustomIDKEY  Continue
			#; Find the top remaining ID of this class NOT referenced from any header (we want to delete all unreferenced ones)
			Set:'$$$IsdefObject(tRS) tRS = ##class(%ResultSet).%New("%DynamicQuery:SQL")
			Set tSC=tRS.Prepare("Select Top 1 ID From "_$$$ClassSQLTable(tBodyClass)_" b Where (Select ID from Ens.MessageHeader h Where h.MessageBodyClassname = '"_tBodyClass_"' And h.MessageBodyId = b.ID) Is Null Order By b.ID Desc")
			Set:$$$ISOK(tSC) tSC=tRS.Execute()
			If $$$ISOK(tSC) && tRS.Next(.tSC) && $$$ISOK(tSC) {
				Set tTopKillId=tRS.Data("ID")
			}
			If $$$ISERR(tSC) Set tSC=$$$ERROR($$$EnsErrGeneral,"Couldn't find message body Id for class "_tBodyClass_" in GetClassCleanupSet: "_$$$StatusDisplayString(tSC))  Quit
			Set tSC1=tRS.Close()  Set:$$$ISERR(tSC1) tSC=$$$ADDSC(tSC,tSC1)
			Quit:$$$ISERR(tSC)
			Continue:+tTopKillId'=tTopKillId ; classes with IDKEYs that are not integers can't be ordered properly
			Set tSC=..cleanupHelper(.pSet,tBodyClass,pIncludeProps,tTopKillId,pUseIdRange,"")  Quit:$$$ISERR(tSC)
		} Set tCode=SQLCODE &sql(CLOSE C1) Set:'SQLCODE SQLCODE=tCode
	} Else {
		#; A top header Id is given, meaning the highest header ID to be purged. Only search the headers lower than or equal to it
		&sql(Declare C2 Cursor For Select %Exact(MessageBodyClassname) Into :tBodyClass From Ens.MessageHeader Where ID<=:pTopKillHdr Group By MessageBodyClassname)
		&sql(OPEN C2) For { &sql(FETCH C2)  Quit:SQLCODE  Continue:""=tBodyClass
			Set tCustomIDKEY=..findCustomIDKEY(tBodyClass)
			If ""'=tCustomIDKEY Set pSet("_CustomIDKEY")=1, pSet(tBodyClass)="_CustomIDKEY:"_tCustomIDKEY  Continue
			#; Find the top remaining ID of this class referenced from a header to be purged (we want to delete that body and all earlier bodies)
			&sql(Select Top 1 MessageBodyId Into :tTopKillId From Ens.MessageHeader Where MessageBodyClassname = :tBodyClass And ID<=:pTopKillHdr Order By MessageBodyId Desc)
			; there must be one for a header being purged or we wouldn't have found the classname
			Quit:SQLCODE
			Continue:+tTopKillId'=tTopKillId ; classes with IDKEYs that are not integers can't be ordered properly

			Set tSC=..cleanupHelper(.pSet,tBodyClass,pIncludeProps,tTopKillId,pUseIdRange,"")  Quit:$$$ISERR(tSC)
		} Set tCode=SQLCODE &sql(CLOSE C2) Set:'SQLCODE SQLCODE=tCode
	}
	If SQLCODE&&(SQLCODE'=100) Set tSC1=$$$ERROR($$$EnsErrGeneral,"Couldn't find message body class and Id in GetBodiesCleanupSet, sqlcode="_SQLCODE), tSC=$$$ADDSC(tSC,tSC1)
	Quit tSC
]]></Implementation>
</Method>

<Method name="GetClassCleanupSet">
<Description>
Caution: this method is intended only for remediation of situations where your message classes do not have appropriate delete triggers to clean up after themselves. Its operation depends on your class definitions and is not able to purge every conceivable class structure. It is up to you to examine and test the operation of this method to verify that it is useful in your environment.
Return an array of all persistent or stream classes referred to as property or collection types in the given body classes, or in any of its properties' properties, etc.
If pUseIdRange is true, also annotate the array with the top ID to be killed for each class. If this ID is not supplied, this method will record the highest ID of the given class not referred to by any header.
Also note that no cleanup at all is possible if the message body class has a custom IDKEY because we can't depend on these to be allocated sequentially.
pClass may be a single classname, a comma separated list of classnames, or an array of classnames indexed either by ordinal or by name.
pTopKillId is a corresponding structure containing the highest ID to be killed / purged for each class. If pClass is an array indexed by classname, this ID may be supplied instead as the node value in pClass.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pSet,pClass:%String,pTopKillId=0,pUseIdRange:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pSet  Set SQLCODE=0, tSC=$$$OK
	Set tKey="" For { If $D(pClass)=10 {      Set tTop="", tKey=$O(pClass(tKey),1,tTop)  Quit:""=tKey  Set tBodyClass=tKey, tTopId=$G(pTopKillId(tKey),tTop) }
					ElseIf (+pClass=pClass) {         Set tKey=tKey+1            Quit:tKey>pClass    Set tBodyClass=$G(pClass(tKey)), tTopId=$G(pTopKillId(tKey)) }
					Else { Set:""=tKey nClasses=$L(pClass,",")  Set tKey=tKey+1  Quit:tKey>nClasses  Set tBodyClass=$P(pClass,",",tKey), tTopId=$P(pTopKillId,",",tKey) }
		Set tBodyClass=$ZStrip(tBodyClass,"<>WC")  Continue:""=tBodyClass
		Set tCustomIDKEY=..findCustomIDKEY(tBodyClass)
		If ""'=tCustomIDKEY Set pSet(tBodyClass)="_CustomIDKEY:"_tCustomIDKEY, tSC=$$$ERROR($$$EnsErrGeneral,"Class "_tBodyClass_" has a custom IDKEY '"_tCustomIDKEY_"'; cannot use order to find orphaned IDs")  Quit
		If 'tTopId && pUseIdRange {
			#; Find the top remaining ID of this class NOT referenced from any header (we want to delete all unreferenced ones)
			Set:'$$$IsdefObject(tRS) tRS = ##class(%ResultSet).%New("%DynamicQuery:SQL")
			Set tSC=tRS.Prepare("Select Top 1 ID From "_$$$ClassSQLTable(tBodyClass)_" b Where (Select ID from Ens.MessageHeader h Where h.MessageBodyClassname = '"_tBodyClass_"' And h.MessageBodyId = b.ID) Is Null Order By b.ID Desc")
			Set:$$$ISOK(tSC) tSC=tRS.Execute()
			If $$$ISOK(tSC) && tRS.Next(.tSC) && $$$ISOK(tSC) {
				Set tTopId=tRS.Data("ID")
			}
			If $$$ISERR(tSC) Set tSC=$$$ERROR($$$EnsErrGeneral,"Couldn't find message body Id for class "_tBodyClass_" in GetClassCleanupSet: "_$$$StatusDisplayString(tSC))  Quit
			Set tSC1=tRS.Close()  Set:$$$ISERR(tSC1) tSC=$$$ADDSC(tSC,tSC1)
			Quit:$$$ISERR(tSC)
		}
		Set tSC=..cleanupHelper(.pSet,.tBodyClass,1,tTopId,pUseIdRange,"")  Quit:$$$ISERR(tSC)
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="PurgeCleanupSet">
<Description>
Caution: this method is intended only for remediation of situations where your message classes do not have appropriate delete triggers to clean up after themselves. Its operation depends on your class definitions and is not able to purge every conceivable class structure. It is up to you to examine and test the operation of this method to verify that it is useful in your environment.
This method's operation is guided by 'cleanup set' array.  The methods GetDeepPurgeSet(), GetBodiesCleanupSet(), and GetClassCleanupSet() each represent a different way of constructing such a 'cleanup set'.
NB! After using one of those methods to construct a 'cleanup set', you or your code should examine it to remove any entries for classes that should not be purged.  For example if a message refers to a permanent patient record, you should remove the patient record class from the 'cleanup set' array before invoking this method.  Otherwise it will delete any patient records referred to by messages being purged.
Removes all persistent object instances of classes used as message bodies that have IDs lower than the first one used as a message body.
This can clean up bodies that were 'orphaned' by purging headers without the 'BodiesToo' option.
It also removes persistent objects referred to as property or collection types in any of the classes being cleaned, or in any of their properties' properties.
Note that pKeepIntegrity is ignored for a cleanup set produced by GetBodiesCleanupSet because it does not include headers to purge.
If possible it will do bulk deletes of each class in the set. Otherwise it will delete all the properties of each object by recursive descent.
Bulk ID Range delete will be used if pUseIdRange=1 and:
- pKeepIntegrity is false or MessageHeaders are not included (i.e. GetDeepPurgeSet was not used)
- the set has no node set("_hasStream")=1
- the set has no node set("_customIDKEY")=1
- No class node present has a "Top ID to purge" value
NB! Bulk ID Range delete only makes sense if all the child property objects in your messages are allocated and stored in sequence with the message headers themselves. This will be nearly true if all message objects are created fresh and then immediately sent as Ensemble message bodies.
Bulk ID Range delete might be faster or slower than recursive object property deleting, depending on your class definitions and the indices they define.
Also note: no cleanup at all is possible if the message body class is a stream or has a custom IDKEY because we can't depend on these to be ordered sequentially.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pSet,*pDeletedCount:%Integer,pKeepIntegrity:%Boolean=0,pUseIdRange:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Quit:$D(pSet)<10 $$$ERROR($$$EnsErrGeneral,"Empty cleanup set")
	Quit:$D(pSet("Ens.MessageHeader"))&&pKeepIntegrity ..purgeDeepIntegrity(.pSet,.pDeletedCount)
	Kill pDeletedCount  Set tSC=$$$OK, pDeletedCount=0, pDeletedCount("bodies")=0, tTopKillHdr=""

	If $D(pSet("Ens.MessageHeader"),tTopKillHdr) {
		#; Loop over headers, purge bodies and then header
		If pUseIdRange {
			Set tRS=##class(%ResultSet).%New("%DynamicQuery:SQL") ; reusable RS
			Set bod="" For { Set tTopKillId="", bod=$O(pSet("_body",bod),1,tTopKillId)  Quit:""=bod
				Set:""=tTopKillId tTopKillId=$G(pSet(bod))
				Set tSC=..purgeIdRange(.pSet,.pDeletedCount,bod,tTopKillId,.tRS)  Quit:$$$ISERR(tSC)
			} Quit:$$$ISERR(tSC) tSC
		}
		&sql(DECLARE C5 CURSOR FOR
			Select ID,MessageBodyId,MessageBodyClassName Into :tID,:tBodyId,:tBodyClass From Ens.MessageHeader Where ID <= :tTopKillHdr)
		&sql(OPEN C5) For { &sql(FETCH C5)  Quit:SQLCODE
			If ""'=tBodyClass&&'pUseIdRange&&'$G(pSet(tBodyClass,"_done")) {
				//Set tObj=$zobjclassmethod(tBodyClass,"%OpenId",tID,,.tSC)  Quit:$$$ISERR(tSC)
				Set tSC=..purgePropObj(.pSet,.pDeletedCount,tBodyClass,tBodyId,0)
				Quit:($$$ISERR(tSC)&&'$$$StatusEquals(tSC,$$$DeleteObjectNotFound,$$$FileCanNotDelete,$$$NotAnInstanceError))
				Set tSC=$$$OK, pDeletedCount("bodies")=pDeletedCount("bodies")+1
			}
			Set %ROWCOUNT=0
			&sql(Delete From Ens.MessageHeader Where ID=:tID)
			Set pDeletedCount=pDeletedCount+%ROWCOUNT
		} Set tCode=SQLCODE &sql(CLOSE C5) Set:'SQLCODE SQLCODE=tCode
		Set:SQLCODE&&(SQLCODE'=100) tSC=$$$ADDSC(tSC,$$$ERROR($$$EnsErrGeneral,"Purge error at ID "_tID_"; SQLCODE = "_SQLCODE))
	} Else { ; no MessageHeader range
		#; We have no header to iterate; this is a cleanup and we must have ID ranges for the top body classes
		Set tRS=##class(%ResultSet).%New("%DynamicQuery:SQL") ; reusable RS
		Set bod="" For { Set tTopKillId="", bod=$O(pSet("_body",bod),1,tTopKillId)  Quit:""=bod
			Set:""=tTopKillId tTopKillId=$G(pSet(bod))
			If 'tTopKillId Set tSC=$$$ERROR($$$EnsErrGeneral,"Body must have a numeric value for top '"_bod_"' ID to purge, got '"_tTopKillId_"'")  Quit
			If pUseIdRange {
				Set tSC=..purgeIdRange(.pSet,.pDeletedCount,bod,tTopKillId,.tRS)  Quit:$$$ISERR(tSC)
			} Else {
				#; Loop over all bodies to be purged for this body class
				//Set tSC=..purgeSetLoop(.pSet,.pDeletedCount,bod,pUseIdRange,tTopKillId,.tRS)  Quit:$$$ISERR(tSC)		
				#; Delete objects one-by-one (until we get down to a level where we can purge by ID if pUseIdRange=1)
				Set tSC=tRS.Prepare("Select %ID From "_$$$ClassSQLTable(bod)_" Where %ID <= "_tTopKillId)
				Set:$$$ISOK(tSC) tSC=tRS.Execute()
				While $$$ISOK(tSC) && tRS.Next(.tSC) && $$$ISOK(tSC) {
					Set tID=tRS.Data("%ID")
					Set tSC=..purgePropObj(.pSet,.pDeletedCount,bod,tID,0)
					Quit:($$$ISERR(tSC)&&'$$$StatusEquals(tSC,$$$DeleteObjectNotFound,$$$FileCanNotDelete,$$$NotAnInstanceError))
					Set tSC=$$$OK, pDeletedCount("bodies",bod)=$G(pDeletedCount("bodies",bod))+1
				} Set tSC1=tRS.Close()  Set:$$$ISERR(tSC1) tSC=$$$ADDSC(tSC,tSC1)
			}
		}
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="purgeDeepIntegrity">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pSet,*pDeletedCount:%Integer]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tTopKillId=$G(pSet("Ens.MessageHeader"))  Quit:'tTopKillId $$$ERROR($$$EnsErrGeneral,"Must have purge limit id for purge with KeepIntegrity and UseIdRange")
	
	&sql(DECLARE C6 CURSOR FOR
		Select ID,MessageBodyId,MessageBodyClassName Into :tID,:tBodyId,:tBodyClass From Ens.MessageHeader h
			Where (ID <= :tTopKillId)
				And 0 = ( Select Count(*) From Ens.MessageHeader
							Where (SessionId = h.SessionId)
								And (Status<>$$$eMessageStatusCompleted)
								And (Status<>$$$eMessageStatusAborted)
								And (Status<>$$$eMessageStatusError)
								And (Status<>$$$eMessageStatusDiscarded) )
		)
	&sql(OPEN C6)
	Set tSC=$$$OK  For { &sql(FETCH C6)  Quit:SQLCODE
		If ""'=tBodyClass&&'$G(pSet(tBodyClass,"_done")) {
			Set tSC=..purgePropObj(.pSet,.pDeletedCount,tBodyClass,tBodyId,0)  Quit:$$$ISERR(tSC)
			Set pDeletedCount("bodies")=pDeletedCount("bodies")+1
		}
		Set %ROWCOUNT=0
		&sql(Delete From Ens.MessageHeader Where ID=:tID)
		Set pDeletedCount=pDeletedCount+%ROWCOUNT
	} Set tCode=SQLCODE &sql(CLOSE C6) Set:'SQLCODE SQLCODE=tCode
	Quit tSC
]]></Implementation>
</Method>

<Method name="purgePropObj">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pSet,&pDeletedCount,pClass:%String,pID:%String="",pUseIdRange:%Boolean,pRS:%ResultSet]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Quit:'$D(pSet(pClass),tTopKillId)||$G(pSet(pClass,"_done")) $$$OK
	Set tSC=$$$OK
	If pUseIdRange&&tTopKillId {
		Quit ..purgeIdRange(.pSet,.pDeletedCount,pClass,tTopKillId,.pRS)
	}
	#; First delete the object's persistent properties
	Set tObj=$$$NULLOREF,prop=""  For { Set prop=$O(pSet(pClass,"_props",prop),1,proptype)  Quit:""=prop
		Continue:""=proptype||$G(pSet(proptype,"_done"))
		#; Open object
		Set:'$IsObject(tObj) tObj=$zobjclassmethod(pClass,"%OpenId",pID,,.tSC)  Quit:$$$ISERR(tSC)

		Set tTopKillPropId=$G(pSet(proptype))
		If ""'=$G(pSet(pClass,"_props",prop,"_collection")) {
			Set tPropObj=$property(tObj,prop)
			Set tKey="" For { Set tItemId=tPropObj.GetObjectIdNext(.tKey)  Quit:""=tKey
				Set tSC1=..purgePropObj(.pSet,.pDeletedCount,proptype,tItemId,pUseIdRange,pRS)
				Set:$$$ISERR(tSC1) tSC=$$$ADDSC(tSC,tSC1)
			}
		} ElseIf $Case($E(tTopKillPropId,1,$L("_CustomIDKEY:")),"_Stream":1,"_CustomIDKEY:":1,:'(pUseIdRange&&tTopKillPropId)) {
			Set tPropObj=$property(tObj,prop)
			Set:$IsObject(tPropObj) tSC=..purgePropObj(.pSet,.pDeletedCount,proptype,tPropObj.%Id(),pUseIdRange,pRS)
		} Else { ; purge range not just one instance
			Set tSC=..purgePropObj(.pSet,.pDeletedCount,proptype,"",pUseIdRange,pRS)
		}
	} Quit:($$$ISERR(tSC)&'$$$StatusEquals(tSC,$$$DeleteObjectNotFound,$$$FileCanNotDelete,$$$NotAnInstanceError)) tSC 
	
	; Done with the properties, now do the object
	Kill tObj  Set tSC=$$$OK
	Set:""'=pID tSC=$zobjclassmethod(pClass,"%DeleteId",pID)
	If $$$ISERR(tSC) {
		Set tOK=$$$StatusEquals(tSC,$$$DeleteObjectNotFound,$$$FileCanNotDelete,$$$NotAnInstanceError) ; || ($$$StatusEquals(tSC,$$$NotAnInstanceError) && '$zobjclassmethod(aClass(pClass,"extent"),"%ExistsId",pId))
		If tOK { Set tSC=$$$OK }
		ElseIf '$G(aClass(pClass,"doneErr")) { Set aClass(pClass,"doneErr")=1  $$$LOGWARNING("Failed to purge body with BodyClassname='"_pClass_"', ID="_pID_" :"_$$$StatusDisplayString(tSC)) }
	} Else {
		Set pDeletedCount("bodies",pClass)=$G(pDeletedCount("bodies",pClass))+1
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="purgeIdRange">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pSet,*pDeletedCount:%Integer,pClass:%String,pTopKillId:%Integer,pRS:%ResultSet]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Quit:'pTopKillId $$$ERROR($$$EnsErrGeneral,"Must have a numeric value for top '"_pClass_"' ID to purge, got '"_pTopKillId_"'")
	
	#; Go through the property classes of this class and delete the range for them all
	Set tSC=$$$OK
	Set chi="" For { Set tChildTopKillId="", chi=$O(pSet(pClass,"_child",chi))  Quit:""=chi
		Set tChildTopKillId=$G(pSet(chi))  Continue:'tChildTopKillId||$G(pSet(chi,"_done"))
		Set tSC=..purgeIdRange(.pSet,.pDeletedCount,chi,tChildTopKillId,.pRS)  Quit:$$$ISERR(tSC)
	}
	Quit:$$$ISERR(tSC) tSC
	Quit:$G(pSet(pClass,"_done")) $$$OK
	
	#; Now do this class and delete the range for it
	Set tSC=pRS.Prepare("Select %ID From "_$$$ClassSQLTable(pClass)_" Where %ID <= "_pTopKillId)
	Set:$$$ISOK(tSC) tSC=pRS.Execute()
	If $$$ISOK(tSC) {
		While pRS.Next(.tSC) { Quit:$$$ISERR(tSC)
			Set tID=pRS.GetData(1)
			Set tSC1=$zobjclassmethod(pClass,"%DeleteId",tID)
			If $$$ISERR(tSC1)&&'$G(pSet(pClass,"_doneErr")) {
				Set tOK=$$$StatusEquals(tSC1,$$$DeleteObjectNotFound,$$$FileCanNotDelete,$$$NotAnInstanceError) ; || ($$$StatusEquals(tSC1,$$$NotAnInstanceError) && '$zobjclassmethod(aClass(%tBodyClassname,"extent"),"%ExistsId",%tBodyId))
				If 'tOK { Set pSet(pClass,"_doneErr")=1, tSC=$$$ADDSC(tSC,tSC1)  $$$LOGWARNING("Failed to purge body "_tID_", BodyClassname='"_chi_"':"_$$$StatusDisplayString(tSC1)) }
			}
			Set pDeletedCount("bodies",pClass)=$G(pDeletedCount("bodies",pClass))+1
		}
	}
	Set tSC1=pRS.Close()  Set:$$$ISERR(tSC1) tSC=$$$ADDSC(tSC,tSC1)
	If $$$ISERR(tSC) Set tSC=$$$ERROR($$$EnsErrGeneral,"%DeleteID From "_pClass_" Where %ID <= "_pTopKillId_" failed: "_$$$StatusDisplayString(tSC))  Quit tSC
	Set pSet(pClass,"_done")=1
	Quit tSC
]]></Implementation>
</Method>

<Method name="cleanupHelper">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pSet,pClass:%String,pIncludeProps:%Boolean,pTopKillId:%Integer,pUseIdRange:%Boolean,pParent:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
#Dim tProp As %Dictionary.CompiledProperty
	Set SQLCODE=0, tSC=$$$OK, $ZT="Trap"
	Set:""=pTopKillId pUseIdRange=0
	If ""=pParent {
		Quit:$D(pSet("_body",pClass)) $$$ERROR($$$EnsErrGeneral,"Body class '"_pSet_"' already exists in Cleanup Set")
		If $D(pSet(pClass))&&'pUseIdRange Set pSet("_body",pClass)=pTopKillId  Quit $$$OK
	} ElseIf 'pUseIdRange&&pIncludeProps {
		Quit:$D(pSet(pParent,"_child",pClass)) $$$OK
		If $D(pSet(pClass)) {
			Merge pSet(pParent,"_child")=pSet(pClass,"_child")
			Set pSet(pParent,"_child",pClass)=""
			Quit $$$OK
		}
	}
	Set tDef=##class(%Dictionary.CompiledClass).%OpenId(pClass,,.tSC)  Quit:$$$ISERR(tSC) tSC
	If tDef.ClassType'="persistent" {
		If (""=pParent)&&(tDef.ClassType="stream") {
			$$$ASSERT($zobjclassmethod(pClass,"%Extends","%Stream.Object"))
			Set tHasStream=1
			Set pSet(pClass)="_Stream"
		}
		Quit $$$OK ; ignore classes with no storage
	}
	Set:pTopKillId>$G(pSet(pClass),pTopKillId-1) pSet(pClass)=pTopKillId
	Set (tHasStream,tHasIDKEY)=0
	If pIncludeProps {
		Set propkey="" For { Set tProp=tDef.Properties.GetNext(.propkey)  Quit:""=propkey||'$IsObject(tProp)
			Continue:""=tProp.Type 
			Set tIsCollection=..isCollection(tProp)
			Continue:3=tIsCollection ; Relationship properties fend for themselves

			Set tPropType=$$$comClassKeyGet(tProp.Type,$$$cCLASSclasstype)
			Set tTableName=$$$comClassKeyGet(tProp.Type,$$$cCLASSsqltablename)
			Set tUseIdRange=pUseIdRange

			If ""'=tTableName&&tProp.Storable&&(tPropType="persistent") {
				Set tCustomIDKEY=..findCustomIDKEY(tProp.Type)
				If ""'=tCustomIDKEY {
					Set tPropTopKillId="", tUseIdRange=0, pSet(tProp.Type)="_CustomIDKEY:"_tCustomIDKEY
					Set tHasIDKEY=1
				} ElseIf pUseIdRange&&(""'=tProp.SqlFieldName) {
					#; Find the top remaining ID of the property class NOT referenced from this class (we want to delete all unreferenced ones)
					Set:'$D(tTopKillObj) tTopKillObj=$zobjclassmethod(pClass,"%OpenId",pTopKillId,,.tSC)  Quit:$$$ISERR(tSC)
					Set tPropObj=$property(tTopKillObj,tProp.Name)
					If '$IsObject(tPropObj) {
						Set tPropTopKillId=""
					} Else {
						If tIsCollection {
							Set tKey="",tPropTopKillId="" For { Set tItemId=tPropObj.GetObjectIdNext(.tKey)  Quit:""=tKey
								Set:tPropTopKillId<tItemId tPropTopKillId=tItemId
							}
						} Else {
							$$$ASSERT(tPropObj.%Extends("%Library.Persistent"))
							Set tPropTopKillId=tPropObj.%Id()
						}
					}
				} Else {
					Set tPropTopKillId=""
				}
				Set tSC=..cleanupHelper(.pSet,tProp.Type,pIncludeProps,tPropTopKillId,tUseIdRange,pClass)  Quit:$$$ISERR(tSC)
				Set pSet(pClass,"_child",tProp.Type)=""
				Set pSet(pClass,"_props",tProp.Name)=tProp.Type
				Set:tIsCollection pSet(pClass,"_props",tProp.Name,"_collection")=tProp.RuntimeType
			}
			ElseIf tPropType="stream" {
				$$$ASSERT($zobjclassmethod(tProp.Type,"%Extends","%Stream.Object"))
				Set tHasStream=1
				Set pSet(tProp.Type)="_Stream"
				Set pSet(pClass,"_props",tProp.Name)=tProp.Type
				Set:tIsCollection pSet(pClass,"_props",tProp.Name,"_collection")=tProp.RuntimeType
			}
		} ; For { propkey
	} ; If pIncludeProps
	If ""=pParent {
		Set pSet("_body",pClass)=""
	} Else {
		If pIncludeProps Merge pSet(pParent,"_child")=pSet(pClass,"_child")  Set pSet(pParent,"_child",pClass)=""
	}
Exit
	Quit tSC
Trap
	Set tSC=$$$SystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="findCustomIDKEY">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pClass:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
#Dim tIndex As %Dictionary.CompiledIndex
	Set tDef=##class(%Dictionary.CompiledClass).%OpenId(pClass,,.tSC)  Quit:$$$ISERR(tSC)||'$IsObject(tDef) ""
	Set tKey="" For { Set tIndex=tDef.Indices.GetNext(.tKey)  Quit:""=tKey||'$IsObject(tIndex)
		Quit:tIndex.IdKey&&'tIndex.CompilerGenerated
	}
	Quit:""'=tKey&&$IsObject(tIndex) tIndex.Name
	Quit ""
]]></Implementation>
</Method>

<Method name="isCollection">
<Description>
Return 0 for not collection, 1 for list, 2 for array, 3 for relationship</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pProp:%Dictionary.CompiledProperty</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//Quit:""=tProp.RuntimeType||(tProp.RuntimeType=tProp.Type)||'$zobjclassmethod(tProp.RuntimeType,"%Extends","%Collection.AbstractIterator") 0
	Quit:""=pProp.Collection 0
	Quit:$zobjclassmethod(pProp.RuntimeType,"%Extends","%Library.RelationshipObject") 3
	Quit:"array"=pProp.Collection 2
	Quit 1
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Common.Utility.DataGenerators">
<Description>
This class contains a whole range of Data Generators and Data Scramblers. It is very useful for
scrabling real life data or for creating new data.</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%RegisteredObject,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65853,49822.744289</TimeChanged>
<TimeCreated>65853,49822.744289</TimeCreated>

<Method name="ArrayElement">
<Description>
Return a random array element.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&array]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ QUIT $s($g(array):$g(array($$$PRand(array)+1)),1:"")
]]></Implementation>
</Method>

<Method name="ExtentValue">
<Description>
Return a random value from a concrete value extent.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>cptr:%Integer,cext:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ QUIT $s($g(^CacheTemp(cptr,cext)):$g(^CacheTemp(cptr,cext,$$$PRand(^CacheTemp(cptr,cext))+1)),1:"")
]]></Implementation>
</Method>

<Method name="BuildReferenceSample">
<Description><![CDATA[
	Return an array of ids selected randomly from the 
	Extent query of the class in the <var>sample</var> parameter. The array is of the form: 
	sample=n 
	sample(1)=id1,sample(2)=id2,...,sample(n)=idn 
	Parameters: 
	class   - the class to retrieve samples from 
	sample  - the array of samples (returned) 
	size    - the maximum number of samples to retrieve 
	selpct  - the percentage of instances to be randomly selected. 
	for example, 25 means approximately 25% of the instances 
	will be selected (1 in 4).]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>class,sample,size=500,selpct=25</FormalSpec>
<Implementation><![CDATA[
 Set density=$s(selpct>90:2,selpct>74:4,selpct>49:6,selpct>39:5,selpct>24:36,selpct>12:7,1:29)
 Kill sample
 Set sample=0
 QUIT:$g(class)=""
 Set rs=##class(%ResultSet).%New(class_".Extent")
 Set sc=rs.Execute()
 If $$$ISERR(sc) Set rs="""" QUIT
 For count=1:1 Quit:rs.Next()=0  i '(density#($$$PRand(density)+1)) s sample=sample+1,sample(sample)=rs.GetData(1) Quit:sample=size
 #; If the sample is less than 50% of requested size then select all of the instances...
 If (sample/size)<.5,count>sample DO
 . Do rs.Close()
 . Set sc=rs.Execute()
 . Quit:$$$ISERR(sc)
 . Kill sample
 . Set sample=0
 . For  Quit:rs.Next()=0  s sample=sample+1,sample(sample)=rs.GetData(1) Quit:sample=size
 QUIT
]]></Implementation>
</Method>

<Method name="BuildValueSetSQL">
<Description>
Populate a value set from a query</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>cptr,cext,table,column,size=500,verbose:%Integer=0</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If ('$Get(cptr)) || ('$Get(cext)) || ( table = "" ) || ( column = "" ) Quit $$$ERROR($$$GeneralError,"Invalid BuildValueSet parameters")
	Set sql = "select DISTINCT(" _ $Select($$$ucase(column)'["%EXACT":"%EXACT("_column_")",1:column) _ ") from " _ table
	Set rs = ##class(%Library.ResultSet).%New()
	Set sc = rs.Prepare(sql)
	If $$$ISERR(sc) Quit $$$ERROR($$$GeneralError,"Cannot prepare BuildValueSetSQL dynamic query: " _ $Get(%msg))
	Set sc=rs.Execute()
	If $$$ISERR(sc) Quit $$$ERROR($$$GeneralError,"Cannot execute BuildValueSetSQL dynamic query: " _ $Get(%msg))
	Set temp = $Increment(^CacheTemp)
	$$$AddTempNode(^CacheTemp(temp))
	Set ^CacheTemp(temp) = 0
	If verbose { Write !,sql }
	Set next = rs.Next()
	While next {
		Set ^CacheTemp(temp,$Increment(^CacheTemp(temp))) = rs.GetData(1)
		If verbose && ('(^CacheTemp(temp)#1000)) { Write "." }
		Set next = rs.Next()
	}
	Set sc = rs.Close()
	If verbose { Write "(",^CacheTemp(temp),")" }
	Set ^CacheTemp(cptr,cext) = 0, cextcnt = 0, domainsize = ^CacheTemp(temp)
	If size '< domainsize {
		If verbose { Write !," requested number is greater than domain size, taking all values." }
		Merge ^CacheTemp(cptr,cext) = ^CacheTemp(temp)
	}
	Else {
		If verbose { Write !,"Selecting ",size," random values" }
		While cextcnt < size {
			Set valptr = $$$PRand(domainsize) + 1
			If '$d(^CacheTemp(cptr,cext,"u",valptr)) {
				Set val = ^CacheTemp(temp,valptr)
				Set cextcnt = $Increment(^CacheTemp(cptr,cext)), ^CacheTemp(cptr,cext,"u",valptr) = cextcnt, ^CacheTemp(cptr,cext,cextcnt) = val
				If verbose && ('(cextcnt#1000)) { Write "." }
			}
		}
		Kill ^CacheTemp(cptr,cext,"u")
	}
	Kill ^CacheTemp(temp)
	$$$RemoveTempNode(^CacheTemp(temp))
	QUIT $$$OK
]]></Implementation>
</Method>

<Method name="City">
<Description>
Return a random city name.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 s t1=$lb("Albany","Boston","Bensonhurst","Chicago","Denver","Elmhurst","Fargo","Gansevoort","Hialeah","Islip","Jackson","Larchmont","Miami","Newton","Oak Creek","Pueblo","Queensbury","Reston","St Louis","Tampa","Ukiah","Vail","Washington","Xavier","Youngstown","Zanesville")
 Quit $li(t1,$$$PRand($ll(t1))+1)
]]></Implementation>
</Method>

<Method name="Company">
<Description>
Return a random company name.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 Set c1=$LB("Compu","Dyna","Quanta","Hyper","Meta","Kwal","Opti","Robo","Tera","Mega","Giga","Xena","Micro","Macro","Inter","Yoyo","Medi","Pico","Accu","Globa","Octo","Cyber","Tele","Syner","Securi","Bio","Intra")
 Set c2=$LB("Dyne","Sys","Tron","Matix","mo","gy","Sonics","Calc","Tel","Soft","Dynamics","Pedia","Systems","Net","Data","Ware","Glomerate","Lateral","Tech","Plex","Comp")
 Set c3=$LB(" Inc."," Corp."," Media Inc."," Holdings Inc.",".com"," LLC."," Group Ltd."," Associates"," Partners"," Gmbh.")

 Quit $LI(c1,$$$PRand($LL(c1))+1)_$LI(c2,$$$PRand($LL(c2))+1)_$LI(c3,$$$PRand($LL(c3))+1)
]]></Implementation>
</Method>

<Method name="Currency">
<Description><![CDATA[
Return a random currency value between <var>min</var> and <var>max</var> (if present).]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>min:%Integer=0,max:%Integer=10000</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[ Quit ##class(%PopulateUtils).Float(min,max,4)
]]></Implementation>
</Method>

<Method name="Date">
<Description><![CDATA[
Return a random date value in <i>Cach&eacute;</i> <code>$H</code> format.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>min:%Date,max:%Integer</FormalSpec>
<ReturnType>%Date</ReturnType>
<Implementation><![CDATA[
	if '$Get(min) { set min = 30000 }
	if '$Get(max) { set max = +$h }
	if min>max Quit 0
	quit min+$$$PRand(max-min+1)
]]></Implementation>
</Method>

<Method name="CDate">
<ClassMethod>1</ClassMethod>
<FormalSpec>format:%Integer=1,min:%Date=30000,max:%Date=55000</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 If min>max Quit 0
 Quit $zdate(##class(%Library.PopulateUtils).Date(min,max),format)
]]></Implementation>
</Method>

<Method name="Counter">
<ClassMethod>1</ClassMethod>
<FormalSpec>counter:%String="c",initial:%Integer=1</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 If '$Data(^CacheTempPop($j,"c",counter)) Set ^CacheTempPop($j,"c",counter) = initial Quit initial
 Quit $Increment(^CacheTempPop($j,"c",counter))
]]></Implementation>
</Method>

<Method name="FirstName">
<Description><![CDATA[
Return a string containing a random first name.
<p><var>gender</var> is a optional string used to control the 
gender of the generated name: 1 is Male, 2 = Female, "" is either.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>gender:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 #; gender is 1:MALE,2:FEMALE
 s:$g(gender)="" gender=$$$PRand(2)+1

 If (gender = 1) {
 Set list = $LB("Al","Alfred","Alvin","Andrew","Angelo","Aviel",
 "Bart","Bill","Bob","Brendan","Brian","Buzz","Chad",
 "Charles","Chris","Clint","Dan","Dave",
 "David","Dick","Dmitry","Ed","Edgar","Edward",
 "Elmo","Elvis","Emilio","Fred","Geoffrey",
 "George","Howard","James","Jeff","Joe","John",
 "Jose","Joshua","Jules","Keith","Kenny","Kevin",
 "Lawrence","Mark","Mario","Martin","Marvin","Michael","Milhouse",
 "Mo","Neil","Norbert","Orson","Patrick","Paul",
 "Peter","Phil","Quentin","Quigley","Ralph",
 "Richard","Rob","Robert","Roger","Sam","Stavros",
 "Stuart","Ted","Terry","Umberto","Vincent",
 "Will","William","Wolfgang","Xavier","Zeke")
 }
 Else {
 Set list = $lb("Agnes","Alexandra","Alice","Amanda","Angela","Ashley",
 "Barb","Barbara","Belinda","Brenda",
 "Charlotte","Chelsea","Christine","Christen",
 "Danielle","Debra","Debby","Diane","Elvira","Emily","Emma",
 "Filomena","Frances","Gertrude","Greta","Hannah","Heloisa","Imelda",
 "Jane","Janice","Jocelyn","Josephine","Juanita","Julie",
 "Kim","Kirsten","Kristen","Kyra","Laura",
 "Linda","Lisa","Liza","Lola","Lydia",
 "Maria","Mary","Maureen","Michelle","Molly",
 "Nataliya","Natasha","Nellie",
 "Olga","Pam","Pat","Patricia","Phyllis",
 "Rhonda","Roberta","Sally","Samantha","Sophia","Susan",
 "Tara","Terry","Thelma",
 "Uma","Usha","Valery","Violet","Wilma","Yan","Zelda","Zoe")
 }

 Quit $LI(list,$$$PRand($LL(list))+1)
]]></Implementation>
</Method>

<Method name="Float">
<Description><![CDATA[
Return a random floating point value between <var>min</var> 
and <var>max</var> (if present).]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>min:%Float=0,max:%Float=10000,scale:%Integer=0</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	If max '> min { Quit "" }
	If scale > 17 { Set scale = 17 }
	Set factor = 10 ** scale
		#; Normalize min and max
	Set minn = (min*factor\1)/factor, maxn = (max*factor\1)/factor
	Set range = maxn - minn
		#; smaller values are simpler
	If ($Length(range\1) + scale) < 17 { Quit +(((minn * factor) + $$$PRand(range * factor + 1)) / factor) }
		#; generate large values as two separate random values
		#; This algorithm slightly favors min and max in some cases but allows for floats with large scale values
		#; first, make sure that range and factor don't trigger a function error.
	set range = $Extract(range,1,17), factor = $Extract(factor,1,17)
	Set float = minn + $$$PRand(range) + $Select(scale:+($$$PRand(factor+1)/factor),1:0)
	Quit $Select((float<max)&(float>min):float,float'<max:maxn,1:minn)
]]></Implementation>
</Method>

<Method name="Integer">
<Description><![CDATA[
Return a random integer value between <var>min</var> 
and <var>max</var> (if present).]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>min:%Integer=0,max:%Integer=1000000000</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	if min > max quit 0
	set range = max - min + 1
	if range '> 1E17 { quit min+$$$PRand(range) }
	set range1 = $$$PRand(1E17)
	set range2 = $$$PRand(range\1E17)
	quit min + (range2*1E17) + range1
]]></Implementation>
</Method>

<Method name="LastName">
<Description>
Return a string containing a random last name.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 Set x = $$$PRand(26)+1

 If (x = 1) 	{ Set list = $LB("Allen","Avery","Adam","Adams","Alton","Ahmed","Anderson") }
 ElseIf (x = 2)	{ Set list = $LB("Baker","Beatty","Burroughs","Bach","Bachman","Black","Brown","Browne","Browning","Braam","Basile","Bukowski","Bush") }
 ElseIf (x = 3)	{ Set list = $LB("Chadbourne","Cheng","Chang","Campos","Cannon","Chadwick","Chesire","Clinton","Clay","Connors","Cooke","Cooper","Cerri","Cunningham") }
 ElseIf (x = 4)	{ Set list = $LB("Diavolo","DeSantis","Djakovic","DeLillo","Drabek","Donaldson","Davis","Dunlap","Duquesnoy") }
 ElseIf (x = 5)	{ Set list = $LB("Evans","Edwards","Eisenstien","Edison","Emerson","Eno","Eastman","Eagleman") }
 ElseIf (x = 6)	{ Set list = $LB("Frith","Fripp","Finn","Faust","Fives","Frost","Feynman") }
 ElseIf (x = 7)	{ Set list = $LB("Gaboriault","Geoffrion","Gomez","Gallant","Goldman","Gore","Gibbs","Gold","Goncharuk","Grabscheid","Garcia") }
 ElseIf (x = 8)	{ Set list = $LB("Houseman","Huff","Hanson","Harrison","Hills","Hertz","Hammel","Humby","Hernandez") }
 ElseIf (x = 9)	{ Set list = $LB("Isaksen","Ironhorse","Ipsen","Ingrahm","Ingersol","Iacobelli","Ingleman","Isaacs","Ihringer") }
 ElseIf (x = 10)	{ Set list = $LB("Jafari","Joyce","Jackson","Jones","Johnson","Jaynes","Jung","Jenkins") }
 ElseIf (x = 11)	{ Set list = $LB("Koivu","Kovalev","King","Klingman","Kelvin","Klein","Klausner","Kratzmann","Koenig") }
 ElseIf (x = 12)	{ Set list = $LB("Larson","Leiberman","Lennon","Lepon","Levinson","Long","LaRocca","Lee","Li","Lubbar","Love","Loveluck","Lopez") }
 ElseIf (x = 13)	{ Set list = $LB("Mara","Massias","Malkovich","Moon","Murphy","Murray","McCormick","Macrakis","Mailer","Munt","Martinez","Mastrolito","Minichillo","Monroe","Malynko","Miller","Marks","McCoy") }
 ElseIf (x = 14)	{ Set list = $LB("Noodleman","Novello","Nagel","Nathanson","Newton","Nelson","North","Ng","Nichols") }
 ElseIf (x = 15)	{ Set list = $LB("O'Donnell","O'Brien","O'Rielly","Orwell","Orlin","Ott","Olsen") }
 ElseIf (x = 16)	{ Set list = $LB("Page","Paladino","Palmer","Pantaleo","Pape","Paraskiv","Pascal","Perez","Peters","Peterson","Petersburg","Pybus","Presley","Press") }
 ElseIf (x = 17)	{ Set list = $LB("Quigley","Quilty","Quince","Quincy","Quine","Quixote") }
 ElseIf (x = 18)	{ Set list = $LB("Ramsay","Ragon","Ravazzolo","Rogers","Rotterman","Roentgen","Rodriguez","Russell") }
 ElseIf (x = 19)	{ Set list = $LB("Smith","Smyth","Schultz","Schulte","Salm","Sato","Schaefer","Simpson","Sands","Solomon","Semmens","Sorenson","Sverdlov") }
 ElseIf (x = 20)	{ Set list = $LB("Tesla","Tsatsulin","Tweed","Thompson","Taylor","Tillem","Townsend") }
 ElseIf (x = 21)	{ Set list = $LB("Ubertini","Uhles","Ueckert","Umansky","Uberoth","Ulman","Underman") }
 ElseIf (x = 22)	{ Set list = $LB("Van De Griek","Vanzetti","Vivaldi","Vonnegut") }
 ElseIf (x = 23)	{ Set list = $LB("Waal","Walker","Wilson","Woo","Wells","Waters","Willeke","Wijnschenk","Waterman","Winters","White","Williams","West") }
 ElseIf (x = 24)	{ Set list = $LB("Xander","Xavier","Ximines","Xerxes","Xenia","Xiang") }
 ElseIf (x = 25)	{ Set list = $LB("Young","Yeats","Yang","Yu","Yancik","Yakulis","Yezek","Yoders") }
 ElseIf (x = 26)	{ Set list = $LB("Zemaitis","Zubik","Zimmerman","Zevon","Zucherro","Zampitello","Zweifelhofer") }

 Quit $LI(list,$$$PRand($LL(list))+1)
]]></Implementation>
</Method>

<Method name="Mission">
<Description>
Returns a string containing a randomly generated corporate mission statement.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 Set c1=$LB("Leaders in ","Developers of ","Providers of ","Resellers of ","On-line distributors of ","Experts in ","Specializing in the development and manufacturing of ","Post-sale services for ","Spearheading the next generation of ","The industry leader in ","Enabling individuals and businesses to manage ","Building shareholder value by delivering ")
 Set c2=$LB("","advanced ","cutting-edge ","breakthrough ","complex ","high-performance ","scalable ","just-in-time ","open ","personal ","high-tech ","high-touch ","open-source ","virtual ","interactive ","eco-friendly ","agile ","cloud-based ","premise-based ","sustainable ","intelligent ","innovative ","world-class ","knowledge-based ","compliant ","secure ","standards-based ","disruptive ","non-linear ","dynamic ","enhanced ","real-time ","synergistic ")
 Set c3=$LB("","quantum ","nano-","hyper-","optical ","financial ","multi-media ","object-oriented ","broad-band ","secure ","digital ","enterprise ","crowd-sourced ","genetic ","wireless ","satellite-based ","ISO 9003-ready ","Web 3.0 ","HTML5 ","post-Microsoft ","natural language ","big data ","predictive analytic ","seven-sigma ","distributed ","massively-parallel ","mission-critical ")
 Set c4=$LB("","devices and ","instrumentation ","graphical ","XML ","Internet ","application development ","database ","data warehouse ","forecasting ","voice-enabled ","cold-fusion powered ","platforms for ","advanced ","virtualized ")
 Set c5=$LB("services ","technologies ","media ","content ","middle-ware ","connectivity ","consulting services ","gaming ","models ","productivity tools ","instruments ","marketing services ","apps ")
 Set c6=$LB("for on-line commerce.","for the Financial community.","for discriminating investors.","for the Entertainment industry.","for consumers.","for the Fortune 5.","for the Fortune 50.","for the Fortune 500.","for the Fortune 5000.","for the enterprise.","for the desktop.","for the Health Care community.","for mobile devices.","for social networks.","for industry and government.","for emerging markets.","for industry and academia.","for capital markets.","for high-worth individuals.","for our long-term clients.","for the pharmaceutical industry.","for additive manufacturing.")
 Quit $LI(c1,$$$PRand($LL(c1))+1)_$LI(c2,$$$PRand($LL(c2))+1)_$LI(c3,$$$PRand($LL(c3))+1)_$LI(c4,$$$PRand($LL(c4))+1)_$LI(c5,$$$PRand($LL(c5))+1)_$LI(c6,$$$PRand($LL(c6))+1)
]]></Implementation>
</Method>

<Method name="Name">
<Description><![CDATA[
Return a string containing a random name as <i>lastname,firstname</i>.
<p><var>gender</var> is a optional string used to control the 
gender of the generated name: 1 is Male, 2 = Female, "" is either.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>gender:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Quit ..LastName()_","_..FirstName($g(gender))_" "_$C($$$PRand(26)+65)_"."
]]></Implementation>
</Method>

<Method name="SSN">
<Description>
Return a random U.S. Social Security Number.</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[($$$PRand(899)+100)_"-"_($$$PRand(89)+10)_"-"_($$$PRand(8999)+1000)
]]></Implementation>
</Method>

<Method name="String">
<Description><![CDATA[
Return a string value of the form <random character>_<random number less than 9999> and whose length
does not exceed <var>len</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>len:%Integer=1</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ QUIT $e($c($$$PRand(26)+65)_$$$PRand(9999),1,$s(len>0:len,1:1))
]]></Implementation>
</Method>

<Method name="StringMin">
<Description><![CDATA[
Return a random string value whose length is at least <var>minlen</var> and not greater than <var>maxlen</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>minlen:%Integer=1,maxlen:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	if maxlen '< minlen { set len=$$$PRand(maxlen-minlen+1)+minlen, string="" for i=1:1:len { Set charn=$s($$$PRand(2):$$$PRand(26)+65,1:$$$PRand(26)+97),string=string_$s(charn<123:$c(charn),1:" ") } quit string } else { quit "" }
]]></Implementation>
</Method>

<Method name="Street">
<Description>
Return a random street address.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 s t1=$lb("Maple","Ash","Elm","Oak","Main","First","Second","Washington","Franklin","Clinton","Madison"), t2=$lb("Street","Avenue","Blvd","Court","Place","Drive")
 Quit ($$$PRand(9999)+1)_" "_$li(t1,$$$PRand($ll(t1))+1)_" "_$li(t2,$$$PRand($ll(t2))+1)
]]></Implementation>
</Method>

<Method name="Syllable">
<Description>
	Return a string of random syllables and spaces. 
	The algorithm uses several syllable 'lists'. First, a list is randomly 
	chosen. Then a syllable from that list is chosen and added to the string. 
	Then, if a random boolean is TRUE, a space is appended. Syllables are added to the 
	string until the string length exceeds a random length less than or equal 
	to the parameter maxlen.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>maxlen:%Integer=30</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set len=$$$PRand(maxlen)+1
	Set s(1)=$lb("A","I","Am","An","Iso","Ic")
	Set s(2)=$lb("Lo","Ly","Re","Co","To","On","Op")
	Set s(3)=$lb("Com","Syn","Tri","Uni","Via","Geo","Ism","Ion","Ies","Two","Pus","Tech","Quo")
	Set s(4)=$lb("Able","Cycle","Atic","Look","Mili","Nano","Octo","Pyro","Status","Kilo","Dyna","Endo","Ecto","Gyro","Heli","Atic","Able","Look","Much","Graph","Gram","Wave","Sound","Plasm","Physical","Scope","Copter","Morph","Range","Pede","Second","Zeno","Photo","Type","Much","Invent","Thetic")
	Set string=""
	For  q:$l(string)>len  s p=$$$PRand(4)+1 s string=string_$li(s(p),$$$PRand($ll(s(p)))+1) s:$$$PRand(2) string=string_" "
	Quit $extract(string,1,len)
]]></Implementation>
</Method>

<Method name="TimeStamp">
<Description><![CDATA[
Return a random TimeStamp value that is between the specified <var>min</var> and <var>max</var> timestamp values. 
The default <var>min</var> value is the default <method>Date</method> min date value with time = 0. 
The default <var>max</var> value is the default <method>Date</method> max date value with time = 86399 (23:59:59). 
If either <var>min</var> or <var>max</var> is not a valid %TimeStamp value, then the default value is used instead.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>min:%TimeStamp,max:%TimeStamp</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	try {
		if $Get(min) '= "" { set minh = $zdth(min,3) set mindateh = $Piece(minh,",",1), mintimeh = $Piece(minh,",",2) } else { set mindateh = "", mintimeh = 0 }
		if $Get(max) '= "" { set maxh = $zdth(max,3) set maxdateh = $Piece(maxh,",",1), maxtimeh = $Piece(maxh,",",2) } else { set maxdateh = "", maxtimeh = 86399 }
	}
	catch tException { set mindateh = "", mintimeh = 0, maxdateh = "", maxtimeh = 86399 }
	Set date=##class(%PopulateUtils).Date(mindateh,maxdateh)
	Set time=##class(%PopulateUtils).Integer(mintimeh,maxtimeh)
	Quit $zd(date,3)_" "_$zt(time,1)
]]></Implementation>
</Method>

<Method name="Title">
<Description>
Return a random job title.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[

 Set t1=$LB("","Senior ","Associate ","Assistant ","Strategic ","Global ","Laboratory ","Executive ")
 Set t2=$LB("Engineer","Sales Rep.","Support Engineer","Developer","Marketing Manager","Accounts Rep.","Resources Director","Director","Product Manager","Research Asst.","Systems Engineer","Technician","WebMaster","Administrator","Product Specialist","Accountant","Hygienist")

 Quit $LI(t1,$$$PRand($LL(t1))+1)_$LI(t2,$$$PRand($LL(t2))+1)
]]></Implementation>
</Method>

<Method name="USPhone">
<Description>
Return a random U.S. phone number.</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[($$$PRand(799)+200)_"-"_($$$PRand(799)+200)_"-"_($$$PRand(8999)+1000)
]]></Implementation>
</Method>

<Method name="USState">
<Description>
Return a random U.S. state abbreviation.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 s t1=$lb("AK","AL","AR","AZ","CA","CO","CT","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI","MN","MO","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WI","WV","WY")
 Quit $li(t1,$$$PRand($ll(t1))+1)
]]></Implementation>
</Method>

<Method name="USZip">
<Description>
Return a random U.S. Zone Improvement Plan (ZIP) code.</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[($$$PRand(89999)+10000)
]]></Implementation>
</Method>

<Method name="ValueList">
<Description>
Return a random piece from a delimited list. The first character in the list is the delimiter.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>vallist</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 Set del=$e(vallist,1)
 Quit $piece(vallist,del,$$$PRand($length(vallist,del)-1)+2)
]]></Implementation>
</Method>

<Method name="VarString">
<Description><![CDATA[
Return a random string value of random length 
up to <var>maxlen</var> characters.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>maxlen:%Integer=1</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 s:'$g(maxlen) maxlen=1
 s len=$$$PRand(maxlen)+1
 s string=""
 For i=1:1:len Set string=string_$c($$$PRand(64)+32)
 QUIT string
]]></Implementation>
</Method>

<Method name="Color">
<Description>
Return a random color name (one of 5 possible values).</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 s t1=$lb("Red","Green","Blue","Yellow","Black")
 Quit $li(t1,$$$PRand($ll(t1))+1)
]]></Implementation>
</Method>

<Method name="Product">
<Description>
Return a random product name (one of 4 possible values).</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 s t1=$lb("Table","Chair","Lamp","Desk")
 Quit $li(t1,$$$PRand($ll(t1))+1)
]]></Implementation>
</Method>

<Method name="Random">
<Description><![CDATA[
Return a random number from 0-<var>n</var> using a random number generator that is
seeded by <class>%Library.Populate</class>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>n:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Quit ##class(%Populate).Random(n)
]]></Implementation>
</Method>

<Method name="GenerateName">
<Description>
w ##class(EMCI.Utils.GenerateTestData).GenerateName()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tRandom = $RANDOM(^DWNames)+1
	set tName = $G(^DWNames(tRandom))
	
	while ($F(tName,"  ")>0)
	{
		set tName = $REPLACE(tName,"  "," ")	
	}
	q tName
]]></Implementation>
</Method>

<Method name="GenerateSurname">
<Description>
w ##class(EMCI.Utils.GenerateTestData).GenerateSurname()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tRandom = $RANDOM(^DWSurnames)+1
	set tSurname = $G(^DWSurnames(tRandom))
	q tSurname
]]></Implementation>
</Method>

<Method name="GenerateDOB">
<Description>
w ##class(EMCI.Utils.GenerateTestData).GenerateDOB()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tRandom = $RANDOM(70*365)
	set tDOBInt = +$H-tRandom
	
	q $ZD(tDOBInt,8)
]]></Implementation>
</Method>

<Method name="GenerateGender">
<Description>
w ##class(EMCI.Utils.GenerateTestData).GenerateGender()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tRandom = $RANDOM(2)
	set tGender = $SELECT(tRandom=0:"male",1:"female")
	
	q tGender
]]></Implementation>
</Method>

<Method name="GenerateSAIdNumber">
<Description>
w ##class(EMCI.Utils.GenerateTestData).GenerateSAIdNumber("19820721",1,1)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDOB,pMale,pCitizen</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tGender = $RANDOM(5) + $SELECT(pMale:5, 1:0)
    set tCitizenBit = $SELECT(pCitizen:0, 1:1)
    
    set tRandom = $RANDOM(1000)
 
    if (tRandom < 10) 
    {
	    set tRandom = "00"_tRandom
    } elseif (tRandom < 100) {
	    set tRandom = "0"_tRandom
    }
 
    set tTotal = pDOB_tGender_tRandom_tCitizenBit_"8"
    set tTotal = ##class(EMCI.Utils.NumberGeneratorAlgorithms).GenerateLuhnNumber(tTotal)
    
    q tTotal
]]></Implementation>
</Method>

<Method name="GenerateHouseNumber">
<Description>
w ##class(EMCI.Utils.GenerateTestData).GenerateHouseNumber()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tRandom = $RANDOM(9999)
	q tRandom
]]></Implementation>
</Method>

<Method name="GenerateSteetName">
<Description>
w ##class(EMCI.Utils.GenerateTestData).GenerateSteetName()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tRandom = $RANDOM(^DWNames)+1
	set tName = $G(^DWNames(tRandom))
	q $P(tName," ",1)
]]></Implementation>
</Method>

<Method name="GenerateStreetType">
<Description>
w ##class(EMCI.Utils.GenerateTestData).GenerateStreetType()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tRandom = $RANDOM(4)
	set tStreetType = $SELECT(tRandom=0:"Street", tRandom=1:"Avenue", tRandom=2:"Place", tRandom=3:"Road")
	q tStreetType
]]></Implementation>
</Method>

<Method name="GenerateTelephone">
<Description>
w ##class(EMCI.Utils.GenerateTestData).GenerateTelephone()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tTelNo = "0"
	
	while ($L(tTelNo) < 10)
	{
		set tTelNo = tTelNo_$RANDOM(10)
	}
	
	q tTelNo
]]></Implementation>
</Method>

<Method name="GeneratePolicyNumber">
<Description>
w ##class(EMCI.Utils.GenerateTestData).GeneratePolicyNumber()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tPolicyNumber = ""
	
	while ($L(tPolicyNumber) < 9)
	{
		set tPolicyNumber = tPolicyNumber_$RANDOM(10)
	}
	
	q tPolicyNumber
]]></Implementation>
</Method>

<Method name="GenerateAddress">
<Description>
w ##class(EMCI.Utils.GenerateTestData).GenerateAddress()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tRandom = $RANDOM(^Addresses)+1
	set tAddress = ^Addresses(tRandom)
	q tAddress
]]></Implementation>
</Method>

<Method name="GenerateNickName">
<Description>
w ##class(EMCI.Utils.GenerateTestData).GenerateNickName("amanda")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pName</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tNickName = $G(^NickNames($ZCVT(pName,"l")))
	q tNickName
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =====================================

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Functions to load data from files

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// =====================================

]]></Content>
</UDLText>

<Method name="LoadAddresses">
<Description>
w ##class(EMCI.Utils.GenerateTestData).LoadAddresses("c:\tmp\Addresses.csv")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	k ^Addresses
	s tFile = ##class(%File).%New(pFileName)
	d tFile.Open("RS")
	
	s tLine = tFile.ReadLine()
	while (tLine'="")
	{
		s ^Addresses = $G(^Addresses)+1
		s ^Addresses(^Addresses) = tLine
		s tLine = tFile.ReadLine()
	}
	
	d tFile.Close()
	
	q $$$OK
]]></Implementation>
</Method>

<Method name="LoadNickNames">
<Description>
w ##class(EMCI.Utils.GenerateTestData).LoadNickNames("c:\tmp\names.csv")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	k ^NickNames
	s tFile = ##class(%File).%New(pFileName)
	d tFile.Open("RS")
	
	s tLine = tFile.ReadLine()
	while (tLine'="")
	{
		s ^NickNames($ZCVT($P(tLine,",",1),"l")) = $P(tLine,$P(tLine,",",1)_",",2)
		s tLine = tFile.ReadLine()
	}
	
	d tFile.Close()
	
	q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =======================================

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Test Function to generate a patient

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// =======================================

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// w ##class(EMCI.Utils.GenerateTestData).GenerateSamplePatient()

]]></Content>
</UDLText>

<Method name="GenerateSamplePatient">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Generate FirstName
	set tFirstName = ##class(EMCI.Utils.GenerateTestData).GenerateName()
	
	// Get nickname if exists
	set tNickName = ##class(EMCI.Utils.GenerateTestData).GenerateNickName($P(tFirstName," ",1))
	
	// Generate Surname
	set tSurname = ##class(EMCI.Utils.GenerateTestData).GenerateSurname()
	
	// Generate Birthdate
	set tBirthDate = ##class(EMCI.Utils.GenerateTestData).GenerateDOB()
	
	// Generate Gender
	set tGender = ##class(EMCI.Utils.GenerateTestData).GenerateGender()
	
	// Generate ID Number
	set tIsMale = 0
	if (tGender = "male") set tIsMale = 1
	set tIDNumber = ##class(EMCI.Utils.GenerateTestData).GenerateSAIdNumber($E(tBirthDate,3,*),tIsMale,1)
	
	// Generate phone number
	set tPhoneNumber = ##class(EMCI.Utils.GenerateTestData).GenerateTelephone()
	
	// Generate Address
	set tAddress = ##class(EMCI.Utils.GenerateTestData).GenerateAddress()
	
	// Generate Policy Number
	set tPolicyNumber = ##class(EMCI.Utils.GenerateTestData).GeneratePolicyNumber()
	
	w "Patient:",!
	w "--------",!
	w "First Name: "_tFirstName,!
	w "Nickname: "_tNickName,!
	w "Surname: "_tSurname,!
	w "Birth Date: "_tBirthDate,!
	w "Gender: "_tGender,!
	w "IDNumber: "_tIDNumber,!
	w "Phone Number: "_tPhoneNumber,!
	w "Address: "_tAddress,!
	w "Policy Number:"_tPolicyNumber,!
	
	q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ===============================================

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Functions to mutate existing data

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// ===============================================

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// w ##class(EMCI.Utils.GenerateTestData).GetRandomChar()

]]></Content>
</UDLText>

<Method name="GetRandomChar">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tRandomASCII = ($RANDOM(74)+1)+48
	q $CHAR(tRandomASCII)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// w ##class(EMCI.Utils.GenerateTestData).GetRandomDigit()

]]></Content>
</UDLText>

<Method name="GetRandomDigit">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tRandom = $RANDOM(10)
	q tRandom
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// w ##class(EMCI.Utils.GenerateTestData).GenerateSpellingError("Stephan")

]]></Content>
</UDLText>

<Method name="GenerateSpellingError">
<ClassMethod>1</ClassMethod>
<FormalSpec>pInputString</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if (pInputString="") q ""
	
	set tRandomPosition = $RANDOM($LENGTH(pInputString))+1
	set tErrorType = $RANDOM(3)
	
	if (tErrorType = 0)
	{
		// Remove character
		set $E(pInputString,tRandomPosition,tRandomPosition) = ""		
	} elseif (tErrorType = 1) {
		// Add character
		set tNewChar = ..GetRandomChar()
		set $E(pInputString,tRandomPosition,tRandomPosition) = $E(pInputString,tRandomPosition,tRandomPosition)_tNewChar
	} else {
		// Change existing character
		set tNewChar = ..GetRandomChar()
		set $E(pInputString,tRandomPosition,tRandomPosition) = tNewChar
	}
	
	q pInputString
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// w ##class(EMCI.Utils.GenerateTestData).GenerateDigitError("0123456789")

]]></Content>
</UDLText>

<Method name="GenerateDigitError">
<ClassMethod>1</ClassMethod>
<FormalSpec>pInputString</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if (pInputString="") q ""
	
	set tRandomPosition = $RANDOM($LENGTH(pInputString))+1
	set tErrorType = $RANDOM(3)
	
	if (tErrorType = 0)
	{
		// Remove character
		set $E(pInputString,tRandomPosition,tRandomPosition) = ""		
	} elseif (tErrorType = 1) {
		// Add character
		set tNewChar = ..GetRandomDigit()
		set $E(pInputString,tRandomPosition,tRandomPosition) = $E(pInputString,tRandomPosition,tRandomPosition)_tNewChar
	} else {
		// Change existing character
		set tNewChar = ..GetRandomDigit()
		set $E(pInputString,tRandomPosition,tRandomPosition) = tNewChar
	}
	
	q pInputString
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ===================================================

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Data generation functions

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// ===================================================

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// w ##class(EMCI.Utils.GenerateTestData).TestFunction()

]]></Content>
</UDLText>

<Method name="TestFunction">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set x = ##class(FHIR.Patient).%OpenId(29633)
	w x.toJSON(),!,!
	set x = ##class(FHIR.Patient).%OpenId(29632)
	w x.toJSON(),!,!
	set x = ##class(FHIR.Patient).%OpenId(29631)
	w x.toJSON(),!,!
	set x = ##class(FHIR.Patient).%OpenId(29630)
	w x.toJSON()
	
	Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// w ##class(EMCI.Utils.GenerateTestData).GenerateDataset(10,0)

]]></Content>
</UDLText>

<Method name="GenerateDataset">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNumberOfRecords,pNumberOfMutations</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	for tRecordCnt = 1:1:pNumberOfRecords
	{
		set tSC = ..GeneratePatient(.tPatientId)
		
		if '$$$ISERR(tSC)
		{
			for tMutationCnt = 1:1:pNumberOfMutations
			{
				s tMSC = ..PerformMutation(tPatientId, .tMutatedPatientId)
				
				if ($$$ISERR(tMSC))
				{
					d $SYSTEM.Status.DisplayError(tMSC)
					q	
				}
				
				s tPatientId = tMutatedPatientId
			}
		}	
	}
	
	q $$$OK
]]></Implementation>
</Method>

<Method name="GeneratePatient">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pPatientId</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Generate FirstName
	set tFirstName = ##class(EMCI.Utils.GenerateTestData).GenerateName()
	
	// Get nickname if exists
	set tNickName = ##class(EMCI.Utils.GenerateTestData).GenerateNickName($P(tFirstName," ",1))
	
	// Generate Surname
	set tSurname = ##class(EMCI.Utils.GenerateTestData).GenerateSurname()
	
	// Generate Birthdate
	set tBirthDate = ##class(EMCI.Utils.GenerateTestData).GenerateDOB()
	
	// Generate Gender
	set tGender = ##class(EMCI.Utils.GenerateTestData).GenerateGender()
	
	// Generate ID Number
	set tIsMale = 0
	if (tGender = "male") set tIsMale = 1
	set tIDNumber = ##class(EMCI.Utils.GenerateTestData).GenerateSAIdNumber($E(tBirthDate,3,*),tIsMale,1)
	
	// Generate phone number
	set tPhoneNumber = ##class(EMCI.Utils.GenerateTestData).GenerateTelephone()
	
	
	// Generate Address
	set tAddress = ##class(EMCI.Utils.GenerateTestData).GenerateAddress()
	set tPostalCode = $P(tAddress,",",1)
	set tSuburb = $P(tAddress,",",2)
	set tCity = $P(tAddress,",",3)
	set tProvince = $P(tAddress,",",4)
	set tStreetNumber = ..GenerateHouseNumber()
	set tStreetName = ..GenerateSteetName()
	
	
	// Generate Policy Number
	set tPolicyNumber = ##class(EMCI.Utils.GenerateTestData).GeneratePolicyNumber()
	
	// Create Address
	set tAddressObj = ##class(FHIR.Address).%New()
	set tAddressObj.ResourceType = "Address"
	set tAddressObj.Type = "physical"
	set tAddressObj.Use = "home"
	set tAddressObj.City = tCity
	set tAddressObj.Country = "ZA"
	set tAddressObj.District = tProvince
	set tAddressObj.PostalCode = tPostalCode
	set tAddressObj.State = tProvince
	do tAddressObj.Line.Insert(tStreetNumber_" "_tStreetName)
	do tAddressObj.Line.Insert(tSuburb)
	set tAddressObj.Text = tStreetNumber_" "_tStreetName_","_tSuburb
	
	// Create Name
	set tNameObj = ##class(FHIR.HumanName).%New()
	set tNameObj.Family = tSurname
	
	for tGivenCount = 1:1:$LENGTH(tFirstName," ")
	{
		do tNameObj.Given.Insert($P(tFirstName," ",tGivenCount))
	}
	set tNameObj.Use = "usual"
	set tNameObj.Text = tFirstName
	
	// Create Identifiers
	// SA ID
	set tIDAssigner = ##class(FHIR.Reference).%New()
	set tIDAssigner.Display = "South African Government"
	set tIDAssigner.Reference = "http://hst.co.za/Organization/4"
	
	set tSAIdObj = ##class(FHIR.Identifier).%New()
	set tSAIdObj.Assigner = tIDAssigner
	set tSAIdObj.Value = tIDNumber
	set tSAIdObj.Use = "usual"
	set tSAIdObj.System = "http://hst.co.za/NamingSystem/19"
	
	// Policy Number
	set tPolicyAssigner = ##class(FHIR.Reference).%New()
	set tPolicyAssigner.Display = "Medicilinic pty(ltd)"
	set tPolicyAssigner.Reference = "http://hst.co.za/Organization/58"
	
	set tPolicyIdObj = ##class(FHIR.Identifier).%New()
	set tPolicyIdObj.Assigner = tPolicyAssigner
	set tPolicyIdObj.Value = tPolicyNumber
	set tPolicyIdObj.Use = "official"
	set tPolicyIdObj.System = "http://hst.co.za/NamingSystem/16"
	
	// Organization
	set tOrganization = ##class(FHIR.ManagingOrganization).%New()
	set tOrganization.Display = "Medicilinic pty(ltd)"
	set tOrganization.Reference = "http://hst.co.za/Organization/58"
	
	// Contact Point
	set tContactPoint = ##class(FHIR.ContactPoint).%New()
	set tContactPoint.Rank = 1
	set tContactPoint.System = "phone"
	set tContactPoint.Use = "mobile"
	set tContactPoint.ResourceType = "ContactPoint"
	set tContactPoint.Value = tPhoneNumber
	
	// Patient
	set tPatientObj = ##class(FHIR.Patient).%New()
	set tPatientObj.Active = 1
	set tPatientObj.BirthDate = $ZDH(tBirthDate,8)
	set tPatientObj.DeceasedBoolean = 0
	set tPatientObj.Gender = tGender
	set tPatientObj.MultipleBirthBoolean = 0
	set tPatientObj.ResourceType = "Patient"
	do tPatientObj.Address.Insert(tAddressObj)
	do tPatientObj.Name.Insert(tNameObj)
	do tPatientObj.Identifier.Insert(tSAIdObj)
	do tPatientObj.Identifier.Insert(tPolicyIdObj)
	set tPatientObj.ManagingOrganization = tOrganization
	do tPatientObj.Telecom.Insert(tContactPoint)
	
	s tSC = tPatientObj.%Save()
	
	
	w "Patient:",!
	w "--------",!
	w "First Name: "_tFirstName,!
	w "Nickname: "_tNickName,!
	w "Surname: "_tSurname,!
	w "Birth Date: "_tBirthDate,!
	w "Gender: "_tGender,!
	w "IDNumber: "_tIDNumber,!
	w "Phone Number: "_tPhoneNumber,!
	w "Address: "_tAddress,!
	w "Policy Number:"_tPolicyNumber,!
	w "Saved: "_tSC,!!
	
	set pPatientId = tPatientObj.%Id()
	
	k tOrganization
	k tAddressObj
	k tNameObj
	k tIDAssigner
	k tSAIdObj
	k tPolicyAssigner
	k tPolicyIdObj
	k tContactPoint
	k tPatientObj
	
	q tSC
]]></Implementation>
</Method>

<Method name="PerformMutation">
<ClassMethod>1</ClassMethod>
<FormalSpec>tPatientId,*tMutatedPatientId</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//kill all variables except sc
	set tOriginalPatientObj = ##class(FHIR.Patient).%OpenId(tPatientId)
	
	// Generate Address
	set tAddress = ##class(EMCI.Utils.GenerateTestData).GenerateAddress()
	set tPostalCode = $P(tAddress,",",1)
	set tSuburb = $P(tAddress,",",2)
	set tCity = $P(tAddress,",",3)
	set tProvince = $P(tAddress,",",4)
	set tStreetNumber = ..GenerateHouseNumber()
	set tStreetName = ..GenerateSteetName()
	
	// Create Address
	set tAddressObj = ##class(FHIR.Address).%New()
	set tAddressObj.ResourceType = "Address"
	set tAddressObj.Type = "physical"
	set tAddressObj.Use = "home"
	set tAddressObj.City = tCity
	set tAddressObj.Country = "ZA"
	set tAddressObj.District = tProvince
	set tAddressObj.PostalCode = tPostalCode
	set tAddressObj.State = tProvince
	do tAddressObj.Line.Insert(tStreetNumber_" "_tStreetName)
	do tAddressObj.Line.Insert(tSuburb)
	set tAddressObj.Text = tStreetNumber_" "_tStreetName_","_tSuburb
	
	// Patient
	set tPatientObj = ##class(FHIR.Patient).%New()
	set tPatientObj.Active = tOriginalPatientObj.Active
	set tPatientObj.BirthDate = tOriginalPatientObj.BirthDate
	set tPatientObj.DeceasedBoolean = tOriginalPatientObj.DeceasedBoolean
	set tPatientObj.Gender = tOriginalPatientObj.Gender
	set tPatientObj.MultipleBirthBoolean = tOriginalPatientObj.MultipleBirthBoolean
	set tPatientObj.ResourceType = tOriginalPatientObj.ResourceType
	do tPatientObj.Address.Insert(tAddressObj)
	
	for tNameCnt = 1:1:tOriginalPatientObj.Name.Count()
	{
		// Create Name
		
		set tSurname = tOriginalPatientObj.Name.GetAt(tNameCnt).Family
		
		set tNameObj = ##class(FHIR.HumanName).%New()
		set tNameObj.Family = ..GenerateSpellingError(tSurname)
		
		set tFirstName = ""
		for tGivenCount = 1:1:tOriginalPatientObj.Name.GetAt(tNameCnt).Given.Count()
		{
			set tGiven = ..GenerateSpellingError(tOriginalPatientObj.Name.GetAt(tNameCnt).Given.GetAt(tGivenCount))
			set tFirstName = tFirstName_" "_tGiven
			do tNameObj.Given.Insert(tGiven)
		}
		
		set tNameObj.Use = "usual"
		set tNameObj.Text = tFirstName
		
		do tPatientObj.Name.Insert(tNameObj)
	}

	for tIdentifierCnt = 1:1:tOriginalPatientObj.Identifier.Count()
	{
		// Create Identifier
		
		set tIdentifierObj = ##class(FHIR.Identifier).%New()
		set tIdentifierObj.Assigner = tOriginalPatientObj.Identifier.GetAt(tIdentifierCnt).Assigner
		set tIdentifierObj.Value = ..GenerateDigitError(tOriginalPatientObj.Identifier.GetAt(tIdentifierCnt).Value)
		set tIdentifierObj.Use = tOriginalPatientObj.Identifier.GetAt(tIdentifierCnt).Use
		set tIdentifierObj.System = tOriginalPatientObj.Identifier.GetAt(tIdentifierCnt).System
		
		do tPatientObj.Identifier.Insert(tIdentifierObj)
	}
	
	for tTelecomCnt = 1:1:tOriginalPatientObj.Telecom.Count()
	{
		// Create Contact Point
		
		set tContactPoint = ##class(FHIR.ContactPoint).%New()
		set tContactPoint.Rank = tOriginalPatientObj.Telecom.GetAt(tTelecomCnt).Rank
		set tContactPoint.System = tOriginalPatientObj.Telecom.GetAt(tTelecomCnt).System
		set tContactPoint.Use = tOriginalPatientObj.Telecom.GetAt(tTelecomCnt).Use
		set tContactPoint.ResourceType = tOriginalPatientObj.Telecom.GetAt(tTelecomCnt).ResourceType
		set tContactPoint.Value = ..GenerateDigitError(tOriginalPatientObj.Telecom.GetAt(tTelecomCnt).Value)
	
		do tPatientObj.Telecom.Insert(tContactPoint)
	}
	

	set tPatientObj.ManagingOrganization = tOriginalPatientObj.ManagingOrganization.%ConstructClone()
	
	set tSC = tPatientObj.%Save()
	
	set tMutatedPatientId = tPatientObj.%Id()
	
	w "Created mutation ID: "_tMutatedPatientId,!
	
	k tOriginalPatientObj
	k tAddress
	k tPostalCode
	k tSuburb
	k tCity
	k tProvince
	k tStreetNumber
	k tStreetName
	k tAddressObj
	k tNameObj
	k tSurname
	k tGiven
	k tFirstName
	k tIdentifierObj
	k tContactPoint
	k tPatientObj
	
	q tSC
]]></Implementation>
</Method>

<Method name="AddToNamesDistinctTables">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set counter = 0
	set sql = "SELECT ID FROM EMCI_InterfaceConsumer.InterfaceConsumer"
	set element = ##class(%ResultSet).%New()
	do element.Prepare(sql)
	
	do element.Execute()
	
	while (element.Next())
	{
		set pRecord = ##class(EMCI.InterfaceConsumer.InterfaceConsumer).%OpenId(element.GetData("1"))
		for i=1:1:pRecord.Names.Count()
		{
			for j =1:1:pRecord.Names.GetAt(i).GivenNames.Count()
			{
				s nameToCheck = pRecord.Names.GetAt(i).GivenNames.GetAt(j).GivenName.Name
				
				if (nameToCheck '= "")
				{
					set counter = counter+1
					s ^DebugNamesCount = counter
					do ##class(EMCI.MasterConsumer.DistinctPropertyValues).AddValueIfNotExist("GivenName",nameToCheck)
				}
			}
		}
		k pRecord
	}
	
	q $$$OK
]]></Implementation>
</Method>

<Method name="AddToSurnamesDistinctTables">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set counter = 0
	set sql = "SELECT ID FROM EMCI_InterfaceConsumer.InterfaceConsumer"
	set element = ##class(%ResultSet).%New()
	do element.Prepare(sql)
	
	do element.Execute()
	
	while (element.Next())
	{
		set pRecord = ##class(EMCI.InterfaceConsumer.InterfaceConsumer).%OpenId(element.GetData("1"))
		
		for i=1:1:pRecord.Names.Count()
		{
			s surnameToCheck = pRecord.Names.GetAt(i).HumanName.Family	
			s surnameToCheck = ##class(EMCI.Utils.BusinessRules).NormalizeSysSurname(surnameToCheck)
				
			if (surnameToCheck'="")
			{
				set counter = counter+1
				s ^DebugSurnameCount = counter
				do ##class(EMCI.MasterConsumer.DistinctPropertyValues).AddValueIfNotExist("Surname",surnameToCheck)
			}
		}
		k pRecord
	}
	
	q $$$OK
]]></Implementation>
</Method>

<Method name="AddToAddressDistinctTables">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set counter = 0
	set sql = "SELECT ID FROM EMCI_InterfaceConsumer.InterfaceConsumer"
	set element = ##class(%ResultSet).%New()
	do element.Prepare(sql)
	
	do element.Execute()
	
	while (element.Next())
	{
		set pRecord = ##class(EMCI.InterfaceConsumer.InterfaceConsumer).%OpenId(element.GetData("1"))
	
		for i=1:1:pRecord.Addresses.Count()
		{
			s Line1 = pRecord.Addresses.GetAt(i).Address.Line1
			s Line2 = pRecord.Addresses.GetAt(i).Address.Line2
			s Suburb = pRecord.Addresses.GetAt(i).Address.Suburb
			s City = pRecord.Addresses.GetAt(i).Address.City
			s PostalCode = pRecord.Addresses.GetAt(i).Address.PostalCode
			s Province = pRecord.Addresses.GetAt(i).Address.Province
			s CountryCode = ""
			
			if (pRecord.Addresses.GetAt(i).Country '= "")
		    {
			    s CountryCodeId = pRecord.Addresses.GetAt(i).Country
		    	//d pRecord.Addresses.GetAt(i).rCountryIdSetObjectId(CountryCodeId)
		    	
		    	&SQL(SELECT IsoTwoLetterCode INTO :CountryCode FROM EMCI_CodeTables.CountryCodes WHERE ID=:CountryCodeId)
				
				if (SQLCODE '= 0)
				{
					s CountryCode = ""
				}
		    }
		    
			s objAddress = ##class(EMCI.Utils.AddressParser).GetAddress(Line1, Line2, Suburb, City, PostalCode, Province, CountryCode)
		    	
		    set addressToSearch = ##class(EMCI.Utils.AddressParser).GetStreetNameFromStreetAddress(objAddress.StreetName)
		    
		    if (addressToSearch'="")
			{
				set counter = counter+1
				s ^DebugAddrCount = counter
				do ##class(EMCI.MasterConsumer.DistinctPropertyValues).AddValueIfNotExist("StreetName",addressToSearch)
			}
		}
		k pRecord
	}
	q $$$OK
]]></Implementation>
</Method>

<Method name="UpdateEMCIDFromId">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	k ^DebugIDCount 
	s tSQL = "SELECT rConsumerId, IdentifierValue FROM EMCI_MasterConsumer.MasterConsumerIdentifiers where rIdentifierUseId = 2 AND rIdentifierTypeId->CB_CODE = 'MR'"
	s tElement = ##class(%ResultSet).%New()
	d tElement.Prepare(tSQL)
	
	d tElement.Execute()
	
	while (tElement.Next())
	{
		s ^DebugIDCount = $G(^DebugIDCount)+1
		s tMasterConsumer = ##class(EMCI.MasterConsumer.MasterConsumer).%OpenId(tElement.Data("rConsumerId"))
		s tMasterConsumer.EMCIUId = tElement.Data("IdentifierValue")
		d tMasterConsumer.%Save()
	}
	
	s ^DebugIDCount("Done") = 1
	
	q $$$OK
]]></Implementation>
</Method>

<Method name="TestInsert">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w "Start: "_$ZU(188),!
	do ##class(EMCI.MasterConsumer.DistinctPropertyValues).AddValueIfNotExist("Surname","VAn ZYL")
	w "End: "_$ZU(188),!
	q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// do ##class(EMCI.Utils.GenerateTestData).MoveInvalidIDNumbers()

]]></Content>
</UDLText>

<Method name="MoveInvalidIDNumbers">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Do master consumers
	s tSQL = "SELECT ID, IdentifierValue,rConsumerId, rConsumerId->rgenderId->cb_code As Gender,rConsumerId->BirthDateTime FROM EMCI_MasterConsumer.MasterConsumerIdentifiers WHERE rIdentifierTypeId->CB_code = 'NI'"
	s tElement = ##class(%ResultSet).%New()
	d tElement.Prepare(tSQL)
	
	d tElement.Execute()
	
	while (tElement.Next())
	{
		do ..CheckIdNumber("EMCI.MasterConsumer.MasterConsumer", tElement.Get("ID"), tElement.Get("Gender"), tElement.Get("BirthDateTime"), tElement.Get("IdentifierValue"))
	}
	k tElement
	
	// Do copy consumers
	s tSQL = "SELECT ID, IdentifierValue,rConsumerId, rConsumerId->rgenderId->cb_code As Gender,rConsumerId->BirthDateTime FROM EMCI_CopyConsumer.CopyConsumerIdentifiers WHERE rIdentifierTypeId->CB_code = 'NI'"
	s tElement = ##class(%ResultSet).%New()
	d tElement.Prepare(tSQL)
	
	d tElement.Execute()
	
	while (tElement.Next())
	{
		do ..CheckIdNumber("EMCI.CopyConsumer.CopyConsumer", tElement.Get("ID"), tElement.Get("Gender"), tElement.Get("BirthDateTime"), tElement.Get("IdentifierValue"))
	}
	k tElement
	q $$$OK
]]></Implementation>
</Method>

<Method name="CheckIdNumber">
<ClassMethod>1</ClassMethod>
<FormalSpec>pClassname,pIdentiferId,pGender,pBirthDateTime,pIdentifierValue</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s MoveIDToSeconday = 0
	s tGenderCheck = ""
	
	if (pGender = "male")
	{
		s tGenderCheck = 1
	} elseif (pGender = "female") {
		s tGenderCheck = 0
	}
	
	if ((tGenderCheck'="")&&(pBirthDateTime'=""))
	{
		s tIsValid = ##class(EMCI.Utils.ValidateSAID).ValidateIDwithGenderAndDOB(pIdentifierValue, tGenderCheck, pBirthDateTime) 
		if (tIsValid = 0) s MoveIDToSeconday = 1
	}
	
	if (MoveIDToSeconday = 1)
	{
		s ConsumerRecord=$CLASSMETHOD(pClassname,"%New")
	
		s tOldIdentifier = $CLASSMETHOD(pClassname_"Identifiers","%OpenId",pIdentiferId)
		s tNewIdentifier = $CLASSMETHOD(pClassname_"SecondaryIdentifiers","%New")
		
		s tNewIdentifier.AM = tOldIdentifier.AM
	    s tNewIdentifier.IdentifierValue = tOldIdentifier.IdentifierValue
	    s tNewIdentifier.rConsumerId = tOldIdentifier.rConsumerId
	    s tNewIdentifier.Activeperiod.IsActive = tOldIdentifier.Activeperiod.IsActive
	    s tNewIdentifier.Activeperiod.StartDate = tOldIdentifier.Activeperiod.StartDate
	    s tNewIdentifier.Activeperiod.EndDate = tOldIdentifier.Activeperiod.EndDate
	    
	    s tNewIdentifier.rIdentifierUseId = tOldIdentifier.rIdentifierUseId
	    s tNewIdentifier.rIdentifierTypeId = tOldIdentifier.rIdentifierTypeId
	    
	    s tNewIdentifier.rNamingSystemId = tOldIdentifier.rNamingSystemId
	    
	    s tNewIdentifier.rOrganizationId = tOldIdentifier.rOrganizationId

	    s sc = tNewIdentifier.%Save()
	    
	    k tOldIdentifer
	    
	    if (sc = $$$OK)
	    {
	    	d $CLASSMETHOD(pClassname_"Identifiers","%DeleteId",pIdentiferId)
	    }
	}
	
	q $$$OK
]]></Implementation>
</Method>

<Method name="AddToNamesCandidateTables">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	k ^DebugNamesCount
	set counter = 0
	set sql = "SELECT GivenName FROM EMCI_MasterConsumer.DistinctGivenNames"
	set element = ##class(%ResultSet).%New()
	do element.Prepare(sql)
	
	do element.Execute()
	
	while (element.Next())
	{
		set counter = counter+1
		s ^DebugNamesCount = counter
		do ##class(EMCI.MasterConsumer.DistinctPropertyValues).AddGivenName(element.Get("GivenName"))
	}
	
	q $$$OK
]]></Implementation>
</Method>

<Method name="AddToSurnameCandidateTables">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	k ^DebugSurnameCount
	set counter = 0
	set sql = "SELECT Surname FROM EMCI_MasterConsumer.DistinctSurnames"
	set element = ##class(%ResultSet).%New()
	do element.Prepare(sql)
	
	do element.Execute()
	
	while (element.Next())
	{
		set counter = counter+1
		s ^DebugSurnameCount = counter
		do ##class(EMCI.MasterConsumer.DistinctPropertyValues).AddSurname(element.Get("Surname"))
	}
	
	q $$$OK
]]></Implementation>
</Method>

<Method name="AddToStreetCandidateTables">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	k ^DebugAddressCount
	set counter = 0
	set sql = "SELECT StreetName FROM EMCI_MasterConsumer.DistinctStreetName"
	set element = ##class(%ResultSet).%New()
	do element.Prepare(sql)
	
	do element.Execute()
	
	while (element.Next())
	{
		set counter = counter+1
		s ^DebugAddressCount = counter
		do ##class(EMCI.MasterConsumer.DistinctPropertyValues).AddStreetName(element.Get("StreetName"))
	}
	
	q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// d ##class(EMCI.Utils.GenerateTestData).ExportMaleNames("/tmp/MaleGivenNames.txt")

]]></Content>
</UDLText>

<Method name="ExportMaleNames">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileName</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s tTotal = 0
	s tLower1PercTot = 0
	
	k ^TempMaleGiven

	s tSQL = "SELECT GivenName_SysGiven FROM EMCI_MasterConsumer.MasterConsumerGivenNames where rConsumerNameId->rConsumerId->rGenderId->CB_Code = 'male' AND rConsumerNameId->rNameUseId = 1"
	s tElement = ##class(%ResultSet).%New()
	d tElement.Prepare(tSQL)
	d tElement.Execute()
	
	while (tElement.Next())
	{
		s tGivenName = $ZCVT(tElement.GetData("1"),"l")
		if ($L(tGivenName) > 1)
		{
			s tTotal = tTotal + 1
			s ^TempMaleGiven = tTotal
			s ^TempMaleGiven(tGivenName) = $G(^TempMaleGiven(tGivenName)) + 1
		}
	}
	
	k ^TempMaleGivenOrdered
	
	s tLower1Perc = tTotal*0.99
	
	// Translate global to order by count
	
	s tName = $O(^TempMaleGiven(""))
	while (tName'="")
	{
		s ^TempMaleGivenOrdered(^TempMaleGiven(tName),tName) = 1
		s tName = $O(^TempMaleGiven(tName))
	}
	
	
	s tFile = ##class(%File).%New(pFileName)
	d tFile.Open("WSN")
	
	s tCount = $O(^TempMaleGivenOrdered(""),-1)
	s tExportedCount = 0
	while (tCount'="")
	{
		s tName = $O(^TempMaleGivenOrdered(tCount,""))
		while (tName'="")
		{
			if (tExportedCount <= tLower1Perc)
			{
				s tExportedCount = tExportedCount + tCount
				d tFile.WriteLine(tName_" = "_^TempMaleGiven(tName))
			} else {
				s tLower1PercTot = tLower1PercTot + tCount
			}
			s tName = $O(^TempMaleGivenOrdered(tCount,tName))
		}
		s tCount = $O(^TempMaleGivenOrdered(tCount),-1)
	}
	
	d tFile.WriteLine("* = "_tLower1PercTot)
	
	d tFile.Close()
	
	q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// d ##class(EMCI.Utils.GenerateTestData).ExportFemaleNames("/tmp/FemaleGivenNames.txt")

]]></Content>
</UDLText>

<Method name="ExportFemaleNames">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileName</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s tTotal = 0
	s tLower1PercTot = 0
	k ^TempFemaleGiven
	s tSQL = "SELECT GivenName_SysGiven FROM EMCI_MasterConsumer.MasterConsumerGivenNames where rConsumerNameId->rConsumerId->rGenderId->CB_Code = 'female' AND rConsumerNameId->rNameUseId = 1 "
	s tElement = ##class(%ResultSet).%New()
	d tElement.Prepare(tSQL)
	d tElement.Execute()
	
	while (tElement.Next())
	{
		s tGivenName = $ZCVT(tElement.GetData("1"),"l")
		if ($L(tGivenName) > 1)
		{
			s tTotal = tTotal + 1
			s ^TempFemaleGiven = tTotal
			s ^TempFemaleGiven(tGivenName) = $G(^TempFemaleGiven(tGivenName)) + 1
		}
	}
	
	k ^TempFemaleGivenOrdered
	
	s tLower1Perc = tTotal*0.99
	
	// Translate global to order by count
	
	s tName = $O(^TempFemaleGiven(""))
	while (tName'="")
	{
		s ^TempFemaleGivenOrdered(^TempFemaleGiven(tName),tName) = 1
		s tName = $O(^TempFemaleGiven(tName))
	}
	
	
	s tFile = ##class(%File).%New(pFileName)
	d tFile.Open("WSN")
	
	s tCount = $O(^TempFemaleGivenOrdered(""),-1)
	s tExportedCount = 0
	while (tCount'="")
	{
		s tName = $O(^TempFemaleGivenOrdered(tCount,""))
		while (tName'="")
		{
			if (tExportedCount <= tLower1Perc)
			{
				s tExportedCount = tExportedCount + tCount
				d tFile.WriteLine(tName_" = "_^TempFemaleGiven(tName))
			} else {
				s tLower1PercTot = tLower1PercTot + tCount
			}
			s tName = $O(^TempFemaleGivenOrdered(tCount,tName))
		}
		s tCount = $O(^TempFemaleGivenOrdered(tCount),-1)
	}
	
	d tFile.WriteLine("* = "_tLower1PercTot)
	
	d tFile.Close()

	q $$$OK
]]></Implementation>
</Method>

<Method name="ExportSurnames">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileName</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s tTotal = 0
	s tLower1PercTot = 0
	k ^TempSurnames
	s tSQL = "SELECT HumanName_ValFamily FROM EMCI_MasterConsumer.MasterConsumerNames WHERE rNameUseId = 1"
	s tElement = ##class(%ResultSet).%New()
	d tElement.Prepare(tSQL)
	d tElement.Execute()
	
	while (tElement.Next())
	{
		s tSurname = $ZCVT(tElement.GetData("1"),"l")
		if ($L(tSurname) > 1)
		{
			s tTotal = tTotal + 1
			s ^TempSurnames = tTotal
			s ^TempSurnames(tSurname) = $G(^TempSurnames(tSurname)) + 1
		}
	}
	
	k ^TempSurnamesOrdered
	
	s tLower1Perc = tTotal*0.99
	
	// Translate global to order by count
	
	s tName = $O(^TempSurnames(""))
	while (tName'="")
	{
		s ^TempSurnamesOrdered(^TempSurnames(tName),tName) = 1
		s tName = $O(^TempSurnames(tName))
	}
	
	
	s tFile = ##class(%File).%New(pFileName)
	d tFile.Open("WSN")
	
	s tCount = $O(^TempSurnamesOrdered(""),-1)
	s tExportedCount = 0
	while (tCount'="")
	{
		s tName = $O(^TempSurnamesOrdered(tCount,""))
		while (tName'="")
		{
			if (tExportedCount <= tLower1Perc)
			{
				s tExportedCount = tExportedCount + tCount
				d tFile.WriteLine(tName_" = "_^TempSurnames(tName))
			} else {
				s tLower1PercTot = tLower1PercTot + tCount
			}
			s tName = $O(^TempSurnamesOrdered(tCount,tName))
		}
		s tCount = $O(^TempSurnamesOrdered(tCount),-1)
	}
	
	d tFile.WriteLine("* = "_tLower1PercTot)
	
	d tFile.Close()
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Common.Utility.Functions">
<Description>
This class contains a number of Utility functions used by the Interfaces.</Description>
<IncludeCode>DFIInclude</IncludeCode>
<Super>%RegisteredObject,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65894,3383.742712</TimeChanged>
<TimeCreated>65853,46076.053802</TimeCreated>

<Method name="JSONPretty">
<ClassMethod>1</ClassMethod>
<FormalSpec>pJSON:%RegisteredObject,pFill:%String="  ",pCRLF:%String={$c(13,10)},*pStatus:%Status</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {    
		set fil=$g(fil,$$$fill),nl=$g(nl,$$$crlf),tResult="",indt=""
		if $IsObject(pJSON),pJSON.%IsA("%Library.DynamicAbstractObject") {set obj=pJSON}
	    else {set obj=##class(%Library.DynamicAbstractObject).%FromJSON(pJSON)}
	    set stc=0,ito=obj.%GetIterator(),sep="",jtyp=$s(obj.%IsA("%Library.DynamicObject"):"object",1:"array"),ist(stc)=ito,cst(stc)=obj,tst(stc)=jtyp
    	if $i(stc)
    	set tResult=tResult_$s(jtyp="object":"{",1:"["),indt=indt_fil
    	for {
	    	set isito=ito.%IsA("%Iterator.Object")
        	if ito.%GetNext(.key,.val) {
	        	set jtyp=$CASE(obj.%GetTypeCodeOf(key)
	        		,0:"null"
	                ,1:"boolean"
	                ,2:"boolean"
	                ,3:"number"
	                ,4:"number"
	                ,6:"array"
	                ,7:"object"
	                ,8:"string"
	                ,9:"number"
	                ,10:"illegalvalue"
	                ,11:"number"
	                ,12:"oref"
	                ,13:"unassigned"
	                ,14:"number"
	                ,15:"number"
	                ,16:"string"
	                ,18:"number"
	                ,19:"number"
	                ,20:"string"
	                ,31:"unassigned"
	                ,:"UNKNOWN")
				set tResult=tResult_sep_nl_indt,sep=","
			}
			else {
            	set indt=$e(indt,1,*-$l(nl)), tResult=tResult_nl_indt, tResult=tResult_$s(isito:"}",1:"]")
            	quit:'$i(stc,-1)
            	set ito=ist(stc), obj=cst(stc), jtyp=tst(stc), sep=","
            	Continue
            }
        	if isito S tResult=tResult_""""_key_""":"
        	if (jtyp="object") || (jtyp="array") {
            	set ist(stc)=ito, cst(stc)=obj, tst(stc)=jtyp, sep=""
            	if $i(stc) {set ito=val.%GetIterator(),obj=val, indt=indt_fil,tResult=tResult_$s(jtyp="object":"{",1:"[")}
            }
        	elseIf jtyp="string" { S tResult=tResult_""""_$zcvt(val,"O","JSON")_""""}
        	elseIf jtyp="boolean" { S tResult=tResult_$s(val:"true",1:"false")}
        	elseIf jtyp="null" { S tResult=tResult_"null"}
        	else { 
        		if $e(val)="." S val="0"_val
            	if $e(val,1,2)="-." S val="-0."_$e(val,3,*)
            	set tResult=tResult_val
            }
        }
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tResult
]]></Implementation>
</Method>

<Method name="ZZJSN">
<Description>
Produce pretty JSON output for Caché</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>in:%RegisteredObject,out:%RegisteredObject=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
	    set t=$t
	    set out=##class(Robot.Common.Utility.Functions).JSONPretty(.in,,,.tSC)
	    if (out="") {
    	    write "Result: ",out,!
        } 
    	elseif ($isObject(out) && out.%IsA("%Stream.Object")) {
        	write "Result: " do out.Write(out) w !
     	} 
    	else {
        	set @out=out
        	write "Result: ",out
        }
	}
	catch ex {set tSC=ex.AsStatus()}    
    quit tSC
]]></Implementation>
</Method>

<Method name="ConvertHIDtoHPRN">
<ClassMethod>1</ClassMethod>
<FormalSpec>pHID:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	set tHPRN=$e("0000000000",1,10-$l(pHID))_pHID,tHPRN=$e(tHPRN,1,3)_"-"_$e(tHPRN,4,6)_"-"_$e(tHPRN,7,10) quit tHPRN
]]></Implementation>
</Method>

<Method name="ConvertHPRNtoHID">
<ClassMethod>1</ClassMethod>
<FormalSpec>pHPRN:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit +($tr(pHPRN,"-",""))
]]></Implementation>
</Method>

<Method name="IsValidTelephone">
<ClassMethod>1</ClassMethod>
<FormalSpec>pString:%String(MAXLEN=100)=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,ok=0
	try {
		set pString=$tr(pString," -","")
		if pString?10N!(pString?1"+"10.12N)!(pString?1"+"1.3N1"("1N1")"9N) set ok=1
	}
	catch ex {set ok=0,tSC=ex.AsStatus()}
	$$$DebugLog($username,"IsValidTelephone","Is Valid  Telephone Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit $s(ok:pString,1:"")
]]></Implementation>
</Method>

<Method name="IsValidEmail">
<ClassMethod>1</ClassMethod>
<FormalSpec>pString:%String(MAXLEN=100)=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK,ok=0
	try {
		if pString'["@"!($l(pString,"@")>2) set email="" quit
		set pString=$tr(pString," ","")
		set pt1=$p(pString,"@",1),pt2=$p(pString,"@",2)
		if pt1?1AN.AN!(pt1?1AN.AN1"."1AN.A) {
			if pt2?1AN.AN1"."1AN.AN!(pt2?1AN.AN1"."1AN.AN1"."1AN.AN) {
				set ok=1
			}
		}
	}
	catch ex {set ok=0,tSC=ex.AsStatus()}
	$$$DebugLog($username,"IsValidEMail","Is Valid Email Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit $s(ok:pString,1:"")
]]></Implementation>
</Method>

<Method name="NameTest">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	Try {
		set pNamefull="john & Mary Ann, Smith"
		set pSurname="Salm"
		set pGiven="Nigel Timothy"
		w !,"Person Surname: ",$$$GetSurname(pSurname)
		w !,"Person Given: ",$$$GetGivenName(pGiven)
		w !,"Person Given Other: ",$$$GetGivenNameOther(pGiven)
		w !,"NOK Surname: ",$$$GetNOKSurname(pNamefull)
		w !,"NOK Given: ",$$$GetNOKGivenName(pNamefull)
		w !,"NOK Given Other: ",$$$GetNOKGivenNameOther(pNamefull)
	}
	Catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"NameTest","Name Test Outcome:  "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="DecodeNames">
<ClassMethod>1</ClassMethod>
<FormalSpec>pName:%String="",pNamePart:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// pNamePart can be:
	// PersonSurname
	// PersonGivenName
	// PersonGivenNameOther
	// NOKSurname
	// NOKGivenName
	// NOKGivenNameOther
	set tSC=$$$OK,pResult=""
	try {
		$$$DebugLog($username,"DecodeNames","Name: "_pName_" Name Part: "_pNamePart,.dSC)
		set pName=$zstrip(pName,"<>W"),tCount=1,pPart(1)=pName,tCommaCount=0
		if pName["," {for tCommaCount=1:1:$l(pName,",") set tCommaPart(tCommaCount)=$zstrip($p(pName,",",tCommaCount),"<>W")}
		if pName["," {for {quit:pName'[","  set pName=$p(pName,",",1)_" "_$p(pName,",",2,99)}}
		if pName["&" {
			for {quit:pName'["&"  set pName=$zstrip($p(pName,"&",1),"<>W")_" AND "_$zstrip($p(pName,"&",2,99),"<>W")}
			set str=$zstrip($p(pName," AND ",$l(pName," AND ")),"<>W")
			if $l(str," ")=1 {set pPart(1)=pName,tCount=1}
			elseif $l(str," ")=2 {set pPart(1)=$zstrip($p(pName," AND ",1,$l(pName," AND ")-1)_" AND "_$p(str," ",1),"<>W"),pPart(2)=$zstrip($p(str," ",2),"<>W"),tCount=2}
			elseif $l(str," ")>2 {set pPart(1)=$zstrip($p(pName," AND ",1,$l(pName," AND ")-1)_" AND "_$p(str," ",1),"<>W"),pPart(2)=$zstrip($p(str," ",2,$l(str," ")-1),"<>W"),pPart(3)=$zstrip($p(str," ",$l(str," ")),"<>W"),tCount=3}
		}
		else {
			if $l(pName," ")=1 {set pPart(1)=pName,tCount=1}
			elseif $l(pName," ")=2 {set pPart(1)=$zstrip($p(pName," ",1),"<>W"),pPart(2)=$zstrip($p(pName," ",2),"<>W"),tCount=2}
			elseif $l(pName," ")>2 {set pPart(1)=$zstrip($p(pName," ",1),"<>W"),pPart(2)=$zstrip($p(pName," ",2,$l(pName," ")-1),"<>W"),pPart(3)=$zstrip($p(pName," ",$l(pName," ")),"<>W"),tCount=3}
		}
		if pNamePart="PersonSurname" {for j=1:1:tCount set pResult=pResult_pPart(j)_$s(j=tCount:"",1:" ")}
		elseif pNamePart="PersonGivenName" {set pResult=$g(pPart(1))}
		elseif pNamePart="PersonGivenNameOther" {set pResult=$g(pPart(2))_$s($l($g(pPart(3))):" "_pPart(3),1:"")}
		elseif pNamePart="NOKSurname" {
			set pResult=$s($l($g(pPart(3))):pPart(3),$l($g(pPart(2))):pPart(2),1:"")
			if tCommaCount>1 set pResult=tCommaPart(tCommaCount)
		}
		elseif pNamePart="NOKGivenName" {set pResult=$g(pPart(1))}
		elseif pNamePart="NOKGivenNameOther" {
			set pResult=$s($l($g(pPart(3))):$g(pPart(2)),1:"")
			if tCommaCount>1,tCommaPart(tCommaCount)[pResult set pResult=""
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	if tSC {$$$DebugLog($username,"DecodeNames","Name: "_pName_" Name Part: "_pNamePart_" Result: "_pResult,.dSC)}
	else {$$$DebugLog($username,"DecodeNames","Decode Names Error: "_$$$GetErrorText(tSC),.dSC)}
	quit pResult
]]></Implementation>
</Method>

<Method name="TestAddress">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		write !,$$$GetCleanAddress("36 8th Street, CNR Main Road & 8th")
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"TestAddress","Test Address Putcome: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tSC
]]></Implementation>
</Method>

<Method name="DecodeAddress">
<ClassMethod>1</ClassMethod>
<FormalSpec>pAddress:%String(MAXLEN=100)=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tCleanAddress=$tr($zstrip(pAddress,"<>W"),","," ")
		if tCleanAddress["&" {for {quit:tCleanAddress'["&"  set tCleanAddress=$zstrip($p(tCleanAddress,"&",1),"<>W")_" AND "_$zstrip($p(tCleanAddress,"&",2,99),"<>W")}}
		if tCleanAddress["  " {for {quit:tCleanAddress'["  "  set tCleanAddress=$zstrip($p(tCleanAddress,"  ",1),"<>W")_" "_$zstrip($p(tCleanAddress,"  ",2,99),"<>W")}}
	}
	catch ex {set tSC=ex.AsStatus()}
	$$$DebugLog($username,"DecodeAddress","Decode Address Outcome: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)),.dSC)
	quit tCleanAddress
]]></Implementation>
</Method>

<Method name="GetGlobalList">
<Description>
Function to Get a Global List of Selected Globals
Valid values for pGlobalNamePrefix are {partial_name}*, {full_global_name}
Multiple Global references can be specified as a comma delimited string for pGlobalNamePrefix
The method could also support exclusions by putting a "-" before the global name
The method returns the array pGlobalList by reference as an array of global names
The parameter pExcludeGlobalNamePrefix works in the same way as pGlobalNamePrefix</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pGlobalList:%String(MAXLEN=3000)="",pGlobalNamePrefix:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK kill pGlobalList
	try {
		for i=1:1:$l(pGlobalNamePrefix,",") set tGlobalList($p(pGlobalNamePrefix,",",i))=""
		set gbl="^%zz" for {
			set gbl=$o(^$GLOBAL(gbl)) q:gbl=""
			w !,gbl
			set x="" for {
				set x=$o(tGlobalList(x)) quit:x=""  set gblx=x w " ",x
				set exclude=0 set:$e(gblx)="-" exclude=1,gblx=$p(gblx,"-",2) set:$e(gblx)'="^" gblx="^"_gblx w " ",gblx," ",exclude
				if gblx["*" {set gblName=$p(gblx,"*",1) if $e(gbl,1,$l(gblName))=gblName {set:'exclude pGlobalList(gbl)="" kill:exclude pGlobalList(gbl)} }
				else {set gblName=gblx if gbl=gblName {set:'exclude pGlobalList(gbl)="" kill:exclude pGlobalList(gbl)}}
			}
		}
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>

<Method name="ExportGlobals">
<Description>
A Function to export the Globals returned by the method GetGlobalList</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pGlobalList:%String(MAXLEN=3000),file:%String,format:%Integer=7</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set x="",tGlobalList="" for {set x=$o(pGlobalList(x)) q:x=""  set tGlobalList=tGlobalList_x_","}
		if $e(tGlobalList,*)="," set tGlobalList=$e(tGlobalList,1,$l(tGlobalList)-1)
		set tSC=##class(%Global).Export($namespace,tGlobalList,file,7) if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>

<Method name="ImportGlobals">
<Description>
A Function to import Globals. Typically the globals that were exported by the ExportGlobals Method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>file:%String,format:%Integer=7</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		set tSC=##class(%Library.Global).Import($namespace,"*",file,format) if 'tSC quit
	}
	catch ex {set tSC=ex.AsStatus()}
	quit tSC
]]></Implementation>
</Method>

<Method name="KillDataForTestingV2">
<Description>
Pass in 1 for pFirstPass and the method will call itself again and passes
in 0 for pFirstPass</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pAutoCommit=0,pFirstPass:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	TSTART
	try {
		// First of All Purge all Indices
		set tSC=##class(EMCI.EventQueue.EventQueueItems).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.EventQueue.EventQueueLinkToOthers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.EventQueue.EventQueue).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceConsumer).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceAddresses).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceCommunications).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContactContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContactContactRoles).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContactGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContacts).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceIdentifiers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceLinks).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceOrganizations).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfacePhotos).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceGeneralPractitioners).%PurgeIndices() if 'tSC quit
		
		set tSC=##class(EMCI.Calculations.Log).%PurgeIndices() if 'tSC quit
		
		set tSC=##class(EMCI.MasterConsumer.MasterConsumer).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerAddresses).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerCommunications).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContactContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContactContactRoles).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContactGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContacts).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerIdentifiers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerSecondaryIdentifiers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerLinkedToConsumers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerOrganizations).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerPhotos).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerReplacesConsumers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerPractitioners).%PurgeIndices() if 'tSC quit
		
		set tSC=##class(EMCI.CopyConsumer.CopyConsumer).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerAddresses).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerCommunications).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContactContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContactContactRoles).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContactGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContacts).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerIdentifiers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerSecondaryIdentifiers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerLinkedToConsumers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerOrganizations).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerPhotos).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerReplacesConsumers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerPractitioners).%PurgeIndices() if 'tSC quit
		
		set tSC=##class(Audit.MasterConsumer.MasterConsumer).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerAddresses).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerCommunications).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContactContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContactContactRoles).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContactGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContacts).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerIdentifiers).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerSecondaryIdentifiers).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerLinkedToConsumers).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerOrganizations).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerPhotos).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerReplacesConsumers).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerPractitioners).%PurgeIndices() if 'tSC quit
		
		set tSC=##class(Audit.CopyConsumer.CopyConsumer).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerAddresses).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerCommunications).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContactContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContactContactRoles).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContactGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContacts).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerIdentifiers).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerSecondaryIdentifiers).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerLinkedToConsumers).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerOrganizations).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerPhotos).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerReplacesConsumers).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerPractitioners).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.ConsumerMatching.FellegiAndSunterValuePairs).%PurgeIndices() if 'tSC quit
		
		set tSC=##class(EMCI.MasterConsumer.DistinctGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.DistinctStreetName).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.DistinctSurnames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.GivenNameCandidates).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.StreetNameCandidates).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.SurnameCandidates).%PurgeIndices() if 'tSC quit
		
		
		set tSC=##class(EMCI.ConsumerMatching.FellegiAndSunterValuePairs).%PurgeIndices() if 'tSC quit
		
		//clear this for children batch
		set tSC=##class(EMCI.MasterConsumer.DistinctGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.DistinctStreetName).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.DistinctSurnames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.GivenNameCandidates).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.StreetNameCandidates).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.SurnameCandidates).%PurgeIndices() if 'tSC quit
		
		set tSC=##class(EMCI.MasterConsumer.DistinctPropertyValues).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.CandidatePropertyValues).%PurgeIndices() if 'tSC quit
		
		// to clear processing log
		set tSC=##class(EMCI.ImportData.Log).%PurgeIndices() if 'tSC quit
		
		// Kill Orphaned Index Globals
		// This is based on testing the Purging of all Indices for the selected classes and then killing the class extent
		// I then reviewed the globals that were left. So for example the MasterConsumer Index global which has 15
		// or so Indices. After the %PurgeIndices() is executed the Index global still exists but with only 2 Nodes
		// one of the nodes is the index on EMCIUId and the entries all pointed to rows where there was no EMCIUid. Apart
		// from the fact that there should be no Master Consumers without an EMCI  UId.
		// The list below are all of the index globals that still existed after the Index Purge and the Kill Extent.
		// So there is no option but to kill the globals.
		// Note that the global names all begin with the same characaters e.g. ^EMCI.CopyCE3C5.
		// Secondly I double checked that none of the I globals had corresponding D globals. If there was a D global it
		// would indicater that that Class was not one of the classes to be killed.
		kill ^EMCI.CopyCE3C5.CopyConsume52DDI
		kill ^EMCI.CopyCE3C5.CopyConsume5DEDI
		kill ^EMCI.CopyCE3C5.CopyConsume6198I
		kill ^EMCI.CopyCE3C5.CopyConsume7C48I
		kill ^EMCI.CopyCE3C5.CopyConsumeB0ECI
		kill ^EMCI.CopyCE3C5.CopyConsumeB8ADI
		kill ^EMCI.CopyCE3C5.CopyConsumeBE44I
		kill ^EMCI.CopyCE3C5.CopyConsumeCD98I
		kill ^EMCI.CopyCE3C5.CopyConsumeCF48I
		kill ^EMCI.CopyCE3C5.CopyConsumeD418I
		kill ^EMCI.CopyCE3C5.CopyConsumeD422I
		kill ^EMCI.CopyCE3C5.CopyConsumeE97EI
		kill ^EMCI.CopyCE3C5.CopyConsumeEC84I
		kill ^EMCI.CopyCE3C5.CopyConsumerA8DI
		kill ^EMCI.CopyConsE3C5.CopyConsumerI
		kill ^EMCI.EventQueue.EventQueueI
		kill ^EMCI.MasteCE6B.CandidatePro24DI
		kill ^EMCI.MasteCE6B.DistinctGivE939I
		kill ^EMCI.MasteCE6B.DistinctProA248I
		kill ^EMCI.MasteCE6B.DistinctStrAD7AI
		kill ^EMCI.MasteCE6B.DistinctSurBDCDI
		kill ^EMCI.MasteCE6B.GivenNameCa6E59I
		kill ^EMCI.MasteCE6B.MasterConsu1B3BI
		kill ^EMCI.MasteCE6B.MasterConsu1ECDI
		kill ^EMCI.MasteCE6B.MasterConsu3925I
		kill ^EMCI.MasteCE6B.MasterConsu392EI
		kill ^EMCI.MasteCE6B.MasterConsu3D09I
		kill ^EMCI.MasteCE6B.MasterConsu4289I
		kill ^EMCI.MasteCE6B.MasterConsu577AI
		kill ^EMCI.MasteCE6B.MasterConsu5900I
		kill ^EMCI.MasteCE6B.MasterConsu6C16I
		kill ^EMCI.MasteCE6B.MasterConsu77B4I
		kill ^EMCI.MasteCE6B.MasterConsu7A0FI
		kill ^EMCI.MasteCE6B.MasterConsuE228I
		kill ^EMCI.MasteCE6B.MasterConsuED93I
		kill ^EMCI.MasteCE6B.MasterConsuF428I
		kill ^EMCI.MasteCE6B.MasterConsuF8CCI
		kill ^EMCI.MasteCE6B.MasterConsum281I
		kill ^EMCI.ConsuAD64.FellegiAndS27C0I
		Kill ^EMCI.Calculations.LogI
		kill ^EMCI.ImportData.LogI
		
		// Now Delete the Class Extents
		set start=$zdt($now(),3,1,6) write !,"Kill Test Data V2 Start: ",start
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceConsumer).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceAddresses).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceCommunications).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContactContactPoints).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContactContactRoles).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContactGivenNames).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContactPoints).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContacts).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceGivenNames).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceIdentifiers).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceLinks).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceNames).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceOrganizations).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfacePhotos).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceGeneralPractitioners).%KillExtent() if 'tSC quit
		
		set tSC=##class(EMCI.Calculations.Log).%KillExtent() if 'tSC quit
		
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerAddresses).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerCommunications).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContactContactPoints).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContactContactRoles).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContactGivenNames).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContactPoints).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContacts).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerGivenNames).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerIdentifiers).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerSecondaryIdentifiers).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerLinkedToConsumers).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerNames).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerOrganizations).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerPhotos).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerReplacesConsumers).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerPractitioners).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumer).%KillExtent() if 'tSC quit
		
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerAddresses).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerCommunications).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContactContactPoints).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContactContactRoles).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContactGivenNames).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContactPoints).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContacts).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerGivenNames).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerIdentifiers).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerSecondaryIdentifiers).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerLinkedToConsumers).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerNames).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerOrganizations).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerPhotos).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerReplacesConsumers).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerPractitioners).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumer).%KillExtent() if 'tSC quit
		
		set tSC=##class(Audit.MasterConsumer.MasterConsumerAddresses).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerCommunications).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContactContactPoints).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContactContactRoles).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContactGivenNames).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContactPoints).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContacts).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerGivenNames).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerIdentifiers).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerSecondaryIdentifiers).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerLinkedToConsumers).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerNames).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerOrganizations).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerPhotos).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerReplacesConsumers).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerPractitioners).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumer).%KillExtent() if 'tSC quit
		
		set tSC=##class(Audit.CopyConsumer.CopyConsumerAddresses).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerCommunications).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContactContactPoints).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContactContactRoles).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContactGivenNames).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContactPoints).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContacts).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerGivenNames).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerIdentifiers).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerSecondaryIdentifiers).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerLinkedToConsumers).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerNames).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerOrganizations).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerPhotos).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerReplacesConsumers).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerPractitioners).%KillExtent() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumer).%KillExtent() if 'tSC quit
		
		set tSC=##class(EMCI.MasterConsumer.DistinctGivenNames).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.DistinctStreetName).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.DistinctSurnames).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.GivenNameCandidates).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.StreetNameCandidates).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.SurnameCandidates).%KillExtent() if 'tSC quit
		
		
		set tSC=##class(EMCI.ConsumerMatching.FellegiAndSunterValuePairs).%KillExtent() if 'tSC quit
		
		set tSC=##class(EMCI.MasterConsumer.DistinctPropertyValues).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.CandidatePropertyValues).%KillExtent() if 'tSC quit
		
		// to clear processing log
		set tSC=##class(EMCI.ImportData.Log).%KillExtent() if 'tSC quit
		
		// Now Clear Event Log
		set tSC=##class(EMCI.EventQueue.EventQueueItems).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.EventQueue.EventQueueLinkToOthers).%KillExtent() if 'tSC quit
		set tSC=##class(EMCI.EventQueue.EventQueue).%KillExtent() if 'tSC quit
		
		// Now clear DebugLog
		// &sql(delete from EMCI_Debug.Logging)
		
		k ^roal,^TempDistinctSurnames,^TempDistinctGivenName,^TempDistinctStreetName,^EMCI.ConsumerMatching.Blocking
	}
	catch ex {set tSC=ex.AsStatus()}
	
	// If an error occurs roll back the transaction without choice
	if 'tSC {
		write !,"An error has occurred: "_$$$GetErrorText(tSC)
		write !,"Rolling Back the Transaction..."
		TROLLBACK
		quit tSC
	}
	// Otherwise give the user the option to Roll back or commit
	else {
		if (pAutoCommit = 1)
		{
			TCOMMIT
		} else {
			write !,"Commit Changes (Y/N)? "
			read answer
			if $$$ALPHAUP($e(answer,1))="Y" {TCOMMIT}
			else {TROLLBACK}
		}
	}
	if pFirstPass set pFirstPass=0 set tSC=..KillDataForTestingV2(pAutoCommit, pFirstPass)
	quit tSC
]]></Implementation>
</Method>

<Method name="ClearDownEnsembleData">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	// Now clear down Ensemble Logs and Messages. I have kept these outside of the KillTestDataV2() as I won't
	// want to rollback this data
	try {
		set start=$zdt($now(),3,1,6) write !,"Clear Down Ensemble Data Start: ",start
		Set tSC = ##class(Ens.Enterprise.MsgBank.Purge).PurgeAll(.tDeletedCount,0,0,1) if 'tSC quit
		write !,"Message Bank Purge Count: "_tDeletedCount_" Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)) set tSC=$$$OK
		set tSC=##class(Ens.Purge).PurgeEventLogs(0,,.tDeletedCount)  if 'tSC quit
		write !,"Event Log Purge Count: "_tDeletedCount_" Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)) set tSC=$$$OK
		set tSC=##class(Ens.Purge).PurgeMessagesByDate(0,.tDeletedCount,1,1) if 'tSC quit
		write !,"Message Purge Count: "_tDeletedCount_" Status: "_$s(tSC:"OK",1:$$$GetErrorText(tSC)) set tSC=$$$OK
		set end=$zdt($now(),3,1,6) write !,"Clear Down Ensemble Data End: ",end
	}
	catch ex {set tSC=ex.AsStatus()}
	write !,"Ensemble Data Clear Down Outcome: "_$s(tSC:"OK",1:$$$GetErrorText(tSC))
	quit tSC
]]></Implementation>
</Method>

<Method name="RebuildIndicesForTestingV2">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	//TSTART
	try {
		set start=$zdt($now(),3,1,6) write !,"Build Indices Start: ",start
		// Purge Indices
		set tSC=##class(EMCI.EventQueue.EventQueueItems).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.EventQueue.EventQueueLinkToOthers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.EventQueue.EventQueue).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceConsumer).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceAddresses).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceCommunications).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContactContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContactContactRoles).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContactGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContacts).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceIdentifiers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceLinks).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceOrganizations).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfacePhotos).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceGeneralPractitioners).%PurgeIndices() if 'tSC quit
		
		set tSC=##class(EMCI.Calculations.Log).%PurgeIndices() if 'tSC quit
		
		set tSC=##class(EMCI.MasterConsumer.MasterConsumer).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerAddresses).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerCommunications).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContactContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContactContactRoles).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContactGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContacts).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerIdentifiers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerSecondaryIdentifiers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerLinkedToConsumers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerOrganizations).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerPhotos).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerReplacesConsumers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerPractitioners).%PurgeIndices() if 'tSC quit
		
		set tSC=##class(EMCI.CopyConsumer.CopyConsumer).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerAddresses).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerCommunications).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContactContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContactContactRoles).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContactGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContacts).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerIdentifiers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerSecondaryIdentifiers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerLinkedToConsumers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerOrganizations).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerPhotos).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerReplacesConsumers).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerPractitioners).%PurgeIndices() if 'tSC quit
		
		set tSC=##class(Audit.MasterConsumer.MasterConsumer).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerAddresses).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerCommunications).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContactContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContactContactRoles).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContactGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContacts).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerIdentifiers).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerSecondaryIdentifiers).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerLinkedToConsumers).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerOrganizations).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerPhotos).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerReplacesConsumers).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerPractitioners).%PurgeIndices() if 'tSC quit
		
		set tSC=##class(Audit.CopyConsumer.CopyConsumer).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerAddresses).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerCommunications).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContactContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContactContactRoles).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContactGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContactPoints).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContacts).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerIdentifiers).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerSecondaryIdentifiers).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerLinkedToConsumers).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerOrganizations).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerPhotos).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerReplacesConsumers).%PurgeIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerPractitioners).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.ConsumerMatching.FellegiAndSunterValuePairs).%PurgeIndices() if 'tSC quit
		
		set tSC=##class(EMCI.MasterConsumer.DistinctGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.DistinctStreetName).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.DistinctSurnames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.GivenNameCandidates).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.StreetNameCandidates).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.SurnameCandidates).%PurgeIndices() if 'tSC quit
		
		
		set tSC=##class(EMCI.ConsumerMatching.FellegiAndSunterValuePairs).%PurgeIndices() if 'tSC quit
		
		//clear this for children batch
		set tSC=##class(EMCI.MasterConsumer.DistinctGivenNames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.DistinctStreetName).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.DistinctSurnames).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.GivenNameCandidates).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.StreetNameCandidates).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.SurnameCandidates).%PurgeIndices() if 'tSC quit
		
		set tSC=##class(EMCI.MasterConsumer.DistinctPropertyValues).%PurgeIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.CandidatePropertyValues).%PurgeIndices() if 'tSC quit
		
		// to clear processing log
		set tSC=##class(EMCI.ImportData.Log).%PurgeIndices() if 'tSC quit
		
		// Rebuild Indices
		set tSC=##class(EMCI.EventQueue.EventQueueItems).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.EventQueue.EventQueueLinkToOthers).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.EventQueue.EventQueue).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceConsumer).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceAddresses).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceCommunications).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContactContactPoints).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContactContactRoles).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContactGivenNames).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContactPoints).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceContacts).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceGivenNames).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceIdentifiers).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceLinks).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceNames).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceOrganizations).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfacePhotos).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.InterfaceConsumer.InterfaceGeneralPractitioners).%BuildIndices() if 'tSC quit
		
		set tSC=##class(EMCI.Calculations.Log).%BuildIndices() if 'tSC quit
		
		set tSC=##class(EMCI.MasterConsumer.MasterConsumer).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerAddresses).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerCommunications).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContactContactPoints).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContactContactRoles).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContactGivenNames).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContactPoints).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerContacts).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerGivenNames).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerIdentifiers).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerSecondaryIdentifiers).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerLinkedToConsumers).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerNames).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerOrganizations).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerPhotos).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerReplacesConsumers).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.MasterConsumerPractitioners).%BuildIndices() if 'tSC quit
		
		set tSC=##class(EMCI.CopyConsumer.CopyConsumer).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerAddresses).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerCommunications).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContactContactPoints).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContactContactRoles).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContactGivenNames).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContactPoints).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerContacts).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerGivenNames).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerIdentifiers).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerSecondaryIdentifiers).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerLinkedToConsumers).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerNames).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerOrganizations).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerPhotos).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerReplacesConsumers).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.CopyConsumer.CopyConsumerPractitioners).%BuildIndices() if 'tSC quit
		
		set tSC=##class(Audit.MasterConsumer.MasterConsumer).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerAddresses).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerCommunications).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContactContactPoints).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContactContactRoles).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContactGivenNames).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContactPoints).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerContacts).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerGivenNames).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerIdentifiers).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerSecondaryIdentifiers).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerLinkedToConsumers).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerNames).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerOrganizations).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerPhotos).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerReplacesConsumers).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.MasterConsumer.MasterConsumerPractitioners).%BuildIndices() if 'tSC quit
		
		set tSC=##class(Audit.CopyConsumer.CopyConsumer).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerAddresses).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerCommunications).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContactContactPoints).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContactContactRoles).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContactGivenNames).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContactPoints).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerContacts).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerGivenNames).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerIdentifiers).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerSecondaryIdentifiers).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerLinkedToConsumers).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerNames).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerOrganizations).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerPhotos).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerReplacesConsumers).%BuildIndices() if 'tSC quit
		set tSC=##class(Audit.CopyConsumer.CopyConsumerPractitioners).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.ConsumerMatching.FellegiAndSunterValuePairs).%BuildIndices() if 'tSC quit
		
		set tSC=##class(EMCI.MasterConsumer.DistinctGivenNames).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.DistinctStreetName).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.DistinctSurnames).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.GivenNameCandidates).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.StreetNameCandidates).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.SurnameCandidates).%BuildIndices() if 'tSC quit
		
		
		set tSC=##class(EMCI.ConsumerMatching.FellegiAndSunterValuePairs).%BuildIndices() if 'tSC quit
		
		//clear this for children batch
		set tSC=##class(EMCI.MasterConsumer.DistinctGivenNames).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.DistinctStreetName).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.DistinctSurnames).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.GivenNameCandidates).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.StreetNameCandidates).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.SurnameCandidates).%BuildIndices() if 'tSC quit
		
		set tSC=##class(EMCI.MasterConsumer.DistinctPropertyValues).%BuildIndices() if 'tSC quit
		set tSC=##class(EMCI.MasterConsumer.CandidatePropertyValues).%BuildIndices() if 'tSC quit
		
		// to clear processing log
		set tSC=##class(EMCI.ImportData.Log).%BuildIndices() if 'tSC quit
		
	}
	catch ex {set tSC=ex.AsStatus()}
	write !,"Build Indices Outcome: "_$s(tSC:"OK",1:$$$GetErrorText(tSC))
	if 'tSC {
		write !,"Due to error the Transaction is being rolled back"
		//TROLLBACK
	}
	else {
		write !,"Indices Rebuilt successfully. Commiting changes"
		//tCOMMIT
	}
	
	set end=$zdt($now(),3,1,6) write !,"Build Indices End: ",end
	quit tSC
]]></Implementation>
</Method>

<Method name="KillFHIRData">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	try {
		/*
		set tSC=##class(FHIR.Address).%DeleteExtent()
		set tSC=##class(FHIR.Animal).%DeleteExtent()
		set tSC=##class(FHIR.Attachment).%DeleteExtent()
		set tSC=##class(FHIR.BundleLink).%DeleteExtent()
		set tSC=##class(FHIR.Bundles.PatientBundle).%DeleteExtent() if 'tSC quit
		set tSC=##class(FHIR.SearchResults.Results).%DeleteExtent() if 'tSC quit
		set tSC=##class(FHIR.Communication).%DeleteExtent()
		set tSC=##class(FHIR.Contact).%DeleteExtent()
		set tSC=##class(FHIR.ContactOrganization).%DeleteExtent()
		set tSC=##class(FHIR.ContactPoint).%DeleteExtent()
		set tSC=##class(FHIR.EndPoint).%DeleteExtent()
		set tSC=##class(FHIR.Gender).%DeleteExtent()
		set tSC=##class(FHIR.GeneralPractitioner).%DeleteExtent()
		set tSC=##class(FHIR.HumanName).%DeleteExtent()
		set tSC=##class(FHIR.HumanNamePopulate).%DeleteExtent()
		set tSC=##class(FHIR.Identifier).%DeleteExtent()
		set tSC=##class(FHIR.Issue).%DeleteExtent()
		set tSC=##class(FHIR.Link).%DeleteExtent()
		set tSC=##class(FHIR.ManagingOrganization).%DeleteExtent()
		set tSC=##class(FHIR.Meta).%DeleteExtent()
		set tSC=##class(FHIR.OperationOutcome).%DeleteExtent()
		set tSC=##class(FHIR.Organization).%DeleteExtent()
		set tSC=##class(FHIR.PatientResourceWrapper).%DeleteExtent()
		set tSC=##class(FHIR.Period).%DeleteExtent()
		set tSC=##class(FHIR.Practitioner).%DeleteExtent()
		set tSC=##class(FHIR.Qualification).%DeleteExtent()
		set tSC=##class(FHIR.Quantity).%DeleteExtent()
		set tSC=##class(FHIR.Reference).%DeleteExtent()
		set tSC=##class(FHIR.RelatedPerson).%DeleteExtent()
		set tSC=##class(FHIR.SampledData).%DeleteExtent()
		set tSC=##class(FHIR.Search).%DeleteExtent()
		set tSC=##class(FHIR.SearchResults.Results).%DeleteExtent()
		set tSC=##class(FHIR.Text).%DeleteExtent()
		set tSC=##class(FHIR.Type).%DeleteExtent()
		set tSC=##class(FHIR.Patient).%DeleteExtent()
		*/
	}
	catch ex {set tSC=ex.AsStatus()}
	w !,"Outcome: "_$s(tSC:"OK",1:$$$GetErrorText(tSC))
	quit tSC
]]></Implementation>
</Method>

<Method name="RebuildiFindIndices">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	tSTART
	try {
		/*
		set tSC=##class(EMCI.MasterConsumer.DistinctSurnames).%PurgeIndices()
		write !,"Indices Purged. Press <ENTER> to Continue "
		read x
		set tSC=##class(EMCI.MasterConsumer.DistinctSurnames).%BuildIndices()
		write !,"Indices Re-built. Press <ENTER> to Continue "
		read x
		write !,"Do you want to commit? "
		read answer
		if $$$ALPHAUP($e(answer,1))="Y" {TCOMMIT}
		else {TROLLBACK}
		*/
	}
	catch ex {set tSC=ex.AsStatus()}
	write !,"Outcome: ",$s(tSC:"OK",1:$$$GetErrorText(tSC))
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Common.Utility.HL7MsgRouter">
<Description>
Functions to use in rule definitions for the sample message router production.</Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.FunctionSet</Super>
<TimeChanged>65874,13551.826761</TimeChanged>
<TimeCreated>60211,45594.129234</TimeCreated>

<Method name="DayOfWeek">
<Description>
Returns the ordinal position of the day in the week, 
where 1 is Sunday, 2 is Monday, and so on.</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[$zd($H,10)
]]></Implementation>
</Method>

<Method name="TimeInSeconds">
<Description>
Returns the time as a number of seconds since midnight.</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[$p($H,",",2)
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Device">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64777,75128.002656</TimeChanged>
<TimeCreated>63846,39147.476573</TimeCreated>

<Property name="DeviceId">
<Type>%String</Type>
</Property>

<Property name="DeviceName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DeviceType">
<Type>Robot.DeviceTypes</Type>
</Property>

<Property name="DeviceLocation">
<Type>Robot.Address</Type>
</Property>

<Property name="DeviceTCPAddress">
<Type>%String</Type>
<Parameter name="PATTERN" value="1.3N1&quot;.&quot;1.3N1&quot;.&quot;1.3N1&quot;.&quot;1.3N"/>
</Property>

<Property name="DeviceTCPPortNumber">
<Type>%Integer</Type>
</Property>

<Property name="DeviceTCPReadTimeout">
<Type>%Integer</Type>
<InitialExpression>2</InitialExpression>
</Property>

<Property name="DeviceTCPConnectTimeout">
<Type>%Integer</Type>
<InitialExpression>5</InitialExpression>
</Property>

<Property name="DeviceStatusMessage">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DeviceStatusOKCodes">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DeviceStatusWarningCodes">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DeviceStatusErrorCodes">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="TCPOperationName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="FileOperationName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="FilePath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>DeviceId</Properties>
<Unique>1</Unique>
</Index>

<Index name="I1">
<Type>index</Type>
<Properties>TCPOperationName:Exact</Properties>
</Index>

<Index name="I2">
<Type>index</Type>
<Properties>FileOperationName:Exact</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.DeviceD</DataLocation>
<DefaultData>DeviceDefaultData</DefaultData>
<IdLocation>^Robot.DeviceD</IdLocation>
<IndexLocation>^Robot.DeviceI</IndexLocation>
<StreamLocation>^Robot.DeviceS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="DeviceDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DeviceName</Value>
</Value>
<Value name="3">
<Value>DeviceLocation</Value>
</Value>
<Value name="4">
<Value>DeviceTCPAddress</Value>
</Value>
<Value name="5">
<Value>DeviceTCPPortNumber</Value>
</Value>
<Value name="6">
<Value>DeviceTCPReadTimeout</Value>
</Value>
<Value name="7">
<Value>DeviceTCPConnectTimeout</Value>
</Value>
<Value name="8">
<Value>DeviceType</Value>
</Value>
<Value name="9">
<Value>DeviceStatusOKCodes</Value>
</Value>
<Value name="10">
<Value>DeviceStatusWarningCodes</Value>
</Value>
<Value name="11">
<Value>DeviceStatusErrorCodes</Value>
</Value>
<Value name="12">
<Value>TCPOperationName</Value>
</Value>
<Value name="13">
<Value>FileOperationName</Value>
</Value>
<Value name="14">
<Value>DeviceStatusMessage</Value>
</Value>
<Value name="15">
<Value>FilePath</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.DeviceTypeStatusCodes">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64734,55389</TimeChanged>
<TimeCreated>64229,35066.927113</TimeCreated>

<Property name="StatusCode">
<Type>%String</Type>
</Property>

<Property name="StatusType">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",OK,Warning,Error,"/>
</Property>

<Property name="StatusDescription">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Type">
<Type>Robot.DeviceTypes</Type>
<Cardinality>parent</Cardinality>
<Inverse>StatusCodes</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>StatusCode</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("StatusCodes")</DataLocation>
<DefaultData>DeviceTypeStatusCodesDefaultData</DefaultData>
<IdLocation>^Robot.DeviceTypesC("StatusCodes")</IdLocation>
<IndexLocation>^Robot.DeviceTypeStatusCodesI</IndexLocation>
<StreamLocation>^Robot.DeviceTypeStatusCodesS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="DeviceTypeStatusCodesDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>StatusType</Value>
</Value>
<Value name="3">
<Value>StatusDescription</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.DeviceTypes">
<Super>%Persistent,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64734,55389</TimeChanged>
<TimeCreated>63960,41908.225987</TimeCreated>

<Property name="DeviceTypeID">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",Printer,Robot,Scanner,Camera"/>
</Property>

<Property name="DeviceTypeDescription">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>DeviceTypeID</Properties>
<Unique>1</Unique>
</Index>

<Property name="StatusCodes">
<Type>Robot.DeviceTypeStatusCodes</Type>
<Cardinality>children</Cardinality>
<Inverse>Type</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.DeviceTypesD</DataLocation>
<DefaultData>DeviceTypesDefaultData</DefaultData>
<IdLocation>^Robot.DeviceTypesD</IdLocation>
<IndexLocation>^Robot.DeviceTypesI</IndexLocation>
<StreamLocation>^Robot.DeviceTypesS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="DeviceTypesDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DeviceTypeDescription</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.DispenseResponseService">
<Super>Ens.BusinessService</Super>
<TimeChanged>64764,36944.626379</TimeChanged>
<TimeCreated>64095,79574.713424</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>Ens.InboundAdapter</Type>
</Property>

<Property name="AutomaticallyResultDispenseOrders">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="TimeBeforeAutoResultRDS">
<Type>%Time</Type>
<InitialExpression>175</InitialExpression>
</Property>

<Property name="AutomaticallyFailOrderOnSlowResponse">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="TimeBeforeAutoFailOnSlowResponse">
<Type>%Time</Type>
<InitialExpression>22</InitialExpression>
</Property>

<Property name="LoopRobotMessages">
<Type>%Boolean</Type>
</Property>

<Property name="UseDispenseAndLoadingTotalsForStockLevelUpdate">
<Type>%Boolean</Type>
</Property>

<Property name="UseRealTimeStockLevelChecks">
<Type>%Boolean</Type>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set item="",gbl="^Robot.TCPInboundQueue(""DispenseResponse"")",sgbl="^Robot.Archive.TCPInboundQueue(""DispenseResponse"")"
	for {
		set item=$o(@gbl@(item)) quit:item=""
		set ts=""
		for {
			set ts=$o(@gbl@(item,ts)) quit:ts=""
			if '$l($lg(@gbl@(item,ts),2)) {
				set $list(@gbl@(item,ts),2)=$zdt($h,3)
				set robotid=$p(item,"||",1),orderref=$p(item,"||",2)
				$$$TRACE("Processing Order Reference: ("_orderref_") on Robot: ("_robotid_")")
				if $l($g(^Robot.OrderReference(orderref))) {
					set rec=^Robot.OrderReference(orderref)
					set ompid=$p(rec,"||",1),orderno=$p(rec,"||",2),rxcno=$p(rec,"||",3),pdu=$p(rec,"||",6),altrobot=$p(rec,"||",7),altsystem=$p(rec,"||",8)
					$$$TRACE("OMP: ("_ompid_") Order: ("_orderno_") RXC: ("_rxcno_") PDU: ("_pdu_") Robot: ("_altrobot_") System: ("_altsystem_")")
				}
				else {
					$$$TRACE("Unsolicited Dispense Response with OrderReference: ("_orderref_") from robot: ("_robotid_")")
					set $list(@gbl@(item,ts),2)=$zdt($h,3),@sgbl@(item,ts)=@gbl@(item,ts)
					set status=$g(@gbl@(item,ts,"data","DispenseStatus"))
					set ean=$g(@gbl@(item,ts,"data","ProductCode"))
					set qty=$g(@gbl@(item,ts,"data","Quantity"))
					if (status=3!(status=4)),..UseRealTimeStockLevelChecks,$l(ean),$l(robotid) set ^Robot.Stock.RefreshStockLevels(robotid,ean)=""
					// Need to do the same for Debit/Credit system
					if status=4 set ^Robot.ManualDispense($i(^Robot.ManualDispense))=$lb($zdt($h,3),robotid,ean,qty)
					kill @gbl@(item,ts)
					quit
				}
				$$$TRACE("Processing Order: ("_ompid_")")
				set omp=##class(OMPDetails).%OpenId(ompid) if '$IsObject(omp) $$$TRACE("Unable to open OMP: ("_ompid_")") quit
				set create=omp.CreationDT
				set status=$g(@gbl@(item,ts,"data","DispenseStatus"))
				set qty=$g(@gbl@(item,ts,"data","Quantity"))
				$$$TRACE("TS: ("_ts_") Status: ("_status_") Quantity: ("_qty_")") 
				if ",3,4,5,"[(","_status_",") {
					set rxcqty=omp.Orders.GetAt(orderno).RXCDetails.GetAt(rxcno).ComponentAmount
					set nappi=omp.Orders.GetAt(orderno).RXCDetails.GetAt(rxcno).ComponentIdentifier
					set sc=##class(Robot.Stock.StockMaster).GetEANCode(nappi,.ean)
					set rxd=omp.Orders.GetAt(orderno).RXCDetails.GetAt(rxcno).Dispensed.GetAt(orderref)
					if status=4!(status=5) {
						set rxdqty=$g(@gbl@(item,ts,"data","Quantity")) if rxdqty>rxcqty set rxdqty=rxcqty
						set rxd.ComponentAmountDispensed=rxdqty
						if status=4 {
							if ..UseRealTimeStockLevelChecks set ^Robot.Stock.RefreshStockLevels(robotid,ean)="" $$$TRACE("Stock Refresh Request for Robot: ("_robotid_") EAN: ("_ean_")")
							if ..UseDispenseAndLoadingTotalsForStockLevelUpdate set sc=##class(Robot.Stock.LoadAndDispenseTransactions).InsertTransaction("Dispense",altrobot,altsystem,nappi,(rxdqty*-1)) if 'sc $$$TRACE("Error Inserting Transaction: "_$system.Status.GetErrorText(sc))
						}
					}
					if status=3!(status=4) kill ^Robot.OrderMessages(ompid,orderref)
					if pdu,(status=4!(status=3)) {
						set next=$o(^Robot.OrderMessages(ompid,"")),message=""
						set tRequest=##class(Robot.RobotRequest).%New()
						set tRequest.OMPID=ompid,tRequest.OrderReference=$s(+$g(rxdqty):orderref,1:""),tRequest.PDU=1,tRequest.Robot=robotid
						set tRequest.SendNext=1,tRequest.SendAll=0
						if $l(next) set x=$o(^Robot.TCPOutboundQueue("DispenseRequest",robotid_"||"_next,"")) quit:x=""  set message=$lg(^Robot.TCPOutboundQueue("DispenseRequest",robotid_"||"_next,x),3)
						if $l(message) do tRequest.Messages.SetAt(message,next)
						$$$TRACE("Orderref: ("_orderref_") Print: ("_tRequest.OrderReference_") Message: ("_message_")")
						do CheckTime if 'error set tRequest.SendNext=0
						set tSC=..SendRequestAsync("Process Robot Dispense BP",tRequest,"Robot Dispense. SN("_tRequest.SendNext_") SA("_tRequest.SendAll_")") if 'tSC goto End
					}
				}
				merge @sgbl@(item,ts)=@gbl@(item,ts) kill @gbl@(item,ts)
				do CheckTime if 'error kill ^Robot.OrderMessages(ompid)
				set sc=omp.%Save() if 'sc $$$TRACE("Unable to Save OMP Order: ("_ompid_")")
				if $o(^Robot.OrderMessages(ompid,""))="" {if 'omp.RDSSent {set sc=..SendRDS(omp)}		}
				set omp=""
			}
			else {
				merge @sgbl@(item,ts)=@gbl@(item,ts) kill @gbl@(item,ts)
			}
		}
	}
	set ompid=""
	for {
		set ompid=$o(^Robot.OrderMessages(ompid)) quit:ompid=""
		if $o(^Robot.OrderMessages(ompid,""))'="" {
			set omp=##class(Robot.OMPDetails).%OpenId(ompid)
			if $IsObject(omp) {
				set create=omp.CreationDT
				do CheckTime if 'error kill ^Robot.OrderMessages(omp)
				set sc=omp.%Save() if 'sc $$$TRACE("Unable to Save OMP Order: ("_ompid_")")
				if $o(^Robot.OrderMessages(ompid,""))="" {
					if 'omp.RDSSent {
						set sc=..SendRDS(omp)
						if 'sc $$$TRACE("Send RDS Error: "_$system.Status.GetErrorText(sc))
					}
				}
				set obj=""
			}
		}
	}

End	;
	Quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
CheckTime	;
	if ..AutomaticallyResultDispenseOrders {
		set error=$$$OK,cdt=$zdt($h,3),diff=$system.SQL.DATEDIFF("s",create,cdt) if diff>..TimeBeforeAutoResultRDS set txt="Auto Result Timeout reached for: ("_ompid_") with time: ("_diff_") Create: ("_create_") CDT: ("_cdt_")",error=$system.Status.Error(5001,txt) $$$TRACE(txt)
		if 'error {set omp.OMPRequestStatus=error kill ^Robot.OrderMessages(ompid)}
	}
	quit
]]></Implementation>
</Method>

<Method name="SendRDS">
<FormalSpec>omp:Robot.OMPDetails</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set omp.RDSSent=1,omp.RDSSentDT=$zdt($h,3)
	set sc=omp.%Save() if 'sc $$$TRACE("Unable to Save OMP Order: ("_omp.%Id()_")")
	set tRequest=##class(Robot.OMPRequest).%New()
	set tRequest.OMPID=omp.%Id()
	$$$TRACE("Ready to send RDS for OMP: ("_omp.%Id()_")")
	set tSC=..SendRequestAsync("Process Dispense Result BP",tRequest,"RDS Request for OMP: ("_omp.%Id()_")")
	if 'tSC $$$TRACE("Unable to Send Dispense Result Async Call") set tSC=$$$OK
End	;
	Quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set system=##class(Robot.SystemSettings).%OpenId("Robot",0)
	if '$IsObject(system) set tSC=$system.Status.Error(5001,..%ConfigName_" Unable to open 'Robot' system settings") goto End
	set ..AutomaticallyFailOrderOnSlowResponse=system.AutomaticallyFailOrderOnSlowResponse
	set ..AutomaticallyResultDispenseOrders=system.AutomaticallyResultDispenseOrders
	set ..TimeBeforeAutoFailOnSlowResponse=system.TimeBeforeAutoFailOnSlowResponse
	set ..TimeBeforeAutoResultRDS=system.TimeBeforeAutoResultRDS
	set ..LoopRobotMessages=system.LoopRobotMessages
	set ..UseDispenseAndLoadingTotalsForStockLevelUpdate=system.UseDispenseAndLoadingTotalsForStockLevelUpdate
	set ..UseRealTimeStockLevelChecks=system.UseDispenseToTriggerStockLevelUpdate
	set system=""
End	;
	Quit tSC
Error	;
	set $ztrap=""
	set tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>
</Class>


<Class name="Robot.EMailOperation">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64637,28750.45129</TimeChanged>
<TimeCreated>64151,36456.033988</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.EMail.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.EMail.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="SendMail">
<FormalSpec>pRequest:Robot.EMailRequest,pResponse:Robot.EMailResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	$$$TRACE("pReq: "_pRequest)
	set email=##class(%Net.MailMessage).%New()
	set report=##class(Robot.Reports.Reports).%OpenId(pRequest.Report)
	if '$IsObject(report) set tSC=$system.Status.Error(5001,"Unable to open Report Object for ID: ("_pRequest.Report_")") goto End
	$$$TRACE("Report: ("_pRequest.Report_")")
	for i=1:1:report.Attachments.Count() set attachments(i)=report.Attachments.GetAt(i)
    set email.Subject=report.SubjectPrefix_": "_report.ReportDescription
	set email.Date=$zdt($h,3)
	set email.IsHTML=0
	set email.From=report.SentBy
	for i=1:1:report.Recipients.Count() if report.Recipients.GetAt(i).Active set addresses(report.Recipients.GetAt(i).EMail)=""
	set text=report.ReportDescription_" for "_pRequest.SiteName do email.TextData.Write(text_$c(13,10))
	do email.TextData.Write($c(13,10))
	set text="Right ePharmacy Development Team" do email.TextData.Write(text_$c(13,10))
	do email.TextData.Write($c(13,10))
	/*
	do email.TextData.Write($c(13,10))
	set text="Recipients: " do email.TextData.Write(text_$c(13,10))
	for i=1:1:report.Recipients.Count() set text=report.Recipients.GetAt(i).Title_" "_report.Recipients.GetAt(i).FirstName_" "_report.Recipients.GetAt(i).Surname do email.TextData.Write(text_$c(13,10))
	do email.TextData.Write($c(13,10)_$c(13,10))
	*/
	do email.TextData.Write(report.ReportMessage_$c(13,10))
	set x="" for  set x=$o(addresses(x)) quit:x=""  do email.To.Insert(x)
	set count=0
	for i=1:1:report.Attachments.Count() {
		set file=report.Attachments.GetAt(i),dir=$p(file,"\",1,$l(file,"\")-1),file=$p(file,"\",$l(file,"\"))
		$$$TRACE("Dir: ("_dir_") File: ("_file_")")
		set sc=email.AttachFile(dir,file,1,,.count)
	}
    Set tSC=..Adapter.SendMail(email)
    ;if report.DeleteReportAfterRun kill report set sc=##class(Robot.Reports.Reports).%DeleteId(pRequest.Report) $$$TRACE("Report: ("_pRequest.Report_") delete status is ("_$s(sc:"OK",1:$system.Status.GetErrorText(sc))_")")
End	;
	set pResponse=##class(Robot.EMailResponse).%New()
	set pResponse.EMailSentTS=$zdt($h,3)
	set pResponse.Status=tSC
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
  <MapItem MessageType="Robot.EMailRequest">
    <Method>SendMail</Method>
  </MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="Robot.EMailRequest">
<Super>Ens.Request</Super>
<TimeChanged>64351,70462.746258</TimeChanged>
<TimeCreated>64153,42595.826373</TimeCreated>

<Property name="Report">
<Type>%String</Type>
</Property>

<Property name="SiteName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>EMailRequestDefaultData</DefaultData>
<Data name="EMailRequestDefaultData">
<Subscript>"EMailRequest"</Subscript>
<Value name="1">
<Value>Report</Value>
</Value>
<Value name="2">
<Value>SiteName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.EMailResponse">
<Super>Ens.Response</Super>
<TimeChanged>64153,42680.618717</TimeChanged>
<TimeCreated>64153,42680.417388</TimeCreated>

<Property name="EMailSentTS">
<Type>%TimeStamp</Type>
</Property>

<Property name="Status">
<Type>%Status</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>EMailResponseDefaultData</DefaultData>
<Data name="EMailResponseDefaultData">
<Structure>listnode</Structure>
<Subscript>"EMailResponse"</Subscript>
<Value name="1">
<Value>EMailSentTS</Value>
</Value>
<Value name="2">
<Value>Status</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.ExtendedRobotInterfaceProduction">
<Super>Ens.Production</Super>
<TimeChanged>65896,579.473833</TimeChanged>
<TimeCreated>63647,70639.488933</TimeCreated>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="Robot.ExtendedRobotInterfaceProduction" TestingEnabled="false" LogGeneralTraceEvents="true">
  <Description>Extended Robot Interface Production</Description>
  <ActorPoolSize>10</ActorPoolSize>
  <Setting Target="Adapter" Name="ShutdownTimeout">10</Setting>
  <Setting Target="Adapter" Name="UpdateTimeout">5</Setting>
  <Item Name="Process Dispense Result BP" Category="" ClassName="Robot.ProcessDispenseResultBP" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="Process Dispense Order BP" Category="" ClassName="Robot.ProcessDispenseOrderBP" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="Process HL7 Messages BP" Category="" ClassName="Robot.ProcessHL7MessagesBP" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="Process Stock Batch Update BP" Category="" ClassName="Robot.ProcessStockBatchUpdateBP" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="Ens.MonitorService" Category="" ClassName="Ens.MonitorService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="CallInterval">60</Setting>
    <Setting Target="Host" Name="AlertOnError">1</Setting>
  </Item>
  <Item Name="Ens.ManagerService" Category="" ClassName="Ens.ManagerService" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="Ens.Alert" Category="" ClassName="EnsLib.EMail.AlertOperation" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="SubjectPrefix">Robot Interface:</Setting>
    <Setting Target="Host" Name="SystemName">Robot Interface Server</Setting>
    <Setting Target="Adapter" Name="From">nigel.salm@right-epharmacy.co.za</Setting>
    <Setting Target="Adapter" Name="Recipient">nigel.salm@right-epharmacy.co.za;</Setting>
    <Setting Target="Adapter" Name="SMTPServer">10.7.0.31</Setting>
    <Setting Target="Host" Name="IncludeDetails">1</Setting>
    <Setting Target="Host" Name="IncludeNodeinSubject">1</Setting>
    <Setting Target="Adapter" Name="SMTPPort">25</Setting>
    <Setting Target="Host" Name="BusinessPartner">Right-ePharmacy IT</Setting>
    <Setting Target="Adapter" Name="Credentials">eMail</Setting>
    <Setting Target="Adapter" Name="SSLConfig"></Setting>
    <Setting Target="Host" Name="FailureTimeout">30</Setting>
    <Setting Target="Host" Name="RetryInterval">10</Setting>
  </Item>
  <Item Name="Process Robot Messages BP" Category="" ClassName="Robot.ProcessRobotMessagesBP" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="Process Robot Dispense BP" Category="" ClassName="Robot.ProcessRobotDispenseBP" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="Robot Status Service" Category="" ClassName="Robot.StatusService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="PDU Printer File Operation SB1" Category="" ClassName="Robot.PDUPrinterFileOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="FilePath">C:\InterSystems\Robot\IFSProductionRobotTesting\PDUPrinterMessages\</Setting>
  </Item>
  <Item Name="HL7 File Operation" Category="" ClassName="Robot.HL7FileOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="FilePath">C:\InterSystems\Robot\IFSProductionRobotTesting\OutboundHL7\</Setting>
  </Item>
  <Item Name="HL7 RDS TCP Operation TriMed" Category="" ClassName="EnsLib.HL7.Operation.TCPOperation" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="HL7 RDS Operation Cloud" Category="" ClassName="EnsLib.HL7.Operation.TCPOperation" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="Robot File Operation SB1" Category="" ClassName="Robot.RobotFileOperation" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="FilePath">C:\InterSystems\Robot\IFSProductionRobotTesting\RobotOutboundMessages</Setting>
  </Item>
  <Item Name="Robot TCP Operation SB1" Category="" ClassName="Robot.RobotTCPOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="Robot Stock Level Service" Category="" ClassName="Robot.StockLevelService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="IFS Alert Service" Category="" ClassName="Robot.AlertService" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="IFS Incoming HL7 TCP Service" Category="" ClassName="EnsLib.HL7.Service.TCPService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="TargetConfigNames">Process HL7 Messages BP</Setting>
    <Setting Target="Adapter" Name="JobPerConnection">1</Setting>
    <Setting Target="Host" Name="AckMode">App</Setting>
    <Setting Target="Host" Name="MessageSchemaCategory">2.7</Setting>
    <Setting Target="Adapter" Name="Port">56772</Setting>
  </Item>
  <Item Name="IFS Incoming HL7 File Service" Category="" ClassName="EnsLib.HL7.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="AckTargetConfigNames">HL7 File Operation</Setting>
    <Setting Target="Adapter" Name="ArchivePath">C:\InterSystems\Robot\IFSProductionRobotTesting\ProcessedHL7</Setting>
    <Setting Target="Adapter" Name="FilePath">C:\InterSystems\Robot\IFSProductionRobotTesting\InboundHL7</Setting>
    <Setting Target="Adapter" Name="WorkPath">C:\InterSystems\Robot\IFSProductionRobotTesting\WorkingHL7</Setting>
    <Setting Target="Host" Name="MessageSchemaCategory">2.7</Setting>
    <Setting Target="Host" Name="TargetConfigNames">Process HL7 Messages BP</Setting>
  </Item>
  <Item Name="IFS Housekeeping Service" Category="" ClassName="Robot.HousekeepingService" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="Process Stock Level Request BP" Category="" ClassName="Robot.ProcessStockLevelRequestBP" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="Robot Dispense Response Service" Category="" ClassName="Robot.DispenseResponseService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="PDU Printer TCP Operation SB1" Category="" ClassName="Robot.PDUPrinterTCPOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="FHIR Service" Category="" ClassName="Robot.FHIR.InteropService" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
</Production>
]]></Data>
</XData>
</Class>


<Class name="Robot.FHIR.API.Service">
<Super>HS.FHIRServer.API.Service</Super>
<TimeChanged>65896,6765.178852</TimeChanged>
<TimeCreated>65896,6750.423081</TimeCreated>
</Class>


<Class name="Robot.FHIR.Interop.FHIRService">
<Super>HS.FHIRServer.Interop.Service</Super>
<TimeChanged>65896,1969.122478</TimeChanged>
<TimeCreated>65896,1955.952661</TimeCreated>
</Class>




<Class name="Robot.FHIR.Process.Interactions">
<Super>HS.FHIRServer.API.Interactions</Super>
<TimeChanged>65896,6539.400227</TimeChanged>
<TimeCreated>65896,6522.586395</TimeCreated>
</Class>


<Class name="Robot.FHIR.Process.InteractionsStrategy">
<Super>HS.FHIRServer.API.InteractionsStrategy</Super>
<TimeChanged>65896,6563.00522</TimeChanged>
<TimeCreated>65896,6480.825654</TimeCreated>
</Class>


<Class name="Robot.FHIR.RestClientHTTP">
<Description><![CDATA[
This class provides API methods for creating and submitting FHIR REST API calls directly over HTTP.<br>
<br>
<class>HS.FHIRServer.RestClient.Base</class> holds the primary implementation of all of the
interaction-specific instance methods and properties.<br>
Behavior specific to this class:<br>
- The %ServiceName property refers to the name of a Service Registry HTTP entry.<br>
- The %OAuthSendType property is specific to this class.<br>
- All input content body (payloads) must be stream or string, already formatted in the desired format.<br>
- Internally, requests are invoked via %Net.HttpRequest.<br>
<br>
Example usage:<br>
Set clientObj = ##class(HS.FHIRServer.RestClient.HTTP).CreateInstance("MyFHIR.HTTP.Service")<br>
Do clientObj.SetResponseFormat("JSON")<br>
Set clientResponseObj = clientObj.Read("GET", "Patient", "123")<br>
<br>
See <class>HS.FHIRServer.API.Data.RestClient.Response</class> for details on the contents of the client response object (clientResponseObj in the above example).
<br>]]></Description>
<Super>HS.FHIRServer.RestClient.HTTP</Super>
<TimeChanged>65896,1991.339896</TimeChanged>
<TimeCreated>65895,85445.405684</TimeCreated>
</Class>


<Class name="Robot.FHIR.RestDispatcher">
<Super>HS.FHIRServer.RestHandler</Super>
<TimeChanged>65895,86382.553077</TimeChanged>
<TimeCreated>65895,86382.553077</TimeCreated>
</Class>


<Class name="Robot.FHIR.Storage.JSON.InteractionStrategy">
<Super>HS.FHIRServer.Storage.Json.InteractionsStrategy</Super>
<TimeChanged>65896,482.858348</TimeChanged>
<TimeCreated>65896,482.858348</TimeCreated>
</Class>


<Class name="Robot.HL7FileOperation">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64117,66732.778874</TimeChanged>
<TimeCreated>63649,15436.721356</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.File.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.File.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="SendHL7Message">
<FormalSpec>pRequest:EnsLib.HL7.Message,*pResponse:Robot.HL7FileResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set string=pRequest.OutputToString()
	set tSC=..Adapter.PutString("HL7 "_($tr($zdt($h,3),":- ",""))_".txt",string)
End	;
	set pResponse=##class(Robot.HL7FileResponse).%New()
	set pResponse.Success=tSC
	$$$TRACE("pResponse: "_pResponse)
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="EnsLib.HL7.Message"> 
		<Method>SendHL7Message</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="Robot.HL7FileResponse">
<Super>Ens.Response</Super>
<TimeChanged>64117,66689.787629</TimeChanged>
<TimeCreated>64117,66689.421547</TimeCreated>

<Property name="Success">
<Type>%Status</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>HL7FileResponseDefaultData</DefaultData>
<Data name="HL7FileResponseDefaultData">
<Structure>listnode</Structure>
<Subscript>"HL7FileResponse"</Subscript>
<Value name="1">
<Value>Success</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.HousekeepingService">
<Super>Ens.BusinessService</Super>
<TimeChanged>64637,31908.897693</TimeChanged>
<TimeCreated>63967,55295.470124</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>Ens.InboundAdapter</Type>
</Property>

<Property name="NumberOfDaysToRetainTraceData">
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="NumberOfDaysToRetainOrders">
<Type>%Integer</Type>
<InitialExpression>10</InitialExpression>
</Property>

<Property name="NumberOfDaysToRetainBatches">
<Type>%Integer</Type>
<InitialExpression>10</InitialExpression>
</Property>

<Property name="NumberOfDaystoRetainQueues">
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="NumberOfDaystoRetainDispenseArchive">
<Type>%Integer</Type>
<InitialExpression>5</InitialExpression>
</Property>

<Property name="AutomaticallyResultDispenseOrders">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="NumberOfDaysToRetainRobotTCPTrace">
<Type>%Integer</Type>
<InitialExpression>2</InitialExpression>
</Property>

<Property name="NumberOfDaysToRetainPrinterTCPTrace">
<Type>%Integer</Type>
<InitialExpression>2</InitialExpression>
</Property>

<Property name="TimeBeforeAutoResultRDS">
<Type>%Time</Type>
</Property>

<Property name="LastCodeExport">
<Type>%Date</Type>
</Property>

<Property name="LastGlobalExport">
<Type>%Date</Type>
</Property>

<Property name="NumberOfDaysToRetainReports">
<Type>%Integer</Type>
<InitialExpression>2</InitialExpression>
</Property>

<Property name="Path">
<Type>%String</Type>
<InitialExpression>"c:\InterSystems\RobotInterface\"</InitialExpression>
</Property>

<Property name="FileExtensions">
<Type>%String</Type>
<InitialExpression>";*.csv;*.txt"</InitialExpression>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set TDDT=$h-..NumberOfDaysToRetainTraceData
	set ODT=$h-..NumberOfDaysToRetainOrders
	set BDT=$h-..NumberOfDaysToRetainBatches
	set QDT=$h-..NumberOfDaystoRetainQueues
	set DAQDT=$h-..NumberOfDaystoRetainDispenseArchive
	set RTCP=$h-..NumberOfDaysToRetainRobotTCPTrace
	set PRTCP=$h-..NumberOfDaysToRetainPrinterTCPTrace
	set REPDT=$h-..NumberOfDaysToRetainReports
	
PurgeMessages	;
	$$$TRACE("Ensemble Messages Purge Started")
	set x=##class(Ens.Purge).PurgeEventLogs(TDDT,,.count)
	$$$TRACE("Purge Event Log Count: "_count)
	set x=##class(Ens.Purge).PurgeBusinessProcessesByDate(QDT,.count,1)
	set y="" for  set y=$o(count(y)) q:y=""  $$$TRACE("Deleting Item: ("_y_")_Count: "_count(y))
	$$$TRACE("Ensemble Messages Purge Completed")
	
ExportCodeBase	;
	if ..LastCodeExport<+$h {
		if $znspace["PAAB" {
			set file="c:\intersystems\source\"_$znspace_" PAAB Code Base "_$tr($zdt($h,3)," :-","")_".xml"
			set tSC=$system.OBJ.ExportPackage("PAAB",file)
		}
		elseif $znspace["ROBOT"!($znspace["Robot")!($znspace["IFS") {
			set file="c:\intersystems\source\"_$znspace_" IFS Code Base "_$tr($zdt($h,3)," :-","")_".xml"
			set tSC=$system.OBJ.ExportPackage("Robot",file)
		}
		set ..LastCodeExport=+$h
	}
	
ExportGlobalBase	;
	/*
	if ..LastGlobalExport<+$h {
		if $znspace["PAAB" {
			set file="c:\intersystems\source\"_$znspace_" PAAB Globals "_$tr($zdt($h,3)," :-","")_".gof"
			set tSC=##class(%Library.Global).Export($znspace,"PAAB.*",file,7)
		}
		elseif $znspace["ROBOT"!($znspace["Robot")!($znspace["IFS") {
			set file="c:\intersystems\source\"_$znspace_" IFS Globals "_$tr($zdt($h,3)," :-","")_".gof"
			set tSC=##class(%Library.Global).Export($znspace,"Robot.*",file,7)
		}
		set ..LastGlobalExport=+$h
	}
	*/
	
TCPTraceLog	;
	set (x,y)=""
	for {
		set x=$o(^Robot.TCPOperationLog(x)) q:x=""
		for {
			set y=$o(^Robot.TCPOperationLog(x,y)) quit:y=""
			set dt=$zdh($lg(^Robot.TCPOperationLog(x,y),1),3)
			if dt<RTCP kill ^Robot.TCPOperationLog(x,y)
		}
	}
	
PrinterTCPTraceLog ;

	set (x,y)=""
	for {
		set x=$o(^Robot.PrinterTCPLog(x)) q:x=""
		for {
			set y=$o(^Robot.PrinterTCPLog(x,y)) quit:y=""
			set dt=$zdh($lg(^Robot.PrinterTCPLog(x,y),1),3)
			if dt<PRTCP kill ^Robot.PrinterTCPLog(x,y)
		}
	}

Queues	;
	$$$TRACE("Queue Cleanup Started at "_$zdt($h,3))
	// First Lets Tidy Up The Queues
	for gbl="^Robot.TCPInboundQueue","^Robot.TCPOutboundQueue" {
		set agbl=$p(gbl,".",1)_".Archive."_$p(gbl,".",2)
		set (queue,s1,s2)=""
		for {
			set queue=$o(@gbl@(queue)) quit:queue=""
			for {
				set s1=$o(@gbl@(queue,s1)) quit:s1=""
				for {
					set s2=$o(@gbl@(queue,s1,s2)) quit:s2=""
					set rec=$g(@gbl@(queue,s1,s2),"")
					if $l(rec) {
						if $l($lg(rec,1)) set dt=$zdh($lg(rec,1),3)
						else  continue
						if dt<QDT {
							if '$l($lg(rec,2)) set $list(rec,2)=$zdt($h,3),$list(rec,4)="Housekeeping Update" set @gbl@(queue,s1,s2)=rec
							merge @agbl@(queue,s1,s2)=@gbl@(queue,s1,s2)
							kill @gbl@(queue,s1,s2)
						}
					}
					else {
						kill @gbl@(queue,s1,s2)
					}
				}
			}
		}
	}
	$$$TRACE("Queue Cleanup Ended at "_$zdt($h,3))

ArchiveQueues	;
	$$$TRACE("Archive Queue Cleanup Started at "_$zdt($h,3))
	for gbl="^Robot.Archive.TCPInboundQueue","^Robot.Archive.TCPOutboundQueue" {
		set (queue,s1,s2)=""
		for {
			set queue=$o(@gbl@(queue)) quit:queue=""
			for {
				set s1=$o(@gbl@(queue,s1)) quit:s1=""
				for {
					set s2=$o(@gbl@(queue,s1,s2)) quit:s2=""
					set rec=$g(@gbl@(queue,s1,s2),"")
					if $l(rec) {
						if $l($lg(rec,1)) set dt=$zdh($lg(rec,1),3) $$$TRACE("DT: "_dt_" QDT: "_QDT_" DAQDT: "_DAQDT)
						else  continue
						if (queue="DispenseRequest"!(queue="DispenseResponse")) {
							if dt<DAQDT {
								kill @gbl@(queue,s1,s2)
							}
						}
						elseif dt<QDT {
							kill @gbl@(queue,s1,s2)
						}
					}
					else {
						kill @gbl@(queue,s1,s2)
					}
				}
			}
		}
	}
	$$$TRACE("Archive Queue Cleanup Ended at "_$zdt($h,3))
	
Orders	;
	// Now do Orders
	/*
	$$$TRACE("Order Cleanup Started at "_$zdt($h,3))
	set order="",gbl="^Robot.OMPDetailsD"
	for {
		set order=$o(@gbl@(order)) quit:order=""
		set ompdetails=##class(Robot.OMPDetails).%OpenId(order)
		if '$IsObject(ompdetails) $$$TRACE("Unable to open OMP Details for Id: "_pRequest.OMPID) continue
		if $zdh(ompdetails.CreationDT,3)'<ODT set ompdetail="" continue
		set array(order,"Port")=ompdetails.RobotPort.%Id()
		set array(order,"Name")=ompdetails.PatientGivenName
		set array(order,"Surname")=ompdetails.PatientSurname
		set array(order,"IDNumber")=ompdetails.PatientIDNumber
		set array(order,"MessageControlID")=ompdetails.MessageControlID
		set array(order,"CreateDate")=ompdetails.CreationDT
		set array(order,"RDSSent")=ompdetails.RDSSent
		set array(order,"RDSSentDT")=ompdetails.RDSSentDT
		set array(order,"PatientID")=ompdetails.PatientIdentifier
		set array(order,"Status")=ompdetails.OMPRequestStatus
		merge array(order,"OMP HL7")=^Robot.Archive.TCPInboundQueue("OMPHL7Request",order)
		merge array(order,"RDS HL7")=^Robot.Archive.TCPOutboundQueue("RDSHL7Response",order)
		set orderkey=""
		for {
			set orderobj=ompdetails.Orders.GetNext(.orderkey) quit:orderkey=""
			set array(order,"Orders",orderkey,"RX")=orderobj.TriMedReferenceNumber
			set array(order,"Orders",orderkey,"eRX")=orderobj.CallCentreReferenceNumber
			set itemkey="",lineitem=1
			for {
				set item=orderobj.RXCDetails.GetNext(.itemkey) quit:itemkey=""
				set array(order,"Orders",orderkey,"Line",itemkey,"QuantityOrdered")=item.ComponentAmount
				set array(order,"Orders",orderkey,"Line",itemkey,"Product")=item.ComponentIdentifier
				set array(order,"Orders",orderkey,"Line",itemkey,"IsError")=item.IsError
				set rxdkey="",total=0
				for {
					set rxd=item.Dispensed.GetNext(.rxdkey) quit:rxdkey=""
					set array(order,"Orders",orderkey,"Line",itemkey,"OrderRef",rxdkey)=rxd.ComponentAmountDispensed
					merge array(order,"Orders",orderkey,"Line",itemkey,"OrderRef",rxdkey,"Label")=^Robot.TCPOutboundQueue("PDUPrinterRequest",rxdkey)
					set total=total+rxd.ComponentAmountDispensed
				}
				set array(order,"Orders",orderkey,"Line",itemkey,"QuantityDispensed")=total
			}
		}
		merge ^Robot.Archive.Orders=array
		set ompdetails="" set sc=##class(Robot.OMPDetails).%DeleteId(order)
		if 'sc $$$TRACE("Unable to Delete Order Details for Order: ("_order_")")
	}
	$$$TRACE("Order Cleanup Ended at "_$zdt($h,3))
	*/
	
Reports	;
	$$$TRACE("Deleteing Reports Started")
	set rs=##class(%ResultSet).%New("%File:FileSet")
	set sc=rs.Execute(..Path,..FileExtensions)
	for {
		quit:'rs.Next(.sc)
		set str=$p(rs.Data("Name"),".",1)
		if $l(str) {
			$$$TRACE("Report Name: "_str)
			set dt=$zdh($e(str,$l(str)-9,$l(str)),3)
			if dt<REPDT {
				set sc=##class(%File).Delete(rs.Data("Name"))
				$$$TRACE("Deleted Report: "_rs.Data("Name")_" Status: "_$s(sc:"OK",1:"Not OK"))
			}
		}
	}
	$$$TRACE("Deleteing Reports Ended")
End	;	
	Quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="OnInit">
<Description>
This user callback method is called via initConfig() from %OnNew() or in the case of SOAP Services from OnPreSOAP()</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set system=##class(Robot.SystemSettings).%OpenId("Robot")
	if '$IsObject(system) set tSC=$system.Status.Error(5001,"Unable to open System Settings") goto End
	set ..NumberOfDaysToRetainTraceData=system.NumberOfDaysToRetainTraceData
	set ..NumberOfDaysToRetainOrders=system.NumberOfDaysToRetainOrders
	set ..NumberOfDaysToRetainBatches=system.NumberOfDaysToRetainBatches
	set ..NumberOfDaystoRetainQueues=system.NumberOfDaystoRetainQueues
	set ..AutomaticallyResultDispenseOrders=system.AutomaticallyResultDispenseOrders
	set ..TimeBeforeAutoResultRDS=system.TimeBeforeAutoResultRDS
	set ..LastCodeExport=$s(..LastCodeExport="":+$h-1,1:..LastCodeExport)
End	;	
	Quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>
</Class>


<Class name="Robot.INURequest">
<Super>Ens.Request</Super>
<TimeChanged>64151,54887.183964</TimeChanged>
<TimeCreated>63735,76328.699088</TimeCreated>

<Property name="BatchReference">
<Type>%String</Type>
</Property>

<Property name="SendOpenBatch">
<Type>%Boolean</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>INURequestDefaultData</DefaultData>
<Data name="INURequestDefaultData">
<Structure>listnode</Structure>
<Subscript>"INURequest"</Subscript>
<Value name="1">
<Value>BatchReference</Value>
</Value>
<Value name="2">
<Value>SendOpenBatch</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.INUResponse">
<Super>Ens.Response</Super>
<TimeChanged>63739,63988</TimeChanged>
<TimeCreated>63735,76358.211495</TimeCreated>

<Property name="Success">
<Type>%Status</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>INUResponseDefaultData</DefaultData>
<Data name="INUResponseDefaultData">
<Structure>listnode</Structure>
<Subscript>"INUResponse"</Subscript>
<Value name="1">
<Value>Success</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Location">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64734,55389</TimeChanged>
<TimeCreated>63639,81648.085354</TimeCreated>

<Property name="LocationCode">
<Type>%String</Type>
</Property>

<Property name="LocationDescription">
<Type>%String</Type>
</Property>

<Property name="LocationLabelAddressLine1">
<Type>%String</Type>
<Parameter name="MAXLEN" value="45"/>
</Property>

<Property name="LocationLabelAddressLine2">
<Type>%String</Type>
<Parameter name="MAXLEN" value="45"/>
</Property>

<Property name="LocationLabelAddressLine3">
<Type>%String</Type>
<Parameter name="MAXLEN" value="45"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>LocationCode</Properties>
<Unique>1</Unique>
</Index>

<Property name="Site">
<Type>Robot.Site</Type>
<Cardinality>parent</Cardinality>
<Inverse>Locations</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Ports">
<Type>Robot.Port</Type>
<Cardinality>children</Cardinality>
<Inverse>Location</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("Locations")</DataLocation>
<DefaultData>LocationDefaultData</DefaultData>
<IdLocation>^Robot.SiteC("Locations")</IdLocation>
<IndexLocation>^Robot.LocationI</IndexLocation>
<StreamLocation>^Robot.LocationS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="LocationDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>LocationDescription</Value>
</Value>
<Value name="3">
<Value>LocationLabelAddressLine1</Value>
</Value>
<Value name="4">
<Value>LocationLabelAddressLine2</Value>
</Value>
<Value name="5">
<Value>LocationLabelAddressLine3</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.MFNRequest">
<Super>Ens.Request</Super>
<TimeChanged>64212,71336</TimeChanged>
<TimeCreated>64207,79492.011409</TimeCreated>

<Property name="StockLevels">
<Type>%String</Type>
</Property>

<Property name="RequestTS">
<Type>%TimeStamp</Type>
</Property>

<Property name="Robot">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>MFNRequestDefaultData</DefaultData>
<Data name="MFNRequestDefaultData">
<Subscript>"MFNRequest"</Subscript>
<Value name="1">
<Value>StockLevels</Value>
</Value>
<Value name="2">
<Value>RequestTS</Value>
</Value>
<Value name="3">
<Value>Robot</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.MFNResponse">
<Super>Ens.Response</Super>
<TimeChanged>64212,71336</TimeChanged>
<TimeCreated>64207,79527.908116</TimeCreated>

<Property name="Success">
<Type>%Status</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>MFNResponseDefaultData</DefaultData>
<Data name="MFNResponseDefaultData">
<Structure>listnode</Structure>
<Subscript>"MFNResponse"</Subscript>
<Value name="1">
<Value>Success</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Mapping.MessageDataTypes">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>63857,74082.982417</TimeChanged>
<TimeCreated>63846,36273.439815</TimeCreated>

<Property name="DataTypeCode">
<Type>%String</Type>
</Property>

<Property name="DataTypeName">
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// this field is 'val', expression should return retval as a Boolean True/False

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// e.g. "set retval=(val?1n.n)"

]]></Content>
</UDLText>

<Property name="ValidationExpression">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="FillCharacter">
<Type>%String</Type>
</Property>

<Property name="FillAlign">
<Type>%String</Type>
<Parameter name="DISPLAYLIST" value=",Left,Right"/>
<Parameter name="VALUELIST" value=",L,R"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>DataTypeCode</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Mapping.MessageDataTD</DataLocation>
<DefaultData>MessageDataTypesDefaultData</DefaultData>
<IdLocation>^Robot.Mapping.MessageDataTD</IdLocation>
<IndexLocation>^Robot.Mapping.MessageDataTI</IndexLocation>
<StreamLocation>^Robot.Mapping.MessageDataTS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="MessageDataTypesDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DataTypeName</Value>
</Value>
<Value name="3">
<Value>ValidationExpression</Value>
</Value>
<Value name="4">
<Value>FillCharacter</Value>
</Value>
<Value name="5">
<Value>FillAlign</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Mapping.MessageDefinitions">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64120,51707.127585</TimeChanged>
<TimeCreated>63846,37788.517273</TimeCreated>

<Property name="MessageCode">
<Type>%String</Type>
</Property>

<Property name="MessageName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="MessageGroup">
<Type>Robot.Mapping.MessageGroups</Type>
</Property>

<Property name="MessageType">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="VALUELIST" value=",Request,Response"/>
</Property>

<Property name="StringType">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="DISPLAYLIST" value=",Delimited,Fixed Length"/>
<Parameter name="VALUELIST" value=",D,F"/>
</Property>

<Property name="FixedLengthRecordSize">
<Type>%Integer</Type>
</Property>

<Property name="TranslateInFrom">
<Type>%String</Type>
<InitialExpression>"~"</InitialExpression>
</Property>

<Property name="TranslateInTo">
<Type>%String</Type>
<InitialExpression>"CHAR0"</InitialExpression>
</Property>

<Property name="TranslateOutFrom">
<Type>%String</Type>
<InitialExpression>"CHAR0"</InitialExpression>
</Property>

<Property name="TranslateOutTo">
<Type>%String</Type>
<InitialExpression>"~"</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// string or expession (";" or $c(0) as examples)

]]></Content>
</UDLText>

<Property name="Delimeter">
<Type>%String</Type>
</Property>

<Property name="SubFieldDelimeter">
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Message Items can be either an instance of Robot.Mapping.MessageItem+-

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// or they can be an instance of Robot.Mapping.Message. In the latter this is in effect

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// a repeating sub-message. Sub-messages can have sub-sub-messages.

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Therefore the string value in the array will be a full oid of the classname and id

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// of the object being referenced

]]></Content>
</UDLText>

<Property name="MessageItems">
<Type>%String</Type>
<Collection>array</Collection>
</Property>

<UDLText name="T">
<Content><![CDATA[
// no value for this field indicates no max

]]></Content>
</UDLText>

<Property name="RepeatLineMax">
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
<Parameter name="MAXVAL" value="999"/>
</Property>

<Property name="RepeatItemMax">
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>MessageCode</Properties>
<Unique>1</Unique>
</Index>

<Index name="I1">
<Properties>MessageGroup</Properties>
</Index>

<Method name="CreateMessage">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[dialoguetype:%String="",robot:%String=1,global:%String="data",&refglobal:%String="refdata",&message:%String=""]]></FormalSpec>
<PublicList>val,retval</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	if '$l($g(robot)) set tSC=$system.Status.Error(5001,"Invalid Robot Id") goto End
	if '$l(global) set tSC=$system.Status.Error(5001,"Invalid Global Name") goto End
	if '$l(refglobal) set tSC=$system.Status.Error(5001,"Invalid Reference Global Name") goto End
	if '$d(@global) goto End
	set robotobj=##class(Robot.Robots).%OpenId(robot)
	if '$IsObject(robotobj) set tSC=$system.Status.Error(5001,"Unable to open Robot ("_robot_")") goto End
	if '$l(dialoguetype) {
		if $l(robotobj.MessageDialogueCodeFieldNumber),$d(@global@(robotobj.MessageDialogueCodeFieldNumber)) {
			set dialoguetype=@global@(robotobj.MessageDialogueCodeFieldNumber)
		}
		elseif $l(robotobj.MessageDialogueCodeFieldName),$d(@global@($c(34)_robotobj.MessageDialogueCodeFieldName_$c(34))) {
			set dialoguetype=@global@($c(34)_robotobj.MessageDialogueCodeFieldName_$c(34))
		}
		else {
			set tSC=$system.Status.Error(5001,"Unable to determine Message Dialogue Type") goto End
		}
	}
	if '$l(dialoguetype) set tSC=$system.Status.Error(5001,"Unable to determine Message Dialogue Type") goto End
	set rmobj=##class(Robot.RobotMessages).%OpenId(robot_"||"_dialoguetype)
	if '$IsObject(rmobj) set tSC=$system.Status.Error(5001,"Unable to open Robot Message for code: ("_robot_"||"_dialoguetype_")") goto End
	set messagedef=rmobj.Message.MessageCode kill rmobj
	if '$l(messagedef) set tSC=$system.Status.Error(5001,"Invalid Message Definition") goto End
	set obj=##class(Robot.Mapping.MessageDefinitions).%OpenId(messagedef)
	if '$IsObject(obj) set tSC=$system.Status.Error(5001,"Message Definition ("_messagedef_") does not return a valid Message Definition Object") goto End
	set type=obj.MessageType,stringtype=obj.StringType,delim=obj.Delimeter,TOF=obj.TranslateOutFrom,TOT=obj.TranslateOutTo
	for i=1:1:obj.MessageItems.Count() {
		set item=obj.MessageItems.GetAt(i)
		set class=$p(item,"||",1),id=$p(item,"||",2)
		if class="Robot.Mapping.MessageDefinitions" {
			set classobj=##class(Robot.Mapping.MessageDefinitions).%OpenId(id)
			if '$IsObject(classobj) set tSC=$system.Status.Error(5001,"Sub Field Class: ("_id_") does not exist. Referenced by field: ("_i_")") goto End
			for j=1:1:classobj.RepeatLineMax {
				if $d(@global@(i)) {
					if global[")" set gblref=$p(global,")",1)_","_i_","_j_")"
					else  set gblref=global_"("_i_","_j_")"
				}
				if $d(@global@(id)) {
					if global[")" set gblref=$p(global,")",1)_","_$c(34)_id_$c(34)_","_j_")"
					else  set gblref=global_"("_$c(34)_id_$c(34)_","_j_")"
				}
				if refglobal[")" set refgblref=$p(refglobal,")",1)_","_$c(34)_id_$c(34)_")"
				else  set refgblref=refglobal_"("_$c(34)_id_$c(34)_")"
				set tSC=..CreateMessage(id,gblref,refgblref,.message)
				if 'tSC goto End
			}
		}
		else {
			set itemobj=##class(Robot.Mapping.MessageItems).%OpenId(id)
			if '$IsObject(itemobj) set tSC=$system.Status.Error(5001,"Invalid Message Item Code: "_id) goto End
			set validation=itemobj.DataType.ValidationExpression
			if $l(itemobj.ValidationExpression) set validation=itemobj.ValidationExpression
			set transform=itemobj.TransformExpression
			set generate=itemobj.GeneratedExpression
			set found=0,val=""
			if $l(itemobj.DefaultValue) set val=itemobj.DefaultValue,found=1 if $e(val,1,4)="CHAR" set val=$c($p(vall,"CHAR",2))
			if $d(@global@(i))#10 {
				set val=@global@(i),found=1
			}
			elseif $d(@global@(itemobj.ItemCode))#10 {
				set val=@global@(itemobj.ItemCode),found=1
			}
			elseif $l(generate) {
				x generate if $d(retval) set val=retval,found=1 kill retval
			}
			elseif itemobj.ItemType="L"!(itemobj.ItemType="I"),'found {
				set val=$i(@refglobal@("L",itemobj.ItemCode)),found=1
			}
			if itemobj.Required,'found set tSC=$system.Status.Error(5001,"Invalid Value for Field: "_i_" ("_itemobj.ItemCode_")") goto End
			if $l(transform) x transform if $d(retval) set val=retval kill retval
			if $l(validation) x validation if $d(retval),'retval set tSC=$system.Status.Error(5001,"The value for field: "_itemobj.ItemCode_" ("_itemobj.ItemName_") has failed validation") kill retval goto End
			set fillstr="",fieldval=val if $l(itemobj.DataType.FillCharacter) {
				set fillchar=itemobj.DataType.FillCharacter
				if $e(fillchar,1,4)="CHAR" set fillchar=$c($p(fillchar,"CHAR",2))
				set $p(fillstr,fillchar,itemobj.MaximumLength+2)=""
				if itemobj.DataType.FillAlign="L" set fieldval=$e(fillstr,1,(itemobj.MaximumLength-$l(fieldval)))_fieldval
				else  set fieldval=fieldval_$e(fillstr,1,(itemobj.MaximumLength-$l(fieldval)))
				
			}
			if type="D" {
				if $l(message) set message=message_delim
			}
			set message=message_fieldval
			if itemobj.ItemType
			if "RC"[itemobj.ItemType set @refglobal@(itemobj.ItemType,itemobj.ItemCode)=val
		}
	}
	if $l(TOF),$l(TOT) {
		if $e(TOF,1,4)="CHAR" set TOF=$c($p(TOF,"CHAR",2))
		if $e(TOT,1,4)="CHAR" set TOT=$c($p(TOT,"CHAR",2))
		set message=$tr(message,TOF,TOT)
	}
End	;
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="UnpackMessage">
<ClassMethod>1</ClassMethod>
<FormalSpec>messagedef:%String,dialoguetype:%String="",robot:%String=1,message:%String="",global:%String="data",refglobal:%String="refdata",currentposition:%Integer=0,killglobal:%Boolean=0</FormalSpec>
<PublicList>msg,retval,val</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// If you pass in NULL for dialoguetpye the method will work out the dialogue type from the message code
	// If you call the method passing in dialogue type by reference then the method will return the Dialogue Type
	set $ztrap="Error",tSC=$$$OK
	if '$l($g(robot)) set tSC=$system.Status.Error(5001,"Invalid Robot Id") goto End
	if '$l($g(message)) set tSC=$system.Status.Error(5001,"Invalid Message") goto End	
	if '$l(global) set tSC=$system.Status.Error(5001,"Invalid Global Name") goto End
	if '$l(refglobal) set tSC=$system.Status.Error(5001,"Invalid Reference Global Name") goto End
	if killglobal kill @global,@refglobal
	if $l(messagedef) goto GotMessage
	set messagedef=""
	set robotobj=##class(Robot.Robots).%OpenId(robot)
	if '$IsObject(robotobj) set tSC=$system.Status.Error(5001,"Unable to open Robot ("_robot_")") goto End
	if '$l(dialoguetype) {
		// msg is passed into the code expression to be executed
		set msg=message
		if $l(robotobj.MessageDialogueCodeExpr) {
			x robotobj.MessageDialogueCodeExpr
			if $l($g(retval)) set dialoguetype=$o(^Robot.RobotMessagesI("DialogueIndex",retval,1,""))
		}
	}
	if $l(dialoguetype) {
		set rmobj=##class(Robot.RobotMessages).%OpenId(robot_"||"_dialoguetype)
		if '$IsObject(rmobj) set tSC=$system.Status.Error(5001,"Unable to open Robot Message for id: ("_robot_"||"_dialoguetype_")") goto End
		set messagedef=rmobj.Message.MessageCode kill rmobj
	}
GotMessage	;
	if '$l(messagedef) set tSC=$system.Status.Error(5001,"Invalid Messaage Definition") goto End
	set obj=##class(Robot.Mapping.MessageDefinitions).%OpenId(messagedef)
	if '$IsObject(obj) set tSC=$system.Status.Error(5001,"Message Definition ("_messagedef_") does not return a valid Message Definition Object") goto End
	set type=obj.MessageType,stringtype=obj.StringType,delim=obj.Delimeter,TOF=obj.TranslateOutFrom,TOT=obj.TranslateOutTo
	set TIF=obj.TranslateInFrom,TIT=obj.TranslateInTo,subdelim=obj.SubFieldDelimeter
	if $e(delim,1,4)="CHAR" set delim=$c($p(delim,1,4),2)
	if $e(subdelim,1,4)="CHAR" set subdelim=$c($p(subdelim,1,4),2)
	for i=1:1:obj.MessageItems.Count() {
		set item=obj.MessageItems.GetAt(i)
		set class=$p(item,"||",1),id=$p(item,"||",2)
		if class="Robot.Mapping.MessageDefinitions" {
			set classobj=##class(Robot.Mapping.MessageDefinitions).%OpenId(id)
			if '$IsObject(classobj) set tSC=$system.Status.Error(5001,"Sub Field Class: ("_id_") is not a valid message defijnition object") goto End
			// first get the subrecord (made up of instances of the Sub Message Definition
			if stringtype="D" {
				set record=$p(message,delim,i),currentposition=i
			}
			elseif stringtype="F" {
				set record=$e(message,(currentposition+1),(currentposition+(classobj.FixedLengthRecordSize*classobj.RepeatLineMax)-1))
				set currentposition=currentposition+(classobj.FixedLengthRecordSize*classobj.RepeatLineMax)-1
			}
			else {
				set tSC=$system.Status.Error(5001,"Invalid String Type for Message Definition: ("_obj.MessageCode_")")
			}
			for j=1:1:classobj.RepeatLineMax {
				if global[")" set gblref=$p(global,")",1)_","_$c(34)_id_$c(34)_","_j_")"
				else  set gblref=global_"("_$c(34)_id_$c(34)_","_j_")"
				if refglobal[")" set refgblref=$p(refglobal,")",1)_","_$c(34)_id_$c(34)_")"
				else  set refgblref=refglobal_"("_$c(34)_id_$c(34)_")"
				if stringtype="D" {
					set field=$p(record,subdelim,j)
					set curposs=1
				}
				elseif stringtype="F" {
					set field=$e(record,(currentposition+1),(currentposition+classobj.FixedLengthRecordSize-1))
					set currentpoisition=(currentposition+classobj.FixedLengthRecordSize-1)
					set curposs=0
				}
				if '$l(field) quit
				set tSC=..UnpackMessage(obj.%Id(),robot,field,gblref,refgblref,.curpos,0)
				if 'tSC goto End
			}
		}
		else {
			set itemobj=##class(Robot.Mapping.MessageItems).%OpenId(id)
			if '$IsObject(itemobj) set tSC=$system.Status.Error(5001,"Invalid Message Item Code: "_id) goto End
			if stringtype="D" {
				set field=$p(message,delim,i),currentposition=i
			}
			elseif stringtype="F" {
				set field=$e(message,(currentposition+1),(currentposition+itemobj.MaximumLength))
				set currentposition=(currentposition+itemobj.MaximumLength)
			}
			else {
				set tSC=$system.Status.Error(5001,"Invalid String Type for Message Definition: ("_obj.MessageCode_")")
				set field=""
			}
			if $l(itemobj.DataType.FillCharacter) {
				if $e(itemobj.DataType.FillCharacter,1,4)="CHAR" set fillchar="",field=$zstrip(field,"*C")
				else  set fillchar=itemobj.DataType.FillCharacter
				if fillchar=0,itemobj.DataType.FillAlign="L" {
					set field=+field
				}
				elseif fillchar?1ANP.ANP {
					if itemobj.DataType.FillAlign="L" {
						for {
							if $e(field,1,$l(fillchar))=fillchar set field=$e(field,$l(fillchar)+1,$l(field))
							else  quit
						}
					}
					elseif itemobj.DataType.FillAlign="R" {
						for {
							if $e(field,$l(field)-$l(fillchar)+1,$l(field))=fillchar set field=$e(field,1,$l(field)-$l(fillchar))
							else  quit
						}
					}
				}
			}
			set @global@(id)=$zstrip(field,"<>WC")
			if itemobj.ItemType="R" set @refglobal@("ID")=$zstrip(field,"<>WC")
		}
	}
End	;
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Query name="List">
<Type>%SQLQuery</Type>
<SqlQuery>SELECT MessageCode,MessageName FROM MessageDefinitions
 ORDER BY MessageCode</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Mapping.MessageDefD</DataLocation>
<DefaultData>MessageDefinitionsDefaultData</DefaultData>
<IdLocation>^Robot.Mapping.MessageDefD</IdLocation>
<IndexLocation>^Robot.Mapping.MessageDefI</IndexLocation>
<StreamLocation>^Robot.Mapping.MessageDefS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="MessageDefinitionsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>MessageName</Value>
</Value>
<Value name="3">
<Value>MessageGroup</Value>
</Value>
<Value name="4">
<Value>MessageType</Value>
</Value>
<Value name="5">
<Value>StringType</Value>
</Value>
<Value name="6">
<Value>TranslateInFrom</Value>
</Value>
<Value name="7">
<Value>TranslateInTo</Value>
</Value>
<Value name="8">
<Value>TranslateOutFrom</Value>
</Value>
<Value name="9">
<Value>TranslateOutTo</Value>
</Value>
<Value name="10">
<Value>Delimeter</Value>
</Value>
<Value name="11">
<Value>RepeatLineMax</Value>
</Value>
<Value name="12">
<Value>RepeatItemMax</Value>
</Value>
<Value name="13">
<Value>FixedLengthRecordSize</Value>
</Value>
<Value name="14">
<Value>SubFieldDelimeter</Value>
</Value>
</Data>
<Data name="MessageItems">
<Attribute>MessageItems</Attribute>
<Structure>subnode</Structure>
<Subscript>"MessageItems"</Subscript>
</Data>
</Storage>
</Class>


<Class name="Robot.Mapping.MessageGroups">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>63855,63401.561226</TimeChanged>
<TimeCreated>63846,37182.791457</TimeCreated>

<Property name="GroupCode">
<Type>%String</Type>
</Property>

<Property name="GroupName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DeviceReference">
<Type>Robot.Device</Type>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>GroupCode</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Mapping.MessageGroupsD</DataLocation>
<DefaultData>MessageGroupsDefaultData</DefaultData>
<IdLocation>^Robot.Mapping.MessageGroupsD</IdLocation>
<IndexLocation>^Robot.Mapping.MessageGroupsI</IndexLocation>
<StreamLocation>^Robot.Mapping.MessageGroupsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="MessageGroupsDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>GroupName</Value>
</Value>
<Value name="3">
<Value>DeviceReference</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Mapping.MessageItems">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>63861,62655.421429</TimeChanged>
<TimeCreated>63846,37040.879199</TimeCreated>

<Property name="ItemCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="ItemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DataType">
<Type>Robot.Mapping.MessageDataTypes</Type>
</Property>

<Property name="ItemType">
<Type>%String</Type>
<Parameter name="DISPLAYLIST" value=",Line Number,Item Number,Reference,Code,Field,Status,Text Length,Variable Length Field"/>
<Parameter name="VALUELIST" value=",LN,IN,R,C,F,S,TL,VLF"/>
</Property>

<Property name="MaximumLength">
<Type>%Integer</Type>
</Property>

<Property name="MinimumLength">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Required">
<Type>%Boolean</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// this field is 'val', expression should return retval as a Boolean True/False

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// e.g. "set retval=(val?1n.n)"

]]></Content>
</UDLText>

<Property name="ValidationExpression">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// this field accepts value as 'val' and should return 'retval' 

]]></Content>
</UDLText>

<Property name="TransformExpression">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// the expression optionally accepts 'val' as an input value and should return 'retval'.

]]></Content>
</UDLText>

<Property name="GeneratedExpression">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="DefaultValue">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>ItemCode</Properties>
<Unique>1</Unique>
</Index>

<Query name="MessageItems">
<Type>%SQLQuery</Type>
<SqlQuery><![CDATA[SELECT ItemCode,ItemName,ItemType,DefaultValue,DataType->%ID,ValidationExpression,TransformExpression,GeneratedExpression FROM MessageItems]]></SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Mapping.MessageItemsD</DataLocation>
<DefaultData>MessageItemsDefaultData</DefaultData>
<IdLocation>^Robot.Mapping.MessageItemsD</IdLocation>
<IndexLocation>^Robot.Mapping.MessageItemsI</IndexLocation>
<StreamLocation>^Robot.Mapping.MessageItemsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="MessageItemsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ItemName</Value>
</Value>
<Value name="3">
<Value>DataType</Value>
</Value>
<Value name="4">
<Value>ItemType</Value>
</Value>
<Value name="5">
<Value>MaximumLength</Value>
</Value>
<Value name="6">
<Value>MinimumLength</Value>
</Value>
<Value name="7">
<Value>ValidationExpression</Value>
</Value>
<Value name="8">
<Value>TransformExpression</Value>
</Value>
<Value name="9">
<Value>GeneratedExpression</Value>
</Value>
<Value name="10">
<Value>DefaultValue</Value>
</Value>
<Value name="11">
<Value>Required</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Metrics.Dispense">
<Super>%Persistent</Super>
<TimeChanged>64205,35624.568435</TimeChanged>
<TimeCreated>64196,51527.240844</TimeCreated>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Metrics.DispenseD</DataLocation>
<DefaultData>DispenseDefaultData</DefaultData>
<IdLocation>^Robot.Metrics.DispenseD</IdLocation>
<IndexLocation>^Robot.Metrics.DispenseI</IndexLocation>
<StreamLocation>^Robot.Metrics.DispenseS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="DispenseDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Metrics.UnitsOfMeasure">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64204,1119.234211</TimeChanged>
<TimeCreated>64204,1118.617844</TimeCreated>

<Property name="UnitOfMeasure">
<Type>%String</Type>
</Property>

<Property name="UOMDesription">
<Type>%String</Type>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>UnitOfMeasure</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Metrics.UnitsOfMeasureD</DataLocation>
<DefaultData>UnitsOfMeasureDefaultData</DefaultData>
<IdLocation>^Robot.Metrics.UnitsOfMeasureD</IdLocation>
<IndexLocation>^Robot.Metrics.UnitsOfMeasureI</IndexLocation>
<StreamLocation>^Robot.Metrics.UnitsOfMeasureS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="UnitsOfMeasureDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>UOMDesription</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.OMPDetails">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64734,55389</TimeChanged>
<TimeCreated>63643,78346.954521</TimeCreated>

<Property name="SystemSettings">
<Description>
System Class</Description>
<Type>Robot.SystemSettings</Type>
</Property>

<Property name="HL7Message">
<Description>
Rerefernce to original HL7 Message</Description>
<Type>%String</Type>
</Property>

<Property name="SendingApplication">
<Description>
Message Header Fields (MSH)
Sending Application</Description>
<Type>%String</Type>
</Property>

<Property name="SendingFacility">
<Description>
Sending Facility</Description>
<Type>%String</Type>
</Property>

<Property name="ReceivingApplication">
<Description>
Receiving Application</Description>
<Type>%String</Type>
</Property>

<Property name="ReceivingFacility">
<Description>
Receiving Facility</Description>
<Type>%String</Type>
</Property>

<Property name="FacilityPK">
<Description>
ReceivingFacilityPK</Description>
<Type>%String</Type>
<Calculated>1</Calculated>
</Property>

<Property name="RobotPort">
<Description><![CDATA[
Designated reference to the Port Object -> Location -> Site]]></Description>
<Type>Robot.Port</Type>
</Property>

<Property name="MessageDateTime">
<Description><![CDATA[
Date & Time of Message]]></Description>
<Type>%String</Type>
</Property>

<Property name="MessageType">
<Description>
Message Type</Description>
<Type>%String</Type>
</Property>

<Property name="MessageVersion">
<Description>
Message Version</Description>
<Type>%String</Type>
</Property>

<Property name="MessageControlID">
<Description>
Message Control ID</Description>
<Type>%String</Type>
</Property>

<Property name="ProcessingID">
<Description>
Message Processing ID</Description>
<Type>%String</Type>
</Property>

<Property name="AcceptAckType">
<Description>
Accept Acknowledgment Type</Description>
<Type>%String</Type>
</Property>

<Property name="ApplicationAckType">
<Description>
Application Acknowledment Type</Description>
<Type>%String</Type>
</Property>

<Property name="PatientIdentifier">
<Description>
Patient Identifier</Description>
<Type>%String</Type>
</Property>

<Property name="PatientID">
<Description>
Patient Idenitifaction Fields (PID)</Description>
<Type>%String</Type>
</Property>

<Property name="PatientIdentifierType">
<Description>
Patient Identifier Type Code</Description>
<Parameter name="DISPLAYLIST" value=",TriMed Patient Number,Call Centre Patient Number"/>
<Parameter name="VALUELIST" value=",TM,CALL"/>
</Property>

<Property name="PatientSurname">
<Description>
Patient Surname</Description>
<Type>%String</Type>
</Property>

<Property name="PatientGivenName">
<Description>
Patient Given Name</Description>
<Type>%String</Type>
</Property>

<Property name="PatientFurtherNames">
<Description>
Further Patient Names</Description>
<Type>%String</Type>
</Property>

<Property name="PatientTitle">
<Description>
Patient Title
Property PatientTitle As %String(DISPLAYLIST = ",Doctor,Professor,Mister,Mrs/Ms,Miss,Child,Sister,Unknown,Missing Data", VALUELIST = ",Dr,Prof,Mr,Mrs/Ms,Miss,Child,Sr,Unk,MD");</Description>
<Type>%String</Type>
</Property>

<Property name="PatientDateOfBirth">
<Description>
Patient Date Of Birth</Description>
<Type>%String</Type>
</Property>

<Property name="PatientSex">
<Description>
Patient Sex</Description>
<Type>%String</Type>
</Property>

<Property name="PatientEthinicGroup">
<Description>
Patient Ethinic Group</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PatientAddressStreet1">
<Description>
Patient Address Street 1</Description>
<Type>%String</Type>
</Property>

<Property name="PatientAddressStreet2">
<Description>
Patient Address Street 2</Description>
<Type>%String</Type>
</Property>

<Property name="PatientAddressCity">
<Description>
Patient Address City</Description>
<Type>%String</Type>
</Property>

<Property name="PatientAddressProvince">
<Description>
Patient Address Province</Description>
<Type>%String</Type>
</Property>

<Property name="PatientAddressPostCode">
<Description>
Patient Address Post Code</Description>
<Type>%String</Type>
</Property>

<Property name="PatientTelephoneNumbers">
<Description>
Patient Telephone Numbers as an array</Description>
<Type>Robot.Telephone</Type>
<Collection>array</Collection>
</Property>

<Property name="PatientPrimaryLanguage">
<Description>
Patient Primary Language (Create iof doesn't exist)</Description>
<Type>%String</Type>
</Property>

<Property name="PatientIDNumber">
<Description>
Patient South African ID Number</Description>
<Type>%String</Type>
</Property>

<Property name="PatientClass">
<Description>
Patient Class</Description>
<Type>%String</Type>
<Parameter name="DISPLAYLIST" value=",OutPatient,InPatient"/>
<Parameter name="VALUELIST" value=",O,I"/>
</Property>

<Property name="PatientAttendingDoctor">
<Description>
Patient's Attending Doctor</Description>
<Type>%String</Type>
</Property>

<Property name="AttendingDoctorTitle">
<Type>%String</Type>
</Property>

<Property name="AttendingDoctorName">
<Type>%String</Type>
</Property>

<Property name="AttendingDoctorSurname">
<Type>%String</Type>
</Property>

<Property name="PharmacyName">
<Type>%String</Type>
</Property>

<Property name="PharmacyTelephone">
<Type>%String</Type>
</Property>

<Property name="PharmacistTitle">
<Type>%String</Type>
</Property>

<Property name="PharmacistFirstName">
<Type>%String</Type>
</Property>

<Property name="PharmacistSurname">
<Type>%String</Type>
</Property>

<Property name="PharmacistRegistration">
<Type>%String</Type>
</Property>

<Property name="PatientAdmitDateTime">
<Description>
Patient Admit Date/Time</Description>
<Type>%String</Type>
</Property>

<Property name="OMPRequestStatus">
<Description>
Status of OMPRequest Message</Description>
<Type>%Status</Type>
<InitialExpression>$$$OK</InitialExpression>
</Property>

<Property name="CreationDT">
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($h,3)</InitialExpression>
</Property>

<Property name="RDSSent">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="RDSSentDT">
<Type>%TimeStamp</Type>
</Property>

<Property name="Orders">
<Description>
Dispensing Orders</Description>
<Type>Robot.ORCDetails</Type>
<Collection>array</Collection>
</Property>

<Index name="I1">
<Properties>CreationDT</Properties>
</Index>

<Index name="I2">
<Properties>RDSSent</Properties>
</Index>

<Method name="FacilityPKGet">
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	quit $p(..ReceivingFacility,":",1)_"||"_$p(..ReceivingFacility,":",2)_$s($l($p(..ReceivingFacility,":",3)):"||"_$p(..ReceivingFacility,":",3),1:"")
]]></Implementation>
</Method>

<Method name="ClearDown">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set x=""
	for {
		set x=$o(^Robot.OMPDetailsD(x)) q:x=""
		if $lg(^Robot.OMPDetailsD(x),42)="" {
			set y=""
			for {
				set y=$o(^Robot.OrderMessages(x,y)) q:y=""
				kill ^Robot.OrderReference(y)
			}
			kill ^Robot.OrderMessages(x)
			kill ^Robot.OMPDetailsD(x)
		}
	}
	quit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.OMPDetailsD</DataLocation>
<DefaultData>OMPDetailsDefaultData</DefaultData>
<IdLocation>^Robot.OMPDetailsD</IdLocation>
<IndexLocation>^Robot.OMPDetailsI</IndexLocation>
<StreamLocation>^Robot.OMPDetailsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="OMPDetailsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>SystemSettings</Value>
</Value>
<Value name="3">
<Value>SendingApplication</Value>
</Value>
<Value name="4">
<Value>SendingFacility</Value>
</Value>
<Value name="5">
<Value>ReceivingApplication</Value>
</Value>
<Value name="6">
<Value>ReceivingFacility</Value>
</Value>
<Value name="7">
<Value>RobotPort</Value>
</Value>
<Value name="8">
<Value>MessageDateTime</Value>
</Value>
<Value name="9">
<Value>MessageType</Value>
</Value>
<Value name="10">
<Value>MessageVersion</Value>
</Value>
<Value name="11">
<Value>MessageControlID</Value>
</Value>
<Value name="12">
<Value>ProcessingID</Value>
</Value>
<Value name="13">
<Value>AcceptAckType</Value>
</Value>
<Value name="14">
<Value>ApplicationAckType</Value>
</Value>
<Value name="15">
<Value>PatientID</Value>
</Value>
<Value name="16">
<Value>PatientIdentifierType</Value>
</Value>
<Value name="17">
<Value>PatientSurname</Value>
</Value>
<Value name="18">
<Value>PatientGivenName</Value>
</Value>
<Value name="19">
<Value>PatientFurtherNames</Value>
</Value>
<Value name="20">
<Value>PatientTitle</Value>
</Value>
<Value name="21">
<Value>PatientDateOfBirth</Value>
</Value>
<Value name="22">
<Value>PatientSex</Value>
</Value>
<Value name="23">
<Value>PatientEthinicGroup</Value>
</Value>
<Value name="24">
<Value>PatientAddressStreet1</Value>
</Value>
<Value name="25">
<Value>PatientAddressStreet2</Value>
</Value>
<Value name="26">
<Value>PatientAddressCity</Value>
</Value>
<Value name="27">
<Value>PatientAddressProvince</Value>
</Value>
<Value name="28">
<Value>PatientAddressPostCode</Value>
</Value>
<Value name="29">
<Value>PatientPrimaryLanguage</Value>
</Value>
<Value name="30">
<Value>PatientIDNumber</Value>
</Value>
<Value name="31">
<Value>PatientClass</Value>
</Value>
<Value name="32">
<Value>PatientAttendingDoctor</Value>
</Value>
<Value name="33">
<Value>PatientAdmitDateTime</Value>
</Value>
<Value name="34">
<Value>OMPRequestStatus</Value>
</Value>
<Value name="35">
<Value>PatientIdentifier</Value>
</Value>
<Value name="36">
<Value>HL7Message</Value>
</Value>
<Value name="37">
<Value>AttendingDoctorTitle</Value>
</Value>
<Value name="38">
<Value>AttendingDoctorName</Value>
</Value>
<Value name="39">
<Value>AttendingDoctorSurname</Value>
</Value>
<Value name="40">
<Value>RDSSent</Value>
</Value>
<Value name="41">
<Value>RDSSentDT</Value>
</Value>
<Value name="42">
<Value>CreationDT</Value>
</Value>
<Value name="43">
<Value>PharmacyName</Value>
</Value>
<Value name="44">
<Value>PharmacyTelephone</Value>
</Value>
<Value name="45">
<Value>PharmacistTitle</Value>
</Value>
<Value name="46">
<Value>PharmacistFirstName</Value>
</Value>
<Value name="47">
<Value>PharmacistSurname</Value>
</Value>
<Value name="48">
<Value>PharmacistRegistration</Value>
</Value>
</Data>
<Data name="Orders">
<Attribute>Orders</Attribute>
<Structure>subnode</Structure>
<Subscript>"Orders"</Subscript>
</Data>
<Data name="PatientTelephoneNumbers">
<Attribute>PatientTelephoneNumbers</Attribute>
<Structure>subnode</Structure>
<Subscript>"PatientTelephoneNumbers"</Subscript>
</Data>
</Storage>
</Class>


<Class name="Robot.OMPRequest">
<Super>Ens.Request</Super>
<TimeChanged>63853,52994.000548</TimeChanged>
<TimeCreated>63621,77528.234939</TimeCreated>

<Property name="OMPID">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>OMPRequestDefaultData</DefaultData>
<Data name="OMPRequestDefaultData">
<Structure>listnode</Structure>
<Subscript>"OMPRequest"</Subscript>
<Value name="1">
<Value>OMPID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.OMPResponse">
<Super>Ens.Response</Super>
<TimeChanged>63853,53193.805878</TimeChanged>
<TimeCreated>63621,77528.234939</TimeCreated>

<Property name="Success">
<Type>%Status</Type>
<InitialExpression>$$$OK</InitialExpression>
</Property>

<Property name="Message">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>OMPResponseDefaultData</DefaultData>
<Data name="OMPResponseDefaultData">
<Structure>listnode</Structure>
<Subscript>"OMPResponse"</Subscript>
<Value name="1">
<Value>Success</Value>
</Value>
<Value name="2">
<Value>Message</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.ORCDetails">
<Super>%SerialObject,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64734,55389</TimeChanged>
<TimeCreated>63622,86288.617921</TimeCreated>

<Property name="OrderControl">
<Type>%String</Type>
</Property>

<Property name="TriMedReferenceNumber">
<Type>%String</Type>
</Property>

<Property name="CallCentreReferenceNumber">
<Type>%String</Type>
</Property>

<Property name="FillerExpctedAvailabilityDT">
<Type>%String</Type>
</Property>

<Property name="NumberOfRefills">
<Type>%String</Type>
</Property>

<Property name="ICD10Code">
<Type>%String</Type>
</Property>

<Property name="RXCDetails">
<Type>Robot.RXCDetails</Type>
<Collection>array</Collection>
</Property>

<Property name="Pharmacist">
<Type>%String</Type>
</Property>

<Property name="PharmacyName">
<Type>%String</Type>
</Property>

<Property name="PharmacyTelephone">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Serial</Type>
<State>ORCDetailsState</State>
<StreamLocation>^Robot.ORCDetailsS</StreamLocation>
<Data name="ORCDetailsState">
<Value name="1">
<Value>OrderControl</Value>
</Value>
<Value name="2">
<Value>TriMedReferenceNumber</Value>
</Value>
<Value name="3">
<Value>CallCentreReferenceNumber</Value>
</Value>
<Value name="4">
<Value>FillerExpctedAvailabilityDT</Value>
</Value>
<Value name="5">
<Value>RXCDetails</Value>
</Value>
<Value name="6">
<Value>NumberOfRefills</Value>
</Value>
<Value name="7">
<Value>ICD10Code</Value>
</Value>
<Value name="8">
<Value>FillersExpectedAvailability</Value>
</Value>
<Value name="9">
<Value>Pharmacist</Value>
</Value>
<Value name="10">
<Value>PharmacyName</Value>
</Value>
<Value name="11">
<Value>PharmacyTelephone</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.OrderItemStatistics">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>63969,70698.006095</TimeChanged>
<TimeCreated>63969,62314.548812</TimeCreated>

<Property name="Order">
<Type>%String</Type>
</Property>

<Property name="OrderReference">
<Type>%String</Type>
</Property>

<Property name="OrderReferenceDate">
<Type>%Date</Type>
</Property>

<Property name="ItemCreated">
<Type>%TimeStamp</Type>
</Property>

<Property name="ItemWritten">
<Type>%TimeStamp</Type>
</Property>

<Property name="FirstItemRead">
<Type>%TimeStamp</Type>
</Property>

<Property name="FirstItemProcessed">
<Type>%TimeStamp</Type>
</Property>

<Property name="FinalItemRead">
<Type>%TimeStamp</Type>
</Property>

<Property name="FinalItemProcessed">
<Type>%TimeStamp</Type>
</Property>

<Property name="ItemPDUPrinted">
<Type>%TimeStamp</Type>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>OrderReference</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.OrderItemStatsD</DataLocation>
<DefaultData>OrderItemStatisticsDefaultData</DefaultData>
<IdLocation>^Robot.OrderItemStatsD</IdLocation>
<IndexLocation>^Robot.OrderItemStatsI</IndexLocation>
<StreamLocation>^Robot.OrderItemStatsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="OrderItemStatisticsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Order</Value>
</Value>
<Value name="3">
<Value>ItemCreated</Value>
</Value>
<Value name="4">
<Value>ItemWritten</Value>
</Value>
<Value name="5">
<Value>FirstItemRead</Value>
</Value>
<Value name="6">
<Value>FirstItemProcessed</Value>
</Value>
<Value name="7">
<Value>FinalItemRead</Value>
</Value>
<Value name="8">
<Value>FinalItemProcessed</Value>
</Value>
<Value name="9">
<Value>ItemPDUPrinted</Value>
</Value>
<Value name="10">
<Value>OrderReferenceDate</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.OrderStatistics">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>63969,70446.6037</TimeChanged>
<TimeCreated>63969,61490.594355</TimeCreated>

<Property name="Order">
<Type>%String</Type>
</Property>

<Property name="OrderDate">
<Type>%Date</Type>
</Property>

<Property name="OMPReceived">
<Type>%TimeStamp</Type>
</Property>

<Property name="OMPACK">
<Type>%TimeStamp</Type>
</Property>

<Property name="RDSSent">
<Type>%TimeStamp</Type>
</Property>

<Property name="RDSACK">
<Type>%TimeStamp</Type>
</Property>

<Property name="OrderCreated">
<Type>%TimeStamp</Type>
</Property>

<Property name="OrderProcessed">
<Type>%TimeStamp</Type>
</Property>

<Index name="pk">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Order</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.OrderStatsD</DataLocation>
<DefaultData>OrderStatisticsDefaultData</DefaultData>
<IdLocation>^Robot.OrderStatsD</IdLocation>
<IndexLocation>^Robot.OrderStatsI</IndexLocation>
<StreamLocation>^Robot.OrderStatsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="OrderStatisticsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>OMPReceived</Value>
</Value>
<Value name="3">
<Value>OMPACK</Value>
</Value>
<Value name="4">
<Value>RDSSent</Value>
</Value>
<Value name="5">
<Value>RDSACK</Value>
</Value>
<Value name="6">
<Value>OrderCreated</Value>
</Value>
<Value name="7">
<Value>OrderProcessed</Value>
</Value>
<Value name="8">
<Value>OrderDate</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.PDUPrinterFileOperation">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64777,3301.934639</TimeChanged>
<TimeCreated>63950,30887.276832</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.File.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.File.OutboundAdapter</Type>
</Property>

<Property name="File">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="PrintLabel">
<FormalSpec>pRequest:Robot.PDUPrinterRequest,*pResponse:Robot.PDUPrinterResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set tSC=..Adapter.PutString(..File,"Starting Print") if ' tSC goto End
	set ^PrintData(..File,$i(^PrintData(..File)))=$c(2)
	set ^PrintData(..File,$i(^PrintData(..File)))=$c(27,65)
	set ^PrintData(..File,$i(^PrintData(..File)))=$c(27,37)_1
	set ^PrintData(..File,$i(^PrintData(..File)))=$c(27,69)_10
	set ^PrintData(..File,$i(^PrintData(..File)))=$c(27,86)_370_$c(27,72)_550_$c(27,80)_2_$c(27,76)_"0101"_$c(27,88,83)
	set ^PrintData(..File,$i(^PrintData(..File)))=pRequest.PharmacyName_" "_pRequest.PharmacyTelephone_$c(13)
	set (str,str1,str2)=""
	set (str,str1)="PDU "_pRequest.PDUNumber_" "_pRequest.PDULocation_$s($l(pRequest.AddressLine1):", "_pRequest.AddressLine1,1:"")_$s($l(pRequest.AddressLine2):", "_pRequest.AddressLine2,1:"")_$s($l(pRequest.AddressLine3):", "_pRequest.AddressLine1,3:""),str2=""
	if $l(str)>34 {
		set str1=$e(str,1,34),str2=$e(str,35,$l(str))
		i $l(str1,34),$e(str2,1)=" " {
			set str2=$e(str2,2,$l(str2))
		}
		elseif $e(str1,34)'=" ",$e(str2,1)'=" " {
			for j=34:-1 {
				quit:$e(str1,j)=" "
				set str2=$e(str1,j)_str2,str1=$e(str1,1,j-1)
			}
		}
	}
	set ^PrintData(..File,$i(^PrintData(..File)))=str1_$c(13)
	if $l(str2) {
		set ^PrintData(..File,$i(^PrintData(..File)))=str2_$c(13)
	}

	set (str,str1)=pRequest.ComponentName,str2=""
	if $l(str)>34 {
		set str1=$e(str,1,34),str2=$e(str,35,$l(str))
		i $l(str1,34),$e(str2,1)=" " {
			set str2=$e(str2,2,$l(str2))
		}
		elseif $e(str1,34)'=" ",$e(str2,1)'=" " {
			for j=34:-1 {
				quit:$e(str1,j)=" "
				set str2=$e(str1,j)_str2,str1=$e(str1,1,j-1)
			}
		}
	}
	set ^PrintData(..File,$i(^PrintData(..File)))=str1_$c(13)
	if $l(str2) {
		set ^PrintData(..File,$i(^PrintData(..File)))=str2_$c(13)
	}

	set (str,str1)=pRequest.ComponentDosage,str2=""
	if $l(str)>32 {
		set str1=$e(str,1,32),str2=$e(str,33,$l(str))
		if $l(str1,32),$e(str2,1)=" " {
			set str2=$e(str2,2,$l(str2))
		}
		elseif $e(str1,32)'=" ",$e(str2,1)'=" " {
			for j=32:-1 {
				quit:$e(str1,j)=" "
				set str2=$e(str1,j)_str2,str1=$e(str1,1,j-1)
			}
		}
	}
	set ^PrintData(..File,$i(^PrintData(..File)))=str1_$c(13)
	If $l(str2) {
		set ^PrintData(..File,$i(^PrintData(..File)))=str2_$c(13)
	}
	set ^PrintData(..File,$i(^PrintData(..File)))="Finish Course"_$c(13)
	set ^PrintData(..File,$i(^PrintData(..File)))=pRequest.PrescriptionNumber_"         Repeat "_$s(pRequest.NumberOfRepeats[".":$p(pRequest.NumberOfRepeats,".",1)_" of "_$p(pRequest.NumberOfRepeats,".",1),1:pRequest.NumberOfRepeats)_$c(13)
	set ^PrintData(..File,$i(^PrintData(..File)))=$zd($h,2)_" "_$ztime($p($h,",",2),3)_$c(13)
	set ^PrintData(..File,$i(^PrintData(..File)))=pRequest.PatientId_" "_pRequest.Name_$c(13)
	set (str,str1)="Dispenser: "_pRequest.PharmacistTitle_$s($l(pRequest.PharmacistTitle):" ",1:"")_pRequest.PharmacistFirstName_" "_pRequest.PharmacistSurname_"  "_pRequest.PharmacyRegistrationNumber_$c(13),str2=""
	if $l(str)>32 {
		set str1=$e(str,1,32),str2=$e(str,33,$l(str))
		if $l(str1,32),$e(str2,1)=" " {
			set str2=$e(str2,2,$l(str2))
		}
		elseif $e(str1,32)'=" ",$e(str2,1)'=" " {
			for j=32:-1 {
				quit:$e(str1,j)=" "
				set str2=$e(str1,j)_str2,str1=$e(str1,1,j-1)
			}
		}
	}
	set ^PrintData(..File,$i(^PrintData(..File)))=str1_$c(13)
	If $l(str2) {
		set ^PrintData(..File,$i(^PrintData(..File)))=str2_$c(13)
	}
	set ^PrintData(..File,$i(^PrintData(..File)))=$c(27,81)_1
	set ^PrintData(..File,$i(^PrintData(..File)))=$c(27,90)
	set ^PrintData(..File,$i(^PrintData(..File)))=$c(3)
	// Finished Printing
	// Flush the buffer
	set message=$p(..%ConfigName,".",2)_"||"_pRequest.PrescriptionNumber_"||"_pRequest.ComponentName_"||"_pRequest.OrderReference
	set ^Robot.TCPOutboundQueue("PDUPrinterRequest",pRequest.OrderReference,$i(^Robot.TCPOutboundQueue("PDUPrinterRequest")))=$lb($zdt($h,3),$zdt($h,3),message)
	set tSC=..Adapter.PutString(..File,message) if 'tSC goto End
	set tSC=..Adapter.PutString(..File,"Print Finished") if 'tSC goto End
End	;
	set pResponse=##class(Robot.PDUPrinterResponse).%New()
	set pResponse.Success=tSC
	Quit tSC
Error	;
	set $ztrap="",^PrintData(..File,$i(^PrintData(..File)),"Error")="Error: "_$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set device=$o(^Robot.DeviceI("I2",..%ConfigName,""))
	$$$TRACE("TCP/File Device: ("_device_")")
	if '$l(device) set tSC=$system.Status.Error(5001,"No Device Details found for Production Item: ("_..%ConfigName_")") goto End
	set devobj=##class(Robot.Device).%OpenId(device)
	if '$IsObject(devobj) set tSC=$system.Status.Error(5001,"No Device Object found for Device: ("_device_")") goto End
	set ..Adapter.FilePath=devobj.FilePath
	set ..Adapter.LineTerminator="$c(10)"
	set ..File=..%ConfigName_" "_$tr($zdt($h,3),":- ","")_".txt"
	//kill ^PrintData(..File)
	$$$TRACE("File: "_..File)
End	;
	Quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="Robot.PDUPrinterRequest"> 
		<Method>PrintLabel</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="Robot.PDUPrinterRequest">
<Super>Ens.Request</Super>
<TimeChanged>64371,53526.924634</TimeChanged>
<TimeCreated>63641,68377.091775</TimeCreated>

<Property name="OrderReference">
<Type>%String</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="ComponentName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Property name="ComponentDosage">
<Type>%String</Type>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Property name="NumberOfRepeats">
<Type>%Integer</Type>
</Property>

<Property name="PrescriptionNumber">
<Type>%String</Type>
</Property>

<Property name="PatientId">
<Type>%String</Type>
</Property>

<Property name="PharmacistTitle">
<Type>%String</Type>
</Property>

<Property name="PharmacistFirstName">
<Type>%String</Type>
</Property>

<Property name="PharmacistSurname">
<Type>%String</Type>
</Property>

<Property name="PharmacyName">
<Type>%String</Type>
</Property>

<Property name="PharmacyTelephone">
<Type>%String</Type>
</Property>

<Property name="PharmacyRegistrationNumber">
<Type>%String</Type>
</Property>

<Property name="PDUNumber">
<Type>%String</Type>
</Property>

<Property name="PDULocation">
<Type>%String</Type>
</Property>

<Property name="AddressLine1">
<Type>%String</Type>
</Property>

<Property name="AddressLine2">
<Type>%String</Type>
</Property>

<Property name="AddressLine3">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>PDUPrinterRequestDefaultData</DefaultData>
<Data name="PDUPrinterRequestDefaultData">
<Subscript>"PDUPrinterRequest"</Subscript>
<Value name="1">
<Value>OrderReference</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>ComponentName</Value>
</Value>
<Value name="4">
<Value>ComponentDosage</Value>
</Value>
<Value name="5">
<Value>NumberOfRepeats</Value>
</Value>
<Value name="6">
<Value>PrescriptionNumber</Value>
</Value>
<Value name="7">
<Value>PatientId</Value>
</Value>
<Value name="8">
<Value>PharmacistTitle</Value>
</Value>
<Value name="9">
<Value>PharmacistFirstName</Value>
</Value>
<Value name="10">
<Value>PharmacyRegistrationNumber</Value>
</Value>
<Value name="11">
<Value>AddressLine1</Value>
</Value>
<Value name="12">
<Value>AddressLine2</Value>
</Value>
<Value name="13">
<Value>AddressLine3</Value>
</Value>
<Value name="14">
<Value>PharmacistSurname</Value>
</Value>
<Value name="15">
<Value>PharmacyName</Value>
</Value>
<Value name="16">
<Value>PharmacyTelephone</Value>
</Value>
<Value name="17">
<Value>PDUNumber</Value>
</Value>
<Value name="18">
<Value>PDULocation</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.PDUPrinterResponse">
<Super>Ens.Response</Super>
<TimeChanged>64089,53354.727497</TimeChanged>
<TimeCreated>63641,68424.334236</TimeCreated>

<Property name="Success">
<Type>%Status</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>PDUPrinterResponseDefaultData</DefaultData>
<Data name="PDUPrinterResponseDefaultData">
<Subscript>"PDUPrinterResponse"</Subscript>
<Value name="1">
<Value>Success</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.PDUPrinterStatusRequest">
<Super>Ens.Request</Super>
<TimeChanged>64113,51881.070982</TimeChanged>
<TimeCreated>63960,39506.033331</TimeCreated>

<Property name="PDUPrinter">
<Type>Robot.PDUPrinters</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>PDUPrinterStatusRequestDefaultData</DefaultData>
<Data name="PDUPrinterStatusRequestDefaultData">
<Structure>listnode</Structure>
<Subscript>"PDUPrinterStatusRequest"</Subscript>
<Value name="1">
<Value>PDUPrinter</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.PDUPrinterStatusResponse">
<Super>Ens.Response</Super>
<TimeChanged>63972,55619</TimeChanged>
<TimeCreated>63960,39553.517926</TimeCreated>

<Property name="Status">
<Type>%Status</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>PDUPrinterStatusResponseDefaultData</DefaultData>
<Data name="PDUPrinterStatusResponseDefaultData">
<Structure>listnode</Structure>
<Subscript>"PDUPrinterStatusResponse"</Subscript>
<Value name="1">
<Value>Status</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.PDUPrinterTCPOperation">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64778,44921.720558</TimeChanged>
<TimeCreated>63690,16330.822275</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.TCP.TextLineOutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.TCP.TextLineOutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Property name="StatusMessage">
<Type>%String</Type>
<InitialExpression>$c(5)</InitialExpression>
</Property>

<Property name="CancelMessage">
<Type>%String</Type>
<InitialExpression>$c(24)</InitialExpression>
</Property>

<Property name="Printer">
<Type>Robot.Device</Type>
</Property>

<Property name="ThisPrinter">
<Type>%String</Type>
</Property>

<Property name="Log">
<Type>%String</Type>
</Property>

<Method name="PrintLabel">
<FormalSpec>pRequest:Robot.PDUPrinterRequest,*pResponse:Robot.PDUPrinterResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set attemptcount=0,reconnect=0,resend=0
Connect	;
	set $ztrap="Error",tSC=$$$OK
	// Start the actual Label Print
	use ..Adapter.Device write $c(2),$c(24),$c(3),!
	set tSC=..GetPrinterStatus(.status, .reconnect) set:tSC before=status if 'tSC goto End	use ..Adapter.Device read x:1
	// Get Printer Status
	set before="OK" if '..Adapter.Connected 
	// Trace these events
	set @..Log@($i(@..Log))=$lb($zdt($h,3),"Print Started")
	set @..Log@($i(@..Log))=$lb($zdt($h,3),"Before: "_before)
	use ..Adapter.Device write $c(2)
	use ..Adapter.Device write $c(27,65)
	use ..Adapter.Device write $c(27,37),1
	use ..Adapter.Device write $c(27,69),10 ;15
	use ..Adapter.Device write $c(27,86),390,$c(27,72),540,$c(27,80),2,$c(27,76),"0101",$c(27,88,83)
	use ..Adapter.Device write pRequest.PharmacyName," ",pRequest.PharmacyTelephone,$c(13)
	set (str,str1,str2)=""
	set (str,str1)="PDU "_pRequest.PDUNumber_" "_pRequest.PDULocation_$s($l(pRequest.AddressLine1):", "_pRequest.AddressLine1,1:"")_$s($l(pRequest.AddressLine2):", "_pRequest.AddressLine2,1:"")_$s($l(pRequest.AddressLine3):", "_pRequest.AddressLine1,3:""),str2=""
	if $l(str)>34 {
		set str1=$e(str,1,34),str2=$e(str,35,$l(str))
		i $l(str1,34),$e(str2,1)=" " {
			set str2=$e(str2,2,$l(str2))
		}
		elseif $e(str1,34)'=" ",$e(str2,1)'=" " {
			for j=34:-1 {
				quit:$e(str1,j)=" "
				set str2=$e(str1,j)_str2,str1=$e(str1,1,j-1)
			}
		}
	}
	use ..Adapter.Device write str1_$c(13)
	if $l(str2) {
		use ..Adapter.Device write str2_$c(13)
	}

	set (str,str1)=pRequest.ComponentName,str2=""
	if $l(str)>34 {
		set str1=$e(str,1,34),str2=$e(str,35,$l(str))
		i $l(str1,34),$e(str2,1)=" " {
			set str2=$e(str2,2,$l(str2))
		}
		elseif $e(str1,34)'=" ",$e(str2,1)'=" " {
			for j=34:-1 {
				quit:$e(str1,j)=" "
				set str2=$e(str1,j)_str2,str1=$e(str1,1,j-1)
			}
		}
	}
	use ..Adapter.Device write str1_$c(13)
	if $l(str2) {
		use ..Adapter.Device write str2_$c(13)
	}

	set (str,str1)=pRequest.ComponentDosage,str2=""
	if $l(str)>32 {
		set str1=$e(str,1,32),str2=$e(str,33,$l(str))
		if $l(str1,32),$e(str2,1)=" " {
			set str2=$e(str2,2,$l(str2))
		}
		elseif $e(str1,32)'=" ",$e(str2,1)'=" " {
			for j=32:-1 {
				quit:$e(str1,j)=" "
				set str2=$e(str1,j)_str2,str1=$e(str1,1,j-1)
			}
		}
	}
	use ..Adapter.Device write str1_$c(13)
	If $l(str2) {
		use ..Adapter.Device write str2_$c(13)
	}
	;use ..Adapter.Device write "Finish Course",$c(13)	
	use ..Adapter.Device write pRequest.PrescriptionNumber_"         Repeat "_$s(pRequest.NumberOfRepeats[".":$p(pRequest.NumberOfRepeats,".",1)_" of "_$p(pRequest.NumberOfRepeats,".",1),1:pRequest.NumberOfRepeats)_$c(13)
	use ..Adapter.Device write $zd($h,2)," ",$ztime($p($h,",",2),3),$c(13)
	use ..Adapter.Device write pRequest.PatientId_" "_pRequest.Name,$c(13)
	set (str,str1)="Dispenser: "_pRequest.PharmacistTitle_$s($l(pRequest.PharmacistTitle):" ",1:"")_pRequest.PharmacistFirstName_" "_pRequest.PharmacistSurname_"  "_pRequest.PharmacyRegistrationNumber_$c(13),str2=""
	if $l(str)>32 {
		set str1=$e(str,1,32),str2=$e(str,33,$l(str))
		if $l(str1,32),$e(str2,1)=" " {
			set str2=$e(str2,2,$l(str2))
		}
		elseif $e(str1,32)'=" ",$e(str2,1)'=" " {
			for j=32:-1 {
				quit:$e(str1,j)=" "
				set str2=$e(str1,j)_str2,str1=$e(str1,1,j-1)
			}
		}
	}
	use ..Adapter.Device write str1_$c(13)
	If $l(str2) {
		use ..Adapter.Device write str2_$c(13)
	}
	use ..Adapter.Device write $c(27,81),1
	use ..Adapter.Device write $c(27,90)
	use ..Adapter.Device write $c(3),!
	// Finished Printing
	// Trace this event
	set @..Log@($i(@..Log))=$lb($zdt($h,3),"Print Finished")
	// Get the current status after the print
	set tSC=..GetPrinterStatus(.status, .reconnect) if 'tSC goto End
	// Trace the Status
	set @..Log@($i(@..Log))=$lb($zdt($h,3),"After: "_status)
	// Check to see if the printing has been successful. We are expecting the status to be "M" or "S"
	// if successful
	if status="A",before="A" {
		set @..Log@($i(@..Log))=$lb($zdt($h,3),"Before and after Status is 'A'. resending...")
		set attemptcount=attemptcount+1
		if attemptcount>5 {
			set @..Log@($i(@..Log))=$lb($zdt($h,3),"Resending failed after 5 attempts")
			set tSC=$system.Status.Error(5001,"Resending failed after 5 attempts")
			goto End
		}
		goto Connect
	}
End	;
	set message=pRequest.PrescriptionNumber_"||"_pRequest.ComponentName_"||"_pRequest.OrderReference_"||"_$s(tSC:"OK",1:$system.Status.GetErrorText(tSC))
	set ^Robot.TCPOutboundQueue("PDUPrinterRequest",pRequest.OrderReference,$i(^Robot.TCPOutboundQueue("PDUPrinterRequest")))=$lb($zdt($h,3),$zdt($h,3),message)
	set ^Robot.PrinterLabelCount=$i(^Robot.PrinterLabelCount)
	set pResponse=##class(Robot.PDUPrinterResponse).%New()
	set pResponse.Success=tSC
	quit $$$OK
Error	;
	set $ztrap=""
	if $ze["WRITE"!($ze["READ")!($ze["NOTOPEN") {
		set @..Log@($i(@..Log))=$lb($zdt($h,3),"PDU TCP Printer Read/Write Error: "_$ze)
		set tSC=..Reconnect(.reconnect) if 'tSC goto End
		goto Connect
	}
	set text=..%ConfigName_" Code Error: "_$ze
	set @..Log@($i(@..Log))=$lb($zdt($h,3),text),tSC=$system.Status.Error(5001,text)
	goto End
]]></Implementation>
</Method>

<Method name="GetPrinterStatus">
<FormalSpec><![CDATA[&status:%String="",&reconnect:%Integer]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
Connect	;
	set $ztrap="Error",tSC=$$$OK
	set @..Log@($i(@..Log))=$lb($zdt($h,3),"Getting Printer Status")
	if '..Adapter.Connected set tSC=..Reconnect(.reconnect) if 'tSC goto End
	use ..Adapter.Device write $c(2),$c(5),$c(3),#
	use ..Adapter.Device read response:..Adapter.ReadTimeout
	set response=$zstrip($zstrip(response,"*C"),"*W")
	set status=$e(response,1),printdata=$e(response,2,$l(response))
	if status'="" {
		set sobj=##class(Robot.DeviceTypeStatusCodes).%OpenId(..Printer.DeviceType_"||"_status)
		set msg="No Error",msgtype="OK" if $IsObject(sobj) {set msg=sobj.StatusDescription,msgtype=sobj.StatusType}
		set @..Log@($i(@..Log))=$lb($zdt($h,3),"Printer Status: Code:("_status_") PrintData: ("_printdata_") Type: ("_msgtype_") Message: ("_msg_")")
		if msgtype="OK"!(msgtype="Warning") set tSC=$$$OK
		if msgtype="Error" set tSC=$system.Status.Error(5001,..%ConfigName_" is reporting Status: "_status_" - "_msgtype_" - "_msg)
	}
	/*
	else {
		set tSC=..Reconnect(.reconnect) if 'tSC goto End
		goto Connect
	}
	*/
End	;
	quit tSC
Error	;
	set $ztrap=""
	if $ze["WRITE"!($ze["READ")!($ze["NOTOPEN") {
		set @..Log@($i(@..Log))=$lb($zdt($h,3),"PDU TCP Printer Read/Write Error: "_$ze)
		set tSC=..Reconnect(.reconnect) if 'tSC goto End
		goto Connect
	}
	set text=..%ConfigName_" Code Error: "_$ze
	set @..Log@($i(@..Log))=$lb($zdt($h,3),text),tSC=$system.Status.Error(5001,text)
	goto End
]]></Implementation>
</Method>

<Method name="Reconnect">
<FormalSpec><![CDATA[&reconnect:%Integer]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
Connect	;
	set $ztrap="Error",tSC=$$$OK
	set @..Log@($i(@..Log))=$lb($zdt($h,3),"Going to Reconnect")
	do ..Adapter.Disconnect(),..Adapter.Connect(..Adapter.ConnectTimeout)
	if ..Adapter.Connected goto End
	set reconnect=reconnect+1
	if reconnect>5 {
		set text="Unable to reconnect to the Printer after 5 attempts"
		set @..Log@($i(@..Log))=$lb($zdt($h,3),text)
		set tSC=$system.Status.Error(5001,text)
	}
	else {
		set @..Log@($i(@..Log))=$lb($zdt($h,3),"Reconnect Attempt #: "_reconnect)
		hang 1
		goto Connect
	}
End	;
	quit tSC
Error	;
	set $ztrap=""
	if $ze["WRITE"!($ze["READ")!($ze["NOTOPEN") {
		set @..Log@($i(@..Log))=$lb($zdt($h,3),"PDU TCP Printer Read/Write Error: "_$ze)
		set tSC=..Reconnect(.reconnect) if 'tSC goto End
		goto Connect
	}
	set text=..%ConfigName_" Code Error: "_$ze
	set @..Log@($i(@..Log))=$lb($zdt($h,3),text),tSC=$system.Status.Error(5001,text)
	goto End
]]></Implementation>
</Method>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	B "L"
	set device=$o(^Robot.DeviceI("I1",..%ConfigName,""))
	if '$l(device) set tSC=$system.Status.Error(5001,"No Device Details found for Production Item: ("_..%ConfigName_")") goto End
	if $l(..Adapter.IPAddress) do ..Adapter.Disconnect()
	set ..Printer=##class(Robot.Device).%OpenId(device) if '$IsObject(..Printer) set tSC=$system.Status.Error(5001,"No Device Object found for Device: ("_device_")") goto End
	set ..ThisPrinter=..Printer.DeviceId,..Log="^Robot.PrinterTCPLog("_$c(34)_..ThisPrinter_$c(34)_")"
	set @..Log@($i(@..Log))=$lb($zdt($h,3),"This Printer: "_..ThisPrinter_" Log: "_..Log)
	set ..Adapter.IPAddress=..Printer.DeviceTCPAddress,..Adapter.Port=..Printer.DeviceTCPPortNumber
	set @..Log@($i(@..Log))=$lb($zdt($h,3),"IP: "_..Printer.DeviceTCPAddress_" Port: "_..Printer.DeviceTCPPortNumber)
	set ..Adapter.ReadTimeout=..Printer.DeviceTCPReadTimeout,..Adapter.ConnectTimeout=..Printer.DeviceTCPConnectTimeout
	set @..Log@($i(@..Log))=$lb($zdt($h,3),"RT/O: "_..Printer.DeviceTCPReadTimeout_" CT/O: "_..Printer.DeviceTCPConnectTimeout)
	set ..Adapter.Terminators=$c(3)
End	;
	hang 5
	quit tSC
Error	;
	set $ztrap=""
	set tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="Robot.PDUPrinterRequest"> 
		<Method>PrintLabel</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="Robot.PDUPrinters">
<Super>%Persistent</Super>
<TimeChanged>64117,63218.534257</TimeChanged>
<TimeCreated>64109,75979.106569</TimeCreated>

<Property name="PrinterId">
<Type>%String</Type>
</Property>

<Property name="PrinterName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="Device">
<Type>Robot.Device</Type>
</Property>

<Property name="SystemStateResponseOK">
<Type>%String</Type>
<InitialExpression>",0,"</InitialExpression>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="SystemStateResponseNOTOK">
<Type>%String</Type>
<InitialExpression>",1,2,6,"</InitialExpression>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="NACKHL7MessagesOnNOTOKState">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="NACKHL7MessagesForPorts">
<Type>%String</Type>
<InitialExpression>",1,2,3,4,5,"</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// If this is true thennif the node ^Robot.PrinterState(printerid,"User") is true HL7 messages will be NACKed

]]></Content>
</UDLText>

<Property name="UserDeterminedHL7NACK">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="LastUserDeterminedNACKSet">
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($h,3)</InitialExpression>
</Property>

<Property name="SendStatus">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>PrinterId</Properties>
<Unique>1</Unique>
</Index>

<Method name="SetUserPrinterState">
<ClassMethod>1</ClassMethod>
<FormalSpec>printerid:%String=1,state:%Boolean=0</FormalSpec>
<Implementation><![CDATA[	set ^Robot.RobotState(printerid,"User")=state
]]></Implementation>
</Method>

<Method name="SetPrinterState">
<ClassMethod>1</ClassMethod>
<FormalSpec>printerid:%String=1,state:%Boolean=0</FormalSpec>
<Implementation><![CDATA[	set ^Robot.PrinterState(printerid)=state
]]></Implementation>
</Method>

<Method name="GetUserPrinterState">
<ClassMethod>1</ClassMethod>
<FormalSpec>printerid:%String=1</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit +$g(^Robot.PrinterState(printerid,"User"))
]]></Implementation>
</Method>

<Method name="GetPrinterState">
<ClassMethod>1</ClassMethod>
<FormalSpec>printerid:%String=1</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit +$g(^Robot.PrinterState(printerid))
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.PDUPrintersD</DataLocation>
<DefaultData>PDUPrintersDefaultData</DefaultData>
<IdLocation>^Robot.PDUPrintersD</IdLocation>
<IndexLocation>^Robot.PDUPrintersI</IndexLocation>
<StreamLocation>^Robot.PDUPrintersS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="PDUPrintersDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>PrinterName</Value>
</Value>
<Value name="3">
<Value>Device</Value>
</Value>
<Value name="4">
<Value>SystemStateResponseOK</Value>
</Value>
<Value name="5">
<Value>SystemStateResponseNOTOK</Value>
</Value>
<Value name="6">
<Value>NACKHL7MessagesOnNOTOKState</Value>
</Value>
<Value name="7">
<Value>NACKHL7MessagesForPorts</Value>
</Value>
<Value name="8">
<Value>UserDeterminedHL7NACK</Value>
</Value>
<Value name="9">
<Value>LastUserDeterminedNACKSet</Value>
</Value>
<Value name="10">
<Value>SendStatus</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Personell">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64734,55389</TimeChanged>
<TimeCreated>63620,78159.641489</TimeCreated>

<Property name="Title">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",Mr,Miss,Mrs,Ms,Dr,Prof,"/>
</Property>

<Property name="FirstName">
<Type>%String</Type>
</Property>

<Property name="Surname">
<Type>%String</Type>
</Property>

<Property name="Address">
<Type>Address</Type>
</Property>

<Property name="PersonellType">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",Doctor,Pharmacist,Supervisor,Technician,Developer,IT,Manager,Supplier,Other"/>
</Property>

<Property name="EMail">
<Type>%String</Type>
</Property>

<Property name="Telephone">
<Type>%String</Type>
</Property>

<Property name="Active">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.PersonellD</DataLocation>
<DefaultData>PersonellDefaultData</DefaultData>
<IdLocation>^Robot.PersonellD</IdLocation>
<IndexLocation>^Robot.PersonellI</IndexLocation>
<StreamLocation>^Robot.PersonellS</StreamLocation>
<ExtentSize>200</ExtentSize>
<Data name="PersonellDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Title</Value>
</Value>
<Value name="3">
<Value>FirstName</Value>
</Value>
<Value name="4">
<Value>Surname</Value>
</Value>
<Value name="5">
<Value>Address</Value>
</Value>
<Value name="6">
<Value>PersonellType</Value>
</Value>
<Value name="7">
<Value>EMail</Value>
</Value>
<Value name="8">
<Value>Telephone</Value>
</Value>
<Value name="9">
<Value>Report</Value>
</Value>
<Value name="10">
<Value>Active</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="FirstName">
<Selectivity>0.9259%</Selectivity>
</Property>
<Property name="PersonellType">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="Surname">
<Selectivity>0.8197%</Selectivity>
</Property>
<Property name="Title">
<Selectivity>0.9524%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-28</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="Robot.PersonellType">
<SqlTableName>Personell_Type</SqlTableName>
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>63649,37684</TimeChanged>
<TimeCreated>63620,77663.111003</TimeCreated>

<Property name="PersonellTypeCode">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",Doctor,Pharmacist,Supervisor,Technician,Other"/>
</Property>

<Property name="PersonellTypeDescription">
<Type>%String</Type>
<Parameter name="POPSPEC" value=".Description()"/>
</Property>

<Method name="Description">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "This is a "_..PersonellTypeCode
]]></Implementation>
</Method>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>PersonellTypeCode</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.PersonellTypeD</DataLocation>
<DefaultData>PersonellTypeDefaultData</DefaultData>
<IdLocation>^Robot.PersonellTypeD</IdLocation>
<IndexLocation>^Robot.PersonellTypeI</IndexLocation>
<StreamLocation>^Robot.PersonellTypeS</StreamLocation>
<ExtentSize>5</ExtentSize>
<Data name="PersonellTypeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>PersonellTypeDescription</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="PersonellTypeDescription">
<Selectivity>20.0000%</Selectivity>
</Property>
<SQLMap name="PK">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="Robot.Port">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64734,55389</TimeChanged>
<TimeCreated>63639,81827.697649</TimeCreated>

<Property name="PortCode">
<Type>%String</Type>
</Property>

<Property name="PortDescription">
<Type>%String</Type>
</Property>

<Property name="Robot">
<Type>Robot.Robots</Type>
</Property>

<Property name="RobotPort">
<Type>%Integer</Type>
</Property>

<Property name="Systems">
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Property name="IsPDU">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="PDUPrinter">
<Type>Robot.PDUPrinters</Type>
</Property>

<Property name="PDUNumber">
<Type>%Integer</Type>
</Property>

<Property name="Priority">
<Type>%Integer</Type>
<InitialExpression>3</InitialExpression>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>PortCode</Properties>
<Unique>1</Unique>
</Index>

<Property name="Location">
<Type>Robot.Location</Type>
<Cardinality>parent</Cardinality>
<Inverse>Ports</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("Ports")</DataLocation>
<DefaultData>PortDefaultData</DefaultData>
<IdLocation>^Robot.LocationC("Ports")</IdLocation>
<IndexLocation>^Robot.PortI</IndexLocation>
<StreamLocation>^Robot.PortS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="PortDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>PortDescription</Value>
</Value>
<Value name="3">
<Value>Robot</Value>
</Value>
<Value name="4">
<Value>IsPDU</Value>
</Value>
<Value name="5">
<Value>PDUPrinter</Value>
</Value>
<Value name="6">
<Value>Priority</Value>
</Value>
<Value name="7">
<Value>Systems</Value>
</Value>
<Value name="8">
<Value>RobotPort</Value>
</Value>
<Value name="9">
<Value>PDUNumber</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.ProcessDispenseOrderBP">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>64764,36556.543323</TimeChanged>
<TimeCreated>63640,84748.335652</TimeCreated>

<Property name="Robot">
<Type>%String</Type>
</Property>

<Method name="OnRequest">
<FormalSpec>pRequest:Robot.OMPRequest,*pResponse:Robot.OMPResponse</FormalSpec>
<PublicList>data,refdata,message,msg,retval</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set ompdetails=##class(Robot.OMPDetails).%OpenId(pRequest.OMPID)
	if '$IsObject(ompdetails) set tSC=$system.Status.Error(5001,..%ConfigName_" Unable to open OMP Details for Id: "_pRequest.OMPID) goto End
	if ompdetails.RobotPort.Robot.IsMasterRobot {
		set ..Robot=ompdetails.RobotPort.Robot.RobotId,robotownid=ompdetails.RobotPort.Robot.RobotOwnID
	}
	else {
		set ..Robot=ompdetails.RobotPort.Robot.MasterRobot.RobotId,robotownid=ompdetails.RobotPort.Robot.MasterRobot.RobotOwnID
	}
	
	set tRequest=##class(Robot.RobotRequest).%New()
	set tRequest.OMPID=pRequest.OMPID
	set tRequest.OrderReference=""
	set tRequest.PDU=ompdetails.RobotPort.IsPDU
	set tRequest.SendAll=$s(tRequest.PDU:0,1:1)
	set tRequest.SendNext=$s(tRequest.PDU:1,1:0)
	set tRequest.Robot=..Robot
	set orderkey=""
	for {
		set order=ompdetails.Orders.GetNext(.orderkey) quit:orderkey=""
		set rx=order.TriMedReferenceNumber
		set itemkey=""
		for {
			set item=order.RXCDetails.GetNext(.itemkey) quit:itemkey=""
			set rxdkey=""
			for {
				set rxd=item.Dispensed.GetNext(.rxdkey) quit:rxdkey=""
				if $l(rxd.ComponentIdentifier) {
					new data,refdata,message,msg,retval
					set data("DialogueCode")="A"
					set data("OrderNumber")=rxd.OrderReference
					set data("RobotID")=robotownid
					set data("DeliveryPort")=ompdetails.RobotPort.RobotPort
					set data("Priority")=ompdetails.RobotPort.Priority
					set data("LineNumber")=1
					set data("ProductCode")=rxd.ComponentIdentifier
					set data("Quantity")=rxd.ComponentAmount
					set data("DialogueAFlag")=0
					set data("ID")="0000000000"
					set tSC=##class(Robot.Mapping.MessageDefinitions).CreateMessage("DispenseRequest",..Robot,"data","refdata",.message) if 'tSC goto End
					do tRequest.Messages.SetAt(message,rxd.OrderReference)
					$$$TRACE("Dispense Request Message ("_message_") created for RX: "_rx_" with OMP: "_pRequest.OMPID_" with Order Reference: "_rxd.OrderReference)
					set ^Robot.TCPOutboundQueue("DispenseRequest",..Robot_"||"_rxd.OrderReference,$i(^Robot.TCPOutboundQueue("DispenseRequest")))=$lb($zdt($h,3),"",message)
					if ompdetails.SystemSettings.LoopRobotMessages set rxd.ComponentAmountDispensed=rxd.ComponentAmount
				}
			}
		}
	}
	set tSC=ompdetails.%Save()
	set tSC =..SendRequestAsync("Process Robot Dispense BP",tRequest,1,"Robot Order:"_pRequest.OMPID)
End	;
	$$$TRACE("OnRequest for OMP: ("_pRequest.OMPID_") Status: "_$s(tSC:"OK",1:$system.Status.GetErrorText(tSC)))
	if '$IsObject(pResponse) set pResponse=##class(Robot.OMPResponse).%New()
	If '$IsObject(pResponse) set tSC=$system.Status.Error(5001,..%ConfigName_" Unable to create OMP Details Object. ID: "_pRequest.OMPID) goto End
	set pResponse.Success=tSC
	set pResponse.Message="Processed Dispense Order for OMP: "_pRequest.OMPID
	quit $$$OK
Error	;
	set $ZT="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	Goto End
]]></Implementation>
</Method>

<Method name="OnResponse">
<FormalSpec><![CDATA[pRequest:Robot.OMPRequest,&pResponse:Robot.OMPResponse,tRequest:Robot.RobotRequest,tResponse:Robot.RobotResponse,pCompletionKey:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	if $IsObject(tResponse) {
		$$$TRACE("Response Status: ("_$s(tResponse.Success:"OK",1:"Error: "_$system.Status.GetErrorText(tResponse.Success))_")")
	}
End	;
	set pResponse=##class(Robot.OMPResponse).%New()
	set pResponse.Message=pCompletionKey
	if $IsObject(tResponse) set pResponse.Success=tResponse.Success
	else  set pResponse.Success=$$$OK
	quit $$$OK
Error	;
	set $ZT="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	Goto End
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>ProcessDispenseOrderBPDefaultData</DefaultData>
<Data name="ProcessDispenseOrderBPDefaultData">
<Subscript>"ProcessDispenseOrderBP"</Subscript>
<Value name="1">
<Value>Robot</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.ProcessDispenseResultBP">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>64770,50679.21635</TimeChanged>
<TimeCreated>63640,84748.335652</TimeCreated>

<Method name="OnRequest">
<FormalSpec>pRequest:Robot.OMPRequest,*pResponse:Robot.OMPResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK,RX=""
	; We are going to create a new HL7 message
	set tRequest = ##class(EnsLib.HL7.Message).%New()
	If '$IsObject(tRequest)	set tSC=$system.Status.Error(5001,..%ConfigName_" Dispense Results: Unable to create HL7 Message") goto End
	set ompdetails=##class(Robot.OMPDetails).%OpenId(pRequest.OMPID)
	if '$IsObject(ompdetails) set tSC=$system.Status.Error(5001,..%ConfigName_" Dispense Results: Unable to open OMPDetails Object, ID: "_pRequest.OMPID) goto End
	set pResponse=##class(Robot.OMPResponse).%New()
	if '$IsObject(pResponse) set tSC=$system.Status.Error(5001,..%ConfigName_" Dispense Results: Unable to create response Message") goto End
	set loopmessages=ompdetails.SystemSettings.LoopHL7RDSMessages
	set outputtofile=ompdetails.SystemSettings.CaptureHL7RDSOutput
	// MSH
	set tRequest.DocType = "2.7:RDS_O13"
	set tSC=tRequest.SetValueAt(ompdetails.ReceivingFacility,"MSH:SendingFacility","set","") if 'tSC goto End
	set tSC=tRequest.SetValueAt("ExtendedRobotInterface","MSH:SendingApplication","set","") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.SendingApplication,"MSH:ReceivingApplication","set","") if 'tSC goto End
	set tSC=tRequest.SetValueAt($p(ompdetails.SendingFacility,":",1)_"::","MSH:ReceivingFacility","set","") if 'tSC goto End
	set tSC=tRequest.SetValueAt("RDS","MSH:MessageType.messagecode","set","") if 'tSC goto End
	set tSC=tRequest.SetValueAt("O13","MSH:MessageType.triggerevent","set","") if 'tSC goto End
	set tSC=tRequest.SetValueAt("RDS_O13","MSH:MessageType.messagestructure","set","") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.MessageVersion,"MSH:VersionID","set","") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.MessageControlID,"MSH:MessageControlID","set","") if 'tSC goto End
	set dt=$tr($zdt($h,3),"- :","")
	set tSC=tRequest.SetValueAt(dt,"MSH:DateTimeofMessage","set","") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientID,"PIDgrp.PID:PatientID") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientIdentifier,"PIDgrp.PID:PatientIdentifierList(1).IDNumber","set","") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientIdentifierType,"PIDgrp.PID:PatientIdentifierList(1).IdentifierTypeCode","set","") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientSurname,"PIDgrp.PID:PatientName.familyname","set","") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientGivenName,"PIDgrp.PID:PatientName.givenname","set","") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientFurtherNames,"PIDgrp.PID:PatientName.SecondandFurtherGivenNamesor","set","") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientTitle,"PIDgrp.PID:PatientName.prefix","set","") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientDateOfBirth,"PIDgrp.PID:DateTimeofBirth","set","") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientSex,"PIDgrp.PID:AdministrativeSex","set","") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientEthinicGroup,"PIDgrp.PID:EthnicGroup(1).Identifier","set","") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientAddressStreet1,"PIDgrp.PID:PatientAddress(1).StreetAddress") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientAddressStreet2,"PIDgrp.PID:PatientAddress(1).OtherDesignation") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientAddressCity,"PIDgrp.PID:PatientAddress(1).City") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientAddressProvince,"PIDgrp.PID:PatientAddress(1).StateorProvince") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientAddressPostCode,"PIDgrp.PID:PatientAddress().ZiporPostalCode") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientTelephoneNumbers.GetAt("Home").CountryCode,"PIDgrp.PID:PhoneNumberHome(1).CountryCode") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientTelephoneNumbers.GetAt("Home").Number,"PIDgrp.PID:PhoneNumberHome(1).LocalNumber") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientTelephoneNumbers.GetAt("Business").CountryCode,"PIDgrp.PID:PhoneNumberBusiness(1).CountryCode") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientTelephoneNumbers.GetAt("Business").Number,"PIDgrp.PID:PhoneNumberBusiness(1).LocalNumber") if 'tSC goto End
	Set tSC=tRequest.SetValueAt(ompdetails.PatientPrimaryLanguage,"PIDgrp.PID:PrimaryLanguage.Identifier") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientIDNumber,"PIDgrp.PID:SSNNumberPatient") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientClass,"PIDgrp.PV1grp.PV1:PatientClass.Identifier") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientAttendingDoctor,"PIDgrp.PV1grp.PV1:AttendingDoctor(1).PersonIdentifier") if 'tSC goto End
	set tSC=tRequest.SetValueAt(ompdetails.PatientAdmitDateTime,"PIDgrp.PV1grp.PV1:AdmitDateTime") if 'tSC goto End
	set orderno="",count=1,ntecount=1,itemcount=1
	for {
		set order=ompdetails.Orders.GetNext(.orderno) quit:orderno=""
		set itemno=""
		for {
			set item=order.RXCDetails.GetNext(.itemno) quit:itemno=""
			set tSC=tRequest.SetValueAt(order.OrderControl,"ORCgrp("_count_").ORC:OrderControl","set","") if 'tSC goto End
			set tSC=tRequest.SetValueAt(order.TriMedReferenceNumber,"ORCgrp("_count_").ORC:PlacerOrderNumber","set","") if 'tSC goto End
			set RX="" if $l(order.TriMedReferenceNumber) set RX=order.TriMedReferenceNumber
			set tSC=tRequest.SetValueAt(order.CallCentreReferenceNumber,"ORCgrp("_count_").ORC:FillerOrderNumber","set","") if 'tSC goto End
			set tSC=tRequest.SetValueAt(dt,"ORCgrp("_count_").ORC:DateTimeofTransaction","set","") if 'tSC goto End
			set tSC=tRequest.SetValueAt($s(order.NumberOfRefills'="":order.NumberOfRefills,1:""),"ORCgrp("_count_").RXOgrp.RXO:NumberOfRefills","set","") if 'tSC goto End
			set tSC=tRequest.SetValueAt(order.ICD10Code,"ORCgrp("_count_").RXOgrp.RXO:Indication(1).identifier","set","") if 'tSC goto End
			set tSC=tRequest.SetValueAt(order.FillerExpctedAvailabilityDT,"ORCgrp("_count_").ORC:FillersExpectedAvailabilityD","set","") if 'tSC goto End
			set total=0,rdx=""
			for {
				set rxdobj=item.Dispensed.GetNext(.rxd) quit:rxd=""
				set total=total+rxdobj.ComponentAmountDispensed
				$$$TRACE("Total: "_total)
			}
			set tSC=tRequest.SetValueAt(itemcount,"ORCgrp("_count_").RXD:DispenseSubIDCounter") if 'tSC goto End
			set tSC=tRequest.SetValueAt(item.ComponentIdentifier,"ORCgrp("_count_").RXD:DispenseGiveCode.Identifier") if 'tSC goto End
			set tSC=tRequest.SetValueAt(item.ComponentName,"ORCgrp("_count_").RXD:DispenseGiveCode.Text") if 'tSC goto End
			set tSC=tRequest.SetValueAt(item.ComponentCodingSystem,"ORCgrp("_count_").RXD:DispenseGiveCode.NameofCodingSystem") if 'tSC goto End
			set tSC=tRequest.SetValueAt(total,"ORCgrp("_count_").RXD:ActualDispenseAmount") if 'tSC goto End
			;set tSC=tRequest.SetValueAt(item.ComponentAmount,"ORCgrp("_count_").RXD:ActualDispenseAmount") if 'tSC goto End
			set tSC=tRequest.SetValueAt(item.ComponentDosage,"ORCgrp("_count_").RXD:ActualDispenseUnits") if 'tSC goto End
			set tSC=tRequest.SetValueAt(order.NumberOfRefills,"ORCgrp("_count_").RXD:NumberofRefillsRemaining") if 'tSC goto End
			set tSC=tRequest.SetValueAt($tr($zdt($h,3),": -",""),"ORCgrp("_count_").RXD:DateTimeDispensed") if 'tSC goto End
			set tSC=tRequest.SetValueAt($s($l(order.TriMedReferenceNumber):order.TriMedReferenceNumber,1:order.CallCentreReferenceNumber),"ORCgrp("_count_").RXD:PrescriptionNumber") if 'tSC goto End
			set tSC=tRequest.SetValueAt("","ORCgrp("_count_").RXR(1):Route") if 'tSC goto End
			if 'item.IsError {
				set msg=$system.Status.GetErrorText(item.IsError)
				set tSC=tRequest.SetValueAt(msg,"ORCgrp("_count_").NTE("_ntecount_"):Comment(1)")
				set ntecount=ntecount+1
			}
			if 'ompdetails.OMPRequestStatus {
				set msg=$system.Status.GetErrorText(ompdetails.OMPRequestStatus)
				if msg[5001 set msg=$zstrip($p(msg,"5001",2),"<>W")
				set tSC=tRequest.SetValueAt(msg,"ORCgrp("_count_").NTE("_ntecount_"):Comment(1)")
				set ntecount=ntecount+1
			}
			set itemcount=itemcount+1
			set count=count+1
		}
	}
	if outputtofile {
		set tSC=..SendRequestAsync("HL7 File Operation",tRequest,0,"Output HL7 RDS to File. RX: ("_RX_") Order: ("_ompdetails.%Id()_")") if 'tSC goto End
	}
	if 'loopmessages {
		if ompdetails.SendingApplication="TriMed" {
			set tSC=..SendRequestAsync("HL7 RDS TCP Operation TriMed",tRequest,1,"Send HL7 RDS TriMed TCP Message: RX: ("_RX_") Order: ("_ompdetails.%Id()_")")
		}
		else {
				set tSC=..SendRequestAsync("HL7 RDS Operation Cloud",tRequest,1,"Send HL7 RDS Cloud TCP Message: RX: "_RX_" Order: ("_ompdetails.%Id()_")")
		}
	}
	set tSC=ompdetails.%Save() if 'tSC goto End
End	;
	set no=$i(^Robot.TCPOutboundQueue("RDSHL7Response"))
	if $IsObject(ompdetails) set ^Robot.TCPOutboundQueue("RDSHL7Response",ompdetails.%Id(),no)=$lb($zdt($h,3),$zdt($h,3),"RDS Sent: "_$s(tSC:"OK",1:$system.Status.GetErrorText(tSC)))
	set ^Robot.Archive.TCPOutboundQueue("RDSHL7Response",ompdetails.%Id(),no)=^Robot.TCPOutboundQueue("RDSHL7Response",ompdetails.%Id(),no) kill ^Robot.TCPOutboundQueue(ompdetails.%Id(),no)
	$$$TRACE("RDS Status: "_$s(tSC:"OK",1:$system.Status.GetErrorText(tSC)))
	quit $$$OK
Error	;
	Set $ZT="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	Goto End
]]></Implementation>
</Method>

<Method name="OnResponse">
<FormalSpec><![CDATA[pRequest:Robot.OMPRequest,&pResponse:Robot.OMPResponse,tRequest:EnsLib.HL7.Message,tResponse:EnsLib.HL7.Message,pCompletionKey:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set pResponse=##class(Robot.OMPResponse).%New()
	set pResponse.Success=$$$OK,pResponse.Message="Check ACK Status"
	if pCompletionKey["Send HL7 RDS" {
		set rx=$p($p($p(pCompletionKey,"RX: ",2),")",1),"(",2),order=$p($p($p(pCompletionKey,"Order: ",2),")",1),"(",2)
		$$$TRACE("RX: "_rx_" Order: "_order)
		if $l($g(tResponse)),$IsObject(tResponse) {
			if tResponse.GetValueAt("MSA:AcknowledgmentCode")="CA" {
				set pResponse.Success=$$$OK
				set pResponse.Message="RDS ACK"
			}
			else {
				set pResponse.Success=$system.Status.Error(5001,"Invalid RDS Message: "_tResponse.GetValueAt("MSA:ErrorCondition"))
				set pResponse.Message="RDS NACK: "_tResponse.GetValueAt("ERR:UserMessage")
			}
		}
	}
End	;
	if $l(order) {
		set item=$o(^Robot.TCPOutboundQueue("RDSHL7Response",order,""))
		if $l(item) {
			set $list(^Robot.TCPOutboundQueue("RDSHL7Response",order,item),2)=$zdt($h,3),$list(^Robot.TCPOutboundQueue("RDSHL7Response",order,item),4)=pResponse.Message
		}
	}
	quit $$$OK
Error	;
	Set $ZT="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	Goto End
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="Robot.ProcessHL7MessagesBP">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>64770,52883.811328</TimeChanged>
<TimeCreated>63648,23519.649432</TimeCreated>

<Method name="OnRequest">
<FormalSpec>pRequest:EnsLib.HL7.Message,*pResponse:EnsLib.HL7.Message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	// Prescription Dispense Request
	// do pRequest.OutputToFile("c:\temp\HL7 "_$tr($zdt($h,3),":- ","")_".txt",0)
	if pRequest.GetValueAt("MSH:MessageType.MessageStructure")="OMP_O09" {
		if pRequest.GetValueAt("MSH:VersionID.VersionID")'="2.7" $$$LOGERROR("Dispense HL7 Incoming Message: Invalid Document Version "_pRequest.GetValueAt("MSH:VersionID.VersionID")) goto End
		set tRequest=##class(Robot.OMPRequest).%New()
		if '$IsObject(tRequest) set tSC=$system.Status.Error(5001,..%ConfigName_" Unable to create OMP Request Message") goto End
		set tSC=..CreateOMPMessage(pRequest,.tRequest) if 'tSC goto End
		if $l(tRequest.OMPID) {
			set ^Robot.TCPInboundQueue("OMPHL7Request",tRequest.OMPID,$i(^Robot.TCPInboundQueue("OMPHL7Request")))=$lb($zdt($h,3),"",pRequest.%Oid())
			set sc=..SendRequestAsync("Process Dispense Order BP",tRequest,0 ,"OMP Details") if 'sc set tSC=sc quit
		}
	}
	// HL7 Delivery Batch Request
	elseif pRequest.GetValueAt("MSH:MessageType.MessageStructure")="INU_U05" {
		if pRequest.GetValueAt("MSH:VersionID.VersionID")'="2.7" $$$LOGERROR("Stock Load HL7 Incoming Message: Invalid Document Version "_pRequest.GetValueAt("MSH:VersionID.VersionID")) goto End
		set tRequest=##class(Robot.INURequest).%New()
		if '$IsObject(tRequest) set tSC=$system.Status.Error(5001,..%ConfigName_" Unable to create INU Request Message") goto End
		set tSC=..CreateBatchMessage(pRequest,.tRequest) if 'tSC goto End
		if $l(tRequest.BatchReference) {
			set ^Robot.TCPInboundQueue("INUHL7Request",tRequest.BatchReference,$i(^Robot.TCPInboundQueue("INUHL7Request")))=$lb($zdt($h,3),"",pRequest.%Oid())
			set sc=..SendRequestAsync("Process Stock Batch Update BP",tRequest,0,"INU Stock Batch Update") if 'sc set tSC=sc goto End
		}
	}
	elseif pRequest.GetValueAt("MSH:MessageType.MessageStructure")="MFN_M16" {
		if pRequest.GetValueAt("MSH:VersionID.VersionID")'="2.7" $$$LOGERROR("Stock Request HL7 Incoming Message: Invalid Document Version "_pRequest.GetValueAt("MSH:VersionID.VersionID")) goto End
		set tRequest=##class(Robot.MFNRequest).%New()
		if '$IsObject(tRequest) set tSC=$system.Status.Error(5001,..%ConfigName_" Unable to create MFN Request Message") goto End
		set tSC=..CreateStockRequestMessage(pRequest,.tRequest) if 'tSC goto End
		if $l(tRequest.StockLevels) {
			set ^Robot.TCPInboundQueue("MFHHL7Request",tRequest.StockLevels,$i(^Robot.TCPInboundQueue("MFNHL7Request")))=$lb($zdt($h,3),"",pRequest.%Oid())
			set sc=..SendRequestAsync("Process Stock Level Request BP",tRequest,0,"MFN Stock Level Request") if 'sc set tSC=sc goto End
		}
	}
	else {
		set tSC=$system.Status.Error(5001,..%ConfigName_" Dispense HL7 Incoming Message: Invalid Document Type "_pRequest.GetValueAt("MSH:MessageType.MessageStructure"))
	}
End	;
	set sc=..CreateACK(tSC,pRequest,.pResponse) if 'sc $$$TRACE("Unable to create ACK")
	if tSC {
		if pRequest.GetValueAt("MSH:MessageType.MessageStructure")="OMP_O09" {
			set item=$o(^Robot.TCPInboundQueue("OMPHL7Request",tRequest.OMPID,""))
			if item'="" {
				set $list(^Robot.TCPInboundQueue("OMPHL7Request",tRequest.OMPID,item),2)=$zdt($h,3)
				merge ^Robot.Archive.TCPInboundQueue("OMPHL7Request",tRequest.OMPID,item)=^Robot.TCPInboundQueue("OMPHL7Request",tRequest.OMPID,item)
				kill ^Robot.TCPInboundQueue("OMPHL7Request",tRequest.OMPID,item)
			}
		}
		elseif pRequest.GetValueAt("MSH:MessageType.MessageStructure")="INU_U05" {
			set item=$o(^Robot.TCPInboundQueue("INUHL7Request",tRequest.BatchReference,""))
			if item'="" {
				set $list(^Robot.TCPInboundQueue("INUHL7Request",tRequest.BatchReference,item),2)=$zdt($h,3)
				merge ^Robot.TCPInboundQueue("INUHL7Request",tRequest.BatchReference,item)=^Robot.TCPInboundQueue("INUHL7Request",tRequest.BatchReference,item)
				kill ^Robot.TCPInboundQueue("INUHL7Request",tRequest.BatchReference,item)
			}
		}
		elseif pRequest.GetValueAt("MSH:MessageType.MessageStructure")="MFN_M16" {
			set item=$o(^Robot.TCPInboundQueue("MFNHL7Request",tRequest.StockLevels,""))
			if item'="" {
				set $list(^Robot.TCPInboundQueue("MFNHL7Request",tRequest.StockLevels,item),2)=$zdt($h,3)
				merge ^Robot.Archive.TCPInboundQueue("MFNHL7Request",tRequest.StockLevels,item)=^Robot.TCPInboundQueue("MFNHL7Request",tRequest.StockLevels,item)
				kill ^Robot.TCPInboundQueue("MFNHL7Request",tRequest.StockLevels,item)
			}
		}
	}
	Quit $$$OK
Error	;
	Set $ZT="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	Goto End
]]></Implementation>
</Method>

<Method name="OnResponse">
<FormalSpec>pRequest:EnsLib.HL7.Message,pResponse:EnsLib.HL7.Message,tResquest:Ens.Request,tResponse:Ens.Response,pCompletionKey:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
End	;	
	quit tSC
Error	;
	Set $ZT="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	Goto End
]]></Implementation>
</Method>

<Method name="CreateOMPMessage">
<FormalSpec>pRequest:EnsLib.HL7.Message,tRequest:Robot.OMPRequest</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Error",tSC=$$$OK
	kill orderarray
	set RX=""
	Set ompdetails = ##class(Robot.OMPDetails).%New()
	if '$IsObject(ompdetails) set tSC=$system.Status.Error(5001,..%ConfigName_" Unable to create 'OMPDetails' object") goto End
	set sys=##class(Robot.SystemSettings).%OpenId("Robot")
	if '$IsObject(sys) set tSC=$system.Status.Error(5001,..%ConfigName_" Unable to open 'Robot' System Settings") goto End
	set ompdetails.HL7Message=pRequest.%Id()
	set ompdetails.SystemSettings=sys
	Set ompdetails.SendingApplication=pRequest.GetValueAt("MSH:SendingApplication")
	Set ompdetails.SendingFacility=pRequest.GetValueAt("MSH:SendingFacility")
	Set ompdetails.ReceivingApplication=pRequest.GetValueAt("MSH:ReceivingApplication")
	Set ompdetails.ReceivingFacility=pRequest.GetValueAt("MSH:ReceivingFacility")
	set tSC=##class(Robot.Site).ValidateFacility("Port",ompdetails.FacilityPK,.port) if 'tSC $$$TRACE("Site Error: "_$system.Status.GetErrorText(tSC)) goto End
	set ompdetails.RobotPort=port
	kill systems
	for x=1:1:port.Systems.Count() {
		set system=port.Systems.GetAt(x)
		set sobj=##class(Robot.Systems).%OpenId(system)
		set sysrobot=sobj.Robot.MasterRobot.RobotId
		set systems(system)=sysrobot
	}
	// Now check the Robot System Status and NACK the message if appropriate
	set robot=""
	for {
		set robot=$o(^Robot.RobotsD(robot)) quit:robot=""
		set robj=##class(Robot.Robots).%OpenId(robot)
		if '$IsObject(robj) set tSC=$system.Status.Error(5001,"Unable to open Robot Object for Robot: ("_robot_")") goto End
		if 'robj.SendStatus continue
		if 'robj.GetRobotState(robot),robj.NACKHL7MessagesForPorts[","_ompdetails.RobotPort.PortCode_"," {
			set tSC=$system.Status.Error(5001,..%ConfigName_" Robot: ("_robot_" is unavailable for this Port ("_ompdetails.RobotPort.PortCode_")") goto End
		}
		if robj.UserDeterminedHL7NACK,'robj.GetUserRobotState(robot) {
			set tSC=$system.Status.Error(5001,..%ConfigName_" Robot: ("_robot_") is unavailable due to User Controlled Access Flag") goto End
		}
	}
	Set ompdetails.MessageDateTime=pRequest.GetValueAt("MSH:DateTimeofMessage")
	Set ompdetails.MessageType=pRequest.GetValueAt("MSH:MessageType.MessageStructure")
	Set ompdetails.MessageControlID=pRequest.GetValueAt("MSH:MessageControlID")
	Set ompdetails.MessageVersion=pRequest.GetValueAt("MSH:VersionID.VersionID")
	Set ompdetails.AcceptAckType=pRequest.GetValueAt("MSH:AcceptAcknowledgmentType")
	Set ompdetails.ApplicationAckType=pRequest.GetValueAt("MSH:ApplicationAcknowledgmentTyp")
	set ompdetails.PatientID=pRequest.GetValueAt("PIDgrp.PID:PatientID")
	Set ompdetails.PatientIdentifier=pRequest.GetValueAt("PIDgrp.PID:PatientIdentifierList(1).IDNumber")
	Set ompdetails.PatientIdentifierType=pRequest.GetValueAt("PIDgrp.PID:PatientIdentifierList1).IdentifierTypeCode")
	Set ompdetails.PatientSurname=pRequest.GetValueAt("PIDgrp.PID:PatientName(1).FamilyName")
	Set ompdetails.PatientGivenName=pRequest.GetValueAt("PIDgrp.PID:PatientName(1).GivenName")
	Set ompdetails.PatientFurtherNames=pRequest.GetValueAt("PIDgrp.PID:PatientName(1).SecondandFurtherGivenNamesor")
	Set ompdetails.PatientTitle=pRequest.GetValueAt("PIDgrp.PID:PatientName(1).Prefix")
	if '$l(ompdetails.PatientSurname) set tSC=$system.Status.Error(5001,..%ConfigName_" No Patient Surname Supplied") goto End
	Set ompdetails.PatientDateOfBirth=pRequest.GetValueAt("PIDgrp.PID:DateTimeofBirth")
	Set ompdetails.PatientSex=pRequest.GetValueAt("PIDgrp.PID:AdministrativeSex")
	Set ompdetails.ProcessingID=pRequest.GetValueAt("MSH:ProcessingID.ProcessingID")
	Set ompdetails.PatientEthinicGroup=pRequest.GetValueAt("PIDgrp.PID:EthnicGroup(1).Identifier")
	Set ompdetails.PatientAddressStreet1=pRequest.GetValueAt("PIDgrp.PID:PatientAddress(1).StreetAddress")
	Set ompdetails.PatientAddressStreet2=pRequest.GetValueAt("PIDgrp.PID:PatientAddress(1).OtherDesignation")
	Set ompdetails.PatientAddressCity=pRequest.GetValueAt("PIDgrp.PID:PatientAddress(1).City")
	Set ompdetails.PatientAddressProvince=pRequest.GetValueAt("PIDgrp.PID:PatientAddress(1).StateorProvince")
	Set ompdetails.PatientAddressPostCode=pRequest.GetValueAt("PIDgrp.PID:PatientAddress(1).ZiporPostalCode")
	set telephone=##class(Robot.Telephone).%New()
	set telephone.CountryCode=$s(pRequest.GetValueAt("PIDgrp.PID:PhoneNumberHome(1).CountryCode")'="":pRequest.GetValueAt("PIDgrp.PID:PhoneNumberHome(1).CountryCode"),1:"27")
	set telephone.Number=pRequest.GetValueAt("PIDgrp.PID:PhoneNumberHome(1).LocalNumber")
	do ompdetails.PatientTelephoneNumbers.SetAt(telephone,"Home")
	set telephone=##class(Robot.Telephone).%New()
	set telephone.CountryCode=$s(pRequest.GetValueAt("PIDgrp.PID:PhoneNumberBusiness(1).CountryCode")'="":pRequest.GetValueAt("PIDgrp.PID:PhoneNumberHome(1).CountryCode"),1:"27")
	set telephone.Number=pRequest.GetValueAt("PIDgrp.PID:PhoneNumberBusiness(1).LocalNumber")
	do ompdetails.PatientTelephoneNumbers.SetAt(telephone,"Business")
	Set ompdetails.PatientPrimaryLanguage=pRequest.GetValueAt("PIDgrp.PID:PrimaryLanguage.Identifier")
	set ompdetails.PatientIDNumber=pRequest.GetValueAt("PIDgrp.PID:SSNNumberPatient")
	Set ompdetails.PatientClass=pRequest.GetValueAt("PIDgrp.PV1grp.PV1:PatientClass.Identifier")
	Set ompdetails.PatientAttendingDoctor=pRequest.GetValueAt("PIDgrp.PV1grp.PV1:AttendingDoctor(1).PersonIdentifier")
	set ompdetails.AttendingDoctorTitle=pRequest.GetValueAt("PIDgrp.PV1grp.PV1:AttendingDoctor(1).Prefix")
	set ompdetails.AttendingDoctorName=pRequest.GetValueAt("PIDgrp.PV1grp.PV1:AttendingDoctor(1).GivenName")
	set ompdetails.AttendingDoctorSurname=pRequest.GetValueAt("PIDgrp.PV1grp.PV1:AttendingDoctor(1).FamilyName")
	Set ompdetails.PatientAdmitDateTime=pRequest.GetValueAt("PIDgrp.PV1grp.PV1:AdmitDateTime")
	set lineitem=1
	for i=1:1 {
		if pRequest.GetValueAt("ORCgrp("_i_").ORC:OrderControl")="" quit
		set order=##class(Robot.ORCDetails).%New()
		Set order.OrderControl=pRequest.GetValueAt("ORCgrp("_i_").ORC:OrderControl")
		Set order.TriMedReferenceNumber=pRequest.GetValueAt("ORCgrp("_i_").ORC:PlacerOrderNumber")
		$$$TRACE("TriMed RX: "_order.TriMedReferenceNumber)
		if $l(order.TriMedReferenceNumber) set RX=order.TriMedReferenceNumber
		Set order.CallCentreReferenceNumber=pRequest.GetValueAt("ORCgrp("_i_").ORC:FillerOrderNumber")
		Set order.FillerExpctedAvailabilityDT=pRequest.GetValueAt("ORCgrp("_i_").ORC:FillersExpectedAvailabilityD")
		Set order.NumberOfRefills=pRequest.GetValueAt("ORCgrp("_i_").RXO:NumberOfRefills")
		Set order.ICD10Code=pRequest.GetValueAt("ORCgrp("_i_").RXO:Indication(1).Identifier")
		if i=1 {
			set ompdetails.PharmacyName=pRequest.GetValueAt("ORCgrp("_i_").RXO:DispensingPharmacy.Text")
			set ompdetails.PharmacyTelephone=pRequest.GetValueAt("ORCgrp("_i_").RXO:PharmacyPhoneNumber(1).TelephoneNumber")
			set ompdetails.PharmacistTitle=pRequest.GetValueAt("ORCgrp("_i_").RXO:PharmacistTreatmentSuppliers(1).Prefix")
			set ompdetails.PharmacistFirstName=pRequest.GetValueAt("ORCgrp("_i_").RXO:PharmacistTreatmentSuppliers(1).GivenName")
			set ompdetails.PharmacistSurname=pRequest.GetValueAt("ORCgrp("_i_").RXO:PharmacistTreatmentSuppliers(1).FamilyName.Surname")
			set ompdetails.PharmacistRegistration=pRequest.GetValueAt("ORCgrp("_i_").RXO:PharmacistTreatmentSuppliers(1).AssigningAgencyorDepartment.Text")
		}
		do ompdetails.Orders.SetAt(order,i)
		for j=1:1 {
			if pRequest.GetValueAt("ORCgrp("_i_").RXCgrp("_j_").RXC:RXComponentType")="" quit
			set component=##class(Robot.RXCDetails).%New()
			Set component.RXComponentType=pRequest.GetValueAt("ORCgrp("_i_").RXCgrp("_j_").RXC:RXComponentType")
			Set component.ComponentIdentifier=pRequest.GetValueAt("ORCgrp("_i_").RXCgrp("_j_").RXC:ComponentCode.Identifier")
			Set component.ComponentName=pRequest.GetValueAt("ORCgrp("_i_").RXCgrp("_j_").RXC:ComponentCode.Text")
			Set component.ComponentCodingSystem=pRequest.GetValueAt("ORCgrp("_i_").RXCgrp("_j_").RXC:ComponentCode.NameofCodingSystem")
			Set component.ComponentAmount=pRequest.GetValueAt("ORCgrp("_i_").RXCgrp("_j_").RXC:ComponentAmount")
			if component.ComponentAmount'>0 set component.IsError=$system.Status.Error(5001,"Invalid Component Amount for Order "_i_" and item "_j)
			Set component.ComponentDosage=pRequest.GetValueAt("ORCgrp("_i_").RXCgrp("_j_").RXC:ComponentUnits")
			if '$l(component.ComponentDosage) set component.IsError=$system.Status.Error(5001,"Invalid Component Dosage Instructions for Order "_i_" and item "_j)
			set nappi=component.ComponentIdentifier
			set eanid="",sc=##class(Robot.Stock.StockMaster).GetEANCode(nappi,.eanid)
			if 'sc {
				$$$TRACE("Invalid NAPPI: "_nappi)
				set component.IsError=sc $$$TRACE("HL7 Error: "_$system.Status.GetErrorText(sc))
				set component.ComponentAmount=0
				do ##class(Robot.ProductionAlertErrors).ErrorAlert(..%ConfigName,"HL7: Invalid NAPPI Code ("_nappi_")",0,86399)
			}
			do ompdetails.Orders.GetAt(i).RXCDetails.SetAt(component,j)
			set system="",firstsystem="",dispensesystem="",priority=99,prioritysystem=""
			for {
				set system=$o(systems(system)) q:system=""
				if '$l(firstsystem) set firstsystem=system
				set stock=##class(Robot.Stock.StockLevelSystems).%OpenId(nappi_"||"_systems(system)_"||"_system)
				if $IsObject(stock) {
					if stock.Priority<priority,stock.Quantity set prioritysystem=system continue
					if stock.Quantity,'$l(prioritysystem) set prioritysystem=system continue
				}
				set priority=99,prioritysystem=""
			}
			if '$l(dispensesystem),$l(prioritysystem) set dispensesystem=prioritysystem
			if '$l(dispensesystem) set dispensesystem=firstsystem
			set sobj=##class(Robot.Systems).%OpenId(dispensesystem)
			if '$IsObject(sobj) $$$TRACE("Unable to determine System") continue
			set ifsrobot=sobj.Robot.MasterRobot.RobotId
			$$$TRACE("Dispense System: ("_dispensesystem_") on Robot: ("_ifsrobot_")")
			if ompdetails.RobotPort.IsPDU {
				for k=1:1:component.ComponentAmount {
					set ref=$i(^Robot.OrderReference) kill ^Robot.OrderReference(ref)
					set rxddetails=##class(Robot.RXDDetails).%New()
					set rxddetails.OrderReference=ref
					set rxddetails.ComponentIdentifier=eanid
					set rxddetails.ComponentAmount=1
					do component.Dispensed.SetAt(rxddetails,ref)
					if $l(eanid) set orderarray(ref)=i_"||"_j_"||"_k_"||"_lineitem_"||"_ompdetails.RobotPort.IsPDU_"||"_$g(ifsrobot)_"||"_$g(dispensesystem)
					set lineitem=lineitem+1
				}
			}
			else {
				set ref=$i(^Robot.OrderReference)
				set rxddetails=##class(Robot.RXDDetails).%New()
				set rxddetails.OrderReference=ref kill ^Robot.OrderReference(ref)
				set rxddetails.ComponentIdentifier=eanid
				set rxddetails.ComponentAmount=component.ComponentAmount
				do component.Dispensed.SetAt(rxddetails,ref)
				if $l(eanid) set orderarray(ref)=i_"||"_j_"||"_"||"_lineitem_"||"_ompdetails.RobotPort.IsPDU_"||"_$g(ifsrobot)_"||"_$g(dispensesystem)
				set lineitem=lineitem+1
			}
		}
	}
	set tSC=ompdetails.%Save() if 'tSC $$$TRACE("OMP Save Error: "_$system.Status.GetErrorText(tSC))
	set tRequest.OMPID=ompdetails.%Id()
	set ^Robot.OrderMessages(ompdetails.%Id())=""
	set ref="" for {
		set ref=$o(orderarray(ref)) quit:ref=""
		set ^Robot.OrderReference(ref)=ompdetails.%Id()_"||"_orderarray(ref)
		set ^Robot.OrderMessages(ompdetails.%Id(),ref)=orderarray(ref)
	}
	$$$TRACE("OMP ("_ompdetails.%Id()_") Details Save Status: "_$s(tSC:"OK",1:"Error - "_$system.Status.GetErrorText(tSC))) if 'tSC goto End
End
	Quit tSC
Error
	Set $ZT="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	Goto End
]]></Implementation>
</Method>

<Method name="CreateBatchMessage">
<FormalSpec>pRequest:EnsLib.HL7.Message,tRequest:Robot.INURequest</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Error",tSC=$$$OK
	set batchref=pRequest.GetValueAt("MSH:SequenceNumber")
	if batchref="" set tSC=$system.Status.Error(5001,..%ConfigName_" INU: Invalid Batch Reference on message ("_pRequest.GetValueAt("MSH:MessageControlID")_")") goto End
	$$$TRACE("Batch: ("_batchref_") is being processed")
	set exists=0
	if ##class(Robot.StockBatch).%ExistsId(batchref) {
		set batch = ##class(Robot.StockBatch).%OpenId(batchref)
		if '$IsObject(batch) set tSC=$system.Status.Error(5001,..%ConfigName_" Unable to open 'Stock Batch' object with Batch Reference ("_batchref_")") goto End
		set status=pRequest.GetValueAt("MSH:MessageProfileIdentifier(1).EntityIdentifier")
		if status="Open" {
			if batch.BatchOpen=0 set tSC=$system.Status.Error(5001,..%ConfigName_" Cannot Open a Closed batch ("_batchref_") on message ("_pRequest.GetValueAt("MSH:MessageControlID")_")") goto End
		}
		elseif status="Closed" {
			if batch.BatchOpen=1 set batch.BatchOpen=0,batch.BatchClosedDate=$zdt($h,3)
			else  set tSC=$system.Status.Error(5001,..%ConfigName_" Cannot Close a batch that is already Closed for batch ("_batchref_") on message ("_pRequest.GetValueAt("MSH:MessageControlID")_")") goto End
		}
		else {
			set tSC=$system.Status.Error(5001,..%ConfigName_" Invalid Batch Status for batch ("_batchref_") on message ("_pRequest.GetValueAt("MSH:MessageControlID")_")") goto End
		}
	}
	else {
		set batch = ##class(Robot.StockBatch).%New()
		if '$IsObject(batch) set tSC=$system.Status.Error(5001,..%ConfigName_" Unable to create 'Stock Batch' object") goto End
		$$$TRACE("Batch Details: "_batchref)
		set sys=##class(Robot.SystemSettings).%OpenId("Robot")
		if '$IsObject(sys) set tSC=$system.Status.Error(5001,..%ConfigName_" Unable to open 'Robot' System Settings") goto End
		set overflow=##class(Robot.StockBatch).%OpenId("Overflow") if '$IsObject(overflow) $$$TRACE("Unable to open 'Overflow' Stock Batch")
		set batch.HL7Message=pRequest.%Id()
		set batch.SystemSettings=sys
		Set batch.SendingApplication=pRequest.GetValueAt("MSH:SendingApplication")
		Set batch.SendingFacility=pRequest.GetValueAt("MSH:SendingFacility")
		Set batch.ReceivingApplication=pRequest.GetValueAt("MSH:ReceivingApplication")
		Set batch.ReceivingFacility=pRequest.GetValueAt("MSH:ReceivingFacility")
		set tSC=##class(Robot.Site).ValidateFacility("Location",batch.FacilityPK,.location) if 'tSC $$$TRACE("Site Error: "_$system.Status.GetErrorText(tSC)) goto End
		set batch.RobotLocation=location
		Set batch.MessageDateTime=pRequest.GetValueAt("MSH:DateTimeofMessage")
		Set batch.MessageType=pRequest.GetValueAt("MSH:MessageType.MessageStructure")
		Set batch.MessageControlID=pRequest.GetValueAt("MSH:MessageControlID")
		Set batch.MessageVersion=pRequest.GetValueAt("MSH:VersionID.VersionID")
		set batch.DeliveryReference=pRequest.GetValueAt("MSH:SequenceNumber")
		if batch.DeliveryReference="" set tSC=$system.Status.Error(5001,..%ConfigName_" Invalid Delivery Reference for message ("_batch.MessageControlID_")") goto End
		Set batch.AcceptAckType=pRequest.GetValueAt("MSH:AcceptAcknowledgmentType")
		Set batch.ApplicationAckType=pRequest.GetValueAt("MSH:ApplicationAcknowledgmentTyp")
		set batch.BatchOpen=1
		if batch.DeliveryReference="Internal"!(batch.DeliveryReference="Overflow") set batch.SendBatch=0
		set sc=batch.%Save()
		$$$TRACE("Batch ("_batch.DeliveryReference_") Save Status: "_$s(tSC:"OK",1:"Error - "_$system.Status.GetErrorText(tSC))) if 'tSC goto End
		for i=1:1 {
			if pRequest.GetValueAt("INV("_i_"):SubstanceIdentifier.Identifier")="" quit
			set item=##class(Robot.StockBatchItems).%New()
			set item.NAPPICode=pRequest.GetValueAt("INV("_i_"):SubstanceIdentifier.Identifier")
			if item.NAPPICode="" set tSC=$system.Status.Error(5001,"Invalid NAPPI Code for Inventory Item ("_i_") on message ("_batch.MessageControlID_")") quit
			set item.EANCode=pRequest.GetValueAt("INV("_i_"):SubstanceIdentifier.AlternateIdentifier")
			set item.AmountDelivered=pRequest.GetValueAt("INV("_i_"):InitialQuantity")
			if item.AmountDelivered'>0,batch.DeliveryReference'="Internal",batch.DeliveryReference'="Overflow" set txt="Invalid Amount for Inventory Item ("_item.NAPPICode_") on message ("_batch.DeliveryReference_")",item.IsError=$system.Status.Error(5001,txt) $$$TRACE(txt) continue
			set item.AmountLoaded=0
			If $IsObject(overflow) {
				set overflowitem=overflow.Items.GetAt(item.NAPPICode)
				if $IsObject(overflowitem) {
					set load=overflowitem.AmountLoaded
					if load>0 {
						set item.AmountLoaded=load,diff=0
						$$$TRACE("Item: ("_item.NAPPICode_") Overflow Amount: ("_load_")")
						if item.AmountLoaded>item.AmountDelivered set diff=item.AmountLoaded-item.AmountDelivered,item.AmountLoaded=item.AmountDelivered,overflowitem.AmountLoaded=diff
						$$$TRACE("Item: ("_item.NAPPICode_") Overflow Amount: ("_diff_")")
						set sc=overflowitem.%Save()
					}
				}
			}
			if item.EANCode="" set item.IsError=$system.Status.Error(5001,"Invalid EAN Code for Inventory Item ("_i_") on message ("_batch.MessageControlID_")")
			do batch.Items.SetAt(item,item.NAPPICode) $$$TRACE("Item: ("_item.NAPPICode_") has been added to Batch: ("_batch.DeliveryReference_")")
		}
	}
	set overflow=""
	if 'tSC goto End
	if 'batch.IsHL7Clone {
		set hl7clone=pRequest.%ConstructClone()
		if $IsObject(hl7clone) {
			set tSC=hl7clone.SetValueAt(batch.ReceivingApplication,"MSH:SendingApplication","set","")
			set tSC=hl7clone.SetValueAt(batch.SendingApplication,"MSH:ReceivingApplication","set","")
			set tSC=hl7clone.SetValueAt(batch.ReceivingFacility,"MSH:SendingFacility","set","")
			set tSC=hl7clone.SetValueAt(batch.SendingFacility,"MSH:ReceivingFacility","set","")
			set tSC=hl7clone.SetValueAt($tr($zdt($h,3),": -",""),"MSH:DateTimeofMessage","set","")
			set sc=hl7clone.%Save()
			if sc {
				set batch.HL7Message=hl7clone.%Id()
				set batch.IsHL7Clone=1
			}
			else {
				set tSC=$system.Status.Error(5001,..%ConfigName_" Unable to create HL7 Clone for batch: "_batch.DeliveryReference)
				goto End
			}
		}
	}
	set tSC=batch.%Save()
End
	$$$TRACE("Batch: ("_$s($IsObject(batch):batch.DeliveryReference,1:"Unknown Batch")_") Save Status: "_$s(tSC:"OK",1:$system.Status.GetErrorText(tSC)))
	if tSC {
		if '$IsObject(tRequest) set tRequest=##class(Robot.INURequest).%New()
		set tRequest.BatchReference=$s($g(batch)'="":batch.%Id(),1:"")
	}
	else {
		set tRequest=""
	}
	Quit tSC
Error
	Set $ZT="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	Goto End
UpdatNAPPIMaster	;
	if ##class(Robot.Stock.StockMaster).%ExistsId(item.NAPPICode) {
		set nappi=##class(Robot.Stock.StockMaster).%OpenId(item.NAPPICode)
		set nappi.EANCode=item.EANCode,nappi.ProductDescription=item.SubstanceName,nappi.ProductData=item.ProductDetails
		;set nappi.PackSize=item.PackSize
		set sc=nappi.%Save()
		$$$TRACE("NAPPI Save Status for ("_item.NAPPICode_"): "_$s(sc:"OK",1:$system.Status.GetErrorText(sc)))
	}
	else {
		set nappi=##class(Robot.Stock.StockMaster).%New()
		set nappi.NAPPICode=item.NAPPICode,nappi.EANCode=item.EANCode,nappi.ProductDescription=item.SubstanceName,nappi.ProductData=item.ProductDetails
		set sc=nappi.%Save()
		$$$TRACE("NAPPI Save Status for ("_item.NAPPICode_"): "_$s(sc:"OK",1:$system.Status.GetErrorText(sc)))
	}
	quit
]]></Implementation>
</Method>

<Method name="CreateStockRequestMessage">
<FormalSpec>pRequest:EnsLib.HL7.Message,tRequest:Robot.MFNRequest</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Error",tSC=$$$OK
	set stock = ##class(Robot.Stock.HL7StockLevels).%New()
	if '$IsObject(stock) set tSC=$system.Status.Error(5001,..%ConfigName_" Unable to create Stock Level Request object") goto End
	set sys=##class(Robot.SystemSettings).%OpenId("Robot")
	if '$IsObject(sys) set tSC=$system.Status.Error(5001,..%ConfigName_" Unable to open 'Robot' System Settings") goto End
	set stock.HL7Message=pRequest.%Id()
	set stock.SystemSettings=sys
	Set stock.SendingApplication=pRequest.GetValueAt("MSH:SendingApplication")
	Set stock.SendingFacility=pRequest.GetValueAt("MSH:SendingFacility")
	Set stock.ReceivingApplication=pRequest.GetValueAt("MSH:ReceivingApplication")
	Set stock.ReceivingFacility=pRequest.GetValueAt("MSH:ReceivingFacility")
	set tSC=##class(Robot.Site).ValidateFacility("Location",stock.FacilityPK,.location) if 'tSC $$$TRACE("Location Error: "_$system.Status.GetErrorText(tSC)) goto End
	set stock.RobotLocation=location
	set tSC=##class(Robot.Site).ValidateFacility("Port",stock.FacilityPK,.port) if 'tSC $$$TRACE("Port Error: "_$system.Status.GetErrorText(tSC)) goto End
	set stock.RobotPort=port
	set robot=stock.RobotPort.Robot.RobotId
	if 'stock.RobotPort.Robot.IsMasterRobot set robot=stock.RobotPort.Robot.MasterRobot.RobotId
	Set stock.MessageType=pRequest.GetValueAt("MSH:MessageType.MessageStructure")
	Set stock.MessageControlID=pRequest.GetValueAt("MSH:MessageControlID")
	Set stock.MessageVersion=pRequest.GetValueAt("MSH:VersionID.VersionID")
	Set stock.MessageDateTime=pRequest.GetValueAt("MSH:DateTimeofMessage")
	Set stock.AcceptAckType=pRequest.GetValueAt("MSH:AcceptAcknowledgmentType")
	Set stock.ApplicationAckType=pRequest.GetValueAt("MSH:ApplicationAcknowledgmentTyp")
	set stock.MasterFileIdentifier=pRequest.GetValueAt("MFI:MasterFileIdentifier")
	set stock.FileLevelEventCode=pRequest.GetValueAt("MFI:FileLevelEventCode")
	set stock.ResponseLevelCode=pRequest.GetValueAt("MFI:ResponseLevelCode")
	set stock.CreationDate=$zdt($h,3)
	set sc=stock.%Save()
	$$$TRACE("Stock Level Request Save Status: "_$s(tSC:"OK",1:"Error - "_$system.Status.GetErrorText(tSC))) if 'tSC goto End
	kill array
	for i=1:1 {
		$$$TRACE("I: "_i)
		if pRequest.GetValueAt("MFEgrp("_i_").MFE:RecordLevelEventCode")="" $$$TRACE("Quitting") quit
		set nappi=pRequest.GetValueAt("MFEgrp("_i_").ITM:ItemIdentifier")
		if $l(nappi) {set nappiobj=##class(Robot.Stock.StockMaster).%OpenId(nappi) if '$IsObject(nappiobj) $$$TRACE("Unable to open NAPPI: ("_nappi_")") continue} 
		else {$$$TRACE("Invalid NULL NAPPI: ("_nappi_")") continue}
		set atc=nappiobj.ATC.ATCCode
		$$$TRACE("NAPPI: "_nappi)
		$$$TRACE("ATC: "_atc)
		set list="",sc=##class(Robot.Stock.StockMaster).GetCodes("ATC",atc,"NAPPI","Active,EANCode",.list) if 'sc $$$TRACE("Unable to retrieve list of ATC linked Items")
		if '$l(list) $$$TRACE("No List") continue
		$$$TRACE("List: "_list)
		for j=1:1:$l(list,",") {
			set nappi=$lg($p(list,",",j),1),active=$lg($p(list,",",j),2),ean=$lg($p(list,",",j),3)
			if '$l(ean) $$$TRACE("No EAN Code for NAPPI: ("_nappi_")") continue
			if '+active $$$TRACE("NAPPI: ("_nappi_") is inactive") continue
			set item = ##class(Robot.Stock.HL7StockLevelItems).%New()
			if '$IsObject(item) $$$TRACE("Unable to create New HL7 Stock Level Item") continue
			set item.Stock=stock
			set item.NAPPICode=nappi
			set item.EANCode=ean
			set item.RecordLevelEventCode=pRequest.GetValueAt("MFEgrp("_i_").MFE:RecordLevelEventCode")
	 		set item.PrimaryKeyValueType=pRequest.GetValueAt("MFEgrp("_i_").MFE:PrimaryKeyValueType()")
			set item.ApprovedToBuyQuantity=pRequest.GetValueAt("MFEgrp("_i_").ITM:ApprovedToBuyQuantity")
			set sc=item.%Save() if 'sc $$$TRACE("Unable to save Stock Item: ("_nappi_") Error: ("_$system.Status.GetErrorText(sc)_")") continue
		}
	}
	if 'stock.IsHL7Clone {
		set hl7clone=pRequest.%ConstructClone()
		if $IsObject(hl7clone) {
			set tSC=hl7clone.SetValueAt(stock.ReceivingApplication,"MSH:SendingApplication","set","")
			set tSC=hl7clone.SetValueAt(stock.SendingApplication,"MSH:ReceivingApplication","set","")
			set tSC=hl7clone.SetValueAt(stock.ReceivingFacility,"MSH:SendingFacility","set","")
			set tSC=hl7clone.SetValueAt(stock.SendingFacility,"MSH:ReceivingFacility","set","")
			set tSC=hl7clone.SetValueAt($tr($zdt($h,3),": -",""),"MSH:DateTimeofMessage","set","")
			set sc=hl7clone.%Save()
			if sc {
				set stock.HL7Message=hl7clone.%Id()
				set stock.IsHL7Clone=1
			}
			else {
				set tSC=$system.Status.Error(5001,..%ConfigName_" Unable to create HL7 Clone for Stock Level Request")
				goto End
			}
		}
	}
	set tSC=stock.%Save()
End
	if tSC {
		if '$IsObject(tRequest) set tRequest=##class(Robot.MFNRequest).%New()
		set tRequest.StockLevels=stock.%Id()
		set tRequest.Robot=robot
	}
	else {
		set tRequest=""
	}
	Quit tSC
Error
	Set $ZT="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	Goto End
]]></Implementation>
</Method>

<Method name="CreateACK">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[status:%Status,hl7message:EnsLib.HL7.Message,&response:EnsLib.HL7.Message]]></FormalSpec>
<Implementation><![CDATA[
	Set $ZT="Error",tSC=1
	set response=hl7message.NewReplyDocument()
	set tSC=response.SetValueAt(hl7message.GetValueAt("MSH:ReceivingApplication"),"MSH:SendingFacility","set","") if 'tSC goto End
	set tSC=response.SetValueAt("ExtendedRobotInterface","MSH:SendingApplication","set","") if 'tSC goto End
	set tSC=response.SetValueAt(hl7message.GetValueAt("MSH:SendingApplication"),"MSH:ReceivingApplication","set","") if 'tSC goto End
	set tSC=response.SetValueAt($p(hl7message.GetValueAt("MSH:SendingFacility"),":",1)_"::","MSH:ReceivingFacility","set","") if 'tSC goto End
	set tSC=response.SetValueAt(hl7message.GetValueAt("MSH:VersionID.VersionID"),"MSH:VersionID","set","") if 'tSC goto End
	set dt=$tr($zdt($h,3),"- :","")
	set tSC=response.SetValueAt(hl7message.GetValueAt("MSH:MessageControlID"),"MSH:MessageControlID","set","") if 'tSC goto End
	set tSc=response.SetValueAt($s(status:"CA",1:"CE"),"MSA:AcknowledgmentCode","set","") if 'tSC goto End
	if 'status set tSC=response.SetValueAt($system.Status.GetErrorText(status),"ERR(1):UserMessage","set","") if 'tSC goto End
End
	Quit $$$OK
Error
	Set $ZT="",tSC=$system.Status.Error(5001,"SystemMethods:CreateACK:Code Error: "_$ze)
	Goto End
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="Robot.ProcessRobotDispenseBP">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>64771,51773.565115</TimeChanged>
<TimeCreated>63640,84748.335652</TimeCreated>

<Method name="OnRequest">
<FormalSpec>pRequest:Robot.RobotRequest,pResponse:Robot.RobotResponse</FormalSpec>
<PublicList>data,message,msg,retval,refdata,val</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	$$$TRACE("OnRequest OMPID: ("_pRequest.OMPID_")")
	set ompdetails=##class(Robot.OMPDetails).%OpenId(pRequest.OMPID) if '$IsObject(ompdetails) set tSC=$system.Status.Error(5001,"Unable to open OMP object for OMP: ("_pRequest.OMPID_")") goto End
	set loopmessages=ompdetails.SystemSettings.LoopRobotMessages
	set tRequest=##class(Robot.RobotRequest).%New()
	set tRequest.OMPID=pRequest.OMPID,tRequest.PDU=pRequest.PDU,tRequest.Robot=pRequest.Robot,tRequest.OrderReference=pRequest.OrderReference
	set tRequest.SendNext=pRequest.SendNext,tRequest.SendAll=pRequest.SendAll
	set robot=pRequest.Robot
	set robj=##class(Robot.Robots).%OpenId(robot)
	if '$IsObject(robj) set tSC=$system.Status.Error(5001,"Unable to open Robot Object for Robot: ("_robot_")") goto End
	set operation=$s(loopmessages:robj.Device.FileOperationName,1:robj.Device.TCPOperationName)
	set print=0
	if 'pRequest.PDU,pRequest.SendAll {
		set key="" for  set message=pRequest.Messages.GetNext(.key) quit:key=""  do tRequest.Messages.SetAt(message,key)
		set tSC=..SendRequestAsync(operation,tRequest,1,"Robot Dispense. SN("_pRequest.SendNext_") SA("_pRequest.SendAll_") Loop("_loopmessages_")") if 'tSC goto End
	}
	elseif pRequest.PDU,$l(pRequest.OrderReference) {
		set tSC=..PrintLabel(ompdetails, pRequest.OrderReference) if 'tSC goto End
		set print=1
	}
	elseif pRequest.PDU,pRequest.SendNext,'print {
		set key="",message=pRequest.Messages.GetNext(.key) if '$l(key)
		do tRequest.Messages.SetAt(message,1)		
		set tSC=..SendRequestAsync(operation,tRequest,1,"PDU Robot Dispense. SN("_pRequest.SendNext_") SA("_pRequest.SendAll_") Loop("_loopmessages_")") if 'tSC goto End
	}
	
End	;
	set pResponse=##class(Robot.RobotResponse).%New(),pResponse.OMPID=pRequest.OMPID,pResponse.Success=tSC
	quit tSC
Error	;
	Set $ZT="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	Goto End
]]></Implementation>
</Method>

<Method name="OnResponse">
<FormalSpec><![CDATA[pRequest:Robot.RobotRequest,&pResponse:Robot.RobotResponse,tRequest:Ens.Request,tResponse:Ens.Response,pCompletionKey:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set loop=+$p($p(pCompletionKey,"Loop(",2),")",1)
	set SN=+$p($p(pCompletionKey,"SN(",2),")",1)
	set SA=+$p($p(pCompletionKey,"SA(",2),")",1)
	if pCompletionKey["Robot Dispense" {
		$$$TRACE("OMP: ("_pRequest.OMPID_") OR: ("_pRequest.OrderReference_") pC: ("_pCompletionKey_")")
	}
	elseif pCompletionKey="PDU Robot Dispense" {
		$$$TRACE("OMP: ("_pRequest.OMPID_") OR: ("_pRequest.OrderReference_") pC: ("_pCompletionKey_")")
	}
	elseif pCompletionKey["PDU Printer File Operation",'loop {
		$$$TRACE("OMP: ("_pRequest.OMPID_") OR: ("_pRequest.OrderReference_") pC: ("_pCompletionKey_")")
	}
	elseif pCompletionKey="PDU Printer TCP Operation",loop {
		$$$TRACE("OMP: ("_pRequest.OMPID_") OR: ("_pRequest.OrderReference_") pC: ("_pCompletionKey_")")
	}
	elseif (pCompletionKey["PDU Printer File Operation"&(loop))!(pCompletionKey["PDU Printer TCP Operation"&('loop)) {
		// If these conditions exist then it means that we initiated a Label Print in the OnRequest and that the next
		// item in this PDU dispense must now be sent
		// Unless it has been detected that there is an error or a timeout failure. In either case the array ^Robot.OrderMessages(ompid) will
		// have no children.
		// However we will kmow from the DispenseResponseService if this is the case because pRequest.SendNext will be 0
		if pRequest.SendNext {
			set omp=pRequest.OMPID,order=pRequest.OrderReference
			if $d(^Robot.OrderReference(order)) set id=^(order)
			else  set tSC=$system.Status.Error(5001,"Unable to retrieve OrderReference record for order: ("_order_")") quit
			set oref="" set oref=$o(^Robot.OrderMessages(omp,""))
			if oref'="" {
				set ts=$o(^Robot.TCPOutboundQueue("DispenseRequest",pRequest.Robot_"||"_oref,"")) if ts="" set tSC=$system.Status.Error(5001,"No outbound Dispense Request mesages found for Order Ref: ("_oref_")") quit
				set message=$lg(^Robot.TCPOutboundQueue("DispenseRequest",pRequest.Robot_"||"_oref,ts),3)
				set $list(^Robot.TCPOutboundQueue("DispenseRequest",pRequest.Robot_"||"_oref,ts),2)=$zdt($h,3)
				merge ^Robot.Archive.TCPOutboundQueue("DispenseRequest",pRequest.Robot_"||"_oref,ts)=^Robot.TCPOutboundQueue("DispenseRequest",pRequest.Robot_"||"_oref,ts)
				kill ^Robot.TCPOutboundQueue("DispenseRequest",pRequest.Robot_"||"_oref,ts)
				set tRequest=##class(Robot.RobotRequest).%New()
				set tRequest.OMPID=omp,tRequest.PDU=pRequest.PDU,tRequest.Robot=pRequest.Robot,tRequest.OrderReference=oref
				set tRequest.SendNext=pRequest.SendNext,tRequest.SendAll=pRequest.SendAll
				set robot=pRequest.Robot
				set robj=##class(Robot.Robots).%OpenId(robot)
				if '$IsObject(robj) set tSC=$system.Status.Error(5001,"Unable to open Robot Object for Robot: ("_robot_")") goto End
				set operation=$s(loop:robj.Device.FileOperationName,1:robj.Device.TCPOperationName)
				do tRequest.Messages.SetAt(message,1)
				$$$TRACE("Operation: "_operation)
				set tSC=..SendRequestAsync(operation,tRequest,1,"PDU Robot Dispense. SN(OM:"_omp_":OR:"_oref_") SA(0) Loop("_loop_")") if 'tSC goto End
				$$$TRACE("Dispense Request: ("_message_") sent for OMP: ("_omp_") Order: ("_oref_")")
			}
			else {
				$$$TRACE("No more Orders to Process for OMP: ("_pRequest.OMPID_")")
			}
		}
		else {
			$$$TRACE("No more Orders to Process for OMP: ("_pRequest.OMPID_"). Send Next was NO")
		}

	}
	else {
		$$$TRACE("Unexpected pCompletion Key: ("_pCompletionKey_")")
	}
End	;
	$$$TRACE("OnResponse for OMPID: ("_pRequest.OMPID_") has Status: "_$s(tSC:"OK",1:$system.Status.GetErrorText(tSC)))
	set pResponse=##class(Robot.RobotResponse).%New(),pResponse.OMPID=pRequest.OMPID
	if $IsObject(tResponse),$l(tResponse.Success) set tSC=tResponse.Success
	set pResponse.Success=tSC
	quit tSC
Error	;
	Set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	Goto End
]]></Implementation>
</Method>

<Method name="PrintLabel">
<FormalSpec>ompdetails:Robot.OMPDetails,orderref:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	$$$TRACE("Start Dispense Print Order Reference: "_orderref)
	if $d(^Robot.OrderReference(orderref))#10 set id=^(orderref)
	else  set tSC=$system.Status.Error(5001,"No Order Reference Index for order reference: "_orderref) goto End
	set ompid=$p(id,"||",1),order=$p(id,"||",2),item=$p(id,"||",3)
	if '$IsObject(ompdetails) set ompdetails=##class(Robot.OMPDetails).%OpenId(ompid)
	if '$IsObject(ompdetails) set tSC=$system.Status.Error(5001,"Unable to open OMP Details for ID: "_ompid) goto End
	set request=##class(Robot.PDUPrinterRequest).%New()
	if '$IsObject(request) set tSC=$system.Status.Error(5001,"Unable to Printer Request for ID: "_ompid_" Reference: "_orderref) goto End
	set order=ompdetails.Orders.GetAt(order)
	set item=order.RXCDetails.GetAt(item)
	set rxd=item.Dispensed.GetAt(orderref)
	set request.OrderReference=orderref
	set request.ComponentName=item.ComponentName
	set request.ComponentDosage=item.ComponentDosage
	set request.Name=ompdetails.PatientTitle_$s(ompdetails.PatientTitle'="":" ",1:"")_ompdetails.PatientGivenName_$s($l(ompdetails.PatientGivenName):" ",1:"")_ompdetails.PatientSurname
	set request.ComponentName=item.ComponentName
	set request.NumberOfRepeats=order.NumberOfRefills
	set request.PrescriptionNumber=$s($l(order.TriMedReferenceNumber):order.TriMedReferenceNumber,$l(order.CallCentreReferenceNumber):order.CallCentreReferenceNumber,1:"N/A")
	set request.PatientId=ompdetails.PatientIdentifier
	set request.PharmacistTitle=ompdetails.PharmacistTitle
	set request.PharmacistFirstName=ompdetails.PharmacistFirstName
	set request.PharmacistSurname=ompdetails.PharmacistSurname
	set request.PharmacyName=ompdetails.PharmacyName
	set request.PharmacyTelephone=ompdetails.PharmacyTelephone
	set request.PharmacyRegistrationNumber=ompdetails.PharmacistRegistration
	set request.PDUNumber=ompdetails.RobotPort.PDUNumber
	set request.PDULocation=ompdetails.RobotPort.Location.LocationDescription
	set request.AddressLine1=ompdetails.RobotPort.Location.LocationLabelAddressLine1
	set request.AddressLine2=ompdetails.RobotPort.Location.LocationLabelAddressLine2
	set request.AddressLine3=ompdetails.RobotPort.Location.LocationLabelAddressLine3
	if ompdetails.SystemSettings.CapturePDUPrintOutput {
		set file=ompdetails.RobotPort.PDUPrinter.Device.FileOperationName
		if $l(file) set tSC =..SendRequestAsync(file,request,1,"PDU Printer File Operation. Loop("_ompdetails.SystemSettings.LoopPDUPrinter_")")
		else  set tSC=$system.Status.Error(5001,"No PDU Printer File Operation Name for Port: ("_ompdetails.RobotPort.PortCode_") with Device: ("_ompdetails.RobotPort.PDUPrinter.Device.DeviceId_")") goto End
	}
	if 'ompdetails.SystemSettings.LoopPDUPrinter {
		set tcp=ompdetails.RobotPort.PDUPrinter.Device.TCPOperationName
		$$$TRACE("TCP Printer: "_tcp)
		if $l(tcp) {
			set sc =..SendRequestAsync(tcp,request,1,"PDU Printer TCP Operation")
			$$$TRACE("Printer ASync call Status is "_$s(sc:"OK",1:$system.Status.GetErrorText(sc)))
		}
		else {
			set tSC=$system.Status.Error(5001,"No PDU Printer TCP Operation Name for Port: ("_ompdetails.RobotPort.PortCode_") with Device: ("_ompdetails.RobotPort.PDUPrinter.Device.DeviceId_")") goto End
		}
	}
	set tSC=$$$OK
End	;
	$$$TRACE("End Dispense Print Order Reference: "_orderref)
	quit tSC
Error	;
	Set $ZT="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	Goto End
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>ProcessRobotDispenseBPDefaultData</DefaultData>
<Data name="ProcessRobotDispenseBPDefaultData">
<Subscript>"ProcessRobotDispenseBP"</Subscript>
<Value name="1">
<Value>LoopRobotMessages</Value>
</Value>
<Value name="2">
<Value>RobotMessageOperationName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.ProcessRobotMessagesBP">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>64777,1027.417577</TimeChanged>
<TimeCreated>63978,52430.981458</TimeCreated>

<Property name="AllowInternalLoading">
<Type>%Boolean</Type>
</Property>

<Property name="LoopRobotMessages">
<Type>%String</Type>
</Property>

<Property name="RobotMessageOperationName">
<Type>%String</Type>
</Property>

<Property name="UseDispenseAndLoadingTotalsForStockLevelUpdate">
<Type>%Boolean</Type>
</Property>

<Property name="UseRealTimeStockLevelChecks">
<Type>%Boolean</Type>
</Property>

<Method name="OnInit">
<Description>
This user callback method is called via initConfig() from %OnNew() or in the case of SOAP Services from OnPreSOAP()</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set system=##class(Robot.SystemSettings).%OpenId("Robot")
	if '$IsObject(system) set tSC=$system.Status.Error(5001,"Unable to open system settings for system: ("_"Robot"_")") goto End
	set ..AllowInternalLoading = system.AllowInternalLoading
	set ..LoopRobotMessages=system.LoopRobotMessages
	set ..UseDispenseAndLoadingTotalsForStockLevelUpdate=system.UseDispenseAndLoadingTotalsForStockLevelUpdate
	set ..UseRealTimeStockLevelChecks=system.UseDispenseToTriggerStockLevelUpdate
End	;
	Quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="OnRequest">
<FormalSpec>pRequest:Robot.RobotRequest,*pResponse:Robot.RobotResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set pResponse=##class(Robot.RobotResponse).%New(),pResponse.OMPID="",pResponse.Success=$$$OK
	set robot=##class(Robot.Robots).%OpenId(pRequest.Robot) if '$IsObject(robot) set tSC=$system.Status.Error(5001,"Unable to open Robot object for Robot: ("_pRequest.Robot_")") goto End
	set robot=robot.MasterRobot,file=robot.Device.FileOperationName,tcp=robot.Device.TCPOperationName
	set ..RobotMessageOperationName=$s(..LoopRobotMessages:file,1:tcp)
	set tRequest=##class(Robot.RobotRequest).%New()
	set tRequest.OMPID=pRequest.OMPID,tRequest.Robot=robot.%Id()
	set key=""
	for {
		set msg=pRequest.Messages.GetNext(.key) quit:key=""
		$$$TRACE("Message: "_msg)
		do tRequest.Messages.SetAt(msg,key)
	}
	set tSC=..SendRequestAsync(..RobotMessageOperationName,tRequest,1,"Robot Message: Send Message")
End	;
	quit tSC
Error	;
	set $ztrap=""
	set tSC=$system.Status.Error(5001,..%ConfigName_" Robot Message BP Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="OnResponse">
<FormalSpec><![CDATA[pRequest:Robot.RobotRequest,&pResponse:Robot.RobotResponse,tRequest:Robot.RobotRequest,tResponse:Robot.RobotResponse,pCompletionKey:%String]]></FormalSpec>
<PublicList>message,val,retval,data,refdata,xdata,xrefdata</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set pResponse=##class(Robot.RobotResponse).%New()
	set pResponse.OMPID="",pResponse.Success=$$$OK
	set system=##class(Robot.SystemSettings).%OpenId("Robot")
	// Deal with Robot Inventory Messages
Inventory	;
	set item="",overflow=""
	for {
		set item=$o(^Robot.TCPInboundQueue("StorageRequest",item)) quit:item=""
		set ts=""
		for {
			kill message,val,retval,data,refdata
			set ts=$o(^Robot.TCPInboundQueue("StorageRequest",item,ts)) quit:ts=""
			set str=^Robot.TCPInboundQueue("StorageRequest",item,ts)
			if '$l($lg(str,2)) {
				set ifsrobot=$p(item,"||",1),orderno=$p(item,"||",2)
				$$$TRACE("Message: "_$lg(str,3))
				// Get Message Data
				merge data=^Robot.TCPInboundQueue("StorageRequest",item,ts,"data")
				set order=$g(data("OrderNumber"))
				set state=+$g(data("StockRequestState"))
				set delnote=$g(data("DeliveryNote"))
				set qty=+$g(data("Quantity"))
				set product=$g(data("ProductCode"))
				set robot=$g(data("RobotID"))
				set systemid="S0"_ifsrobot
				// Update InboundQueue Entry
				set $list(^Robot.TCPInboundQueue("StorageRequest",item,ts),2)=$zdt($h,3),^Robot.Archive.TCPInboundQueue("StorageRequest",item,ts)=^Robot.TCPInboundQueue("StorageRequest",item,ts)
				kill ^Robot.TCPInboundQueue("StorageRequest",item,ts)
				// Check if we have an Overflow Batch. Can't continue without it
				If '$IsObject(overflow) set overflow=##class(Robot.StockBatch).%OpenId("Overflow")
				if '$IsObject(overflow) $$$TRACE("Unable to continue with Inventory. 'Overflow' Batch is not defined") continue
				// Need to see if this is the Master Robot or a Slave. The Master Robot ID is held in the variable 'robotid'
				set robj=##class(Robot.Robots).%OpenId(ifsrobot) if '$IsObject(robj) set tSC=$system.Status.Error(5001,"Invalid Robot Code: ("_ifsrobot_")") goto End
				if 'robj.IsMasterRobot {
					set robotid=robj.MasterRobot.RobotId
					set operationname=$s(..LoopRobotMessages:robj.MasterRobot.Device.FileOperationName,1:robj.MasterRobot.Device.TCPOperationName)
				}
				else {
					set robotid=ifsrobot
					set operationname=$s(..LoopRobotMessages:robj.Device.FileOperationName,1:robj.Device.TCPOperationName)
				}
				set retstatus=0,text=""
				// Get Delivery Note if not specified but OrderReference is
				// Delivery Note could be entered against one or more robots
				if '$l(delnote),$l(order) {
					set delnote=$g(^Robot.CurrentBatchIndex(ifsrobot,order))
				}
				$$$TRACE("IFSRobot: ("_ifsrobot_") RobotID: ("_robot_") State: ("_state_") Delivery: ("_delnote_") Quantity: ("_qty_") Product: ("_product_")")
				// Check If 'Internal' Batch and whether 'Internal' batches are allowed
				if delnote="Internal",state=2,'..AllowInternalLoading {
					set retstatus=1,text="Delivery Note 'Internal' is not allowed"
					set tSC=..SendBatchResponse(operationname, robotid, order, delnote, "data","refdata",retstatus,text)
					continue
				}
				// If we still don't have a delivery note then we can't proceed
				if '$l(delnote) {
					set retstatus=1,text="Delivery Note ("_delnote_") on Order ("_order_") is invalid"
					set tSC=..SendBatchResponse(operationname, robotid, order, delnote, "data","refdata",retstatus,text)
					continue
				}
				if state=3 {
					// End of Delivery for a specific Robot and Delivery Note
					// Remove order number
					set x="" for {
						set x=$o(^Robot.CurrentBatch(ifsrobot,delnote,x)) q:x=""
						kill ^Robot.CurrentBatchIndex(ifsrobot,x),^Robot.CurrentBatch(ifsrobot,delnote,x)
					}
				}
				else {
					// Set Current Batch Order Index by Robot and Delivery Note
					set ^Robot.CurrentBatch(ifsrobot,delnote,order)=$h,^Robot.CurrentBatchIndex(ifsrobot,order)=delnote
				}
				set batch=##class(Robot.StockBatch).%OpenId(delnote)
				if '$IsObject(batch) {
					set retstatus=1,text="Delivery Note '"_delnote_"' is not known to the Interface Server",ok=0
					set tSC=..SendBatchResponse(operationname,robotid,order,delnote,"data","refdata",retstatus,text)
					continue
				}
				set nappi="",itemobj="",itemdetail=""
				if $l(product) {
					// Get NAPPI Code
					set tSC=##class(Robot.Stock.StockMaster).GetNAPPICode(product,.nappi)
					if 'tSC {
						// NAPPI Code not found. We cannot continue
						set retstatus=1,text="Product Code ("_product_") is unknown to the Interface Server"
						do ##class(Robot.ProductionAlertErrors).ErrorAlert(..%ConfigName,"Unknown Product Code: "_product,text,1,86399)
						set tSC=..SendBatchResponse(operationname,robotid,order,delnote,"data","refdata",retstatus,text)
						continue
					}
					set itemobj=##class(Robot.StockBatchItems).%OpenId(batch.%Id()_"||"_nappi)
					if '$IsObject(itemobj) {
						if state'=6 {
							set retstatus=1,text="Product Code ("_product_") is not part of Delivery Note '"_delnote_"'",ok=0
							set tSC=..SendBatchResponse(operationname,robotid,order,delnote,"data","refdata",retstatus,text)
						}
						else {
							set itemdetail=##class(Robot.StockBatchItems).%OpenId("Overflow||"_nappi) if '$IsObject(itemdetail) quit
							set itemdetail.AmountLoaded=itemdetail.AmountLoaded+qty
							set sc=itemdetail.%Save() if 'sc $$$TRACE("Unable to update 'Overflow' batch: ("_delnote_") for Nappi: ("_nappi_")")

							set sysitem=##class(Robot.StockBatchItemDetails).%New()
							set sysitem.Item=itemdetail,sysitem.DeliveryNote=delnote,sysitem.Date=+$h,sysitem.Time=$p($h,",",2),sysitem.System=systemid,sysitem.Quantity=qty
							set sc=sysitem.%Save() if 'sc $$$TRACE("Unable to update 'Overflow' batch: ("_delnote_") for Nappi: ("_nappi_") with System Data")

							set (itemdetail,sysitem)=""
						}
					}
					elseif $IsObject(itemobj),state=6 {
						set date=+$h,time=$p($h,",",2)
						set itemobj.AmountLoaded=itemobj.AmountLoaded+qty,diff=0
						if ..UseRealTimeStockLevelChecks {
							$$$TRACE("Sending Stock Level Refresh for Robot: ("_ifsrobot_") Product: ("_product_")")
							set ^Robot.Stock.RefreshStockLevels(ifsrobot,product)="" $$$TRACE("Stock Refresh Request for Robot: ("_ifsrobot_") EAN: ("_product_")")
						}
						if ..UseDispenseAndLoadingTotalsForStockLevelUpdate {
							$$$TRACE("Stock Transaction Insert: Robot: ("_ifsrobot_") System: ("_systemid_") Nappi: {"_nappi_") Quantity: ("_qty_")")
							set sc=##class(Robot.Stock.LoadAndDispenseTransactions).InsertTransaction("Load",ifsrobot,systemid,nappi,qty)
							if 'sc $$$TRACE("Error Inserting Transaction: "_$system.Status.GetErrorText(sc))
						}
						if itemobj.AmountLoaded>itemobj.AmountDelivered {

							set diff=itemobj.AmountLoaded-itemobj.AmountDelivered,itemobj.AmountLoaded=itemobj.AmountDelivered,amt=qty-diff

							set sysitem=##class(Robot.StockBatchItemDetails).%OpenId(delnote_"||"_nappi_"||"_systemid_"||"_delnote_"||"_date_"||"_time)
							if '$IsObject(sysitem) {
								set sysitem=##class(Robot.StockBatchItemDetails).%New()
								set sysitem.Item=itemobj,sysitem.DeliveryNote=delnote,sysitem.Date=date,sysitem.Time=time,sysitem.System=systemid
							}
							set sysitem.Quantity=sysitem.Quantity+amt
							set sc=sysitem.%Save() if 'sc $$$TRACE("Unable to update Batch: ("_delnote_") for Item: ("_nappi_") with System Data")

							set sysitem=##class(Robot.StockBatchItemDetails).%OpenId(delnote_"||"_nappi_"||"_systemid_"||"_"Overflow"_"||"_date_"||"_time)
							if '$IsObject(sysitem) {
								set sysitem=##class(Robot.StockBatchItemDetails).%New()
								set sysitem.Item=item,sysitem.DeliveryNote="Overflow",sysitem.Date=date,sysitem.Time=time,sysitem.System=systemid
							}
							set sysitem.Quantity=sysitem.Quantity+diff
							set sc=sysitem.%Save() if 'sc $$$TRACE("Unable to update Overflow data on Batch: ("_delnote_") for Item: ("_nappi_") with System Data")

							set overflowitem=##class(Robot.StockBatchItems).%OpenId("Overflow||"_nappi)
							set sysitem=##class(Robot.StockBatchItemDetails).%OpenId("Overflow"_"||"_nappi_"||"_systemid_"||"_delnote_"||"_date_"||"_time)
							if '$IsObject(sysitem) {
								set sysitem=##class(Robot.StockBatchItemDetails).%New()
								set sysitem.Item=overflowitem,sysitem.DeliveryNote=delnote,sysitem.Date=date,sysitem.Time=time,sysitem.System=systemid
							}
							set sysitem.Quantity=sysitem.Quantity+diff
							set sc=sysitem.%Save() if 'sc $$$TRACE("Unable to save Overflow data for for Batch: ("_delnote_") Item: ("_nappi_")")

							set sc=item.%Save() if 'sc $$$TRACE("Unable to save Batch: ("_delnote_") Item: ("_nappi_")")
						}
						else {
							set sysitem=##class(Robot.StockBatchItemDetails).%OpenId(delnote_"||"_nappi_"||"_systemid_"||"_delnote_"||"_date_"||"_time)
							if '$IsObject(sysitem) {
								set sysitem=##class(Robot.StockBatchItemDetails).%New()
								set sysitem.Item=itemobj,sysitem.DeliveryNote=delnote,sysitem.Date=date,sysitem.Time=time,sysitem.System=systemid
							}
							set sysitem.Quantity=sysitem.Quantity+qty
							set sc=sysitem.%Save() if 'sc $$$TRACE("Unable to update Batch: ("_delnote_") for Nappi: ("_nappi_") with System Data. Error: ("_$system.Status.GetErrorText(sc)_")")
						}
							
					}
					set tSC=batch.%Save()
					if 'tSC $$$TRACE("Unable to update Batch Totals on Delivery Note ("_delnote_")") set tSC=$$$OK
				}
				if "0,1,2,3,4,5"[state {
					if '$l(text) set text=$s(state=3:"Batch Delivery is Finished",state=2:"Batch Delivery has Started",1:"Product Ready to Load")
					$$$TRACE("Text: "_text)
					set tSC=..SendBatchResponse(operationname,robotid,order,delnote,"data","refdata",retstatus,text)
				}
			}
		}
	}


StockLevels	;
	set product=item,ts=""
	set gbl="^Robot.TCPInboundQueue(""StockLevelResponse"")"
	set agbl="^Robot.Arcive.TCPInboundQueue(""StockLevelResponse"")"
	for {
		set item=$o(@gbl@(item)) quit:item=""
		for {
			set ts=$o(@gbl@(item,ts)) quit:ts=""
			if '$l($g(@gbl@(item,ts))) kill @gbl@(item,ts) continue
			if $l($lg(@gbl@(item,ts),2)) merge @agbl@(item,ts)=@gbl@(item,ts) kill @gbl@(item,ts) continue
			$$$TRACE("Item: "_item_" ts: "_ts)
			set robot=$g(@gbl@(item,ts,"data","RobotID")), robotid=$p(item,"||",1)
			set ean=$g(@gbl@(item,ts,"data","ProductCode"))
			set qty=+$g(@gbl@(item,ts,"data","Quantity"))
			set lines=+$g(@gbl@(item,ts,"data","LineCount"))
			if '$l(ean) $$$TRACE("Invalid EAN Code: ("_ean_")") do Update continue
			set sc=##class(Robot.Stock.StockMaster).GetNAPPICode(ean,.nappi)
			if 'sc!($g(nappi)="") $$$TRACE("Invalid EAN Code: ("_ean_")") do Update continue
			set nappiobj=##class(Robot.Stock.StockMaster).%OpenId(nappi) if '$IsObject(nappiobj) do Update continue
			set robotobj=##class(Robot.Robots).%OpenId(robotid) if '$IsObject(robotobj) $$$TRACE("Unable to open Robot Object for Robot: ("_robot_")") do Update continue
			set sobj=##class(Robot.Stock.StockLevels).%OpenId(nappi_"||"_robotid)
			if '$IsObject(sobj) set sobj=##class(Robot.Stock.StockLevels).%New(),sobj.Master=nappiobj,sobj.Robot=robotobj
			set sobj.RobotQuantity=qty,sobj.LastUpdatedDT=$zdt($h,3) do sobj.%Save()
			set bsub="",bgbl="^Robot.TCPInboundQueue(""StockLevelResponse"","_$c(34)_item_$c(34)_","_ts_",""data"",""b-Sub"")"
			for {
				set bsub=$o(@bgbl@(bsub)) quit:bsub=""
				if '$l($g(@bgbl@(bsub,"StorageLocationSystem"))) $$$TRACE("Invalid Storage Location for Product: ("_item_") Item: ("_ts_")") continue
				if '$l($g(@bgbl@(bsub,"ID"))) $$$TRACE("Invalid Storage Location ID for Product: ("_item_") Item: ("_ts_")") continue
				set system=@bgbl@(bsub,"StorageLocationSystem"),id=@bgbl@(bsub,"ID")
				set altsys=$o(^Robot.SystemsI("System",robotid,system,""))
				if $l(altsys) set system=altsys
				set systemobj=##class(Robot.Systems).%OpenId(system)
				if '$IsObject(systemobj) $$$TRACE("Unable to open System: ("_system_")")
				set sysobj=##class(Robot.Stock.StockLevelSystems).%OpenId(nappi_"||"_robotid_"||"_system)
				if '$IsObject(sysobj) {
					set sysobj=##class(Robot.Stock.StockLevelSystems).%New()
					set sysobj.StorageLocationSystem=systemobj
					set sysobj.StockLevel=sobj
					set sc=sysobj.%Save() if 'sc $$$TRACE("Unable to create Stock Level System object for Robot: ("_robotid_") system: ("_system_") nappi: ("_nappi_")")
				}
				set sld=##class(Robot.Stock.StockLevelDetails).%OpenId(nappi_"||"_robotid_"||"_system_"||"_id)
				if '$IsObject(sld) {
					set sld=##class(Robot.Stock.StockLevelDetails).%New()
					set sld.ID=id,sld.System=sysobj
				}
				set sld.StorageLocationShelf=$g(@bgbl@(bsub,"StorageLocationShelf"))
				set sld.BatchNumber=$g(@bgbl@(bsub,"BatchNumber"))
				set sld.Capacity=$g(@bgbl@(bsub,"Capacity"))
				set sld.ERPDate=$g(@bgbl@(bsub,"ERPDate"))
				set sld.Quantity=$g(@bgbl@(bsub,"Quantity"))
				set sld.StorageDate=$g(@bgbl@(bsub,"StorageDate"))
				set sld.UseByDate=$g(@bgbl@(bsub,"UseByDate"))
				set sc=sld.%Save()
				if 'sc $$$TRACE("An error occurred updating Nappi: "_nappi_" Robot: "_robotid_" System: "_system_" ProductId: "_id_" with Error: "_$system.Status.GetErrorText(sc))
				else  $$$TRACE("Update to Nappi: "_nappi_" Robot: "_robotid_" System: "_system_" ProductId: "_id_" is successful")
				set sc=sobj.%Save()
				if 'sc $$$TRACE("An error occurred updating Nappi: "_nappi_" Robot: "_robotid_" System: "_system_" with Error: "_$system.Status.GetErrorText(sc))
				else  $$$TRACE("Update to Nappi: "_nappi_" Robot: "_robotid_" System: "_system_" is successful")
			}
			set sc=sobj.%Save()
			do Update
			$$$TRACE("Stock Balance Update Status for NAPPI: ("_nappi_") on Robot: ("_robotid_") is ("_$s(sc:"OK",1:$system.Status.GetErrorText(sc))_")")
		}
	}

Product	;	
	// Deal with Product Requests
	set (item,ts)=""
	for {
		set item=$o(^Robot.TCPInboundQueue("ProductRequest",item)) quit:item=""
		for {
			set ts=$o(^Robot.TCPInboundQueue("ProductRequest",item,ts)) quit:ts=""
			set dt2=$lg(^Robot.TCPInboundQueue("ProductRequest",item,ts),2)
			if '$l(dt2) {
				merge data=^Robot.TCPInboundQueue("ProductRequest",item,ts,"data")
				$$$TRACE("Processing Product Request: ("_$lg(^Robot.TCPInboundQueue("ProductRequest",item,ts),3)_")")
				set robot=+$g(data("RobotID")),robotid=$p(item,"||",1)
				set robj=##class(Robot.Robots).%OpenId(robotid) if '$IsObject(robj) set tSC=$system.Status.Error(5001,"Invalid Robot Code: ("_robotid_")") goto End
				set robj=robj.MasterRobot,robotid=robj.%Id(),operationname=$s(..LoopRobotMessages:robj.Device.FileOperationName,1:robj.Device.TCPOperationName)
				set product=$g(data("BarCode1")) if $e(product,1)="@" set product=$e(product,2,$l(product))
				set altproduct=$g(data("BarCode2"))
				if '$l(product),$l(altproduct) set product=altproduct $$$TRACE("Alt Product: ("_altproduct_") code used as no EAN Barcode was present")
				kill data("BarCode1"),data("BarCode2")
				set nappi="",found=0,nappiobj=""
				set sc=##class(Robot.Stock.StockMaster).GetNAPPICode(product,.nappi)
				if '$l(nappi) {
					$$$TRACE("Product Code: ("_product_") is not registered in the NAPPI/EAN Table")
					set sc=##class(Robot.ProductionAlertErrors).ErrorAlert(..%ConfigName,"Unknown Product Code: "_product,"Product Code ("_product_") is unknown to the Interface Server",0,86399)
					if 'sc $$$TRACE("Production Alert Call Error: "_$system.Status.GetErrorText(sc))
					if $l(altproduct){
						$$$TRACE("Alt Product: ("_altproduct_")")
						set sc=##class(Robot.Stock.StockMaster).GetNAPPICode(altproduct,.nappi)
						if '$l(nappi) {
							$$$TRACE("BarCode: ("_altproduct_") is not registered in the NAPPI/EAN Table")
							do ##class(Robot.ProductionAlertErrors).ErrorAlert(..%ConfigName,"Unknown Product Code: "_product,"Product Code ("_product_") is unknown to the Interface Server",0,86399)
						}
						else {
							set found=1
						}
					}
				}
				else {
					set found=1
				}
				if found {
					set nappiobj=##class(Robot.Stock.StockMaster).%OpenId(nappi)
					if '$IsObject(nappiobj) {
						set $list(^Robot.TCPInboundQueue("ProductRequest",item,ts),2)=$zdt($h,3)
						;kill ^Robot.TCPInboundQueue("ProductRequest",item,ts,"data")
						$$$TRACE("Unable to open NAPPI object with ID: ("_nappi_")")
					}
					else {
						kill message,val,retval,refdata
						set data("DialogueCode")="P"
						set data("RobotID")=robot
						set data("ProductCode")=product
						set data("ProductName")=nappiobj.ProductDescription
						set data("ShortDosageForm")=""
						set data("PackageUnit")=nappiobj.PackSize
						set data("BarCode1")=$s($l(altproduct):altproduct,1:product)
						set data("MinStorageTemp")=""
						set data("MaxStorageTemp")=""
						set data("MinQuantity")=""
						set data("MaxQuantity")=""
						set tRequest=##class(Robot.RobotRequest).%New()
						set tRequest.Robot=robotid
						set message=""
						set tSC=##class(Robot.Mapping.MessageDefinitions).CreateMessage("ProductResponse",robotid,"data","refdata",.message) if 'tSC goto End
						do tRequest.Messages.SetAt(message,1)
						$$$TRACE("Sending Response: "_message)
						set ^Robot.TCPOutboundQueue("ProductResponse",item,$i(^Robot.TCPOutboundQueue("ProductResponse")))=$lb($zdt($h,3),"",message)
						set tSC=..SendRequestAsync(operationname,tRequest,0,"Robot Messages: Product Response") if 'tSC goto End
					}
				}
				set $list(^Robot.TCPInboundQueue("ProductRequest",item,ts),2)=$zdt($h,3),^Robot.Archive.TCPInboundQueue("ProductRequest",item,ts)=^Robot.TCPInboundQueue("ProductRequest",item,ts)
				kill ^Robot.TCPInboundQueue("ProductRequest",item,ts)
			}
			else {
				set ^Robot.Archive.TCPInboundQueue("ProductRequest",item,ts)=^Robot.TCPInboundQueue("ProductRequest",item,ts)
				kill ^Robot.TCPInboundQueue("ProductRequest",item,ts)
			}
		}
	}
	
Status	;		
	// Deal with Robot Status Messages
	set (robotid,ts)="",last=""
	for {
		set robotid=$o(^Robot.TCPInboundQueue("StatusResponse",robotid)) quit:robotid=""
		set robj=##class(Robot.Robots).%OpenId(robotid)
		if '$IsObject(robj) set tSC=$system.Status.Error(5001,"Unable to open robot object for robot ID: ("_robotid_")") goto End
		for {
			set ts=$o(^Robot.TCPInboundQueue("StatusResponse",robotid,ts)) quit:ts=""
			if '$l($lg(^Robot.TCPInboundQueue("StatusResponse",robotid,ts),2)) {
				if robj.SystemStateResponseOK[(","_$g(^Robot.TCPInboundQueue("StatusResponse",robotid,ts,"data","SystemState"),0)_",") do robj.SetRobotState(robotid,1)
				if robj.SystemStateResponseNOTOK[(","_$g(^Robot.TCPInboundQueue("StatusResponse",robotid,ts,"data","SystemState"),0)_",") do robj.SetRobotState(robotid,1) set txt="Robot Status for Robot ("_$lg(^Robot.RobotsD(robotid),2)_") is NOT OK" do ##class(Robot.ProductionAlertErrors).ErrorAlert(..%ConfigName,txt)
			}
			set $list(^Robot.TCPInboundQueue("StatusResponse",robotid,ts),2)=$zdt($h,3)
			set ^Robot.Archive.TCPInboundQueue("StatusResponse",robotid,ts)=^Robot.TCPInboundQueue("StatusResponse",robotid,ts)
			kill ^Robot.TCPInboundQueue("StatusResponse",robotid,ts)
		}
	}
End	;
	set pResponse.Success=tSC
	Quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Robot Message BP:Code Error: "_$ze)
	goto End
Update	;
	set $list(@gbl@(item,ts),2)=$zdt($h,3)
	merge @agbl@(item,ts)=@gbl@(item,ts)
	kill @gbl@(item,ts)
	quit
]]></Implementation>
</Method>

<Method name="SendBatchResponse">
<FormalSpec>operation:%String,robotid:%String,order:%String,delnote:%String,global:%String,refglobal:%String,retstatus:%Integer,text:%String</FormalSpec>
<PublicList>message,val,retval,data,refdata,xdata,xrefdata</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set state=+$g(@global@("StockRequestState"),99) if "0,1,2,3,4,5"'[state goto End
	set textlen=$l(text)+1
	set tRequest=##class(Robot.RobotRequest).%New()
	set tRequest.Robot=robotid
	set @global@("DialogueCode")="I"
	set @global@("StockResponseState")=retstatus
	set @global@("FieldLength")=$l(text)
	set @global@("ErrorText")=text
	set @global@("RecordEndCharacter")=$c(0)
	set dt=$tr($zd($h,3),"-: ",""),dt=$e(dt,7,8)_$e(dt,5,6)_$e(dt,1,4)
	set @global@("ERPDate")=dt
	set message=""
	set tSC=##class(Robot.Mapping.MessageDefinitions).CreateMessage("StorageResponse",robotid,global,refglobal,.message) if 'tSC goto End
	do tRequest.Messages.SetAt(message,1)
	$$$TRACE("Sending Response: "_message)
	set ^Robot.TCPOutboundQueue("StorageResponse",robotid_"||"_order,$i(^Robot.TCPOutboundQueue("StockRespense")))=$lb($zdt($h,3),"",message)
	set tSC=..SendRequestAsync(operation,tRequest,1,"Robot Messages: Storage Response")
End	;
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>ProcessRobotMessagesBPDefaultData</DefaultData>
<Data name="ProcessRobotMessagesBPDefaultData">
<Subscript>"ProcessRobotMessagesBP"</Subscript>
<Value name="1">
<Value>DaysToKeepStatusLog</Value>
</Value>
<Value name="2">
<Value>DaysToKeepDispenseLog</Value>
</Value>
<Value name="3">
<Value>DaysToKeepOrders</Value>
</Value>
<Value name="4">
<Value>DaysToKeepBatches</Value>
</Value>
<Value name="5">
<Value>DaysToKeepQueues</Value>
</Value>
<Value name="6">
<Value>AllowInternalLoading</Value>
</Value>
<Value name="7">
<Value>LoopRobotMessages</Value>
</Value>
<Value name="8">
<Value>RobotMessageOperationName</Value>
</Value>
<Value name="9">
<Value>UseDispenseAndLoadingTotalsForStockLevelUpdate</Value>
</Value>
<Value name="10">
<Value>UseRealTimeStockLevelChecks</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.ProcessStockBatchUpdateBP">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>64209,45362.879625</TimeChanged>
<TimeCreated>63736,21894.929776</TimeCreated>

<Method name="OnRequest">
<FormalSpec>pRequest:Robot.INURequest,*pResponse:Robot.INUResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set batchref=pRequest.BatchReference
	if batchref="ALL" {
		set batchref=""
		for {
			set batchref=$o(^Robot.StockBatchD(batchref)) quit:batchref=""
			set batch=##class(Robot.StockBatch).%OpenId(batchref)
			if $IsObject(batch) {
				if batch.BatchOpen {
					set batch.SendOpenBatch=1
					set tSC=batch.%Save() if 'tSC goto End
					set tRequest=##class(Robot.INURequest).%New()
					set tRequest.BatchReference=batchref
					set tSC=..SendRequestAsync("Robot.ProcessStockBatchUpdateBP",tRequest,1,"BATCH:"_batchref)
					if 'tSC goto End
				}
			}
			else {
				set tSC=$system.Status.Error(5001,..%ConfigName_" Unable to open batch: "_batchref) goto End
			}
		}
		goto End
	}
			
	set batch=##class(Robot.StockBatch).%OpenId(batchref)
	if '$IsObject(batch) set tSC=$system.Status.Error(5001,..%ConfigName_" Stock BP: Unable to open batch ("_batchref_")") goto End
	$$$TRACE("Batch: "_batchref_" :"_batch)
	if (batch.ClosedBatchReportedDate=""!(batch.SendOpenBatch))&(batch.SendBatch) {
		set closed=1
		set hl7=##class(EnsLib.HL7.Message).%OpenId(batch.HL7Message)
		if '$IsObject(hl7) set tSC=$system.Status.Error(5001,..%ConfigName_" Unable to open HL7 INU Message for batch: "_batchref) goto End
		for i=1:1 {
			set nappi=hl7.GetValueAt("INV("_i_"):SubstanceIdentifier.Identifier") if nappi="" quit
			set item=##class(Robot.StockBatchItems).%OpenId(batchref_"||"_nappi)
			if $IsObject(item) {
				set tSC=hl7.SetValueAt(item.AmountDelivered,"INV("_i_"):InitialQuantity","set","")
				set tSC=hl7.SetValueAt(item.AmountLoaded,"INV("_i_"):CurrentQuantity","set","")
				if item.AmountDelivered=item.AmountLoaded
				else  set closed=0
			}
		}
		set item=""
		$$$TRACE("Batch "_batchref_" Closed Status: "_$s(closed:"Closed",1:"Open"))
		if closed!(batch.SendOpenBatch) {
			set tSC=hl7.SetValueAt($s(closed:"Closed",1:"Open"),"MSH:MessageProfileIdentifier(1).EntityIdentifier","set","")
			set batch.BatchOpen=$s(closed:0,1:1)
			if closed set batch.BatchClosedDate=$zdt($h,3)
			set tSC=..SendRequestAsync("Robot.TCPINUResultOperation",hl7,1,"INU Result:"_batchref)
			if 'tSC goto End
			if closed set batch.ClosedBatchReportedDate=$zdt($h,3)
			else  set batch.OpenBatchReportedDate=$zdt($h,3),batch.SendOpenBatch=1
		}
		set tSC=batch.%Save()
		if tSC {$$$TRACE("INU Batch Report: Batch "_batchref_" saved")}
		else {$$$TRACE("INU Batch Report: Unable to save batch "_batchref)}
	}
End	;
	if 'tSC $$$TRACE("Batch Error: "_$system.Status.GetErrorText(tSC))
	set pResponse=##class(Robot.INUResponse).%New()
	set pResponse.Success=tSC
	Quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" ProcessStockBatchUpdateBP:Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="OnResponse">
<Description>
Handle a 'Response'</Description>
<FormalSpec><![CDATA[pRequest:Robot.INURequest,&pResponse:Robot.INUResponse,tRequest:%Library.Persistent,tResponse:%Library.Persistent,pCompletionKey:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$TRACE("pComp: "_pCompletionKey)
	Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="Robot.ProcessStockLevelRequestBP">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>64734,55389</TimeChanged>
<TimeCreated>64208,47434.452953</TimeCreated>

<Method name="OnRequest">
<FormalSpec>pRequest:Robot.MFNRequest,*pResponse:Robot.MFNResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set stock=##class(Robot.Stock.HL7StockLevels).%OpenId(pRequest.StockLevels)
	if '$IsObject(stock) set tSC=$system.Status.Error(5001,"Unable to open Stock Level Request Object: ("_pRequest.StockLevels_")") goto End
	set hl7=##class(EnsLib.HL7.Message).%OpenId(stock.HL7Message)
	if '$IsObject(hl7) set tSC=$system.Status.Error(5001,"Unable to open HL7 message on Stock Request "_pRequest.StockLevels) goto End
	set rlec=hl7.GetValueAt("MFEgrp(1).MFE:RecordLevelEventCode"),pkvt=hl7.GetValueAt("MFEgrp(1).MFE:PrimaryKeyValueType")
	for i=1:1 {
		set sc=hl7.RemoveSegmentAt("MFEgrp("_i_").ITM") if 'sc quit
		set sc=hl7.RemoveSegmentAt("MFEgrp("_i_").MFE")
	}
	kill array
	for item=1:1:stock.Items.Count() {
		set itemobj=stock.Items.GetAt(item)
		set nappi=itemobj.NAPPICode
		if $d(array(nappi)) continue
		set array(nappi)=""
		set total=0,robotid=pRequest.Robot
		$$$TRACE("Robot: ("_pRequest.Robot_") NAPPI: {"_itemobj.NAPPICode_")")
		set gbl="^Robot.Stock.StockMasterD("_nappi_",""StockLevels"","_robotid_",""Systems"")"
		set system=""
		for {
			set system=$o(@gbl@(system)) quit:system=""
			set sysobj=##class(Robot.Stock.StockLevelSystems).%OpenId(nappi_"||"_robotid_"||"_system)
			if '$IsObject(sysobj) continue
			set total=total+sysobj.Quantity,total=total+sysobj.TransactionBalance
		}
		set itemobj.ApprovedToBuyQuantity=total
		set sc=hl7.SetValueAt(rlec,"MFEgrp("_item_").MFE:RecordLevelEventCode","set","")
		set sc=hl7.SetValueAt(pkvt,"MFEgrp("_item_").MFE:PrimaryKeyValueType","set","")
		set sc=hl7.SetValueAt(nappi,"MFEgrp("_item_").ITM:ItemIdentifier","set","")
		set sc=hl7.SetValueAt(total,"MFEgrp("_item_").ITM:ApprovedToBuyQuantity","set","")
	}
	set sc=hl7.%Save()
	set ^Robot.TCPOutboundQueue("CloudStockLevelRequest",pRequest.Robot_"||"_pRequest.StockLevels,$i(^Robot.TCPOutboundQueue("CloudStockLevelRequest")))=$lb($zdt($h,3),"",hl7.OutputToString(hl7))
	set tSC=..SendRequestAsync("Robot.RDSTCPOperationCloud",hl7,1,"Cloud Stock Level Request for Request: ("_pRequest.StockLevels_")") if 'tSC 
End	;
	set pResponse=##class(Robot.MFNResponse).%New()
	set pResponse.Success=$$$OK
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	Goto End
]]></Implementation>
</Method>

<Method name="OnResponse">
<Description>
Handle a 'Response'</Description>
<FormalSpec>pRequest:Robot.MFNRequest,pResponse:Robot.MFNResponse,callrequest:%Library.Persistent,callresponse:%Library.Persistent,pCompletionKey:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="Robot.ProductionAlertConditions">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64041,46782.427701</TimeChanged>
<TimeCreated>63792,68094.646765</TimeCreated>

<Property name="ConditionID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Property name="ConditionText">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="ConditionCount">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="ConditionCountAlert">
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="ConditionCountAlertInterval">
<Type>%Time</Type>
<InitialExpression>"300"</InitialExpression>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="LastAlertDT">
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($h,3)</InitialExpression>
</Property>

<Property name="RecipientList">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>ConditionID</Properties>
<Unique>1</Unique>
</Index>

<Property name="ProductionItem">
<Type>Robot.ProductionAlerts</Type>
<Cardinality>parent</Cardinality>
<Inverse>Conditions</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="ConditionAlert">
<ClassMethod>1</ClassMethod>
<FormalSpec>configitem:%String,condition:%String,conditiontext:%String,count:%Integer=1,interval:%Time=600</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK,conditiontext=$g(conditiontext)
	if '$l($g(configitem)) set tSC=$system.Status.Error(5001,"Unable to create condition alert. Config Item not defined") goto End
	if '$l($g(condition)) set tSC=$system.Status.Error(5001,"Unable to create condition alert. Condition not defined") goto End
	set id=configitem_"||"_condition
	if ##class(Robot.ProductionAlertConditions).%ExistsId(id) {
		set alert=##class(Robot.ProductionAlertConditions).%OpenId(id)
		if '$IsObject(alert) set tSC=$system.Status.Error(5001,"Unable to create Condition Alert") goto End
	}
	else {
		set alert=##class(Robot.ProductionAlertConditions).%New()
		do alert.ProductionItemSetObjectId(configitem)
		set alert.ConditionID=condition
	}
	set alert.ConditionCount=alert.ConditionCount+1
	set alert.ConditionText=conditiontext
	set alert.ConditionCountAlert=count
	set alert.ConditionCountAlertInterval=interval
	set tSC=alert.%Save()
End	;
	quit tSC
Error	;
	set $ztrap=""
	set tSC=$system.Status.Error(5001,"Alert Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("Conditions")</DataLocation>
<DefaultData>ProductionAlertConditionsDefaultData</DefaultData>
<IdLocation>^Robot.ProductionAlertsC("Conditions")</IdLocation>
<IndexLocation>^Robot.ProductionAAA42I</IndexLocation>
<StreamLocation>^Robot.ProductionAAA42S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ProductionAlertConditionsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ConditionCount</Value>
</Value>
<Value name="3">
<Value>LastAlertDT</Value>
</Value>
<Value name="4">
<Value>ConditionCountAlert</Value>
</Value>
<Value name="5">
<Value>ConditionCountAlertInterval</Value>
</Value>
<Value name="6">
<Value>ConditionText</Value>
</Value>
<Value name="7">
<Value>RecipientList</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.ProductionAlertErrors">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64041,46792.902876</TimeChanged>
<TimeCreated>63792,68094.646765</TimeCreated>

<Property name="ErrorID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Property name="ErrorText">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="ErrorCount">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="ErrorCountAlert">
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="ErrorCountAlertInterval">
<Type>%Time</Type>
<InitialExpression>"300"</InitialExpression>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="LastAlertDT">
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($h,3)</InitialExpression>
</Property>

<Property name="RecipientList">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>ErrorID</Properties>
<Unique>1</Unique>
</Index>

<Property name="ProductionItem">
<Type>Robot.ProductionAlerts</Type>
<Cardinality>parent</Cardinality>
<Inverse>Errors</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="ErrorAlert">
<ClassMethod>1</ClassMethod>
<FormalSpec>configitem:%String,error:%String,errortext:%String,count:%Integer=1,interval:%Time=600</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK,errortext=$g(errortext)
	if '$l($g(configitem)) set tSC=$system.Status.Error(5001,"Unable to create error alert. Config Item not defined") goto End
	if '$l($g(error)) set tSC=$system.Status.Error(5001,"Unable to create error alert. Error Code not defined") goto End
	set id=configitem_"||"_error
	if ##class(Robot.ProductionAlertErrors).%ExistsId(id) {
		set alert=##class(Robot.ProductionAlertErrors).%OpenId(id)
		if '$IsObject(alert) set tSC=$system.Status.Error(5001,"Unable to create Error Alert") goto End
	}
	else {
		set alert=##class(Robot.ProductionAlertErrors).%New()
		do alert.ProductionItemSetObjectId(configitem)
		set alert.ErrorID=error
	}
	set alert.ErrorCount=alert.ErrorCount+1
	set alert.ErrorText=errortext
	set alert.ErrorCountAlert=count
	set alert.ErrorCountAlertInterval=interval
	
	set tSC=alert.%Save()
End	;
	quit tSC
Error	;
	set $ztrap=""
	set tSC=$system.Status.Error(5001,"Alert Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("Errors")</DataLocation>
<DefaultData>ProductionAlertErrorsDefaultData</DefaultData>
<IdLocation>^Robot.ProductionAlertsC("Errors")</IdLocation>
<IndexLocation>^Robot.ProductionAlertErrorsI</IndexLocation>
<StreamLocation>^Robot.ProductionAlertErrorsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ProductionAlertErrorsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ErrorCount</Value>
</Value>
<Value name="3">
<Value>LastAlertDT</Value>
</Value>
<Value name="4">
<Value>ErrorCountAlert</Value>
</Value>
<Value name="5">
<Value>ErrorCountAlertInterval</Value>
</Value>
<Value name="6">
<Value>ErrorText</Value>
</Value>
<Value name="7">
<Value>RecipientList</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.ProductionAlerts">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64027,52098.431148</TimeChanged>
<TimeCreated>63792,68150.310989</TimeCreated>

<Property name="ProductionItem">
<Type>%String</Type>
</Property>

<Property name="ProductionClass">
<Type>%String</Type>
</Property>

<Property name="QueueSizeAlert">
<Type>%Integer</Type>
<InitialExpression>50</InitialExpression>
</Property>

<Property name="QueueSizeAlertInterval">
<Type>%Time</Type>
<InitialExpression>"900"</InitialExpression>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="QueueSizeAlertLastDT">
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($h,3)</InitialExpression>
</Property>

<Property name="RecipientList">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>ProductionItem</Properties>
<Unique>1</Unique>
</Index>

<Property name="Errors">
<Type>Robot.ProductionAlertErrors</Type>
<Cardinality>children</Cardinality>
<Inverse>ProductionItem</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Conditions">
<Type>Robot.ProductionAlertConditions</Type>
<Cardinality>children</Cardinality>
<Inverse>ProductionItem</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="BuildProductionAlerts">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set system=##class(Robot.SystemSettings).%OpenId("Robot")
	set package=system.ProductionPackageName
	kill ^Robot.ProductionAlertsD
	set x=package_"."
	for {
		set x=$o(^Ens.Runtime("ConfigItem",x)) quit:x=""  quit:$p(x,".",1)'=package
		set item=##class(Robot.ProductionAlerts).%New()
		set item.ProductionItem=x
		set item.ProductionClass=^Ens.Runtime("ConfigItem",x,"ClassName")
		set sc=item.%Save()
		
	}
	quit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.ProductionAlertsD</DataLocation>
<DefaultData>ProductionAlertsDefaultData</DefaultData>
<IdLocation>^Robot.ProductionAlertsD</IdLocation>
<IndexLocation>^Robot.ProductionAlertsI</IndexLocation>
<StreamLocation>^Robot.ProductionAlertsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ProductionAlertsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ProductionClass</Value>
</Value>
<Value name="3">
<Value>QueueSizeAlert</Value>
</Value>
<Value name="4">
<Value>QueueSizeAlertInterval</Value>
</Value>
<Value name="5">
<Value>QueueSizeAlertLastDT</Value>
</Value>
<Value name="6">
<Value>RecipientList</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.RXCDetails">
<Super>%SerialObject,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>63959,29285.65691</TimeChanged>
<TimeCreated>63623,11239.701386</TimeCreated>

<Property name="RXComponentType">
<Type>%String</Type>
</Property>

<Property name="ComponentIdentifier">
<Type>%String</Type>
</Property>

<Property name="ComponentName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Property name="ComponentCodingSystem">
<Type>%String</Type>
</Property>

<Property name="ComponentAmount">
<Type>%Integer</Type>
</Property>

<Property name="ComponentDosage">
<Type>%String</Type>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Property name="Dispensed">
<Type>Robot.RXDDetails</Type>
<Collection>array</Collection>
</Property>

<Property name="IsError">
<Type>%Status</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Storage name="Default">
<Type>%Storage.Serial</Type>
<State>RXCDetailsState</State>
<StreamLocation>^Robot.RXCDetailsS</StreamLocation>
<Data name="RXCDetailsState">
<Value name="1">
<Value>RXComponentType</Value>
</Value>
<Value name="2">
<Value>ComponentIdentifier</Value>
</Value>
<Value name="3">
<Value>ComponentName</Value>
</Value>
<Value name="4">
<Value>ComponentCodingSystem</Value>
</Value>
<Value name="5">
<Value>ComponentAmount</Value>
</Value>
<Value name="6">
<Value>ComponentDosage</Value>
</Value>
<Value name="7">
<Value>Dispensed</Value>
</Value>
<Value name="8">
<Value>IsError</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.RXDDetails">
<Super>%SerialObject,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>63680,77723.124271</TimeChanged>
<TimeCreated>63623,11239.701386</TimeCreated>

<Property name="OrderReference">
<Type>%String</Type>
</Property>

<Property name="ComponentIdentifier">
<Type>%String</Type>
</Property>

<Property name="ComponentAmount">
<Type>%Integer</Type>
</Property>

<Property name="ComponentAmountDispensed">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="State">
<Type>%String</Type>
</Property>

<Property name="IsError">
<Type>%Status</Type>
<InitialExpression>$$$OK</InitialExpression>
</Property>

<Property name="IsRobotError">
<Type>%Status</Type>
<InitialExpression>$$$OK</InitialExpression>
</Property>

<Property name="IsPrinterError">
<Type>%Status</Type>
<InitialExpression>$$$OK</InitialExpression>
</Property>

<Property name="DispenseDateTime">
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($h,3)</InitialExpression>
</Property>

<Storage name="Default">
<Type>%Storage.Serial</Type>
<State>RXDDetailsState</State>
<StreamLocation>^Robot.RXDDetailsS</StreamLocation>
<Data name="RXDDetailsState">
<Value name="1">
<Value>OrderReference</Value>
</Value>
<Value name="2">
<Value>ComponentIdentifier</Value>
</Value>
<Value name="3">
<Value>ComponentAmountDispensed</Value>
</Value>
<Value name="4">
<Value>IsRobotError</Value>
</Value>
<Value name="5">
<Value>IsPrinterError</Value>
</Value>
<Value name="6">
<Value>DispenseDateTime</Value>
</Value>
<Value name="7">
<Value>IsError</Value>
</Value>
<Value name="8">
<Value>State</Value>
</Value>
<Value name="9">
<Value>ComponentAmount</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.ReportService">
<Super>Ens.BusinessService</Super>
<TimeChanged>64355,47978.518582</TimeChanged>
<TimeCreated>64156,30752.836412</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>Ens.InboundAdapter</Type>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	$$$TRACE("Robot Report Service Started at: "_$zdt($h,3))
	set system=##class(Robot.SystemSettings).%OpenId("Robot")
	set sitename=system.SiteName
	kill system
	set report="",clonecount=1
	for {
		set report=$o(^Robot.Reports.ReportsD(report)) q:report=""
		if $p(report,"|",2)="Clone" continue
		$$$TRACE("Processing Report: ("_report_")")
		set robj=##class(Robot.Reports.Reports).%OpenId(report) if '$IsObject(robj) $$$TRACE("Unable to create Report Object for Report: ("_report_")") continue
		if $d(^Robot.RunReports(report,$zd($h,3))) $$$TRACE("Report: ("_report_") has already run today") continue
		set time=$p($h,",",2)
		if $p($h,",",2)<robj.RunAt continue
		if robj.ConstructClone {
			set cobj=robj.%ConstructClone()
			set cobj.ReportID=robj.ReportID_"|Clone|"_clonecount,clonecount=clonecount+1
			set cobj.ConstructClone=0
		}
		else {
			set cobj=robj
		}
		set sc=cobj.RunReport()
		set cobj.RunTS=$zdt($h,3)
		set cobj.RunStatus=$s(sc:"OK",1:$system.Status.GetErrorText(sc))
		set sc=cobj.%Save() if 'sc $$$TRACE("Save Error: "_$system.Status.GetErrorText(sc))
		set ^Robot.RunReports(report,$p(cobj.RunTS," ",1),$p(cobj.RunTS," ",2))=sc
		$$$TRACE("Report: ("_report_") Run Status: ("_$s(sc:"OK",1:$system.Status.GetErrorText(sc))_")") if 'sc continue
		set tRequest=##class(Robot.EMailRequest).%New()
		set tRequest.Report=cobj.%Id()
		set tRequest.SiteName=sitename
		set sc=..SendRequestSync("Robot.EMailOperation",tRequest,.tResponse)
		;set sc=..SendRequestAsync("Robot.EMailOperation",tRequest,"EMailing Report: ("_report_")")
		if $IsObject(tResponse) {
			$$$TRACE("Report: ("_report_") EMail Status: ("_$s(tResponse.Status:"OK",1:$system.Status.GetErrorText(tResponse.Status))_")")
		}
		if cobj.DeleteReportAfterRun do cobj.%DeleteId(cobj.%Id()) kill cobj
	}
End	;
	$$$TRACE("Exiting Robot Report Service")
	quit tSC
Error	;
	set $ztrap=""
	set tSC=$system.Status.Error(5001,..%ConfigName_" Robot Message Service Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Reports.Batch">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64356,38219.134711</TimeChanged>
<TimeCreated>64196,27740.736789</TimeCreated>

<Method name="BatchReport">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[batch:%String,&path:%String,&csvfile:%String,&detailfile:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	if $g(batch)="" set batch="Internal"
	if $g(path)="" set path="c:\InterSystems\RobotInterface\"
	if $e(path,$l(path))'="\" set path=path_"\"
	if '##Class(%File).DirectoryExists(path) set sc=##class(%File).CreateDirectory(path) if 'sc set tSC=$system.Status.Error(5001,"Unable to create path: ("_path_")") goto End
	if '$l($g(csvfile)) set csvfile="Batch Report - "_batch_" - "_$zd($h,3)_".csv"
	if '$l($g(detailfile)) set detailfile="Detailed Batch Report - "_batch_" - "_$zd($h,3)_".csv"
	set csvfile=path_csvfile,detailfile=path_detailfile
	open csvfile:("WNS"):0 else  set tSC=$system.Status.Error(5001,"Unable to open Batch Report File: ("_csvfile_")") goto End
	open detailfile:("WNS"):0 else  set tSC=$system.Status.Error(5001,"Unable to open Detailed Batch Report File: ("_detailfile_")") goto End
	set obj=##class(Robot.StockBatch).%OpenId(batch)
	if '$IsObject(obj) set tSC=$system.Status.Error(5001,"Unable to open Batch: ("_batch_")") goto End
	use csvfile write "Batch: "_batch,!,"Created Date: ",obj.BatchCreationDate,!,"Batch Status: ",$s(obj.BatchOpen:"Open",1:"Closed"),!!
	use detailfile write "Batch: "_batch,!,"Date: ",$zd($h,3),!,"Batch Status: ",$s(obj.BatchOpen:"Open",1:"Closed"),!!
	use csvfile write "Product,NAPPI,Description,Amount Delivered,Amount Loaded,Difference",!
	use detailfile write "Product,NAPPI,Description,Amount Delivered,Amount Loaded,Difference,System,Delivery Note,Date,Time,Quantity",!
	for i=1:1:obj.Items.Count() {
		set item=obj.Items.GetAt(i)
		set nappi=item.NAPPICode,delivered=item.AmountDelivered,loaded=item.AmountLoaded,diff=delivered-loaded
		set nappiobj=##class(Robot.Stock.StockMaster).%OpenId(nappi)
		use csvfile write nappiobj.EANCode,",",nappi,",",nappiobj.ProductDescription,",",delivered,",",loaded,",",diff,!
		use detailfile write nappiobj.EANCode,",",nappi,",",nappiobj.ProductDescription,",",delivered,",",loaded,",",diff,!
		for j=1:1:item.Details.Count() {
			set detail=item.Details.GetAt(j)
			set system=detail.System,delnote=detail.DeliveryNote,date=$zd(detail.Date,3),time=$ztime(detail.Time,1),qty=detail.Quantity
			use detailfile write nappiobj.EANCode,",",nappi,",",nappiobj.ProductDescription,",",delivered,",",loaded,",",diff,",",system,",",delnote,",",date,",",time,",",qty,!
		}
	}
End	;
	close csvfile,detailfile
	quit tSC
	
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Reports.BatchD</DataLocation>
<DefaultData>BatchDefaultData</DefaultData>
<IdLocation>^Robot.Reports.BatchD</IdLocation>
<IndexLocation>^Robot.Reports.BatchI</IndexLocation>
<StreamLocation>^Robot.Reports.BatchS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="BatchDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Reports.Dispense">
<Super>%Persistent</Super>
<TimeChanged>64449,53407.809997</TimeChanged>
<TimeCreated>64150,77691.822884</TimeCreated>

<Method name="MergeDispenseLog">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[date:%Date,&reportfile:%String,path:%String="c:\InterSystems\RobotInterface\",rxorder:%String]]></FormalSpec>
<PublicList>data,refdata,msg,retval</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	kill pArray
	if '$l($g(date)) set date=$zd($h,3)
	set rxorder=$g(rxorder)
	if $g(path)="" set path="c:\InterSystems\RobotInterface\"
	if $e(path,$l(path))'="\" set path=path_"\"
	if '##Class(%File).DirectoryExists(path) set sc=##class(%File).CreateDirectory(path) if 'sc set tSC=$system.Status.Error(5001,"Unable to create path: ("_path_")") goto End
	if $l(rxorder) set reportfile=rxorder_".txt"
	if '$l($g(reportfile)) set reportfile="Dispense Log "_$zd($h,3)_".txt"
	set reportfile=path_reportfile
	open reportfile:("WNS"):0
	else  set tSC=$system.Status.Error(5001,"Unable to open reportfile") goto End
	set item="",scount=0,last="",count=1,lastomp="",$p(linestr,"_",180)=""
	for {
		set item=$o(^Robot.TCPOutboundQueue("DispenseRequest",item)) q:item=""
		set ts=""
		for {
			set ts=$o(^Robot.TCPOutboundQueue("DispenseRequest",item,ts)) q:ts=""
			if $p($lg(^(ts),1)," ",1)=date {
				set robotid=$p(item,"||",1),order=$p(item,"||",2)
				set ompid=$p(^Robot.OrderReference(order),"||",1),orderid=$p(^(order),"||",2)
				if ompid'=lastomp,lastomp'="",'$l(rxorder) use reportfile w !,linestr,!
				set lastomp=ompid
				set omp=##class(Robot.OMPDetails).%OpenId(ompid)
				set error=omp.OMPRequestStatus
				set rx=omp.Orders.GetAt(orderid).TriMedReferenceNumber
				if $l(rxorder),rx'=rxorder continue
				if rx'=last set last=rx,scount=scount+1
				set create=$lg(^Robot.TCPOutboundQueue("DispenseRequest",item,ts),1)
				use reportfile w !,"Request for OMP: ",ompid," Order: ",order," on script: ",rx," Script Count: (",scount,") Line Count: ("_count_")",!!
				set rec=^Robot.TCPOutboundQueue("DispenseRequest",item,ts)
				if $l(rec) {
					set msg=$lg(rec,3) kill data,refdata
					set sc=##class(Robot.Mapping.MessageDefinitions).UnpackMessage("A","DispenseRequest",robotid,msg,"data","refdata",0,0)
					set port=$g(data("DeliveryPort")),ean=$g(data("ProductCode")),qty=$g(data("Quantity"))
					if $d(pArray(ean)) {
						set nappi=$lg(pArray(ean),1),nappiname=$lg(pArray(ean),2)
					}
					else {
						set (nappi,nappiname)=""
						set sc=##class(Robot.Stock.StockMaster).GetNAPPICode(ean,.nappi)
						if $l(nappi) set nappiobj=##class(Robot.Stock.StockMaster).%OpenId(nappi) if $IsObject(nappiobj) set nappiname=nappiobj.ProductDescription
						set pArray(ean)=$lb(nappi,nappiname)
					}
					use reportfile w "Created: (",$lg(rec,1),") Written: (",$lg(rec,2),") Message: (",$tr($lg(rec,3),$c(0),"~"),")",!
					use reportfile w "NAPPI: (",nappi,")  Barcode: (",ean,")  Description: (",nappiname,")  Quantity Ordered: (",qty,")",!!
				}

				use reportfile w "Order Status: ",$s(omp.OMPRequestStatus:"OK",1:$system.Status.GetErrorText(omp.OMPRequestStatus)),!
				use reportfile w !,"Responses:",!!
				set rts=""
				for {
					set rts=$o(^Robot.Archive.TCPInboundQueue("DispenseResponse",item,rts)) q:rts=""
					set rec=$g(^Robot.Archive.TCPInboundQueue("DispenseResponse",item,rts))
					if $l(rec) {
						set msg=$lg(rec,3) kill data,refdata
						set sc=##class(Robot.Mapping.MessageDefinitions).UnpackMessage("a","DispenseResponse",1,msg,"data","refdata",0,0)
						set port=$g(data("DeliveryPort")),status=$g(data("DispenseStatus")),ean=$g(data("ProductCode")),qty=$g(data("Quantity"))
						if $d(pArray(ean)) {
							set nappi=$lg(pArray(ean),1),nappiname=$lg(pArray(ean),2)
						}
						else {
							set (nappi,nappiname)=""
							set sc=##class(Robot.Stock.StockMaster).GetNAPPICode(ean,.nappi)
							if $l(nappi) set nappiobj=##class(Robot.Stock.StockMaster).%OpenId(nappi) if $IsObject(nappiobj) set nappiname=nappiobj.ProductDescription
							set pArray(ean)=$lb(nappi,nappiname)
						}
						use reportfile w "Received: (",$lg(rec,1),")  Processed: (",$lg(rec,2),")  Message: (",$tr($lg(rec,3),$c(0),"~"),")",!
						use reportfile w "Nappi: (",nappi,")  Barcode: (",ean,")  Description: (",nappiname,")  Status: (",$s(+status=0:"Busy",+status=1:"In Queue",+status=2:"Queue Full",+status=3:"Cancelled",+status=4:"Complete",1:"Partial"),")"_$s(+status'=4:"  Quantity Ordered: ",1:"  Quantity Dispensed: "),qty,!!
					}
				}
				set count=count+1
				if $d(^Robot.Archive.TCPOutboundQueue("PDUPrinterRequest",item)) {
					use reportfile w !,"PDU Label Printer",!
					set prts=""
					for {
						set prts=$o(^Robot.Archive.TCPOutboundQueue("PDUPrinterRequest",item,prts)) quit:item=""
						set rec=$g(^Robot.Archive.TCPOutboundQueue("PDUPrinterRequest",item,prts))
						if $l(rec) use reportfile w "Label Requested: ",$lg(rec,1)," Printed: ",$lg(rec,2)," Message: ",$lg(rec,3),!
					}
				}
				set hl7=$o(^Robot.Archive.TCPOutboundQueue("RDSHL7Response",ompid,""))
				if $l(hl7) {
					set enddt=$lg(^Robot.Archive.TCPOutboundQueue("RDSHL7Response",ompid,hl7),2)
					use reportfile w !,"HL7 RDS (Result) Message at "_$lg(^Robot.Archive.TCPOutboundQueue("RDSHL7Response",ompid,hl7),2),!
					use reportfile w !,"Total Time: ",$system.SQL.DATEDIFF("s",create,enddt),!
				}
				else {
					set enddt=$zdt($h,3)
					use reportfile w !,"HL7 RDS (Result) Message not sent yet at "_$zdt($h,3),!
					use reportfile w !,"Total Time: ",$system.SQL.DATEDIFF("s",create,enddt),!
				}

			}
		}
	}
	if '$l(rxorder) {
		use reportfile write !,linestr,!
		set robot="",status=""
		for {
			set robot=$o(^Robot.Archive.TCPInboundQueue("StatusResponse",robot)) quit:robot=""
			use reportfile write !!,"Robot Status Summary for Robot (",robot,")",!!
			set ts=""
			for {
				set ts=$o(^Robot.Archive.TCPInboundQueue("StatusResponse",robot,ts)) q:ts=""
				set rec=^Robot.Archive.TCPInboundQueue("StatusResponse",robot,ts)
				if $p($lg(rec,1)," ",1)>date quit
				if $p($lg(rec,1)," ",1)=date {
					if $lg(rec,3)'=status {
						use reportfile write $lg(rec,1)," ",$lg(rec,3),!
						set status=$lg(rec,3)
					}
				}
			}
		}
		use reportfile write !,linestr,!
		set robot="",ts=""
		for {
			set robot=$o(^Robot.TCPInboundQueue("UnknownDialogue",robot)) quit:robot=""
			use reportfile write !!,"Inbound Messages with an unknown Dialogue for Robot: (",robot,")",!!
			set ts=""
			for {
				set ts=$o(^Robot.TCPInboundQueue("UnknownDialogue",robot,ts)) q:ts=""
				set rec=^Robot.TCPInboundQueue("UnknownDialogue",robot,ts)
				if $p($lg(rec,1)," ",1)>date quit
				if $p($lg(rec,1)," ",1)=date {
					if $lg(rec,3)'=status {
						use reportfile write $lg(rec,1)," ",$lg(rec,3),!
						set status=$lg(rec,3)
					}
				}
			}
		}
	}
End	;
	close reportfile
	quit tSC	
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="DispenseAnalysis">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[date:%TimeStamp={$zdt($h,3)},runall:%Boolean=0,&path:%String,&reportfile:%String,&csvfile:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set path="c:\InterSystems\RobotInterface\"
	if $e(path,$l(path))'="\" set path=path_"\"
	if '##Class(%File).DirectoryExists(path) set sc=##class(%File).CreateDirectory(path) if 'sc set tSC=$system.Status.Error(5001,"Unable to create path: ("_path_")") goto End
	if '$l($g(reportfile)) set reportfile="Monthly Dispense Analysis Report "_$zd($h,3)_".csv"
	if '$l($g(csvfile)) set csvfile="Daily Dispense Analysis Totals "_$zd($h,3)_".csv"
	set reportfile=path_reportfile,csvfile=path_csvfile
	open reportfile:("WNS"):0 else  set tSC=$system.Status.Error(5001,"Unable to open Report File: ("_reportfile_")") goto End
	open csvfile:("WNS"):0 else  set tSC=$system.Status.Error(5001,"Unable to open CSV File: ("_csvfile_")") goto End
	set repyear=+$p(date,"-",1),repmonth=+$p(date,"-",2),repday=+$p(date,"-",3)
	set omp="",gbl="^Robot.Dispense" 
	if runall {kill @gbl}
	else {kill @gbl@("Loading",repyear,repmonth,repday),@gbl@("Dispense",repyear,repmonth,repday),@gbl@("Scripts",repyear,repmonth,repday)}
	for {
		set omp=$o(^Robot.OMPDetailsD(omp)) quit:omp=""
		set obj=##class(Robot.OMPDetails).%OpenId(omp) if '$IsObject(obj) continue
		set year=+$p(obj.CreationDT,"-",1),month=+$p(obj.CreationDT,"-",2),day=+$p(obj.CreationDT,"-",3)
		if 'runall,(repyear'=year!(repmonth'=month)!(repday'=day)) continue
		set @gbl@("Scripts",year,month,day)=$g(@gbl@("Scripts",year,month,day),0)+1
		set orderkey="" kill array
		for {
			set order=obj.Orders.GetNext(.orderkey) quit:orderkey=""
			set itemkey=""
			for {
				set item=order.RXCDetails.GetNext(.itemkey) quit:itemkey=""
				set rxdkey=""
				for {
					set rxd=item.Dispensed.GetNext(.rxdkey) quit:rxdkey=""
					set prod=rxd.ComponentIdentifier if '$l(prod) set prod="Unknown"
					set oqty=+rxd.ComponentAmount
					set dqty=+rxd.ComponentAmountDispensed
					set robot="Unknown",system="Unknown"
					if $d(^Robot.OrderReference(rxdkey)) set robot=$p(^Robot.OrderReference(rxdkey),"||",7),system=$p(^Robot.OrderReference(rxdkey),"||",8)
					set rec=$g(@gbl@("Dispense",year,month,day,prod,robot,system),$lb(0,0))
					set $list(rec,1)=$lg(rec,1)+oqty,$list(rec,2)=$lg(rec,2)+dqty
					set @gbl@("Dispense",year,month,day,prod,robot,system)=rec
				}
			}
		}
	}
	
	set (batch,item,system,grn,date,time)="",bgbl="^Robot.StockBatchD"
	for {
		set batch=$o(@bgbl@(batch)) q:batch=""
		for {
			set item=$o(@bgbl@(batch,"Items",item)) q:item=""
			for {
				set system=$o(@bgbl@(batch,"Item",item,"Details",system)) q:system=""
				set sysobj=##class(Robot.Systems).%OpenId(system)
				set robot=sysobj.Robot.MasterRobot.RobotId
				for {
					set grn=$o(@bgbl@(batch,"Item",item,"Details",system,grn)) q:grn=""
					for {
						set date=$o(@bgbl@(batch,"Item",item,"Details",system,grn,date)) q:date=""
						if 'runall {
							set dt=$zd(date,3),year=$p(dt,"-",1),month=$p(dt,"-",2),day=$p(dt,"-",3)
							if repyear'=year!(repmonth'=month)!(repday'=day) continue
						}
						for {
							set time=$o(@bgbl@(batch,"Item",item,"Details",system,grn,date,time)) q:time=""
							set qut=+$lg(^(time),2)
							set @gbl@("Loading",year,month,day,item,robot,system)=$g(@gbl@("Loading",year,month,day,item,robot,system))+qty
						}
					}
				}
			}
		}
	}
	
	set (year,month,day)=""
	for {
		set year=$o(@gbl@("Scripts",year)) q:year=""
		for {
			set month=$o(@gbl@("Scripts",year,month)) q:month=""
			set total=0
			for {
				set day=$o(@gbl@("Scripts",year,month,day)) q:day=""
				set total=total+@gbl@("Scripts",year,month,day)
			}
			set @gbl@("Scripts",year,month)=total
		}
	}
			

	use csvfile write "Year",$c(9),"Month",$c(9),"Day",$c(9),"NAPPI",$c(9),"EAN",$c(9),"Description",$c(9),"Robot",$c(9),"System",$c(9),"Ordered",$c(9),"Dispensed",$c(9),"Amount Loaded",! set headings=1
	set (year,month,day,prod,robot,system)=""
	for {
		set year=$o(@gbl@("Dispense",year)) quit:year=""
		for {
			set month=$o(@gbl@("Dispense",year,month)) quit:month=""
			set scripts=@gbl@("Scripts",year,month)
			for {
				set day=$o(@gbl@("Dispense",year,month,day)) quit:day=""
				for {
					set prod=$o(@gbl@("Dispense",year,month,day,prod)) q:prod=""
					if prod="Unknown" set nappi="Unknown"
					else  set sc=##class(Robot.Stock.StockMaster).GetNAPPICode(prod,.nappi,.desc) if 'sc set nappi="Unknown"
					for {
						set robot=$o(@gbl@("Dispense",year,month,day,prod,robot)) q:robot=""
						for {
							set system=$o(@gbl@("Dispense",year,month,day,prod,robot,system)) q:system=""
							set oqty=$lg(@gbl@("Dispense",year,month,day,prod,robot,system),1),dqty=$lg(@gbl@("Dispense",year,month,day,prod,robot,system),2),count=$lg(@gbl@("Dispense",year,month,day,prod,robot,system),3)							
							set load=+$g(@gbl@("Loading",year,month,day,nappi,robot,system))
							use csvfile write year,$c(9),month,$c(9),day,$c(9),nappi,$c(9),prod,$c(9),desc,$c(9),robot,$c(9),system,$c(9),oqty,$c(9),dqty,$c(9),load,!
							set rec=$g(@gbl@("Morder",year,month,oqty,prod)),modqty=$lg(rec,1)+dqty,moload=$lg(rec,3)+load,moavg=$j((modqty/scripts)*100,0,2)
							set @gbl@("MOrder",year,month,oqty,prod)=$lb(modqty,moavg,moload)
						}
					}
				}
			}
		}
	}
	
	use reportfile write "Year",$c(9),"Month",$c(9),"Product",$c(9),"NAPPI",$c(9),"Description",$c(9),"Total Ordered",$c(9),"Total Dispensed",$c(9),"Percentage of Scripts",$c(9),"Total Loaded",!
	set (x,y,z,w)="",headings=0
	for {
		set x=$o(@gbl@("MOrder",x)) q:x=""
		for {
			set y=$o(@gbl@("MOrder",x,y)) q:y=""
			for {
				set z=$o(@gbl@("MOrder",x,y,z),-1) q:z=""
				for {
					set w=$o(@gbl@("MOrder",x,y,z,w)) quit:w=""
					set dqty=$lg(@gbl@("MOrder",x,y,z,w),1),avg=$lg(@gbl@("MOrder",x,y,z,w),2),load=$lg(@gbl@("MOrder",x,y,z,w),3)
					set nappi="",sc=##class(Robot.Stock.StockMaster).GetNAPPICode(w,.nappi,.desc)
					use reportfile write x,$c(9),y,$c(9),w,$c(9),nappi,$c(9),desc,$c(9),z,$c(9),dqty,$c(9),avg,"%",!
				}
			}
		}
	}
End	;
	if $l($g(csvfile)) close csvfile
	if $l($g(reportfile)) close reportfile
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="DailyDispenseAnalysis">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[date:%Date,&path:%String,&csvfile:%String,&sumcsvfile:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Get Min across SB's
	// Get Max across SB's
	// Get Diff
	// Take 75%
	// Add Min
	// x2 -> Replenishment
	set $ztrap="Error",tSC=$$$OK
	if '$l($g(date)) set date=$zd($h,3)
	if $g(path)="" set path="c:\InterSystems\RobotInterface\"
	if $e(path,$l(path))'="\" set path=path_"\"
	if '##Class(%File).DirectoryExists(path) set sc=##class(%File).CreateDirectory(path) if 'sc set tSC=$system.Status.Error(5001,"Unable to create path: ("_path_")") goto End
	if '$l($g(csvfile)) set csvfile="Dispense Analysis "_$zd($h,3)_".csv"
	if '$l($g(sumcsvfile)) set sumcsvfile="Dispense Analysis by System "_$zd($h,3)_".csv"
	set csvfile=path_csvfile,sumcsvfile=path_sumcsvfile
	open csvfile:("WNS"):0 else  set tSC=$system.Status.Error(5001,"Unable to open Totals CSV File: ("_csvfile_")") goto End
	open sumcsvfile:("WNS"):0 else  set tSC=$system.Status.Error(5001,"Unable to open Summary CSV File: ("_sumcsvfile_")") goto End
	set temp="^Robot.DispenseTemp" kill @temp
	set omp=""
	set gbl="^Robot.Metrics.Dispense(""Day"","_$zdh(date,3)_")" kill @gbl
	set @gbl=$lb("",$system.SQL.DATENAME("DW",date))
	for {
		set omp=$o(^Robot.OMPDetailsD(omp)) quit:omp=""
		set obj=##class(Robot.OMPDetails).%OpenId(omp) if '$IsObject(obj) continue
		set day=$p(obj.CreationDT," ",1) if day'=date continue
		set port=obj.RobotPort.PortCode
		set orderkey=""
		for {
			set order=obj.Orders.GetNext(.orderkey) quit:orderkey=""
			set itemkey=""
			for {
				set item=order.RXCDetails.GetNext(.itemkey) quit:itemkey=""
				set nappicode=item.ComponentIdentifier
				set sc=##class(Robot.Stock.StockMaster).GetEANCode(nappicode,.prod,.desc) if '$l(prod) set prod="Unknown-"_nappicode
				set @temp@(prod)=$lb(nappicode,desc)
				set rxdkey=""
				for {
					set rxd=item.Dispensed.GetNext(.rxdkey) quit:rxdkey=""
					if $d(^Robot.OrderReference(rxdkey)) {
						set robotid=$p(^Robot.OrderReference(rxdkey),"||",7),system=$p(^Robot.OrderReference(rxdkey),"||",8)
						set dqty=rxd.ComponentAmountDispensed
						set rec=$g(@gbl@(prod),$lb(0))
						set $list(rec,1)=$lg(rec,1)+dqty
						set @gbl@(prod)=rec
						if $d(@gbl@(prod,system)) set sysrec=@gbl@(prod,system)
						else  set sysrec=$lb(0)
						set $list(sysrec,1)=$lg(sysrec,1)+dqty
						set @gbl@(prod,system)=sysrec
					}
				}
			}
		}
	}
	use csvfile write "Product,NAPPI,Description,Total Dispensed",!
	use sumcsvfile write "Product,NAPPI,Description,System,Total Dispensed",!
	set prod=""
	for {
		set prod=$o(@gbl@(prod)) quit:prod=""
		set nappi=$lg(@temp@(prod),1),desc=$lg(@temp@(prod),2)
		use csvfile write prod,",",nappi,",",desc,",",$lg(@gbl@(prod),1),!
		set sys=""
		for {
			set sys=$o(@gbl@(prod,sys)) quit:sys=""
			use sumcsvfile write prod,",",nappi,",",desc,",",sys,",",$lg(@gbl@(prod,sys),1),!
		}
		use sumcsvfile write !
	}
End	;
	if $g(temp)'="" kill @temp
	close csvfile,sumcsvfile
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="BuildDispenseMetrics">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[fromdate:%Date,&path:%String,&csvfile:%String,&sumcsvfile:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	kill ^Robot.Metrics.Dispense("Day")
	set fd=$zdh($g(fromdate,"2016-09-01"),3)
	if $g(path)="" set path="c:\InterSystems\RobotInterface\"
	if $e(path,$l(path))'="\" set path=path_"\"
	if '##Class(%File).DirectoryExists(path) set sc=##class(%File).CreateDirectory(path) if 'sc set tSC=$system.Status.Error(5001,"Unable to create path: ("_path_")") goto End
	if '$l($g(csvfile)) set csvfile="Dispense Analysis "_$zd($h,3)_".csv"
	if '$l($g(sumcsvfile)) set sumcsvfile="Dispense Analysis by System "_$zd($h,3)_".csv"
	set csvfile=path_csvfile,sumcsvfile=path_sumcsvfile
	open csvfile:("WNS"):0 else  set tSC=$system.Status.Error(5001,"Unable to open Totals CSV File: ("_csvfile_")") goto End
	open sumcsvfile:("WNS"):0 else  set tSC=$system.Status.Error(5001,"Unable to open Summary CSV File: ("_sumcsvfile_")") goto End
	for day=fd:1:($h-1) {
		set dayofweek=$system.SQL.DATENAME("DW",day)
		if dayofweek="Saturday"!(dayofweek="Sunday") continue
		set (dir,file1,file2)=""
		set sc=..DailyDispenseAnalysis($zd(day,3),.dir,.file1,.file2)
	}
End	;
	kill @temp
	close csvfile,sumcsvfile
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Reports.DispenseD</DataLocation>
<DefaultData>DispenseDefaultData</DefaultData>
<IdLocation>^Robot.Reports.DispenseD</IdLocation>
<IndexLocation>^Robot.Reports.DispenseI</IndexLocation>
<StreamLocation>^Robot.Reports.DispenseS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="DispenseDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Reports.Logs">
<Super>%Persistent</Super>
<TimeChanged>64198,34893.416737</TimeChanged>
<TimeCreated>64150,77746.878799</TimeCreated>

<Method name="DumpEnsembleLog">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[date:%Date={$zd($h,3)},config:%String,&file:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set path="c:\InterSystems\RobotInterface\"
	if $e(path,$l(path))'="\" set path=path_"\"
	if '##Class(%File).DirectoryExists(path) set sc=##class(%File).CreateDirectory(path) if 'sc set tSC=$system.Status.Error(5001,"Unable to create path: ("_path_")") goto End
	set file=$g(file,path_"Ensemble Log "_$zd($h,3)_".txt")
	set config=$g(config,"Robot.RobotTCPOperation")
	open file:("WNS"):0
	else  use 0 write "File not open" quit
	set x=""
	for {
		set x=$o(^Ens.Util.LogD(x),-1) quit:x=""  set str=^(x)
		if $l(config),$lg(str,2)=config,$p($lg(str,8)," ",1)=date {
			use file write x," ",$lg(str,2)," ",$lg(str,8)," ",$lg(str,7),!
		}
	}
End	;
	close file
	quit tSC
Error	;
	use file w !!,"Error: ",$ze
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="DumpEnsembleLoadingLog">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[date:%Date={$zd($h,3)},config:%String,&file:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set path="c:\InterSystems\RobotInterface\"
	if $e(path,$l(path))'="\" set path=path_"\"
	if '##Class(%File).DirectoryExists(path) set sc=##class(%File).CreateDirectory(path) if 'sc set tSC=$system.Status.Error(5001,"Unable to create path: ("_path_")") goto End
	set file=$g(file,path_"Ensemble Log "_$zd($h,3)_".csv")
	set config=$g(config,"Robot.RobotTCPOperation")
	open file:("WNS"):0
	else  use 0 write "File not open" quit
	set x=""
	for {
		set x=$o(^Ens.Util.LogD(x),-1) quit:x=""  set str=^(x)
		if $l(config),$lg(str,2)=config,$p($lg(str,8)," ",1)=date {
			if ($lg(str,7)["Written Message: (I")!($lg(str,7)["Message Read: (i") {
				use file write $lg(str,2),",",$lg(str,8),",",$lg(str,7),!
			}
		}
	}
End	;
	close file
	quit tSC
Error	;
	use file w !!,"Error: ",$ze
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="DumpEnsembleReadWriteLog">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[date:%Date={$zd($h,3)},config:%String,&file:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set path="c:\InterSystems\RobotInterface\"
	if $e(path,$l(path))'="\" set path=path_"\"
	if '##Class(%File).DirectoryExists(path) set sc=##class(%File).CreateDirectory(path) if 'sc set tSC=$system.Status.Error(5001,"Unable to create path: ("_path_")") goto End
	set file=$g(file,path_"Ensemble Log "_$zd($h,3)_".csv")
	set config=$g(config,"Robot.RobotTCPOperation")
	open file:("WNS"):0
	else  use 0 write "File not open" quit
	set x=""
	for {
		set x=$o(^Ens.Util.LogD(x),-1) quit:x=""  set str=^(x)
		if $l(config),$lg(str,2)=config,$p($lg(str,8)," ",1)=date {
			if ($lg(str,7)["Written Message: (")!($lg(str,7)["Message Read: (") {
				use file write $lg(str,2),",",$lg(str,8),",",$lg(str,7),!
			}
		}
	}
End	;
	close file
	quit tSC
Error	;
	use file w !!,"Error: ",$ze
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Reports.LogsD</DataLocation>
<DefaultData>LogsDefaultData</DefaultData>
<IdLocation>^Robot.Reports.LogsD</IdLocation>
<IndexLocation>^Robot.Reports.LogsI</IndexLocation>
<StreamLocation>^Robot.Reports.LogsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="LogsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Reports.Metrics">
<Super>%Persistent</Super>
<TimeChanged>64156,38243.660286</TimeChanged>
<TimeCreated>64156,38243.534117</TimeCreated>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Reports.MetricsD</DataLocation>
<DefaultData>MetricsDefaultData</DefaultData>
<IdLocation>^Robot.Reports.MetricsD</IdLocation>
<IndexLocation>^Robot.Reports.MetricsI</IndexLocation>
<StreamLocation>^Robot.Reports.MetricsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="MetricsDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Reports.ReportParameters">
<Super>%Persistent</Super>
<TimeChanged>64205,35619</TimeChanged>
<TimeCreated>64151,11095.170976</TimeCreated>

<Property name="ParameterNumber">
<Type>%Integer</Type>
</Property>

<Property name="ParameterName">
<Type>%String</Type>
</Property>

<Property name="ParameterValue">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="ParameterValueType">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",Literal,Expression,"/>
</Property>

<Property name="DefaultValue">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DefaultValueType">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",Literal,Expression,"/>
</Property>

<Property name="ByReference">
<Type>%Boolean</Type>
</Property>

<Property name="Report">
<Type>Robot.Reports.Reports</Type>
<Cardinality>parent</Cardinality>
<Inverse>Parameters</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>ParameterNumber</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("Parameters")</DataLocation>
<DefaultData>ReportParametersDefaultData</DefaultData>
<IdLocation>^Robot.Reports.ReportsC("Parameters")</IdLocation>
<IndexLocation>^Robot.Reports.ReportParamI</IndexLocation>
<StreamLocation>^Robot.Reports.ReportParamS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ReportParametersDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ParameterName</Value>
</Value>
<Value name="3">
<Value>ParameterValue</Value>
</Value>
<Value name="4">
<Value>ParameterValueType</Value>
</Value>
<Value name="5">
<Value>DefaultValue</Value>
</Value>
<Value name="6">
<Value>DefaultValueType</Value>
</Value>
<Value name="7">
<Value>ByReference</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Reports.Reports">
<Super>%Persistent</Super>
<TimeChanged>64196,43630.426392</TimeChanged>
<TimeCreated>64151,11177.519422</TimeCreated>

<Property name="ReportID">
<Type>%String</Type>
</Property>

<Property name="ReportDescription">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="ReportMessage">
<Type>%Text</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="ReportClass">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="ReportMethod">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="SentBy">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="SubjectPrefix">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="RunAt">
<Type>%Time</Type>
<Parameter name="FORMAT" value="1"/>
</Property>

<Property name="RunTS">
<Type>%TimeStamp</Type>
</Property>

<Property name="RunStatus">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="ConstructClone">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="DeleteReportAfterRun">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="Attachments">
<Type>%String</Type>
<Collection>list</Collection>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>ReportID</Properties>
<Unique>1</Unique>
</Index>

<Property name="Recipients">
<Type>Robot.Personell</Type>
<Collection>list</Collection>
</Property>

<Property name="Parameters">
<Type>Robot.Reports.ReportParameters</Type>
<Cardinality>children</Cardinality>
<Inverse>Report</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="RunReport">
<PublicList>att,status,param1,param2,param3,param4,param5,param6,param7,param8,param8,param9,param10</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	kill att, status, param1, param2, param3, param4, param5, param6, param7, param8, param8, param9, param10
	set code="set status=##Class("_..ReportClass_")."_..ReportMethod_"("
	for i=1:1:..Parameters.Count()  {
		set parameter=..Parameters.GetAt(i)
		set pName=parameter.ParameterName
		set pValue=parameter.ParameterValue
		set pValueType=parameter.ParameterValueType
		set pDefault=parameter.DefaultValue
		set pDefaultType=parameter.DefaultValueType
		set pByRef=parameter.ByReference
		if pByRef set byref(i)=pName
		if $l(pValue) {
			set str="set param"_i_"="_$s(pValueType="Literal":$c(34)_pValue_$c(34),1:pValue) x str
		}
		elseif $l(pDefault) {
			set str="set param"_i_"="_$s(pDefaultType="Literal":$c(34)_pDefault_$c(34),1:pDefault) x str
		}
		else {
			set str="set param"_i_"=""""" x str
		}
		set code=code_$s(pByRef:".",1:"")_"param"_i_","
	}
	if $e(code,$l(code))="," set code=$e(code,1,$l(code)-1)_")" x code
	
	set x="" for {
		set x=$o(byref(x)) quit:x=""
		set code="set "_byref(x)_" = param"_x x code
	}
	set count=..Attachments.Count()
	for i=1:1:count {
		set att=..Attachments.GetAt(i)
		set code="set status=$d("_att_")" x code
		if status {
			set att(i)=att
		}
	}
	for i=1:1:..Attachments.Count()  do ..Attachments.RemoveAt(1)
	set i="" for  set i=$o(att(i)) quit:i=""  do ..Attachments.Insert(@att(i))
	if ..ConstructClone set ..ReportID=..ReportID_"|Clone|"_$i(^Robot.Reports.ReportCount(..ReportID))
	set sc=..%Save()
End	;
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Reports.ReportsD</DataLocation>
<DefaultData>ReportsDefaultData</DefaultData>
<IdLocation>^Robot.Reports.ReportsD</IdLocation>
<IndexLocation>^Robot.Reports.ReportsI</IndexLocation>
<StreamLocation>^Robot.Reports.ReportsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ReportsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ReportDescription</Value>
</Value>
<Value name="3">
<Value>ReportMessage</Value>
</Value>
<Value name="4">
<Value>ReportClass</Value>
</Value>
<Value name="5">
<Value>ReportMethod</Value>
</Value>
<Value name="6">
<Value>SentBy</Value>
</Value>
<Value name="7">
<Value>SubjectPrefix</Value>
</Value>
<Value name="8">
<Value>RunAt</Value>
</Value>
<Value name="9">
<Value>RunTS</Value>
</Value>
<Value name="10">
<Value>Attachments</Value>
</Value>
<Value name="11">
<Value>RunStatus</Value>
</Value>
<Value name="12">
<Value>Recipients</Value>
</Value>
<Value name="13">
<Value>ConstructClone</Value>
</Value>
<Value name="14">
<Value>DeleteReportAfterRun</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Reports.StockLevels">
<Super>%Persistent</Super>
<TimeChanged>64734,55389</TimeChanged>
<TimeCreated>64150,86325.93093</TimeCreated>

<Method name="ManualDispenses">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set file="c:\temp\Manual Dispenses"
	open file:("WNS"):0
	set gbl="^Robot.Archive.TCPInboundQueue(""DispenseResponse"")"
	set (x,y)=""
	for {
		set x=$o(@gbl@(x)) q:x=""
		set robot=$p(x,"||",1),orderref=$p(x,"||",2)
		If '$d(^Robot.OrderReference(orderref)) continue
		for {
			set y=$o(@gbl@(x,y)) q:y=""
			if $d(@gbl@(x,y,"data")) {
				if $g(@gbl@(x,y,"data","DispenseStatus"))'=4 continue
				set prod=$g(@gbl@(x,y,"data","ProductCode"))
				set qty=$g(@gbl@(x,y,"data","Quantity"))
			}
		}
	}
]]></Implementation>
</Method>

<Method name="CreateStockReport">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&csvfile:%String(MAXLEN=200),&sumcsvfile:%String(MAXLEN=200)]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	// first of all lets get yesterdays dispense figures
	set sc=##class(Robot.Reports.Dispense).DailyDispenseAnalysis($zd($h-1,3))
	//
	set path="c:\InterSystems\RobotInterface\"
	if $e(path,$l(path))'="\" set path=path_"\"
	if '##Class(%File).DirectoryExists(path) set sc=##class(%File).CreateDirectory(path) if 'sc set tSC=$system.Status.Error(5001,"Unable to create path: ("_path_")") goto End
	if '$l($g(csvfile)) set csvfile=path_"Stock Levels "_$zd($h,3)_".csv"
	if '$l($g(sumcsvfile)) set sumcsvfile=path_"Summary Stock Levels "_$zd($h,3)_".csv"
	open csvfile:("WNS"):0 else  set tSC=$system.Status.Error(5001,"Unable to open CSV File: ("_csvfile_")") goto End
	open sumcsvfile:("WNS"):0 else  set tSC=$system.Status.Error(5001,"Unable to open CSV File: ("_sumcsvfile_")") goto End
	use csvfile write "NAPPI,Barcode,Description,Robot,System,Stock on Hand,Dispensed",!
	use sumcsvfile write "NAPPI,Barcode,Description,Quantity,Dispensed",!
	kill array set s="" for  set s=$o(^Robot.SystemsD(s)) q:s=""  set array(s)=$lg(^Robot.SystemsD(s),2)
	set day=$zd($h,12) set datelist=""
	set robot="",nappi="",gbl="^Robot.Reports.StockTemp"
	for {
		set nappi=$o(^Robot.Stock.StockMasterD(nappi)) quit:nappi=""
		set nappiobj=##class(Robot.Stock.StockMaster).%OpenId(nappi)
		;if 'nappiobj.Active set nappiobj="" continue
		//if nappiobj.Suspended set nappiobj="" continue
		set ean=nappiobj.EANCode,desc=nappiobj.ProductDescription if '$l(ean) set ean="Unknown"
		set itemtotal=0,syscount=1,dispensecount=0
		for {
			set robot=$o(^Robot.Stock.StockMasterD(nappi,"StockLevels",robot)) q:robot=""
			set system=""
			for  {
				set sdamt=0,soh=0
				set system=$o(^Robot.Stock.StockMasterD(nappi,"StockLevels",robot,"Systems",system)) q:system=""
				set sysobj=##class(Robot.Stock.StockLevelSystems).%OpenId(nappi_"||"_robot_"||"_system)
				if $IsObject(sysobj) set soh=+sysobj.Quantity
				for j=1:1:7 {
					if $zd($h-j,12)'="Sunday",$zd($h-j,12)'="Saturday" u 0 write "Got One" set sdamt=sdamt+$lg($g(^Robot.Metrics.Dispense("Day",$h-j,ean,system),$lb(0)),1)
				}
				use csvfile write nappi,",",ean,",",desc,",",robot,",",system,",",soh,",",sdamt,!
				set itemtotal=itemtotal+soh,dispensecount=dispensecount+sdamt
			}
		}
		use sumcsvfile write nappi,",",ean,",",desc,",",itemtotal,",",dispensecount,!
	}
	close csvfile
	close sumcsvfile
End	;
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="FindProductDuplicates">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set nappi="",file="c:\temp\ItemsInMediMatandSB.txt"
	open file:("WNS"):0
	else  write !,"Cannot open file "_file quit
	for {
		set nappi=$o(^Robot.Stock.StockMasterD(nappi)) q:nappi=""
		set sys1=0,sys2=0,sys=""
		for {
			set sys=$o(^Robot.Stock.StockMasterD(nappi,"StockLevels",1,"StorageDetails",sys)) quit:sys=""
			if sys="A01" set sys1=1
			if sys="A02"!(sys="A03")!(sys="A04")!(sys="A05") set sys2=1
		}
		if sys1,sys2 use file w nappi,",",$lg(^Robot.Stock.StockMasterD(nappi),10),",",$lg(^Robot.Stock.StockMasterD(nappi),5),!
	}
	close file
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Reports.StockLevelsD</DataLocation>
<DefaultData>StockLevelsDefaultData</DefaultData>
<IdLocation>^Robot.Reports.StockLevelsD</IdLocation>
<IndexLocation>^Robot.Reports.StockLevelsI</IndexLocation>
<StreamLocation>^Robot.Reports.StockLevelsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="StockLevelsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.RobotFileOperation">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64121,55153.012412</TimeChanged>
<TimeCreated>63949,53450.082678</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.File.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.File.OutboundAdapter</Type>
</Property>

<Property name="File">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set device=$o(^Robot.DeviceI("I2",..%ConfigName,""))
	$$$TRACE("File Device: ("_device_")")
	if '$l(device) set tSC=$system.Status.Error(5001,"No Device Details found for Production Item: ("_..%ConfigName_")") goto End
	set devobj=##class(Robot.Device).%OpenId(device)
	if '$IsObject(devobj) set tSC=$system.Status.Error(5001,"No Device Object found for Device: ("_device_")") goto End
	set ..File=$p(..%ConfigName,".",2)_" "_$tr($zdt($h,3),":- ","")_".txt"
	set robotid=""
	for  {
		set robotid=$o(^Robot.RobotsD(robotid)) quit:robotid=""
		set robotobj=##class(Robot.Robots).%OpenId(robotid)
		if $IsObject(robotobj) {
			set ^Robot.TCPMessageData(robotid,"Code")=robotobj.MessageDialogueCodeExpr
			set diagtype=""
			for {
				set dialogue=robotobj.RobotMessages.GetNext(.diagtype) quit:diagtype=""
				set ^Robot.TCPMessageData(robotid,"Messages",dialogue.DialogueCode)=$lb(dialogue.DialogueType,dialogue.Message.MessageCode)
			}
		}
	}
End	;
	Quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="WriteToFile">
<FormalSpec>pRequest:Robot.RobotRequest,pResponse:Robot.RobotResponse</FormalSpec>
<PublicList>data,refdata,message,msg,val,retval</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set tSC=..Adapter.PutString(..File,$c(13,10)_"New Entry for OMP: "_pRequest.OMPID_" at "_$zdt($h,3)_$c(13,10))
	set key=""
	for {
		set message=pRequest.Messages.GetNext(.key) quit:key=""
		set tSC=..Adapter.PutString(..File,"Received: "_message_$c(13,10)) if 'tSC goto End
		if $d(^Robot.TCPMessageData(pRequest.Robot,"Code")) set code=^("Code")
		set type="",msg=message x code if $l(retval) set type=retval
		set dialogue="",messagedef=""
		if type="A" set dialogue="DispenseRequest",messagedef=type
		if type="a" set dialogue="DispenseResponse",messagedef=type
		if type="S" set dialogue="StatusRequest",messagedef=type
		if type="s" set dialogue="StatusResponse",messagedef=type
		if type="B" set dialogue="StockLevelRequest",messagedef=type
		if type="b" set dialogue="StockLevelResponse",messagedef=type
		if $l(dialogue) {
			set tSC=..Adapter.PutString(..File,"Transform: "_message_$c(13,10))
			kill data,refdata
			set tSC=##class(Robot.Mapping.MessageDefinitions).UnpackMessage(messagedef,dialogue,1,message,"data","refdata",0,1)
			if messagedef="A" {
				set ts=$o(^Robot.TCPOutboundQueue(dialogue,data("OrderNumber"),""))
				if $l(ts) set $list(^Robot.TCPOutboundQueue(dialogue,data("OrderNumber"),ts),2)=$zdt($h,3)
				kill message
				set data("DialogueCode")="a"
				set data("DispenseStatus")=4
				set tSC=##class(Robot.Mapping.MessageDefinitions).CreateMessage("DispenseResponse",1,"data","refdata",.message) if 'tSC goto End
				$$$TRACE("Dispense Response: ("_message_")")
				if $l(message) {
					set no=$i(^Robot.TCPInboundQueue("DispenseResponse"))
					set ^Robot.TCPInboundQueue("DispenseResponse",data("OrderNumber"),no)=$lb($zdt($h,3),"",message)
					merge ^Robot.TCPInboundQueue("DispenseResponse",data("OrderNumber"),no,"data")=data
					set tSC=..Adapter.PutString(..File,"Inbound: "_message_$c(13,10)) if 'tSC goto End
				}
			}
			if type="S" {
				set ts=$o(^Robot.TCPOutboundQueue(dialogue,data("RobotID"),""))
				if $l(ts) set $list(^Robot.TCPOutboundQueue(dialogue,data("RobotID"),ts),2)=$zdt($h,3)
				kill message
				set data("DialogueCode")="s"
				set data("SystemState")=0
				set data("FieldLength")=13
				set data("ErrorText")="[1] Status OK"
				set data("RecordEndCharacter")=$c(0)
				set tSC=##class(Robot.Mapping.MessageDefinitions).CreateMessage("StatusResponse",1,"data","refdata",.message) if 'tSC goto End
				$$$TRACE("Status Response: ("_message_")")
				if $l(message) {
					set no=$i(^Robot.TCPInboundQueue("StatusResponse"))
					set ^Robot.TCPInboundQueue("StatusResponse",data("RobotID"),no)=$lb($zdt($h,3),"",message)
					merge ^Robot.TCPInboundQueue("StatusResponse",data("RobotID"),no,"data")=data
					set tSC=..Adapter.PutString(..File,"Inbound: "_message_$c(13,10)) if 'tSC goto End
				}
			}
			if type="B" {
				set ts=$o(^Robot.TCPOutboundQueue(dialogue,data("ProductCode"),""))
				if $l(ts) set $list(^Robot.TCPOutboundQueue(dialogue,data("ProductCode"),ts),2)=$zdt($h,3)
				kill message
				set data("DialogueCode")="b"
				set data("Quantity")=$r(1000)
				set data("LineCount")=1
				set tSC=##class(Robot.Mapping.MessageDefinitions).CreateMessage("StockLevelResponse",1,"data","refdata",.message) if 'tSC goto End
				if $l(message) {
					$$$TRACE("Stock Level Response: ("_message_")")
					set no=$i(^Robot.TCPInboundQueue("StockLevelResponse"))
					set ^Robot.TCPInboundQueue("StockLevelResponse",data("ProductCode"),no)=$lb($zdt($h,3),"",message)
					merge ^Robot.TCPInboundQueue("StockLevelResponse",data("ProductCode"),no,"data")=data
					set tSC=..Adapter.PutString(..File,"Inbound: "_message_$c(13,10)) if 'tSC goto End
				}
			}
		}
	}
End	;
	set pResponse=##class(Robot.RobotResponse).%New()
	set pResponse.OMPID=pRequest.OMPID,pResponse.Success=tSC
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
  <MapItem MessageType="Robot.RobotRequest">
    <Method>WriteToFile</Method>
  </MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="Robot.RobotMessages">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64151,54384.966855</TimeChanged>
<TimeCreated>63862,898.070465</TimeCreated>

<Property name="DialogueType">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",DispenseRequest,DispenseResponse,StatusRequest,StatusResponse,StorageRequest,StorageResponse,ProductRequest,ProductResponse,StockLevelRequest,StockLevelResponse,StockLevelDetailRequest,StockLevelDetailResponse"/>
</Property>

<Property name="Message">
<Type>Robot.Mapping.MessageDefinitions</Type>
<Required>1</Required>
</Property>

<Property name="DialogueCode">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Robot">
<Type>Robot.Robots</Type>
<Cardinality>parent</Cardinality>
<Inverse>RobotMessages</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>DialogueType</Properties>
<Unique>1</Unique>
</Index>

<Index name="DialogueIndex">
<Properties>DialogueCode:Exact</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("RobotMessages")</DataLocation>
<DefaultData>RobotMessagesDefaultData</DefaultData>
<IdLocation>^Robot.RobotsC("RobotMessages")</IdLocation>
<IndexLocation>^Robot.RobotMessagesI</IndexLocation>
<StreamLocation>^Robot.RobotMessagesS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="RobotMessagesDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Message</Value>
</Value>
<Value name="3">
<Value>DialogueCode</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.RobotRequest">
<Super>Ens.Request</Super>
<TimeChanged>64113,55399.727365</TimeChanged>
<TimeCreated>63641,21345.437785</TimeCreated>

<Property name="OMPID">
<Type>%String</Type>
</Property>

<Property name="OrderReference">
<Type>%String</Type>
</Property>

<Property name="Robot">
<Type>%String</Type>
</Property>

<Property name="PDU">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="SendNext">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="SendAll">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="Messages">
<Type>%String</Type>
<Collection>array</Collection>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>RobotRequestDefaultData</DefaultData>
<Data name="Messages">
<Attribute>Messages</Attribute>
<Structure>subnode</Structure>
<Subscript>"Robot.RobotRequest.Messages"</Subscript>
</Data>
<Data name="RobotRequestDefaultData">
<Structure>listnode</Structure>
<Subscript>"RobotRequest"</Subscript>
<Value name="1">
<Value>OMPID</Value>
</Value>
<Value name="2">
<Value>OrderReference</Value>
</Value>
<Value name="3">
<Value>Robot</Value>
</Value>
<Value name="4">
<Value>PDU</Value>
</Value>
<Value name="5">
<Value>SendNext</Value>
</Value>
<Value name="6">
<Value>SendAll</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.RobotResponse">
<Super>Ens.Response</Super>
<TimeChanged>63853,52566.868595</TimeChanged>
<TimeCreated>63641,21513.515631</TimeCreated>

<Property name="OMPID">
<Type>%String</Type>
</Property>

<Property name="Success">
<Type>%Status</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>DispenseResponseDefaultData</DefaultData>
<Data name="DispenseResponseDefaultData">
<Structure>listnode</Structure>
<Subscript>"DispenseResponse"</Subscript>
<Value name="1">
<Value>OMPID</Value>
</Value>
<Value name="2">
<Value>Success</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.RobotTCPOperation">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64778,44490.773622</TimeChanged>
<TimeCreated>63667,45935.79968</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.TCP.TextLineOutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.TCP.TextLineOutboundAdapter</Type>
</Property>

<Property name="ThisRobotId">
<Type>%String</Type>
</Property>

<Property name="Code">
<Type>%String</Type>
</Property>

<Property name="Robot">
<Type>%String</Type>
</Property>

<Property name="TestForZeroTCPRead">
<Type>%Boolean</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="SendRobotTCPMessage">
<FormalSpec>pRequest:Robot.RobotRequest,*pResponse:Robot.RobotResponse</FormalSpec>
<PublicList>data,refdata,msg,retval</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
Connect	;
	set $ztrap="Error",tSC=$$$OK,messagecount=0
	set writemessagecount=pRequest.Messages.Count()
	set pResponse=##class(Robot.RobotResponse).%New()
	set pResponse.OMPID=pRequest.OMPID
	set ..Robot=pRequest.Robot,robotobj=##class(Robot.Robots).%OpenId(..Robot),..ThisRobotId=robotobj.MasterRobot.%Id()
	//  ^Robot.TCPOperationLog(..ThisRobotId,$i(^Robot.TCPOperationLog(..ThisRobotId)))=$lb($zdt($h,3),"Request Robot: "_..Robot_" and This Robot: "_..ThisRobotId)
	// if ..Robot'=..ThisRobotId set ^Robot.TCPOperationLog($i(^Robot.TCPOperationLog))=$lb($zdt($h,3),"Warning: Message has different robot: ("_..Robot_") from this operations RobotID: ("_..ThisRobotId_")")
	set ..Code=$g(^Robot.TCPMessageData(..ThisRobotId,"Code"),"set retval=$e(msg,1)")
	set tSC=..WriteData(pRequest) if 'tSC goto End
	set tSC=..ReadData(pRequest, .messagecount) if 'tSC goto End
	if ..TestForZeroTCPRead,'messagecount,writemessagecount {
		set tSC=..Reconnect()
		if tSC goto Connect
	}
End	;
	set pResponse.Success=tSC
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="ReadData">
<FormalSpec><![CDATA[pRequest:Robot.RobotRequest,&messagecount:%Integer=0]]></FormalSpec>
<PublicList>data,refdata,msg,retval</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
Connect	;
	set $ztrap="Error",tSC=$$$OK
	if '..Adapter.Connected set tSC=..Reconnect() if 'tSC goto End
	for {
		set msg=""
		use ..Adapter.Device read msg:..Adapter.ReadTimeout
		if '$t quit
		set msg=$zstrip(msg,"<C")
		if '$l(msg) quit
		set messagecount=messagecount+1
		set ^Robot.TCPOperationLog(..ThisRobotId,$i(^Robot.TCPOperationLog(..ThisRobotId)))=$lb($zdt($h,3),"Read Message: ("_msg_")")
		set retval="" x ..Code
		if '$l(retval) {
			set ^Robot.TCPOperationLog(..ThisRobotId,$i(^Robot.TCPOperationLog(..ThisRobotId)))=$lb($zdt($h,3),"Unable to determine Message Type for message ("_msg_")")
			continue
		}
		if $d(^Robot.TCPMessageData(..ThisRobotId,"Messages",retval)) {
			set diagtype=$lg(^Robot.TCPMessageData(..ThisRobotId,"Messages",retval),1)
			set msgdef=$lg(^Robot.TCPMessageData(..ThisRobotId,"Messages",retval),2)
			kill data,refdata
			set sc=##class(Robot.Mapping.MessageDefinitions).UnpackMessage(msgdef,diagtype,..ThisRobotId,msg,"data","refdata",0,0)
			if 'sc do ##class(Robot.ProductionAlertErrors).ErrorAlert(..%ConfigName,"Unable to unpack Message","Message: ("_msg_")",1,3600) continue
			set no=$i(^Robot.TCPInboundQueue(diagtype))
			if $l($g(data("OrderNumber"))),",a,i,"[msgdef {
				set ^Robot.TCPInboundQueue(diagtype,..ThisRobotId_"||"_data("OrderNumber"),no)=$lb($zdt($h,3),"",msg)
				merge ^Robot.TCPInboundQueue(diagtype,..ThisRobotId_"||"_data("OrderNumber"),no,"data")=data
			}
			elseif $l($g(data("ProductCode"))),",b,"[msgdef {
				set productcode=data("ProductCode")
				set robot=data("RobotID")
				set ^Robot.TCPInboundQueue(diagtype,..ThisRobotId_"||"_productcode,no)=$lb($zdt($h,3),"",msg)
				merge ^Robot.TCPInboundQueue(diagtype,..ThisRobotId_"||"_productcode,no,"data")=data
				set bmsg=$g(data("b-Detail")) if '$l(bmsg) quit
				for i=1:1:10 {
					kill data,refdata
					set bsubmsg=$e(bmsg,1,80),bmsg=$e(bmsg,81,$l(bmsg)) if '$l(bsubmsg) quit
					set sc=##class(Robot.Mapping.MessageDefinitions).UnpackMessage("b-Sub",diagtype,pRequest.Robot,bsubmsg,"data","refdata",0,1)
					if 'sc do ##class(Robot.ProductionAlertErrors).ErrorAlert(..%ConfigName,"Unable to unpack Message","Message: ("_bsubmsg_")",1,3600) continue
					merge ^Robot.TCPInboundQueue(diagtype,..ThisRobotId_"||"_productcode,no,"data","b-Sub",i)=data
				}
			}
			elseif $l($g(data("BarCode1"))),",p,"[msgdef {
				set ^Robot.TCPInboundQueue(diagtype,..ThisRobotId_"||"_data("BarCode1"),no)=$lb($zdt($h,3),"",msg)
				merge ^Robot.TCPInboundQueue(diagtype,..ThisRobotId_"||"_data("BarCode1"),no,"data")=data
			}
			elseif $l($g(data("RobotID"))),",s,"[msgdef {
				set ^Robot.TCPInboundQueue(diagtype,..ThisRobotId,no)=$lb($zdt($h,3),"",msg)
				merge ^Robot.TCPInboundQueue(diagtype,..ThisRobotId,no,"data")=data
			}					
			else {
				set id=$i(^Robot.TCPInboundQueue(diagtype))
				set ^Robot.TCPInboundQueue(diagtype,pRequest.Robot_"||"_id,no)=$lb($zdt($h,3),"",msg)
				merge ^Robot.TCPInboundQueue(diagtype,pRequest.Robot_"||"_id,no,"data")=data
			}
		}
		else {
			set id=$i(^Robot.TCPInboundQueue("UnknownDialogue"))
			set ^Robot.TCPInboundQueue("UnknownDialogue",..ThisRobotId,id)=$lb($zdt($h,3),"",msg)
		}			
	}
	set ^Robot.TCPResponseCount($h)=messagecount
End	;
	quit tSC
Error	;
	set $ztrap=""
	if $ze["WRITE"!($ze["READ")!($ze["NOTOPEN") {
		set sc=##class(Robot.ProductionAlertErrors).ErrorAlert(..%ConfigName,$s($ze["WRITE":"WRITE",$ze["READ":"READ",1:"NOTOPEN"),$ze,1,3600)
		do ..Adapter.Disconnect()
		goto Connect
	}
	set tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="WriteData">
<FormalSpec>pRequest:Robot.RobotRequest</FormalSpec>
<PublicList>data,refdata,msg,retval</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
Connect	;
	set $ztrap="Error",tSC=$$$OK
	if '..Adapter.Connected set tSC=..Reconnect() if 'tSC goto End
	set key=""
	for {
		set msg=pRequest.Messages.GetNext(.key) quit:key=""
		if msg="" continue
		set retval="" x ..Code
		if '$l(retval)!(retval="none") set tSC=$system.Status.Error(5001,..%ConfigName_" Unable to determine message type on message ("_msg_")") goto End
		if $d(^Robot.TCPMessageData(pRequest.Robot,"Messages",retval)) set diag=$lg(^Robot.TCPMessageData(pRequest.Robot,"Messages",retval),1)
		use ..Adapter.Device write $c(2),msg,$c(3),!
		set ^Robot.TCPOperationLog(..ThisRobotId,$i(^Robot.TCPOperationLog(..ThisRobotId)))=$lb($zdt($h,3),"Write Message : ("_msg_")")
		if diag="DispenseRequest" {
			set item=$o(^Robot.TCPOutboundQueue(diag,key,""))
			if $l(item) {
				set $list(^Robot.TCPOutboundQueue(diag,key,item),2)=$zdt($h,3)
			}
		}
	}
End	;
	quit tSC
Error	;
	set $ztrap=""
	if $ze["WRITE"!($ze["READ")!($ze["NOTOPEN") {
		set sc=##class(Robot.ProductionAlertErrors).ErrorAlert(..%ConfigName,$s($ze["WRITE":"WRITE",$ze["READ":"READ",1:"NOTOPEN"),$ze)
		do ..Adapter.Disconnect()
		goto Connect
	}
	set tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="Reconnect">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set reconnect=0
Loop	;
	set $ztrap="Error",tSC=$$$OK
	do ..Adapter.Disconnect()
	do ..Adapter.Connect(..Adapter.ConnectTimeout)
	if '..Adapter.Connected {
		set reconnect=reconnect+1
		if reconnect>5 {
			do ##class(Robot.ProductionAlertErrors).ErrorAlert(..%ConfigName,"TCP Reconnect","Reconnect failed after 5 attempts",1,3600)
			set tSC=$system.Status.Error(5001,"Unable to reconnect to the Robot after 5 attempts")
		}
		if 'tSC goto End
		do ##class(Robot.ProductionAlertErrors).ErrorAlert(..%ConfigName,"Reconnect Attempt #: "_reconnect,1,3600)
		hang 2
		goto Loop
	}
End	;	
	if tSC hang 5
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set device=$o(^Robot.DeviceI("I1",..%ConfigName,""))
	if '$l(device) set tSC=$system.Status.Error(5001,"No Device Details found for Production Item: ("_..%ConfigName_")") goto End
	if $l(..Adapter.IPAddress) do ..Adapter.Disconnect()
	set devobj=##class(Robot.Device).%OpenId(device)
	if '$IsObject(devobj) set tSC=$system.Status.Error(5001,"No Device Object found for Device: ("_device_")") goto End
	set system=##class(Robot.SystemSettings).%OpenId("Robot")
	if $IsObject(system) set ..TestForZeroTCPRead=system.TestForZeroTCPRead
	set ..Adapter.IPAddress=devobj.DeviceTCPAddress
	set ..Adapter.Port=devobj.DeviceTCPPortNumber
	set ..Adapter.ReadTimeout=devobj.DeviceTCPReadTimeout
	set ..Adapter.ConnectTimeout=devobj.DeviceTCPConnectTimeout
	set ..Adapter.Terminators=$c(3)
	do ..Adapter.Connect(..Adapter.ConnectTimeout)
	set robotid=""
	for  {
		set robotid=$o(^Robot.RobotsD(robotid)) quit:robotid=""
		set robotobj=##class(Robot.Robots).%OpenId(robotid)
		set robot=robotobj.MasterRobot.%Id()
		if $IsObject(robotobj) {set robot=robotobj.MasterRobot.RobotId,robotobj=robotobj.MasterRobot,^Robot.TCPQueues(robot)=..%ConfigName}
		set ^Robot.TCPMessageData(robot,"Code")=robotobj.MessageDialogueCodeExpr
		set ^Robot.TCPOperationLog(robot,$i(^Robot.TCPOperationLog(robot)))=$lb($zdt($h,3),"RobotID: "_robotid_" Master Robot: "_robot_" Code: "_robotobj.MessageDialogueCodeExpr)
		set diagtype=""
		for {
			set dialogue=robotobj.RobotMessages.GetNext(.diagtype) quit:diagtype=""
			set ^Robot.TCPMessageData(robot,"Messages",dialogue.DialogueCode)=$lb(dialogue.DialogueType,dialogue.Message.MessageCode)
		}
	}
End	;
	hang 2
	Quit tSC
Error	;
	set $ztrap=""
	set tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="Robot.RobotRequest"> 
		<Method>SendRobotTCPMessage</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="Robot.Robots">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64212,71749.295834</TimeChanged>
<TimeCreated>63791,74630.275449</TimeCreated>

<Property name="RobotId">
<Type>%String</Type>
</Property>

<Property name="SystemCode">
<Type>Robot.Systems</Type>
</Property>

<Property name="RobotDescription">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="IsMasterRobot">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="MasterRobot">
<Type>Robot.Robots</Type>
</Property>

<Property name="Device">
<Type>Robot.Device</Type>
</Property>

<Property name="RobotOwnID">
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Given a Message (msg) this is the expression that will return the Dialogue Code of a message and

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// hence which message is being processed. The expression accepts msg and returns retval

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// e.g. set retval=$e(msg,1)

]]></Content>
</UDLText>

<Property name="MessageDialogueCodeExpr">
<Type>%String</Type>
</Property>

<Property name="SystemStateResponseOK">
<Type>%String</Type>
<InitialExpression>",0,"</InitialExpression>
</Property>

<Property name="SystemStateResponseNOTOK">
<Type>%String</Type>
<InitialExpression>",1,2,6,"</InitialExpression>
</Property>

<Property name="NACKHL7MessagesOnNOTOKState">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="NACKHL7MessagesForPorts">
<Type>%String</Type>
<InitialExpression>",1,2,3,4,5,"</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// If this is true thennif the node ^Robot.State(robotid,"User") is true HL7 messages will be NACKed

]]></Content>
</UDLText>

<Property name="UserDeterminedHL7NACK">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="LastUserDeterminedNACKSet">
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($h,3)</InitialExpression>
</Property>

<Property name="AllowNestedMessages">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="SendStatus">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="RobotMessages">
<Type>Robot.RobotMessages</Type>
<Cardinality>children</Cardinality>
<Inverse>Robot</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>RobotId</Properties>
<Unique>1</Unique>
</Index>

<Method name="SetUserRobotState">
<ClassMethod>1</ClassMethod>
<FormalSpec>robotid:%String=1,state:%Boolean=0</FormalSpec>
<Implementation><![CDATA[	set ^Robot.RobotState(robotid,"User")=state
]]></Implementation>
</Method>

<Method name="SetRobotState">
<ClassMethod>1</ClassMethod>
<FormalSpec>robotid:%String=1,state:%Boolean=0</FormalSpec>
<Implementation><![CDATA[	set ^Robot.RobotState(robotid)=state
]]></Implementation>
</Method>

<Method name="GetUserRobotState">
<ClassMethod>1</ClassMethod>
<FormalSpec>robotid:%String=1</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit +$g(^Robot.RobotState(robotid,"User"))
]]></Implementation>
</Method>

<Method name="GetRobotState">
<ClassMethod>1</ClassMethod>
<FormalSpec>robotid:%String=1</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit +$g(^Robot.RobotState(robotid))
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.RobotsD</DataLocation>
<DefaultData>RobotsDefaultData</DefaultData>
<IdLocation>^Robot.RobotsD</IdLocation>
<IndexLocation>^Robot.RobotsI</IndexLocation>
<StreamLocation>^Robot.RobotsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="RobotsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>RobotDescription</Value>
</Value>
<Value name="3">
<Value>IsMasterRobot</Value>
</Value>
<Value name="4">
<Value>MasterRobot</Value>
</Value>
<Value name="5">
<Value>Device</Value>
</Value>
<Value name="6">
<Value>MessageDialogueCodeExpr</Value>
</Value>
<Value name="7">
<Value>SystemStateResponseOK</Value>
</Value>
<Value name="8">
<Value>SystemStateResponseNOTOK</Value>
</Value>
<Value name="9">
<Value>NACKHL7MessagesOnNOTOKState</Value>
</Value>
<Value name="10">
<Value>NACKHL7MessagesForPorts</Value>
</Value>
<Value name="11">
<Value>UserDeterminedHL7NACK</Value>
</Value>
<Value name="12">
<Value>LastUserDeterminedNACKSet</Value>
</Value>
<Value name="13">
<Value>AllowNestedMessages</Value>
</Value>
<Value name="14">
<Value>SendStatus</Value>
</Value>
<Value name="15">
<Value>SystemCode</Value>
</Value>
<Value name="16">
<Value>RobotOwnID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Site">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64665,46085.550295</TimeChanged>
<TimeCreated>63621,63544.963608</TimeCreated>

<Property name="SiteCode">
<Type>%String</Type>
</Property>

<Property name="SiteDescription">
<Type>%String</Type>
</Property>

<Property name="SiteAddress">
<Type>Robot.Address</Type>
</Property>

<Property name="SiteTelephone">
<Type>Robot.Telephone</Type>
<Collection>array</Collection>
</Property>

<Property name="SiteEMail">
<Type>%String</Type>
<Collection>array</Collection>
</Property>

<Property name="SitePersonell">
<Type>Robot.Personell</Type>
<Collection>array</Collection>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>SiteCode</Properties>
<Unique>1</Unique>
</Index>

<Property name="Locations">
<Type>Robot.Location</Type>
<Cardinality>children</Cardinality>
<Inverse>Site</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="ValidateFacility">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[level:%String,id:%String,&facility:%Library.Persistent]]></FormalSpec>
<PublicList>facility</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK,id=$p($g(id),"||",1,3)
	if "*Site*Location*Port*"'[("*"_level_"*") set tSC=$system.Status.Error(5001,"Invalid Level specified in Facility Validation") goto End
	if level="Site" {set id=$p(id,"||",1)}
	elseif level="Location" {set id=$p(id,"||",1,2)}
	elseif level="Port" {set id=$p(id,"||",1,3)}
	if level-"Site",'##class(Robot.Site).%ExistsId(id) set tSC=$system.Status.Error(5001,"Invalid Site Code "_id) goto End
	if level="Location",'##class(Robot.Location).%ExistsId(id) set tSC=$system.Status.Error(5001,"Invalid Location Code "_id) goto End
	if level="Port",'##class(Robot.Port).%ExistsId(id) set tSC=$system.Status.Error(5001,"Invalid Port Code "_id) goto End
Done ;
	set str="set facility=##class(Robot."_level_").%OpenId("""_id_""")"
	x str
End	;
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.SiteD</DataLocation>
<DefaultData>SiteDefaultData</DefaultData>
<IdLocation>^Robot.SiteD</IdLocation>
<IndexLocation>^Robot.SiteI</IndexLocation>
<StreamLocation>^Robot.SiteS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="SiteDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>SiteDescription</Value>
</Value>
<Value name="3">
<Value>SiteAddress</Value>
</Value>
</Data>
<Data name="SiteEMail">
<Attribute>SiteEMail</Attribute>
<Structure>subnode</Structure>
<Subscript>"SiteEMail"</Subscript>
</Data>
<Data name="SitePersonell">
<Attribute>SitePersonell</Attribute>
<Structure>subnode</Structure>
<Subscript>"SitePersonell"</Subscript>
</Data>
<Data name="SiteTelephone">
<Attribute>SiteTelephone</Attribute>
<Structure>subnode</Structure>
<Subscript>"SiteTelephone"</Subscript>
</Data>
</Storage>
</Class>


<Class name="Robot.StatusService">
<Super>Ens.BusinessService</Super>
<TimeChanged>64778,44739.695661</TimeChanged>
<TimeCreated>63739,40952.661038</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>Ens.InboundAdapter</Type>
</Property>

<Property name="RobotID">
<Type>%String</Type>
</Property>

<Property name="StatusMessageModuloValue">
<Type>%Integer</Type>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<PublicList>data,refdata,message,msg,retval</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	$$$TRACE("Robot Status Service Started at: "_$zdt($h,3))
	do ##class(Ens.Director).UpdateProduction()
	set system=##class(Robot.SystemSettings).%OpenId("Robot")
	if '$IsObject(system) set tSC=$system.Status.Error(5001,"Unable to open System: (Robot) object") goto End
	set ..StatusMessageModuloValue=system.StatusMessageModuloValue
	set robotid=..RobotID
Loop	;
	set robotid=$o(^Robot.RobotsD(robotid)) set ..RobotID=robotid if robotid="" goto End
	set robot=##class(Robot.Robots).%OpenId(robotid)
	$$$TRACE("Robot: "_robotid)
	set tcp=robot.MasterRobot.Device.TCPOperationName
	if '$IsObject(robot) set tSC=$system.Status.Error(5001,"Unable to open Robot: ("_robotid_") object in OnProcess") goto End
	if 'robot.SendStatus goto Loop
	if $d(^Robot.TCPQueues(robotid)) set config=^Robot.TCPQueues(robotid) if $g(^Ens.Queue(config,0,"count"))>10 goto Loop
	set tRequest=##class(Robot.RobotRequest).%New()
	set tRequest.OMPID=""
	set tRequest.Robot=robot.MasterRobot.RobotId

	if '($p($h,",",2)#..StatusMessageModuloValue) {
		kill data,message,refdata,msg,retval
		set data("DialogueCode")="S"
		set data("RobotID")=robot.RobotOwnID
		set tSC=##class(Robot.Mapping.MessageDefinitions).CreateMessage("StatusRequest",tRequest.Robot,"data","refdata",.message) if 'tSC goto End
		$$$TRACE("Message: "_message)
		do tRequest.Messages.SetAt(message,1)
		set ^Robot.TCPOutboundQueue("StatusRequest",tRequest.Robot,$i(^Robot.TCPOutboundQueue("StatusRequest")))=$lb($zdt($h,3),"",message)
	}
	set tSC=..SendRequestAsync("Process Robot Messages BP",tRequest,"Robot Status Service for Robot ("_tRequest.Robot_")") quit:'tSC
End	;
	if 'tSC $$$TRACE("Error: "_$system.Status.GetErrorText(tSC))
	$$$TRACE("Exiting Robot Status Service")
	quit tSC
Error	;
	set $ztrap=""
	set tSC=$system.Status.Error(5001,"Robot Message Service Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="OnInit">
<Description>
This user callback method is called via initConfig() from %OnNew() or in the case of SOAP Services from OnPreSOAP()</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ..RobotID=""
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Robot.Stock.ATCCodes">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64212,71336</TimeChanged>
<TimeCreated>64188,72317.549089</TimeCreated>

<Property name="ATCCode">
<Type>%String</Type>
</Property>

<Property name="ATCDescription">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>ATCCode</Properties>
<Unique>1</Unique>
</Index>

<Index name="I2">
<Properties>ATCDescription:EXACT</Properties>
</Index>

<Method name="LoadCSVFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>path:%String,file:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	if '$l($g(path)) {
		set path="C:\InterSystems\Source\StockMaster\"
		if $e(path,$l(path))'="\" set path=path_"\"
		if '##Class(%File).DirectoryExists(path) set sc=##class(%File).CreateDirectory(path) if 'sc set tSC=$system.Status.Error(5001,"Unable to create path: ("_path_")") goto End
	}
	If '$l($g(file)) {
		set file="ATCCodes.txt"
	}
	set errorfile=path_"ATCCode Error Log.txt"
	set file=path_file
	open file:("R"):0
	else  write !,"Unable to open file: ("_file_")" quit
	open errorfile:("WNS"):0
	else  write !,"Unable to open Error file: ("_errorfile_")" quit

	kill ^Robot.Stock.ATCCodesD,^Robot.Stock.ATCCodesI,^Robot.Stock.ATCCodesC
	use file read line // Headings
	for {
		use file read line
		set obj=##class(Robot.Stock.ATCCodes).%New()
		set obj.ATCCode=$p(line,$c(9),3)
		set obj.ATCDescription=$p(line,$c(9),4)
		set sc=obj.%Save()
		if 'sc use errorfile write !,obj.ATCCode," ",obj.ATCDescription," Failed Save with :(",$system.Status.GetErrorText(sc),!
	}
	
End	;
	close file,errorfile
	quit tSC	
Error	;
	set $ztrap="",tSC=$s($ze["<ENDOFFILE>":1,1:$system.Status.Error(5001,"Code Error: "_$ze))
	goto End
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Stock.ATCCodesD</DataLocation>
<DefaultData>ATCCodesDefaultData</DefaultData>
<IdLocation>^Robot.Stock.ATCCodesD</IdLocation>
<IndexLocation>^Robot.Stock.ATCCodesI</IndexLocation>
<StreamLocation>^Robot.Stock.ATCCodesS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ATCCodesDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ATCDescription</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Stock.Category">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64212,71336</TimeChanged>
<TimeCreated>64188,80529.039944</TimeCreated>

<Property name="CategoryID">
<Type>%String</Type>
</Property>

<Property name="CategoryDescription">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>CategoryID</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Stock.CategoryD</DataLocation>
<DefaultData>CategoryDefaultData</DefaultData>
<IdLocation>^Robot.Stock.CategoryD</IdLocation>
<IndexLocation>^Robot.Stock.CategoryI</IndexLocation>
<StreamLocation>^Robot.Stock.CategoryS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="CategoryDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CategoryDescription</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Stock.HL7StockItemsTransform">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64212,71336</TimeChanged>
<TimeCreated>64201,22181.689293</TimeCreated>
<DependsOn>EnsLib.HL7.Message,Robot.Stock.HL7StockLevelItems</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='Robot.Stock.HL7StockLevelItems' sourceDocType='2.7:MFN_M16' create='new' language='objectscript' >
<assign value='source.{MFEgrp().MFE:RecordLevelEventCode}' property='target.RecordLevelEventCode' action='set' />
<assign value='source.{MFEgrp().MFE:PrimaryKeyValueType()}' property='target.PrimaryKeyValueType' action='set' />
<assign value='source.{MFEgrp().ITM:ItemIdentifier}' property='target.ItemIdentifier' action='set' />
<assign value='source.{MFEgrp().ITM:ApprovedToBuyQuantity}' property='target.ApprovedToBuyQuantity' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="Robot.Stock.HL7StockLevelItems">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64212,71336</TimeChanged>
<TimeCreated>64201,20424.030924</TimeCreated>

<Property name="RecordLevelEventCode">
<Type>%String</Type>
</Property>

<Property name="PrimaryKeyValueType">
<Type>%String</Type>
</Property>

<Property name="NAPPICode">
<Type>%String</Type>
</Property>

<Property name="EANCode">
<Type>%String</Type>
</Property>

<Property name="ApprovedToBuyQuantity">
<Type>%Integer</Type>
</Property>

<Property name="Stock">
<Type>Robot.Stock.HL7StockLevels</Type>
<Cardinality>parent</Cardinality>
<Inverse>Items</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("Items")</DataLocation>
<DefaultData>HL7StockLevelItemsDefaultData</DefaultData>
<IdLocation>^Robot.Stock.HL7StockLevelsC("Items")</IdLocation>
<IndexLocation>^Robot.Stock.HL7StockLev89CDI</IndexLocation>
<StreamLocation>^Robot.Stock.HL7StockLev89CDS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="HL7StockLevelItemsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>MasterFieldIdentifier</Value>
</Value>
<Value name="3">
<Value>ResponseLevelCode</Value>
</Value>
<Value name="4">
<Value>NAPPICode</Value>
</Value>
<Value name="5">
<Value>ApprovedToBuyQuantity</Value>
</Value>
<Value name="6">
<Value>RecordLevelEventCode</Value>
</Value>
<Value name="7">
<Value>PrimaryKeyValueType</Value>
</Value>
<Value name="8">
<Value>EANCode</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Stock.HL7StockLevels">
<Super>%Persistent</Super>
<TimeChanged>64212,71336</TimeChanged>
<TimeCreated>64201,20057.874717</TimeCreated>

<Property name="SystemSettings">
<Description>
System Class</Description>
<Type>Robot.SystemSettings</Type>
</Property>

<Property name="HL7Message">
<Description>
Rerefernce to original HL7 Message</Description>
<Type>%String</Type>
</Property>

<Property name="IsHL7Clone">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="SendingApplication">
<Description>
Message Header Fields (MSH)
Sending Application</Description>
<Type>%String</Type>
</Property>

<Property name="SendingFacility">
<Description>
Sending Facility</Description>
<Type>%String</Type>
</Property>

<Property name="ReceivingApplication">
<Description>
Receiving Application</Description>
<Type>%String</Type>
</Property>

<Property name="ReceivingFacility">
<Description>
Receiving Facility</Description>
<Type>%String</Type>
</Property>

<Property name="FacilityPK">
<Description>
ReceivingFacilityPK</Description>
<Type>%String</Type>
<Calculated>1</Calculated>
</Property>

<Property name="RobotLocation">
<Description><![CDATA[
Designated reference to the Port Object -> Location]]></Description>
<Type>Robot.Location</Type>
</Property>

<Property name="RobotPort">
<Type>Robot.Port</Type>
</Property>

<Property name="MessageType">
<Description>
Message Type</Description>
<Type>%String</Type>
</Property>

<Property name="MessageVersion">
<Description>
Message Version</Description>
<Type>%String</Type>
</Property>

<Property name="MessageControlID">
<Description>
Message Control ID</Description>
<Type>%String</Type>
</Property>

<Property name="AcceptAckType">
<Description>
Accept Acknowledgment Type</Description>
<Type>%String</Type>
</Property>

<Property name="ApplicationAckType">
<Description>
Application Acknowledment Type</Description>
<Type>%String</Type>
</Property>

<Property name="MessageDateTime">
<Type>%String</Type>
</Property>

<Property name="MasterFileIdentifier">
<Type>%String</Type>
</Property>

<Property name="FileLevelEventCode">
<Type>%String</Type>
</Property>

<Property name="ResponseLevelCode">
<Type>%String</Type>
</Property>

<Property name="CreationDate">
<Type>%TimeStamp</Type>
</Property>

<Property name="Items">
<Type>Robot.Stock.HL7StockLevelItems</Type>
<Cardinality>children</Cardinality>
<Inverse>Stock</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="FacilityPKGet">
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	quit $p(..ReceivingFacility,":",1)_"||"_$p(..ReceivingFacility,":",2)_$s($l($p(..ReceivingFacility,":",3)):"||"_$p(..ReceivingFacility,":",3),1:"")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Stock.HL7StockLevelsD</DataLocation>
<DefaultData>HL7StockLevelsDefaultData</DefaultData>
<IdLocation>^Robot.Stock.HL7StockLevelsD</IdLocation>
<IndexLocation>^Robot.Stock.HL7StockLevelsI</IndexLocation>
<StreamLocation>^Robot.Stock.HL7StockLevelsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="HL7StockLevelsDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>SystemSettings</Value>
</Value>
<Value name="3">
<Value>HL7Message</Value>
</Value>
<Value name="4">
<Value>IsHL7Clone</Value>
</Value>
<Value name="5">
<Value>SendingApplication</Value>
</Value>
<Value name="6">
<Value>SendingFacility</Value>
</Value>
<Value name="7">
<Value>ReceivingApplication</Value>
</Value>
<Value name="8">
<Value>ReceivingFacility</Value>
</Value>
<Value name="9">
<Value>RobotLocation</Value>
</Value>
<Value name="10">
<Value>RobotPort</Value>
</Value>
<Value name="11">
<Value>MessageType</Value>
</Value>
<Value name="12">
<Value>MessageVersion</Value>
</Value>
<Value name="13">
<Value>MessageControlID</Value>
</Value>
<Value name="14">
<Value>AcceptAckType</Value>
</Value>
<Value name="15">
<Value>ApplicationAckType</Value>
</Value>
<Value name="16">
<Value>MessageDateTime</Value>
</Value>
<Value name="17">
<Value>MasterFileIdentifier</Value>
</Value>
<Value name="18">
<Value>FileLevelEventCode</Value>
</Value>
<Value name="19">
<Value>ResponseLevelCode</Value>
</Value>
<Value name="20">
<Value>CreationDate</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Stock.HL7StockTransform">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64212,71336</TimeChanged>
<TimeCreated>64201,20702.229122</TimeCreated>
<DependsOn>EnsLib.HL7.Message,Robot.Stock.HL7StockLevels</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='Robot.Stock.HL7StockLevels' sourceDocType='2.7:MFN_M16' create='new' language='objectscript' >
<assign value='source.{MSH:SendingApplication}' property='target.SendingApplication' action='set' />
<assign value='source.{MSH:SendingFacility}' property='target.SendingFacility' action='set' />
<assign value='source.{MSH:ReceivingApplication}' property='target.ReceivingApplication' action='set' />
<assign value='source.{MSH:ReceivingFacility}' property='target.ReceivingFacility' action='set' />
<assign value='source.{MSH:DateTimeofMessage}' property='target.MessageDateTime' action='set' />
<assign value='source.{MSH:MessageType}' property='target.MessageType' action='set' />
<assign value='source.{MSH:MessageControlID}' property='target.MessageControlID' action='set' />
<assign value='source.{MSH:AcceptAcknowledgmentType}' property='target.AcceptAckType' action='set' />
<assign value='source.{MSH:ApplicationAcknowledgmentTyp}' property='target.ApplicationAckType' action='set' />
<assign value='source.{MFI:MasterFileIdentifier}' property='target.MasterFieldIdentifier' action='set' />
<assign value='source.{MFI:FileLevelEventCode}' property='target.FileLevelEventCode' action='set' />
<assign value='source.{MFEgrp()}' property='target.ResponseLevelCode' action='set' />
<assign value='$zdt($h,3)' property='target.CreationDate' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="Robot.Stock.LoadAndDispenseTransactions">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64219,41240.599316</TimeChanged>
<TimeCreated>64215,41925.004621</TimeCreated>

<Property name="TransactionType">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",Dispense,Load"/>
</Property>

<Property name="TimeStamp">
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($h,3)</InitialExpression>
</Property>

<Property name="Quantity">
<Type>%Integer</Type>
</Property>

<Property name="System">
<Type>Robot.Stock.StockLevelSystems</Type>
<Cardinality>parent</Cardinality>
<Inverse>Transactions</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="InsertTransaction">
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String,robot:%String,system:%String,nappi:%String,quantity:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set sobj=##class(Robot.Stock.StockLevelSystems).%OpenId(nappi_"||"_robot_"||"_system)
	if '$IsObject(sobj) set tSC=$system.Status.Error(5001,"Unable to open Stock Level System for ID: ("_nappi_"||"_robot_"||"_system_")")
	set obj=##class(Robot.Stock.LoadAndDispenseTransactions).%New()
	set obj.System=sobj
	set obj.TransactionType=type
	set obj.Quantity=quantity
	set tSC=obj.%Save()
End	;
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("Transactions")</DataLocation>
<DefaultData>LoadAndDispenseTransactionsDefaultData</DefaultData>
<IdLocation>^Robot.Stock.StockLevelSystemsC("Transactions")</IdLocation>
<IndexLocation>^Robot.Stock.LoadAndDispBD6AI</IndexLocation>
<StreamLocation>^Robot.Stock.LoadAndDispBD6AS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="LoadAndDispenseTransactionsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>TransactionType</Value>
</Value>
<Value name="3">
<Value>TimeStamp</Value>
</Value>
<Value name="4">
<Value>Quantity</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Stock.LocationStockMaster">
<Super>Robot.Stock.StockMaster</Super>
<TimeChanged>64212,71336</TimeChanged>
<TimeCreated>64188,85652.934149</TimeCreated>

<Property name="StockLocation">
<Type>Robot.Location</Type>
</Property>

<Index name="Location">
<Properties>StockLocation</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>LocationStockMasterDefaultData</DefaultData>
<Data name="LocationStockMasterDefaultData">
<Structure>listnode</Structure>
<Subscript>"LocationStockMaster"</Subscript>
<Value name="1">
<Value>StockLocation</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Stock.Manufacturer">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64212,71336</TimeChanged>
<TimeCreated>64188,80702.26788</TimeCreated>

<Property name="ManufacturerID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="ManufacturerName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>ManufacturerID</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Stock.ManufacturerD</DataLocation>
<DefaultData>ManufacturerDefaultData</DefaultData>
<IdLocation>^Robot.Stock.ManufacturerD</IdLocation>
<IndexLocation>^Robot.Stock.ManufacturerI</IndexLocation>
<StreamLocation>^Robot.Stock.ManufacturerS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ManufacturerDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ManufacturerName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Stock.NSNICNCodes">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64212,71336</TimeChanged>
<TimeCreated>64188,81427.763228</TimeCreated>

<Property name="NSNICNCode">
<Type>%String</Type>
</Property>

<Property name="NSNDescription">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>NSNICNCode</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Stock.NSNICNCodesD</DataLocation>
<DefaultData>NSNICNCodesDefaultData</DefaultData>
<IdLocation>^Robot.Stock.NSNICNCodesD</IdLocation>
<IndexLocation>^Robot.Stock.NSNICNCodesI</IndexLocation>
<StreamLocation>^Robot.Stock.NSNICNCodesS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="NSNICNCodesDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>NSNDescription</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Stock.PropertyNames">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64212,71336</TimeChanged>
<TimeCreated>64203,79938.826888</TimeCreated>

<Property name="FromPropertyName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="ToPropertyName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="Mapping">
<Type>Robot.Stock.PropertyToColumnMapping</Type>
<Cardinality>parent</Cardinality>
<Inverse>Properties</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("Properties")</DataLocation>
<DefaultData>PropertyNamesDefaultData</DefaultData>
<IdLocation>^Robot.Stock.PropertyToCDB1EC("Properties")</IdLocation>
<IndexLocation>^Robot.Stock.PropertyNamesI</IndexLocation>
<StreamLocation>^Robot.Stock.PropertyNamesS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="PropertyNamesDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>FromPropertyName</Value>
</Value>
<Value name="3">
<Value>ToPropertyName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Stock.PropertyToColumnMapping">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64212,71336</TimeChanged>
<TimeCreated>64203,78082.714965</TimeCreated>

<Property name="MappingID">
<Type>%String</Type>
</Property>

<Property name="MappingName">
<Type>%String</Type>
</Property>

<Property name="FromClassName">
<Type>%String</Type>
</Property>

<Property name="ToClasName">
<Type>%String</Type>
</Property>

<Property name="Properties">
<Type>Robot.Stock.PropertyNames</Type>
<Cardinality>children</Cardinality>
<Inverse>Mapping</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>MappingID</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Stock.PropertyToCDB1ED</DataLocation>
<DefaultData>PropertyToColumnMappingDefaultData</DefaultData>
<IdLocation>^Robot.Stock.PropertyToCDB1ED</IdLocation>
<IndexLocation>^Robot.Stock.PropertyToCDB1EI</IndexLocation>
<StreamLocation>^Robot.Stock.PropertyToCDB1ES</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="PropertyToColumnMappingDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>MappingName</Value>
</Value>
<Value name="3">
<Value>FromClassName</Value>
</Value>
<Value name="4">
<Value>ToClasName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Stock.ScheduleID">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64212,71336</TimeChanged>
<TimeCreated>64188,79289.385855</TimeCreated>

<Property name="Schedule">
<Type>%Integer</Type>
</Property>

<Property name="ScheduleDescription">
<Type>%String</Type>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Schedule</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Stock.ScheduleIDD</DataLocation>
<DefaultData>ScheduleIDDefaultData</DefaultData>
<IdLocation>^Robot.Stock.ScheduleIDD</IdLocation>
<IndexLocation>^Robot.Stock.ScheduleIDI</IndexLocation>
<StreamLocation>^Robot.Stock.ScheduleIDS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ScheduleIDDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ScheduleDescription</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Stock.StockLevelDetails">
<Super>%Persistent</Super>
<TimeChanged>64721,50324.143841</TimeChanged>
<TimeCreated>64120,55852.200554</TimeCreated>

<Property name="StorageLocationShelf">
<Type>%String</Type>
</Property>

<Property name="Capacity">
<Type>%Integer</Type>
</Property>

<Property name="Quantity">
<Type>%Integer</Type>
</Property>

<Property name="UseByDate">
<Type>%String</Type>
</Property>

<Property name="StorageDate">
<Type>%String</Type>
</Property>

<Property name="ERPDate">
<Type>%String</Type>
</Property>

<Property name="BatchNumber">
<Type>%String</Type>
</Property>

<Property name="ID">
<Type>%String</Type>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>ID</Properties>
<Unique>1</Unique>
</Index>

<Property name="System">
<Type>Robot.Stock.StockLevelSystems</Type>
<Cardinality>parent</Cardinality>
<Inverse>Items</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("Items")</DataLocation>
<DefaultData>StockLevelDetailsDefaultData</DefaultData>
<IdLocation>^Robot.Stock.StockLevelSystemsC("Items")</IdLocation>
<IndexLocation>^Robot.Stock.StockLevelDetailsI</IndexLocation>
<StreamLocation>^Robot.Stock.StockLevelDetailsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="StockLevelDetailsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>StorageLocationShelf</Value>
</Value>
<Value name="3">
<Value>Capacity</Value>
</Value>
<Value name="4">
<Value>Quantity</Value>
</Value>
<Value name="5">
<Value>UseByDate</Value>
</Value>
<Value name="6">
<Value>StorageDate</Value>
</Value>
<Value name="7">
<Value>ERPDate</Value>
</Value>
<Value name="8">
<Value>BatchNumber</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Stock.StockLevelSystems">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64734,55389</TimeChanged>
<TimeCreated>64211,1538.038644</TimeCreated>

<Property name="StorageLocationSystem">
<Type>Robot.Systems</Type>
</Property>

<Property name="Quantity">
<Type>%Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TransactionBalance">
<Type>%Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Priority">
<Description>
Lowest priority indicates principal dispense system</Description>
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="5"/>
<Parameter name="MINVAL" value="1"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>StorageLocationSystem</Properties>
<Unique>1</Unique>
</Index>

<Method name="QuantityGet">
<ReturnType>%Integer</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set total=0
	for i=1:1:..Items.Count() {
		set itemobj=..Items.GetAt(i)
		set total=total+itemobj.Quantity
	}
	quit total
]]></Implementation>
</Method>

<Method name="TransactionBalanceGet">
<ReturnType>%Integer</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set total=0
	for i=1:1:..Transactions.Count() {
		set transobj=..Transactions.GetAt(i)
		set total=total+transobj.Quantity
	}
	quit total
]]></Implementation>
</Method>

<Property name="StockLevel">
<Type>Robot.Stock.StockLevels</Type>
<Cardinality>parent</Cardinality>
<Inverse>Systems</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Items">
<Type>Robot.Stock.StockLevelDetails</Type>
<Cardinality>children</Cardinality>
<Inverse>System</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Transactions">
<Type>Robot.Stock.LoadAndDispenseTransactions</Type>
<Cardinality>children</Cardinality>
<Inverse>System</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("Systems")</DataLocation>
<DefaultData>StockLevelSystemsDefaultData</DefaultData>
<IdLocation>^Robot.Stock.StockLevelsC("Systems")</IdLocation>
<IndexLocation>^Robot.Stock.StockLevelSystemsI</IndexLocation>
<StreamLocation>^Robot.Stock.StockLevelSystemsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="StockLevelSystemsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Priority</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Stock.StockLevels">
<Super>%Persistent</Super>
<TimeChanged>64213,71456</TimeChanged>
<TimeCreated>64103,34546.27155</TimeCreated>

<Property name="Robot">
<Type>Robot.Robots</Type>
</Property>

<Property name="RobotQuantity">
<Type>%Integer</Type>
</Property>

<Property name="Quantity">
<Type>%Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="LastUpdatedDT">
<Type>%TimeStamp</Type>
</Property>

<Property name="Master">
<Type>Robot.Stock.StockMaster</Type>
<Cardinality>parent</Cardinality>
<Inverse>StockLevels</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Robot</Properties>
<Unique>1</Unique>
</Index>

<Index name="I1">
<Properties>Robot,Master</Properties>
</Index>

<Property name="Systems">
<Type>Robot.Stock.StockLevelSystems</Type>
<Cardinality>children</Cardinality>
<Inverse>StockLevel</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="QuantityGet">
<Implementation><![CDATA[
	set total=0
	for i=1:1:..Systems.Count() {
		set sysobj=..Systems.GetAt(i)
		set total=total+sysobj.Quantity
	}
	quit total
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("StockLevels")</DataLocation>
<DefaultData>StockLevelsDefaultData</DefaultData>
<IdLocation>^Robot.Stock.StockMasterC("StockLevels")</IdLocation>
<IndexLocation>^Robot.Stock.StockLevelsI</IndexLocation>
<StreamLocation>^Robot.Stock.StockLevelsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="StockLevelsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>RobotQuantity</Value>
</Value>
<Value name="3">
<Value>LastUpdatedDT</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Stock.StockMaster">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64735,36275.070826</TimeChanged>
<TimeCreated>64188,82057.757364</TimeCreated>

<Property name="InternalSerialID">
<Type>%Integer</Type>
<InitialExpression>$i(^Robot.Stock.StockInternalSerialID)</InitialExpression>
<Required>1</Required>
</Property>

<Property name="Active">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="Action">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",ADD,DELETE,UPDATE"/>
</Property>

<Property name="LocationMasters">
<Type>Robot.Location</Type>
<Collection>array</Collection>
</Property>

<Property name="NAPPICode">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="ProductDescription">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="RoboticDispensable">
<Type>%Boolean</Type>
</Property>

<Property name="Bin">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",Fridge,Shelf,Cupboard,Robot,"/>
</Property>

<Property name="RobotBin">
<Description>
IFS Robot.Robots.SystemCode links to the System Code used in Stock Levels by Robot (Bin)</Description>
<Type>Robot.Robots</Type>
<Collection>array</Collection>
</Property>

<Property name="RequiredForDispense">
<Type>%Boolean</Type>
</Property>

<Property name="CombinationItem">
<Type>%Boolean</Type>
</Property>

<Property name="ATC">
<Type>Robot.Stock.ATCCodes</Type>
</Property>

<Property name="EANCode">
<Type>%Integer</Type>
</Property>

<Property name="EAN13Priority">
<Type>%String</Type>
</Property>

<Property name="PrivateBarCode">
<Description>
Barcode Generated by RTC</Description>
<Type>%String</Type>
</Property>

<Property name="PrivateBarCode2">
<Type>%String</Type>
</Property>

<Property name="NSNICN">
<Type>Robot.Stock.NSNICNCodes</Type>
</Property>

<Property name="DepotCodes">
<Type>%String</Type>
</Property>

<Property name="Schedule">
<Type>Robot.Stock.ScheduleID</Type>
</Property>

<Property name="UnitsOfIssue">
<Type>Robot.Stock.UnitsOfIssueCodes</Type>
</Property>

<Property name="StrengthUnit">
<Type>%String</Type>
</Property>

<Property name="PackSize">
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
<Required>1</Required>
<Parameter name="MINVAL" value="1"/>
</Property>

<Property name="Category">
<Type>Robot.Stock.Category</Type>
</Property>

<Property name="Supplier">
<Type>Robot.Stock.Supplier</Type>
</Property>

<Property name="SupplierItemCode">
<Type>%String</Type>
</Property>

<Property name="ListPrice">
<Type>%Numeric</Type>
<InitialExpression>0.00</InitialExpression>
</Property>

<Property name="Manufacturer">
<Type>Robot.Stock.Manufacturer</Type>
</Property>

<Property name="ManufacturerItemCode">
<Type>%String</Type>
</Property>

<Property name="CreateTS">
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($h,3)</InitialExpression>
</Property>

<Property name="ModifiedTS">
<Type>%TimeStamp</Type>
</Property>

<Property name="Suspended">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="StockLevels">
<Type>Robot.Stock.StockLevels</Type>
<Cardinality>children</Cardinality>
<Inverse>Master</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>NAPPICode</Properties>
<Unique>1</Unique>
</Index>

<Index name="EAN">
<Properties>EANCode:EXACT</Properties>
</Index>

<Index name="Robot">
<Properties>RoboticDispensable</Properties>
</Index>

<Index name="Name">
<Properties>ProductDescription</Properties>
</Index>

<Index name="Active">
<Properties>Active</Properties>
</Index>

<Index name="ATC">
<Properties>ATC</Properties>
</Index>

<Index name="NSN">
<Properties>NSNICN</Properties>
</Index>

<Index name="Supplier">
<Properties>Supplier</Properties>
</Index>

<Index name="Manufaturer">
<Properties>Manufacturer</Properties>
</Index>

<Index name="Bin">
<Properties>Bin</Properties>
</Index>

<Index name="Internal">
<Properties>InternalSerialID</Properties>
</Index>

<Method name="CheckSystemPriority">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set (x,y)="",gbl="^Robot.Stock.StockMasterD"
	for  {
		set x=$o(@gbl@(x)) q:x=""
		for  {
			set y=$o(@gbl@(x,"StockLevels",y)) quit:y=""
			set system=""
			for  {
				set system=$o(@gbl@(x,"StockLevels",y,"Systems",system)) quit:system=""
				set sysobj=##class(Robot.Systems).%OpenId(system)
				set def=sysobj.DefaultPriority
				set item=##class(Robot.Stock.StockLevelSystems).%OpenId(x_"||"_y_"||"_system)
				if item.Priority="" {
					write !,x," ",y," ",system
					set item.Priority=def
					write !,item.%Save()
				}
			}
		}
	}
]]></Implementation>
</Method>

<Method name="GetEANCode">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[id:%String,&outId:%String="",&description:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	&SQL(select EANCode, ProductDescription into :outId,  :description from Robot_Stock.StockMaster where NAPPICode=:id)
	if SQLCODE {
		set tSC=$system.Status.Error(5001,"Error: cannot find EAN code for NAPPI code ("_id_")")
		set (outId,description)=""
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="GetNAPPICode">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[id:%String,&outId:%String,&description:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	&SQL(select NAPPICode, ProductDescription into :outId, :description from Robot_Stock.StockMaster where EANCode=:id)
	if SQLCODE {
		set tSC=$system.Status.Error(5001,"Error: cannot find NAPPI code for EAN code ("_id_")")
		set (outId,description)=""
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="GetCodes">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[SourceCoding:%String(VALUELIST=",NAPPI,EAN13,NSN,ATC")=NAPPI,SourceCode:%String,TargetCoding:%String(VALUELIST=",NAPPI,EAN13,NSN,ATC")=EAN13,AdditionalColumns:%String,&TargetCode:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK,TargetCode=""
	if $g(SourceCode)="" set tSC=$system.Status.Error(5001,"Invalid Source Code: ("_SourceCode_")") goto End
	
	set Array("NAPPI")="NAPPICode"
	set Array("EAN13")="EANCode"
	set Array("NSN")="NSNICN"
	set Array("ATC")="ATC"
	
	set rs=##class(%ResultSet).%New("%DynamicQuery:SQL")
	set sql="select "_Array(TargetCoding)
	if $l(AdditionalColumns) {
		for i=1:1:$l(AdditionalColumns,",") set sql=sql_","_$p(AdditionalColumns,",",i)
	}
	set sql=sql_" from Robot_Stock.StockMaster where "_Array(SourceCoding)_" = '"_SourceCode_"'"
	set sc=rs.Prepare(sql) if 'sc use 0 write !,"Unable to prepare SQL with error: "_$system.Status.GetErrorText(sc),!!
	set sc=rs.Execute() if 'sc use 0 write !,"Unable to prepare SQL with error: "_$system.Status.GetErrorText(sc),!!
	while rs.Next() {
		set str="" set $list(str,1)=rs.Data(Array(TargetCoding))
		if $l(AdditionalColumns) for i=1:1:$l(AdditionalColumns,",") set $list(str,i+1)=rs.Data($p(AdditionalColumns,",",i))
		set TargetCode=TargetCode_str_","
	}
	if $e(TargetCode,$l(TargetCode))="," set TargetCode=$e(TargetCode,1,$l(TargetCode)-1)
End	;
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="LoadCSVFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>path:%String="C:\InterSystems\Source\StockMaster\",file:%String="NappiMaster.txt",deleteExisting:%Boolean=0,header:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	if '$l($g(file)) set tSC=$system.Status.Error(5001,"Invalid File Name: ("_file_")") goto End
	set file=path_file
	set errorfile=path_"NappiMasterError.txt"
	open errorfile:("WNS"):0
	else  use 0 write !,"Unable to open file: ("_file_")" goto End
	open file:("R"):0
	else  use 0 write !,"Unable to open file: ("_file_")" goto End
	if header use file read header
	/*
	if deleteExisting {
		tstart
		set nappi=""
		for {
			set nappi=$o(^Robot.Stock.StockMasterD(nappi)) quit:nappi=""
			set sc=##class(Robot.Stock.StockMaster).%DeleteId(nappi)
			if 'sc use errorfile write !,"Unable to Delete: ("_nappi_")" set tSC=sc trollback  goto End
		}
		tcommit
	}
	*/
	for i=2:1 {
		use file read rec if rec="" continue
		set nappi=$p(rec,$c(9),4),delexist=0,delcur=0
		set obj=##class(Robot.Stock.StockMaster).%OpenId(nappi)
		if '$IsObject(obj) {
			set obj=##class(Robot.Stock.StockMaster).%New()
		}
		if $l($p(rec,$c(9),1)) set obj.InternalSerialID=$p(rec,$c(9),1)
		if $p(rec,$c(9),2)="" use errorfile write !,"Unable to save NAPPI "_nappi_" as Active is not specified" continue
		set obj.Active=$p(rec,$c(9),2)
		set obj.Action=$system.SQL.ALPHAUP($p(rec,$c(9),3)),obj.NAPPICode=$p(rec,$c(9),4),obj.RoboticDispensable=$s($system.SQL.ALPHAUP($p(rec,$c(9),5))="Yes":1,1:0)
		set obj.ProductDescription=$p(rec,$c(9),9),obj.StrengthUnit=$p(rec,$c(9),10),obj.PackSize=$zstrip($p(rec,$c(9),11),"<>W")
		set ean=$p(rec,$c(9),12)
		if obj.EANCode'="",ean="",obj.Active=1 use errorfile write !,"Invalid EAN Code on row: ("_obj.InternalSerialID_") with NAPPI: ("_obj.NAPPICode_")",! continue
		if ean'="" set obj.EANCode=ean
		set atc="" if $l($p(rec,$c(9),7)) {
			set atc=##class(Robot.Stock.ATCCodes).%OpenId($p(rec,$c(9),7))
			if '$IsObject(atc) {
				set atc=##class(Robot.Stock.ATCCodes).%New()
				set atc.ATCCode=$p(rec,$c(9),7),atc.ATCDescription=$p(rec,$c(9),7),sc=atc.%Save()
				if 'sc use errorfile write !,"Unable to save ATC: ("_$p(rec,$c(9),7)_") with Error: "_$system.Status.GetErrorText(sc) set atc=""
			}
		}
		set obj.ATC=atc
		set nsn="" if $l($p(rec,$c(9),13)) {
			set nsn=##class(Robot.Stock.NSNICNCodes).%OpenId($p(rec,$c(9),13))
			if '$IsObject(nsn) {
				set nsn=##class(Robot.Stock.NSNICNCodes).%New()
				set nsn.NSNICNCode=$p(rec,$c(9),13),nsn.NSNDescription=$p(rec,$c(9),14),sc=nsn.%Save()
				if 'sc use errorfile write !,"Unable to save NSN: ("_$p(rec,$c(9),13)_")",!
			}
		}
		set obj.NSNICN=nsn
		set obj.PrivateBarCode=$p(rec,$c(9),15),obj.PrivateBarCode2=$p(rec,$c(9),17)
		if $l(+$p(rec,$c(9),20)) {set schedule=##class(Robot.Stock.ScheduleID).%OpenId($p(rec,$c(9),20)) if '$IsObject(schedule) set schedule=##class(Robot.Stock.ScheduleID).%New(),schedule.Schedule=$p(rec,$c(9),20),sc=schedule.%Save() if 'sc use errorfile write !,"Unable to save Schedule: ("_$p(rec,$c(9),20)_")",!}
		else {set schedule=""}
		set obj.Schedule=schedule
		if $l($p(rec,$c(9),21)) {set unitid=$system.SQL.ALPHAUP($p(rec,$c(9),21)),unit=##class(Robot.Stock.UnitsOfIssueCodes).%OpenId(unitid) if '$IsObject(unit) {set unit=##class(Robot.Stock.UnitsOfIssueCodes).%New(),unit.UnitOfIssue=unitid,unit.UnitOfIssueDescription=unitid,sc=unit.%Save() if 'sc use errorfile write !,"Unable to save Unit Of Issue: ("_unitid_")",!}}
		else  {set unit=""}
		set obj.UnitsOfIssue=unit
		set obj.ListPrice=+$p(rec,$c(9),24),obj.SupplierItemCode=$p(rec,$c(9),25)
		if $l($p(rec,$c(9),26)) {set category=##class(Robot.Stock.Category).%OpenId($p(rec,$c(9),26)) if '$isObject(category) set category=##class(Robot.Stock.Category).%New(),category.CategoryID=$p(rec,$c(9),26),category.CategoryDescription=$p(rec,$c(9),27),sc=category.%Save() if 'sc use errorfile write !,"Unable to save Category: ("_$p(rec,$c(9),20)_")",!}
		else {set category=""}
		set obj.Category=category
		if $l($p(rec,$c(9),32)) {set supp=##class(Robot.Stock.Supplier).%OpenId($p(rec,$c(9),32))}
		else {set supp=""}
		set obj.Supplier=supp
		if $l($p(rec,$c(9),34)) {set manuf=##class(Robot.Stock.Manufacturer).%OpenId($p(rec,$c(9),34)) if '$IsObject(manuf) set manuf=##class(Robot.Stock.Manufacturer).%New(),manuf.ManufacturerID=$p(rec,$c(9),34),manuf.ManufacturerName=$p(rec,$c(9),35),sc=manuf.%Save()}
		else {set manuf=""}
		set obj.Manufacturer=manuf
		set obj.ManufacturerItemCode=$p(rec,$c(9),38)
		
		// When this column is included in the xslx then it needs to be set to the correct field in the csv/txt file exported from the xslx
		set obj.Suspended=0
		set obj.CombinationItem=0
		set sc=obj.%Save()
		if 'sc use errorfile write !,"Unable to Save row: ("_obj.InternalSerialID_") for Nappi: ("_obj.NAPPICode_") with Error: ("_$system.Status.GetErrorText(sc),!,rec,!! continue
	}
End	;
	close file,errorfile
	quit tSC
Error	;
	set $ztrap=""
	if $ze["<ENDOFFILE>" set tSC=$$$OK goto End
	use errorfile write !!,"Code Error: ("_$ze_")"
	set tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="LoadCSVFileSB">
<ClassMethod>1</ClassMethod>
<FormalSpec>path:%String="C:\InterSystems\Source\StockMaster\",file:%String="NappiMaster.txt",deleteExisting:%Boolean=0,header:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	if '$l($g(file)) set tSC=$system.Status.Error(5001,"Invalid File Name: ("_file_")") goto End
	set file=path_file
	set errorfile=path_"NappiMasterError.txt"
	open errorfile:("WNS"):0
	else  use 0 write !,"Unable to open file: ("_file_")" goto End
	open file:("R"):0
	else  use 0 write !,"Unable to open file: ("_file_")" goto End
	if header use file read headrec
	for i=2:1 {
		use file read rec if rec="" continue
		set nappi=$p(rec,$c(9),4)
		set obj=##class(Robot.Stock.StockMaster).%OpenId(nappi)
		if '$IsObject(obj) {
			set obj=##class(Robot.Stock.StockMaster).%New()
			set obj.NAPPICode=nappi
		}
		set obj.Active=$p(rec,$c(9),2)
		set obj.Action="ADD",obj.RoboticDispensable=$s($p(rec,$c(9),5)="Yes":1,1:0)
		set obj.ProductDescription=$p(rec,$c(9),9),obj.StrengthUnit=$p(rec,$c(9),36),obj.PackSize=$zstrip($p(rec,$c(9),10),"<>W")
		set obj.EANCode=$p(rec,$c(9),11) if obj.EANCode="" use errorfile write !,"Invalid EAN Code for NAPPI: ("_obj.NAPPICode_")",!
		set atc="" if $l($p(rec,$c(9),7)) {set atc=##class(Robot.Stock.ATCCodes).%OpenId($p(rec,$c(9),7)) if '$IsObject(atc) set atc=##class(Robot.Stock.ATCCodes).%New(),atc.ATCCode=$p(rec,$c(9),7),atc.ATCDescription=$p(rec,$c(9),9),sc=atc.%Save() if 'sc use errorfile write !,"Unable to save ATC: ("_$p(rec,$c(9),6)_")" set atc=""}
		set obj.ATC=atc
		set nsn="" if $l($p(rec,$c(9),37)) {
			set nsn=##class(Robot.Stock.NSNICNCodes).%OpenId($p(rec,$c(9),37))
			if '$IsObject(nsn) {
				set nsn=##class(Robot.Stock.NSNICNCodes).%New()
				set nsn.NSNICNCode=$p(rec,$c(9),37),nsn.NSNDescription=$p(rec,$c(9),38),sc=nsn.%Save()
				if 'sc use errorfile write !,"Unable to save NSN: ("_$p(rec,$c(9),37)_")",!
			}
		}
		set obj.NSNICN=nsn
		if $l(+$p(rec,$c(9),17)) {set schedule=##class(Robot.Stock.ScheduleID).%OpenId($p(rec,$c(9),17)) if '$IsObject(schedule) set schedule=##class(Robot.Stock.ScheduleID).%New(),schedule.Schedule=$p(rec,$c(9),17),sc=schedule.%Save() if 'sc use errorfile write !,"Unable to save Schedule: ("_$p(rec,$c(9),11)_")",!}
		else {set schedule=""}
		set obj.Schedule=schedule
		if $l($p(rec,$c(9),18)) {set unit=##class(Robot.Stock.UnitsOfIssueCodes).%OpenId($p(rec,$c(9),18)) if '$IsObject(unit) set unit=##class(Robot.Stock.UnitsOfIssueCodes).%New(),unit.UnitOfIssue=$p(rec,$c(9),18),sc=unit.%Save() if 'sc use errorfile write !,"Unable to save Unit of Issue: ("_$p(rec,$c(9),5)_")",!}
		else {set unit=""}
		set obj.UnitsOfIssue=unit
		set obj.Suspended=0,obj.CombinationItem=0
		set sc=obj.%Save()
		if 'sc use errorfile write !,"Unable to Save Nappi: ("_obj.NAPPICode_") with Error: ("_$system.Status.GetErrorText(sc),!,rec,!! continue
	}
End	;
	close file,errorfile
	quit tSC
Error	;
	set $ztrap=""
	if $ze["<ENDOFFILE>" set tSC=$$$OK goto End
	use errorfile write !!,"Code Error: ("_$ze_")"
	set tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="%OnBeforeSave">
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set ..ModifiedTS=$zdt($h,3)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="ExportStockMaster">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[ExportAll:%Boolean=1,&file:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set sys=##class(Robot.SystemSettings).%OpenId("Robot")
	set site=sys.SiteName
	/*
	set systemtype="Production" //set system=##class(Robot.SystemSettings).%OpenId("Robot"),systemtype=system.SystemType
	if systemtype="Production" {
		if $g(path)="" set path="C:\InterSystems\StockMaster\ProductionStockMasterDropFolder\"
	}
	elseif systemtype="UAT" {
		if $g(path)="" set path="C:\InterSystems\StockMaster\UATStockMasterDropFolder\"
	}
	if $e(path,$l(path))'="\" set path=path_"\"
	if '##Class(%File).DirectoryExists(path) set sc=##class(%File).CreateDirectory(path) if 'sc set tSC=$system.Status.Error(5001,"Unable to create path: ("_path_")") goto End
	*/
	set path="c:\InterSystems\RobotInterface\"
	if '##Class(%File).DirectoryExists(path) set sc=##class(%File).CreateDirectory(path) if 'sc set tSC=$system.Status.Error(5001,"Unable to create path: ("_path_")") goto End
	set file=path_site_" Stock Master "_$s(ExportAll:"Full ",1:"Update ")_$tr($zdt($h,3),": -","")_".txt"
	open file:("WNS"):0
	else  set tSC=$system.Status.Error(5001,"Cannot open file") goto End
	use file write "Unused 1"_$c(9)_"Active"_$c(9)_"Action"_$c(9)_"Nappi Code"_$c(9)_"Robotic Dispensable"_$c(9)_"Unused 6"_$c(9)_"ATC Code"_$c(9)_"Unused 8"_$c(9)_"Product Description"_$c(9)_"Strength"_$c(9)_"Pack Size"_$c(9)_"EAN13 BarCode"_$c(9)_"Unused 13"_$c(9)_"Unused 14"_$c(9)_"Unused 15"_$c(9)_"Unused 16"_$c(9)_"Schedule"_$c(9)_"Unit Of Issue"_$c(9)_"Unused 19"_$c(9)_"Unused 20"_$c(9)_"Unused 21"_$c(9)_"Unused 22"_$c(9)_"Unused 23"_$c(9)_" Unused 24"_$c(9)_"Supplier Item Code"_$c(9)_"Category Code"_$c(9)_"Category Description"_$c(9)_"Unused 28"_$c(9)_"Unused 29"_$c(9)_"Unused 30"_$c(9)_"Supplier Code"_$c(9)_"Suppliers Name"_$c(9)_"Unused 33"_$c(9)_"Unused 34"_$c(9)_"Manufacturer ID"_$c(9)_"Manufacturer Description"_$c(9)_"NSN"_$c(9)_"NSN Description"_$c(9)_"Unused 39"_$c(9)_"HJ Active",!
	set nappi=""
	for {
		set nappi=$o(^Robot.Stock.StockMasterD(nappi)) quit:nappi=""
		set rec=^Robot.Stock.StockMasterD(nappi)
		;if 'ExportAll,'$l($lg(rec,3)) continue
		set obj=##class(Robot.Stock.StockMaster).%OpenId(nappi)
		set str=""
		set $p(str,$c(9),2)=obj.Active,$p(str,$c(9),3)=obj.Action,$p(str,$c(9),4)=obj.NAPPICode,$p(str,$c(9),5)=$system.SQL.ALPHAUP(obj.RoboticDispensable),$p(str,$c(9),7)=obj.ATC.ATCCode,$p(str,$c(9),9)=obj.ProductDescription
		set $p(str,$c(9),10)=obj.StrengthUnit,$p(str,$c(9),11)=obj.PackSize,$p(str,$c(9),12)=obj.EANCode,$p(str,$c(9),37)=obj.NSNICN.NSNICNCode,$p(str,$c(9),38)=obj.NSNICN.NSNDescription if $IsObject(obj.Schedule) set $p(str,$c(9),17)=obj.Schedule.Schedule
		set $p(str,$c(9),18)=obj.UnitsOfIssue.UnitOfIssue,$p(str,$c(9),25)=obj.SupplierItemCode,$p(str,$c(9),26)=obj.Category.CategoryID,$p(str,$c(9),31)=obj.Supplier.SupplierCode,$p(str,$c(9),32)=obj.Supplier.SupplierName,$p(str,$c(9),35)=obj.Manufacturer.ManufacturerID
		set $p(str,$c(9),36)=obj.Manufacturer.ManufacturerName,$p(str,$c(9),40)=obj.Active
		use file write str,!
		;if 'ExportAll set $list(rec,3)="",^Robot.Stock.StockMasterD(nappi)=rec
	}
End	;
	close file
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="CreateInternalINUMessage">
<ClassMethod>1</ClassMethod>
<FormalSpec>location:%String</FormalSpec>
<Implementation><![CDATA[
	i '$l($g(location)) set location="SB:001:"
	set file="c:\temp\INU-Internal.txt"
	open file:("WNS"):0
	use file write "MSH|^~\&|TriMed|"_location_"|Robot|"_location_"|"_$tr($zdt($h,3),":- ","")_"||INU^U05^INU_U05|"_$tr($zdt($h,3),":- ","")_"|P|2.7|Internal||NE|AL|||||Open",!
	use file write "EQU|ROBOT|"_$tr($zdt($h,3),":- ",""),!
	set nappi=""
	for {
		set nappi=$o(^Robot.Stock.StockMasterD(nappi)) quit:nappi=""
		set str=^(nappi)
		set ean=$lg(str,10),desc=$lg(str,5),pack=$lg(str,19)
		use file write "INV|"_nappi_"^"_desc_"^NAPPI^"_ean_"^^EAN|OK|Internal||^^^"_pack_"^^Pack Size||999999999|0",!
	}
	close file
]]></Implementation>
</Method>

<Method name="CreateOverflowINUMessage">
<ClassMethod>1</ClassMethod>
<FormalSpec>location:%String</FormalSpec>
<Implementation><![CDATA[
	i '$l($g(location)) set location="SB:001:"
	set file="c:\temp\INU-Overflow.txt"
	open file:("WNS"):0
	use file write "MSH|^~\&|TriMed|"_location_"|Robot|"_location_"|"_$tr($zdt($h,3),":- ","")_"||INU^U05^INU_U05|"_$tr($zdt($h,3),":- ","")_"|P|2.7|Overflow||NE|AL|||||Open",!
	use file write "EQU|ROBOT|"_$tr($zdt($h,3),":- ",""),!
	set nappi=""
	for {
		set nappi=$o(^Robot.Stock.StockMasterD(nappi)) quit:nappi=""
		set str=^(nappi)
		set ean=$lg(str,10),desc=$lg(str,5),pack=$lg(str,19)
		use file write "INV|"_nappi_"^"_desc_"^NAPPI^"_ean_"^^EAN|OK|Overflow||^^^"_pack_"^^Pack Size||0|0",!
	}
	close file
]]></Implementation>
</Method>

<Method name="%OnAfterSave">
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	if 'insert goto End
	set batch=##class(Robot.StockBatch).%OpenId("Internal")
	if $IsObject(batch) {
		
		set item=##class(Robot.StockBatchItems).%New()
		set item.NAPPICode=..NAPPICode
		set item.AmountDelivered=999999999
		set item.AmountLoaded=0
		set item.IsError=$$$OK
		set item.Batch=batch
		set sc=item.%Save()
	}
	set batch=##class(Robot.StockBatch).%OpenId("Overflow")
	if $IsObject(batch) {
		set item=##class(Robot.StockBatchItems).%New()
		set item.NAPPICode=..NAPPICode
		set item.AmountDelivered=0
		set item.AmountLoaded=0
		set item.IsError=$$$OK
		set item.Batch=batch
		set sc=item.%Save()
	}
End	;
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="%OnDelete">
<ClassMethod>1</ClassMethod>
<FormalSpec>oid:%ObjectIdentity</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set system=##class(Robot.SystemSettings).%OpenId("Robot")
	if 'system.AllowDeleteOnNAPPIMaster set tSC=$system.Status.Error(5001,"System Settings prevent the Deletion of NAPPI codes")
End	;
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="InActiveNonRoboticReport">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set f="c:\temp\Alex_Inactive_Non-Robotic_Items_13022018.csv"
	open f:("WNS"):0
	else  write "Cannot open file ",f,! quit
	set x=""
	u f write "NAPPI",$c(9),"Description",$c(9),"Bar Code",$c(9),"Active",$c(9),"Robotic",!
	for {
		set x=$o(^Robot.Stock.StockMasterD(x)) q:x=""
		set y=##class(Robot.Stock.StockMaster).%OpenId(x)
		if 'y.Active!('y.RoboticDispensable) {
			use f write x,$c(9),y.ProductDescription,$c(9),y.EANCode,$c(9),$s(y.Active:"Yes",1:"No"),$c(9),$s(y.RoboticDispensable:"Yes",1:"No"),!
		}
	}
	close f
]]></Implementation>
</Method>

<Method name="ActiveOnlyRoboticReport">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set f="c:\temp\Alex_Active_Items_with_Robotic_Flag_13022018.csv"
	open f:("WNS"):0
	else  write "Cannot open file ",f,! quit
	set x=""
	u f write "NAPPI",$c(9),"Description",$c(9),"Bar Code",$c(9),"Active",$c(9),"Robotic",!
	for {
		set x=$o(^Robot.Stock.StockMasterD(x)) q:x=""
		set y=##class(Robot.Stock.StockMaster).%OpenId(x)
		if y.Active {
			use f write x,$c(9),y.ProductDescription,$c(9),y.EANCode,$c(9),$s(y.Active:"Yes",1:"No"),$c(9),$s(y.RoboticDispensable:"Yes",1:"No"),!
		}
	}
	close f
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Stock.StockMasterD</DataLocation>
<DefaultData>StockMasterDefaultData</DefaultData>
<IdLocation>^Robot.Stock.StockMasterD</IdLocation>
<IndexLocation>^Robot.Stock.StockMasterI</IndexLocation>
<StreamLocation>^Robot.Stock.StockMasterS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="LocationMasters">
<Attribute>LocationMasters</Attribute>
<Structure>subnode</Structure>
<Subscript>"LocationMasters"</Subscript>
</Data>
<Data name="RobotBin">
<Attribute>RobotBin</Attribute>
<Structure>subnode</Structure>
<Subscript>"RobotBin"</Subscript>
</Data>
<Data name="StockMasterDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>InternalSerialID</Value>
</Value>
<Value name="3">
<Value>Active</Value>
</Value>
<Value name="4">
<Value>Action</Value>
</Value>
<Value name="5">
<Value>ProductDescription</Value>
</Value>
<Value name="6">
<Value>RoboticDispensable</Value>
</Value>
<Value name="7">
<Value>Bin</Value>
</Value>
<Value name="8">
<Value>RequiredForDispense</Value>
</Value>
<Value name="9">
<Value>ATC</Value>
</Value>
<Value name="10">
<Value>EANCode</Value>
</Value>
<Value name="11">
<Value>EAN13Priority</Value>
</Value>
<Value name="12">
<Value>PrivateBarCode</Value>
</Value>
<Value name="13">
<Value>PrivateBarCode2</Value>
</Value>
<Value name="14">
<Value>NSNICN</Value>
</Value>
<Value name="15">
<Value>DepotCodes</Value>
</Value>
<Value name="16">
<Value>Schedule</Value>
</Value>
<Value name="17">
<Value>UnitsOfIssue</Value>
</Value>
<Value name="18">
<Value>StrengthUnit</Value>
</Value>
<Value name="19">
<Value>PackSize</Value>
</Value>
<Value name="20">
<Value>Category</Value>
</Value>
<Value name="21">
<Value>Supplier</Value>
</Value>
<Value name="22">
<Value>SupplierItemCode</Value>
</Value>
<Value name="23">
<Value>ListPrice</Value>
</Value>
<Value name="24">
<Value>Manufacturer</Value>
</Value>
<Value name="25">
<Value>ManufacturerItemCode</Value>
</Value>
<Value name="26">
<Value>CreateTS</Value>
</Value>
<Value name="27">
<Value>ModifiedTS</Value>
</Value>
<Value name="28">
<Value>Suspended</Value>
</Value>
<Value name="29">
<Value>CombinationItem</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Stock.Supplier">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64212,71336</TimeChanged>
<TimeCreated>64188,80396.795366</TimeCreated>

<Property name="SupplierID">
<Type>%String</Type>
</Property>

<Property name="SupplierName">
<Type>%String</Type>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>SupplierID</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Stock.SupplierD</DataLocation>
<DefaultData>SupplierDefaultData</DefaultData>
<IdLocation>^Robot.Stock.SupplierD</IdLocation>
<IndexLocation>^Robot.Stock.SupplierI</IndexLocation>
<StreamLocation>^Robot.Stock.SupplierS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="SupplierDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>SupplierName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Stock.SysMedicine">
<Description>
Generated by the Link Table wizard on 2016-10-13 22:00:00.  Note that you can access the data in this class only when the external database is accessible.</Description>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdPrivate>1</SqlRowIdPrivate>
<SqlTableName>SysMedicine</SqlTableName>
<StorageStrategy>GSQLStorage</StorageStrategy>
<Super>%Library.Persistent</Super>
<TimeChanged>64212,71336</TimeChanged>
<TimeCreated>64204,79200.330268</TimeCreated>

<Property name="ATCCode">
<Type>%String</Type>
<SqlColumnNumber>7</SqlColumnNumber>
<SqlFieldName>ATCCode</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="ATCCode"/>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="30"/>
</Property>

<Property name="Active">
<Type>%Boolean</Type>
<SqlColumnNumber>27</SqlColumnNumber>
<SqlFieldName>Active</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="Active"/>
<Parameter name="EXTERNALSQLTYPE" value="-7"/>
</Property>

<Property name="AdministrationFrequency">
<Type>%String</Type>
<SqlColumnNumber>13</SqlColumnNumber>
<SqlFieldName>AdministrationFrequency</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="AdministrationFrequency"/>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="AdministrationMethod">
<Type>%String</Type>
<SqlColumnNumber>12</SqlColumnNumber>
<SqlFieldName>AdministrationMethod</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="AdministrationMethod"/>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="AdministrationType">
<Type>%String</Type>
<SqlColumnNumber>14</SqlColumnNumber>
<SqlFieldName>AdministrationType</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="AdministrationType"/>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="BarCode">
<Type>%String</Type>
<SqlColumnNumber>4</SqlColumnNumber>
<SqlFieldName>BarCode</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="BarCode"/>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="Classification">
<Type>%String</Type>
<SqlColumnNumber>18</SqlColumnNumber>
<SqlFieldName>Classification</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="Classification"/>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="Contraceptive">
<Type>%Boolean</Type>
<SqlColumnNumber>19</SqlColumnNumber>
<SqlFieldName>Contraceptive</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="Contraceptive"/>
<Parameter name="EXTERNALSQLTYPE" value="-7"/>
</Property>

<Property name="DefaultDosage">
<Type>%String</Type>
<SqlColumnNumber>6</SqlColumnNumber>
<SqlFieldName>DefaultDosage</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="DefaultDosage"/>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Description">
<Type>%String</Type>
<SqlColumnNumber>5</SqlColumnNumber>
<SqlFieldName>Description</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="Description"/>
<Parameter name="EXTERNALSQLTYPE" value="-9"/>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DosageType">
<Type>%String</Type>
<SqlColumnNumber>10</SqlColumnNumber>
<SqlFieldName>DosageType</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="DosageType"/>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="10"/>
</Property>

<Property name="GUID">
<Type>%String</Type>
<Required>1</Required>
<SqlColumnNumber>22</SqlColumnNumber>
<SqlFieldName>GUID</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="GUID"/>
<Parameter name="EXTERNALSQLTYPE" value="-11"/>
<Parameter name="MAXLEN" value="36"/>
</Property>

<Property name="Generic">
<Type>%Boolean</Type>
<SqlColumnNumber>20</SqlColumnNumber>
<SqlFieldName>Generic</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="Generic"/>
<Parameter name="EXTERNALSQLTYPE" value="-7"/>
</Property>

<Property name="GenericCategoryCode">
<Type>%String</Type>
<SqlColumnNumber>21</SqlColumnNumber>
<SqlFieldName>GenericCategoryCode</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="GenericCategoryCode"/>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="ID">
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<SqlFieldName>ID</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="ID"/>
<Parameter name="EXTERNALSQLTYPE" value="4"/>
</Property>

<Property name="ModifiedDate">
<Type>%TimeStamp</Type>
<SqlColumnNumber>25</SqlColumnNumber>
<SqlFieldName>ModifiedDate</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="ModifiedDate"/>
<Parameter name="EXTERNALSQLTYPE" value="93"/>
</Property>

<Property name="NAPPICode">
<Type>%String</Type>
<SqlColumnNumber>8</SqlColumnNumber>
<SqlFieldName>NAPPICode</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="NAPPICode"/>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="30"/>
</Property>

<Property name="NSNCode">
<Type>%String</Type>
<SqlColumnNumber>9</SqlColumnNumber>
<SqlFieldName>NSNCode</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="NSNCode"/>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="30"/>
</Property>

<Property name="Name">
<Type>%String</Type>
<SqlColumnNumber>3</SqlColumnNumber>
<SqlFieldName>Name</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="Name"/>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="NumberOfDoses">
<Type>%String</Type>
<SqlColumnNumber>11</SqlColumnNumber>
<SqlFieldName>NumberOfDoses</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="NumberOfDoses"/>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="10"/>
</Property>

<Property name="PackSize">
<Type>%String</Type>
<SqlColumnNumber>16</SqlColumnNumber>
<SqlFieldName>PackSize</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="PackSize"/>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="Schedule">
<Type>%Integer</Type>
<SqlColumnNumber>15</SqlColumnNumber>
<SqlFieldName>Schedule</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="Schedule"/>
<Parameter name="EXTERNALSQLTYPE" value="4"/>
</Property>

<Property name="SourceID">
<Type>%Integer</Type>
<SqlColumnNumber>23</SqlColumnNumber>
<SqlFieldName>SourceID</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="SourceID"/>
<Parameter name="EXTERNALSQLTYPE" value="4"/>
</Property>

<Property name="Strength">
<Type>%String</Type>
<SqlColumnNumber>17</SqlColumnNumber>
<SqlFieldName>Strength</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="Strength"/>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="Suspended">
<Type>%Boolean</Type>
<Required>1</Required>
<SqlColumnNumber>28</SqlColumnNumber>
<SqlFieldName>Suspended</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="Suspended"/>
<Parameter name="EXTERNALSQLTYPE" value="-7"/>
</Property>

<Property name="TriMedSerial">
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>26</SqlColumnNumber>
<SqlFieldName>TriMedSerial</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="TriMedSerial"/>
<Parameter name="EXTERNALSQLTYPE" value="4"/>
</Property>

<Property name="UserID">
<Type>%Integer</Type>
<SqlColumnNumber>24</SqlColumnNumber>
<SqlFieldName>UserID</SqlFieldName>
<ReadOnly>1</ReadOnly>
<Parameter name="EXTERNALSQLNAME" value="UserID"/>
<Parameter name="EXTERNALSQLTYPE" value="4"/>
</Property>

<Index name="MainIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>ID</Properties>
</Index>

<Parameter name="CONNECTION">
<Description>
Specifies details for the SQL Gateway Connection that this class uses</Description>
<Default>Cloud,NOCREATE</Default>
</Parameter>

<Parameter name="EXTDBNAME">
<Description>
Specifies the external database that this class uses</Description>
<Default>Microsoft SQL Server</Default>
</Parameter>

<Parameter name="EXTERNALTABLENAME">
<Description>
Specifies the external table to which this class refers</Description>
<Default>dbo.SysMedicine</Default>
</Parameter>

<Storage name="GSQLStorage">
<Type>%Storage.SQL</Type>
<StreamLocation>^Robot.Stock.SysMedicineS</StreamLocation>
<ExtentSize>100000</ExtentSize>
</Storage>
</Class>


<Class name="Robot.Stock.UnitsOfIssueCodes">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64734,55389</TimeChanged>
<TimeCreated>64188,80058.708834</TimeCreated>

<Property name="UnitOfIssue">
<Type>%String</Type>
</Property>

<Property name="UnitOfIssueDescription">
<Type>%String</Type>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>UnitOfIssue</Properties>
<Unique>1</Unique>
</Index>

<Method name="%OnBeforeSave">
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set ..UnitOfIssue=$system.SQL.ALPHAUP(..UnitOfIssue)
	quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Stock.UnitsOfIssueCodesD</DataLocation>
<DefaultData>UnitsOfIssueCodesDefaultData</DefaultData>
<IdLocation>^Robot.Stock.UnitsOfIssueCodesD</IdLocation>
<IndexLocation>^Robot.Stock.UnitsOfIssueCodesI</IndexLocation>
<StreamLocation>^Robot.Stock.UnitsOfIssueCodesS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="UnitsOfIssueCodesDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>UnitOfIssueDescription</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Stock.UpdateCloudStockMaster">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64226,40884.634028</TimeChanged>
<TimeCreated>64203,74176.376794</TimeCreated>

<Method name="UpdateCloud">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[path:%String,&sqlscript:%String,&errorlog:%String]]></FormalSpec>
<PublicList>obj,pvalue</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set path="C:\InterSystems\Source\StockMaster\"
	if $e(path,$l(path))'="\" set path=path_"\"
	if '##Class(%File).DirectoryExists(path) set sc=##class(%File).CreateDirectory(path) if 'sc set tSC=$system.Status.Error(5001,"Unable to create path: ("_path_")") goto End
	if '$l($g(sqlscript)) set sqlscript=path_"Cloud Stock Master Update "_$zd($h,3)_".sql"
	if '$l($g(errorlog)) set errorlog=path_"Cloud Stock Master Update Error Log "_$zd($h,3)_".txt"
	open sqlscript:("WNS"):0
	else  set tSC=$system.Status.Error(5001,"Unable to open Cloud NAPPI Update SQL Script: ("_sqlscript_")") goto End
	open errorlog:("WNS"):0
	else  set tSC=$system.Status.Error(5001,"Unable to open Cloud NAPPI Update Error Log: ("_errorlog_")") goto End
	set rs=##class(%ResultSet).%New()
	set tSC=rs.Prepare("select * from Robot_Stock.SysMedicine") if 'tSC goto End
	set tSC=rs.Execute() if 'tSC goto End
	set gbl="^Robot.Stock.TempCloudNappi",ngbl="^Robot.Stock.TempNappiIndex",ogbl="^Robot.Stock.TempSQL" kill @gbl,@ngbl,@ogbl
	for row=1:1 {
		set more=rs.Next(.sc) quit:'more
		if 'sc use 0 write "ResultSet Error: "_$system.Status.GetErrorText(sc) goto End
		for i=1:1:rs.GetColumnCount() {
			set colname=rs.GetColumnName(i)
			set colvalue=$tr($zstrip($zstrip(rs.GetData(i),"*C"),"<>W"),$c(34),"'")
			set @gbl@(row,colname)=colvalue
			if colname="NAPPICode" set @ngbl@(colvalue,row)="",@gbl@(row)=colvalue
			if colname="TriMedSerial" set @ngbl@(@gbl@(row,"NAPPICode"),row)=colvalue
		}
		set lastrow=row
	}
	set tSC=rs.Close() if 'tSC goto End
	// Look for Inserts, Updates, Deletes and Nappi Duplicates
	set nappi=""
	for {
		set nappi=$o(^Robot.Stock.StockMasterD(nappi)) quit:nappi=""
		set row="",count=0
		for count=0:1 set row=$o(@ngbl@(nappi,row)) quit:row=""
		if count=0 {set @ngbl@(nappi)="Insert"}
		elseif count=1 {set @ngbl@(nappi)="Update"}
		else {set @ngbl@(nappi)="Suspend"}
	}
	set nappi=""
	for {
		set nappi=$o(@ngbl@(nappi)) q:nappi=""
		if $d(^Robot.Stock.StockMasterD(nappi)) continue
		set @ngbl@(nappi)="Delete"
	}
	kill defaults
	set defaults("DefaultDosage")=""
	set defaults("DosageType")=548
	set defaults("NumberOfDoses")=""
	set defaults("AdministrationMethod")=547
	set defaults("AdministrationFrequency")=545
	set defaults("AdministrationType")=545
	set defaults("Classification")=544
	set defaults("Contraceptive")=0
	set defaults("Generic")=0
	set defaults("GenericCategoryCode")=""
	set defaults("SourceID")="NULL"
	set defaults("UserID")="NULL"
	set defaults("ModifiedDate")="NULL"
	set defaults("Suspended")=0
	set array("TriMedSerial")="InternalSerialID"
	set array("Description")="ProductDescription"
	set array("ATCCode")="ATC.ATCCode"
	set array("BarCode")="EANCode"
	set array("NSNCode")="NSNICN.NSNICNCode"
	set array("Name")="ATC.ATCDescription"
	set array("DosageType")="UnitsOfIssue.UnitOfIssue"
	set array("Strength")="StrengthUnit"
	set array("Active")="Active"
	set array("NAPPICode")="NAPPICode"
	set array("Schedule")="Schedule.Schedule"
	set array("PackSize")="PackSize"
	
	set (nappi,col)=""
	for {
		set nappi=$o(@ngbl@(nappi)) quit:nappi=""
		use 0 write !,nappi
		use 0 w !,@ngbl@(nappi)
		if @ngbl@(nappi)="Insert" {
			set row=$i(lastrow)
			merge @gbl@($i(row))=^Robot.Stock.CloudStockMasterTemplate
			merge @gbl@(row)=defaults
			set obj=##class(Robot.Stock.StockMaster).%OpenId(nappi)
			if '$IsObject(obj) use errorlog write "Unable to Open NAPPI Master for :("_nappi_")",! continue
			set sql="INSERT INTO dbo.SysMedicine (ATCCode,Active,AdministrationFrequency,AdministrationMethod,AdministrationType,BarCode,Classification,CombinationItem,Contraceptive,DefaultDosage,Description,DosageType,GUID,Generic,GenericCategoryCode,ModifiedDate,NAPPICode,NSNCode,Name,NumberOfDoses,PackSize,Schedule,SourceID,Strength,Suspended,TriMedSerial,UserID) VALUES ("
			for {
				set col=$o(@gbl@(row,col)) quit:col=""
				if col="GUID" set sql=sql_"newid()"_"," continue
				if $d(defaults(col)) set sql=sql_$s(defaults(col)="NULL":"NULL,",1:"'"_defaults(col)_"',") continue
				if $d(array(col)) set property=array(col)
				else  set property=col
				set str="set pvalue=obj."_property x str
				set sql=sql_"'"_pvalue_"',"
			}
			set sql=$e(sql,1,$l(sql)-1)_")"
			set @ogbl@("Insert",$i(@ogbl@("Insert")))=sql
		}
		elseif @ngbl@(nappi)="Update" {
			set obj=##class(Robot.Stock.StockMaster).%OpenId(nappi)
			if '$IsObject(obj) use errorlog write "Unable to Open NAPPI Master for :("_nappi_")",! continue
			set row=$o(@ngbl@(nappi,"")),id=""
			for {
				set col=$o(@gbl@(row,col)) quit:col=""
				if $d(defaults(col)) continue
				if col="GUID" continue
				if col="ID" set id=@gbl@(row,col) kill @gbl@(row,col) continue
				if col="TriMedSerial" set trimed=@gbl@(row,col)
				if $d(array(col)) set property=array(col)
				else  set property=col
				set str="set pvalue=obj."_property u 0 w !,str  x str
				set @gbl@(row,col)=pvalue
			}
			set sql="UPDATE dbo.SysMedicine SET "
			set col=""
			for {
				set col=$o(@gbl@(row,col)) q:col=""
				set sql=sql_col_"='"_@gbl@(row,col)_"',"
			}
			set sql=$e(sql,1,$l(sql)-1)_" WHERE TriMedSerial='"_trimed_"'"
			set @ogbl@("Update",$i(@ogbl@("Update")))=sql
		}
		elseif @ngbl@(nappi)="Suspend" {
			set row=""
			use errorlog w !,"NAPPI: ",nappi," has the folllowing duplicates",!! 
			for {
				set row=$o(@ngbl@(nappi,row)) quit:row=""
				set col=""
				for {
					set col=$o(@gbl@(row,col)) q:col=""
					use errorlog write col,$c(9),@gbl@(row,col),!
				}
				use errorlog write !
			}
		}
		else {
			set row=""
			use errorlog w !,"NAPPI: ",nappi," is in the Cloud but not in the NAPPI Master",!! 
			for {
				set row=$o(@ngbl@(nappi,row)) quit:row=""
				set col=""
				for {
					set col=$o(@gbl@(row,col)) q:col=""
					use errorlog write col,$c(9),@gbl@(row,col),!
				}
				use errorlog write !
			}
		}
	}

	use sqlscript write "GO",!!
	for i="Insert","Update" {
		set x=""
		for {
			set x=$o(@ogbl@(i,x)) q:x=""
			use sqlscript write @ogbl@(i,x),!!,"GO",!!
		}
	}
End	;
	close sqlscript,errorlog
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.Stock.UpdateCloud39CBD</DataLocation>
<DefaultData>UpdateCloudStockMasterDefaultData</DefaultData>
<IdLocation>^Robot.Stock.UpdateCloud39CBD</IdLocation>
<IndexLocation>^Robot.Stock.UpdateCloud39CBI</IndexLocation>
<StreamLocation>^Robot.Stock.UpdateCloud39CBS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="UpdateCloudStockMasterDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.StockBatch">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64205,35619</TimeChanged>
<TimeCreated>63732,52289.315887</TimeCreated>

<Property name="SystemSettings">
<Description>
System Class</Description>
<Type>Robot.SystemSettings</Type>
</Property>

<Property name="HL7Message">
<Description>
Rerefernce to original HL7 Message</Description>
<Type>%String</Type>
</Property>

<Property name="IsHL7Clone">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="SendingApplication">
<Description>
Message Header Fields (MSH)
Sending Application</Description>
<Type>%String</Type>
</Property>

<Property name="SendingFacility">
<Description>
Sending Facility</Description>
<Type>%String</Type>
</Property>

<Property name="ReceivingApplication">
<Description>
Receiving Application</Description>
<Type>%String</Type>
</Property>

<Property name="ReceivingFacility">
<Description>
Receiving Facility</Description>
<Type>%String</Type>
</Property>

<Property name="FacilityPK">
<Description>
ReceivingFacilityPK</Description>
<Type>%String</Type>
<Calculated>1</Calculated>
</Property>

<Property name="RobotLocation">
<Description><![CDATA[
Designated reference to the Port Object -> Location]]></Description>
<Type>Robot.Location</Type>
</Property>

<Property name="MessageType">
<Description>
Message Type</Description>
<Type>%String</Type>
</Property>

<Property name="MessageVersion">
<Description>
Message Version</Description>
<Type>%String</Type>
</Property>

<Property name="MessageControlID">
<Description>
Message Control ID</Description>
<Type>%String</Type>
</Property>

<Property name="DeliveryReference">
<Description>
Message Sequence Number used as Delivery Reference</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="AcceptAckType">
<Description>
Accept Acknowledgment Type</Description>
<Type>%String</Type>
</Property>

<Property name="ApplicationAckType">
<Description>
Application Acknowledment Type</Description>
<Type>%String</Type>
</Property>

<Property name="MessageDateTime">
<Type>%String</Type>
</Property>

<Property name="SendBatch">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="SendOpenBatch">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="BatchOpen">
<Description>
Batch Open 1=Open, 0=Closed</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="BatchCreationDate">
<Description>
Batch Creation Date/Time</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($h,3)</InitialExpression>
</Property>

<Property name="BatchClosedDate">
<Description>
Batch Closed Date/Time</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="ClosedBatchReportedDate">
<Description>
Batch Resulted Date/Time</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="OpenBatchReportedDate">
<Description>
Open Batch Last Reported</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="Items">
<Type>Robot.StockBatchItems</Type>
<Cardinality>children</Cardinality>
<Inverse>Batch</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>DeliveryReference</Properties>
<Unique>1</Unique>
</Index>

<Method name="DateDiff">
<ClassMethod>1</ClassMethod>
<FormalSpec>date1:%TimeStamp,date2:%TimeStamp</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $system.SQL.DATEDIFF("hh",date1,date2)
]]></Implementation>
</Method>

<Method name="FacilityPKGet">
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	quit $p(..ReceivingFacility,":",1)_"||"_$p(..ReceivingFacility,":",2)_$s($l($p(..ReceivingFacility,":",3)):"||"_$p(..ReceivingFacility,":",3),1:"")
]]></Implementation>
</Method>

<Query name="AllBatches">
<Type>%SQLQuery</Type>
<SqlQuery>SELECT DeliveryReference,BatchCreationDate,BatchOpen,SendBatch,SendOpenBatch,OpenBatchReportedDate,BatchClosedDate,ClosedBatchReportedDate FROM StockBatch</SqlQuery>
</Query>

<Query name="BatchesByOpenStatus">
<Type>%SQLQuery</Type>
<FormalSpec>BatchOpen:%Boolean=1</FormalSpec>
<SqlQuery>SELECT DeliveryReference,BatchOpen FROM StockBatch
 WHERE (BatchOpen = :BatchOpen)</SqlQuery>
</Query>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.StockBatchD</DataLocation>
<DefaultData>StockBatchDefaultData</DefaultData>
<IdLocation>^Robot.StockBatchD</IdLocation>
<IndexLocation>^Robot.StockBatchI</IndexLocation>
<StreamLocation>^Robot.StockBatchS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="StockBatchDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>SystemSettings</Value>
</Value>
<Value name="3">
<Value>HL7Message</Value>
</Value>
<Value name="4">
<Value>IsHL7Clone</Value>
</Value>
<Value name="5">
<Value>SendingApplication</Value>
</Value>
<Value name="6">
<Value>SendingFacility</Value>
</Value>
<Value name="7">
<Value>ReceivingApplication</Value>
</Value>
<Value name="8">
<Value>ReceivingFacility</Value>
</Value>
<Value name="9">
<Value>RobotLocation</Value>
</Value>
<Value name="10">
<Value>MessageType</Value>
</Value>
<Value name="11">
<Value>MessageVersion</Value>
</Value>
<Value name="12">
<Value>MessageControlID</Value>
</Value>
<Value name="13">
<Value>AcceptAckType</Value>
</Value>
<Value name="14">
<Value>ApplicationAckType</Value>
</Value>
<Value name="15">
<Value>MessageDateTime</Value>
</Value>
<Value name="16">
<Value>SendBatch</Value>
</Value>
<Value name="17">
<Value>SendOpenBatch</Value>
</Value>
<Value name="18">
<Value>BatchOpen</Value>
</Value>
<Value name="19">
<Value>BatchCreationDate</Value>
</Value>
<Value name="20">
<Value>BatchClosedDate</Value>
</Value>
<Value name="21">
<Value>ClosedBatchReportedDate</Value>
</Value>
<Value name="22">
<Value>OpenBatchReportedDate</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.StockBatchItemDetails">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64215,26190</TimeChanged>
<TimeCreated>64189,82497.087004</TimeCreated>

<Property name="System">
<Type>%String</Type>
</Property>

<Property name="DeliveryNote">
<Type>%String</Type>
</Property>

<Property name="Date">
<Type>%Date</Type>
</Property>

<Property name="Time">
<Type>%Time</Type>
</Property>

<Property name="Quantity">
<Type>%Integer</Type>
</Property>

<Property name="Item">
<Type>Robot.StockBatchItems</Type>
<Cardinality>parent</Cardinality>
<Inverse>Details</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>System,DeliveryNote,Date,Time</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("Details")</DataLocation>
<DefaultData>StockBatchItemDetailsDefaultData</DefaultData>
<IdLocation>^Robot.StockBatchItemsC("Details")</IdLocation>
<IndexLocation>^Robot.StockBatchItemDetailsI</IndexLocation>
<StreamLocation>^Robot.StockBatchItemDetailsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="StockBatchItemDetailsDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Quantity</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.StockBatchItems">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64209,45506.651072</TimeChanged>
<TimeCreated>63732,52640.859819</TimeCreated>

<Property name="NAPPICode">
<Description>
NAPPI Code - SubstanceIdentifier</Description>
<Type>%String</Type>
</Property>

<Property name="EANCode">
<Description>
EAN Code - AlternateSubstanceIdentifier</Description>
<Type>%String</Type>
</Property>

<Property name="AmountDelivered">
<Type>%Integer</Type>
</Property>

<Property name="AmountLoaded">
<Type>%Integer</Type>
</Property>

<Property name="IsError">
<Type>%Status</Type>
<InitialExpression>$$$OK</InitialExpression>
</Property>

<Property name="Messages">
<Type>%String</Type>
<Collection>list</Collection>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Details">
<Type>Robot.StockBatchItemDetails</Type>
<Cardinality>children</Cardinality>
<Inverse>Item</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Batch">
<Type>Robot.StockBatch</Type>
<Cardinality>parent</Cardinality>
<Inverse>Items</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>NAPPICode</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("Items")</DataLocation>
<DefaultData>StockBatchItemsDefaultData</DefaultData>
<IdLocation>^Robot.StockBatchC("Items")</IdLocation>
<IndexLocation>^Robot.StockBatchItemsI</IndexLocation>
<StreamLocation>^Robot.StockBatchItemsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="StockBatchItemsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>AmountDelivered</Value>
</Value>
<Value name="3">
<Value>AmountLoaded</Value>
</Value>
<Value name="4">
<Value>IsError</Value>
</Value>
<Value name="5">
<Value>Messages</Value>
</Value>
<Value name="6">
<Value>EANCode</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.StockBatchService">
<Super>Ens.BusinessService</Super>
<TimeChanged>64198,48478.287221</TimeChanged>
<TimeCreated>64155,32160.603648</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>Ens.InboundAdapter</Type>
</Property>

<Property name="SendOpenBatch">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="NightlyInterimOpenBatchReportingTime">
<Type>%Time</Type>
</Property>

<Property name="ReportInterimBatchBalances">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="InterimBatchReportingInterval">
<Type>%Integer</Type>
<InitialExpression>3600</InitialExpression>
</Property>

<Property name="LastNightBatchDT">
<Type>%Date</Type>
<InitialExpression>+$h</InitialExpression>
</Property>

<Property name="NightBatchSent">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="NightUpdate">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="DaysToRetainBatches">
<Type>%Integer</Type>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	$$$TRACE("Robot Stock Batch Service Started at: "_$zdt($h,3))
	set ..SendOpenBatch=0,batch=""
	if $p($h,",",2)>..NightlyInterimOpenBatchReportingTime,..LastNightBatchDT'=+$h {set ..SendOpenBatch=1,..NightUpdate=1}
	for {
		set batch=$o(^Robot.StockBatchD(batch)) quit:batch=""
		$$$TRACE("Processing Batch: ("_batch_")")
		set batchobj=##class(Robot.StockBatch).%OpenId(batch)
		if '$IsObject(batchobj) $$$TRACE("Invalid Batch: ("_batch_")") kill ^Robot.StockBatchD(batch) continue
		if 'batchobj.SendBatch continue
		set closed=$s('batchobj.BatchOpen:1,1:0)
		$$$TRACE("Batch: ("_batch_") is "_$s(closed:"Closed",1:"Open"))
		if closed,$l(batchobj.ClosedBatchReportedDate) continue
		set cdt=batchobj.BatchCreationDate,datediff=+$h-cdt 
		if datediff>..DaysToRetainBatches {
			set batchobj.BatchOpen=0,batchobj.BatchClosedDate=$zdt($h,3),closed=1,sc=batchobj.%Save()
			if 'sc $$$TRACE("Unable to save Batch: ("_batch_")")
		}
		if 'closed {
			set stillopen=0,nappi=""
			for i=1:1:batchobj.Items.Count() {
				set item=batchobj.Items.GetAt(i) quit:i=""
				set nappi=item.NAPPICode
				if item.AmountLoaded<item.AmountDelivered set stillopen=1
				set overflowitem=##class(Robot.StockBatchItems).%OpenId("Overflow"_"||"_nappi)
				if $IsObject(overflowitem) {
					set load=overflowitem.AmountLoaded
					if load>0 {
						set item.AmountLoaded=item.AmountLoaded + load,diff=0
						$$$TRACE("Item: ("_item.NAPPICode_") Overflow Amount: ("_load_")")
						if item.AmountLoaded>item.AmountDelivered set diff=item.AmountLoaded-item.AmountDelivered,item.AmountLoaded=item.AmountDelivered,overflowitem.AmountLoaded=overflowitem.AmountDelivered-diff
						set dt=+$h,tm=$p(h,",",2)
						set sysitem=##class(Robot.StockBatchItemDetails).%OpenId(batch_"||"_nappi_"||"_"OF"_"||"_batch_"||"_dt_"||"_tm)
						if '$IsObject(sysitem) {set sysitem.Item=item,sysitem.DeliveryNote=batch,sysitem.Date=dt,sysitem.Time=tm,sysitem.System="OF"}
						if $IsObject(sysitem) set sysitem.Quantity=sysitem.Quantity-diff,sc=sysitem.%Save() if 'sc $$$TRACE("Unable to update Batch: ("_batch_") Item: ("_nappi_") System Details: ("_sysitem.%Id()_") Error: ("_$system.Status.GetErrorText(sc)_")")
						set sc=item.%Save() if 'sc $$$TRACE("Unable to update Batch: ("_batch_") Item: ("_nappi_") Error: ("_$system.Status.GetErrorText(sc)_")")
						set sysitem=##class(Robot.StockBatchItemDetails).%OpenId("Overflow"_"||"_nappi_"||"_"OF"_"||"_batch_"||"_dt_"||"_tm)
						if '$IsObject(sysitem) {set sysitem.Item=overflowitem,sysitem.DeliveryNote=batch,sysitem.Date=dt,sysitem.Time=tm,sysitem.System="OF"}
						if $IsObject(sysitem) set sysitem.Quantity=sysitem.Quantity-diff,sc=sysitem.%Save() if 'sc $$$TRACE("Unable to update Batch: ("_"Overflow"_") Item: ("_nappi_") System Details: ("_sysitem.%Id()_") Error: ("_$system.Status.GetErrorText(sc)_")")
						set sc=overflowitem.%Save() if 'sc $$$TRACE("Unable to update Batch: ("_"Overflow"_") Item: ("_nappi_") Error: ("_$system.Status.GetErrorText(sc)_")")
						$$$TRACE("Overflow Item: ("_nappi_") New Overflow Amount: ("_overflowitem.AmountDelivered_")")
					}
					set overflowitem=""
				}
				if item.AmountLoaded<item.AmountDelivered set stillopen=1
				set item=""
			}
			if 'stillopen {set batchobj.BatchOpen=0,closed=1,batchobj.BatchClosedDate=$zdt($h,3) set sc=batchobj.%Save() if 'sc $$$TRACE("Unable to save Batch: ("_batch_") Error: ("_$system.Status.GetErrorText(sc)_")")}
		}
		if 'closed,'..SendOpenBatch continue
		// Create Open Batch Report
		if ..NightUpdate {
			set rep=##class(Robot.Reports.Reports).%New()
			set rep.ReportID="Batch Report for "_batch,rep.ReportDescription="Open Batch Report for Batch "_batch,rep.ReportClass="Robot.Reports.Batch",rep.ReportMethod="BatchReport",rep.RunAt=7200
		}
		$$$TRACE("Ready to send Batch "_batch)
		set tRequest=##class(Robot.INURequest).%New()
		set tRequest.BatchReference=batch
		set tRequest.SendOpenBatch=..SendOpenBatch
		set tSC=..SendRequestAsync("Robot.ProcessStockBatchUpdateBP",tRequest,"INU Batch: ("_batch_") sent")
		if 'tSC $$$TRACE("Sending Batch: ("_batch_") failed with error: ("_$system.Status.GetErrorText(tSC)) set tSC=$$$OK continue
	}
	if ..NightUpdate {
		set ..SendOpenBatch=0
		set ..LastNightBatchDT=+$h
		set ..NightBatchSent=1
		set ..NightUpdate=0
	}
	set batchobj=""
End	;
	$$$TRACE("Exiting Robot Stock Batch Service")
	quit tSC
Error	;
	set $ztrap=""
	set tSC=$system.Status.Error(5001,"Robot Message Service Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="OnInit">
<Description>
This user callback method is called via initConfig() from %OnNew() or in the case of SOAP Services from OnPreSOAP()</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set system=##class(Robot.SystemSettings).%OpenId("Robot") if '$IsObject(system) set tSC=$system.Status.Error(5001,"Unable to open System Settings for System: (Robot)") goto End
	set ..SendOpenBatch=0
	set ..NightlyInterimOpenBatchReportingTime=system.NightlyInterimOpenBatchReportingTime
	set ..ReportInterimBatchBalances=system.ReportInterimBatchBalances
	set ..InterimBatchReportingInterval=system.InterimBatchReportingInterval
	set ..LastNightBatchDT=+$h
	set ..NightBatchSent=1
	set ..NightUpdate=0
	set ..DaysToRetainBatches=system.NumberOfDaysToRetainBatches
End	;
	quit tSC
Error	;
	set $ztrap=""
	set tSC=$system.Status.Error(5001,"Robot Message Service Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>
</Class>


<Class name="Robot.StockLevelService">
<Super>Ens.BusinessService</Super>
<TimeChanged>64764,36173.790681</TimeChanged>
<TimeCreated>64096,47440.778168</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>Ens.InboundAdapter</Type>
</Property>

<Property name="NightRun">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="LastRun">
<Type>%Date</Type>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<PublicList>data,message,refdata,msg,retval</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set system=##class(Robot.SystemSettings).%OpenId("Robot")
	set loopmessages=system.LoopRobotMessages
	if +$h>..LastRun set ..LastRun=+$h,..NightRun=0
	set system="" kill systems
	for {
		set system=$o(^Robot.SystemsD(system)) quit:system=""
		set sobj=##class(Robot.Systems).%OpenId(system)
		set robj=sobj.Robot if 'robj.IsMasterRobot set robj=robj.MasterRobot
		set robotid=robj.RobotId
		set systems(system)=robotid,systems(system,"obj")=sobj
		set robots(robotid,system)="",robot(robotid)=robj
	}
	set nappi=""
	for {
		set nappi=$o(^Robot.Stock.StockMasterD(nappi)) quit:nappi=""
		set obj=##class(Robot.Stock.StockMaster).%OpenId(nappi)
		if 'obj.Active!(obj.Suspended) continue
		set product=obj.EANCode,save=0 if '$l(product) continue
		for i=1:1:obj.StockLevels.Count() {
			set robot=obj.StockLevels.GetAt(i),robotid=robot.Robot.MasterRobot.RobotId
			for {
				set system=$o(robots(robotid,system)) quit:system=""
				set slsobj=##class(Robot.Stock.StockLevelSystems).%OpenId(nappi_"||"_robotid_"||"_system)
				if '$IsObject(slsobj) {
					set slsobj=##class(Robot.Stock.StockLevelSystems).%New()
					set slsobj.StockLevel=robot,slsobj.StorageLocationSystem=systems(system,"obj")
				}
				if slsobj.Priority="" set slsobj.Priority=systems(system,"obj").DefaultPriority
				set sc=slsobj.%Save() if 'sc $$$TRACE("Unable to create Stock Level System for: ("_nappi_"||"_robotid_"||"_system_") error: "_$system.Status.GetErrorText(sc))
			}
			if (..NightRun&($d(^Robot.Stock.RefreshStockLevels(robotid,product))))!('..NightRun) {
				set robot.RobotQuantity=0
				for j=1:1:robot.Systems.Count() {
					set system=robot.Systems.GetAt(j)
					for k=1:1:system.Items.Count() {
						do system.Items.RemoveAt(k)
						set save=1
					}
					for k=1:1:system.Transactions.Count() {
						do system.Transactions.RemoveAt(k)
						set save=1
					}
				}
			}
		}
		if save set sc=obj.%Save() if 'sc $$$TRACE("Unable to Update NAPPI: ("_nappi_") Error: ("_$system.Status.GetErrorText(sc)_")")
		set robotid=""
		for {
			set robotid=$o(^Robot.RobotsD(robotid)) quit:robotid=""
			if ..NightRun,'$d(^Robot.Stock.RefreshStockLevels(robotid,product)) continue
			if $d(^Robot.Stock.RefreshStockLevels(robotid,product)) $$$TRACE("Refreshing Stock Level for Product: ("_product_") on Robot: ("_robotid_")")
			kill ^Robot.Stock.RefreshStockLevels(robotid,product)
			set robj=##class(Robot.Robots).%OpenId(robotid)
			if robj.IsMasterRobot {
				set operation=$s(loopmessages:robj.Device.FileOperationName,1:robj.Device.TCPOperationName)
				set tRequest=##class(Robot.RobotRequest).%New()
				set tRequest.OMPID=""
				set tRequest.Robot=robotid
				kill data,message,refdata,msg,retval set tSC=$$$OK
				set data("DialogueCode")="B"
				set data("RobotID")=robj.RobotOwnID
				set data("ProductCode")=product
				set message=""
				set tSC=##class(Robot.Mapping.MessageDefinitions).CreateMessage("StockLevelRequest",robotid,"data","refdata",.message) if 'tSC goto End
				$$$TRACE("Message: "_message)
				do tRequest.Messages.SetAt(message,1)
				set ^Robot.TCPOutboundQueue("StockLevelRequest",robotid_"||"_product,$i(^Robot.TCPOutboundQueue("StockLevelRequest")))=$lb($zdt($h,3),"",message)
				set tSC=..SendRequestAsync("Process Robot Messages BP",tRequest,"Stock Level Request for Product: ("_product_") on Robot: ("_robotid_")") if 'tSC 
			}
		}
	}
	set ..NightRun=1
End	;
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set ..NightRun=0,..LastRun=""
End	;
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>
</Class>


<Class name="Robot.StockLoadingResponseService">
<Super>Ens.BusinessService</Super>
<TimeChanged>64245,52303.48739</TimeChanged>
<TimeCreated>64245,52303.48739</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>Ens.InboundAdapter</Type>
</Property>

<Property name="AllowInternalLoading">
<Type>%Boolean</Type>
</Property>

<Property name="LoopRobotMessages">
<Type>%String</Type>
</Property>

<Property name="RobotMessageOperationName">
<Type>%String</Type>
</Property>

<Property name="UseDispenseAndLoadingTotalsForStockLevelUpdate">
<Type>%Boolean</Type>
</Property>

<Property name="UseRealTimeStockLevelChecks">
<Type>%Boolean</Type>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set pResponse=##class(Robot.RobotResponse).%New()
	set pResponse.OMPID="",pResponse.Success=$$$OK
	set system=##class(Robot.SystemSettings).%OpenId("Robot")
	// Deal with Robot Inventory Messages
Inventory	;
	set item="",overflow=""
	for {
		set item=$o(^Robot.TCPInboundQueue("StorageRequest",item)) quit:item=""
		set ts=""
		for {
			kill message,val,retval,data,refdata
			set ts=$o(^Robot.TCPInboundQueue("StorageRequest",item,ts)) quit:ts=""
			set str=^Robot.TCPInboundQueue("StorageRequest",item,ts)
			if '$l($lg(str,2)) {
				set ifsrobot=$p(item,"||",1),orderno=$p(item,"||",2)
				$$$TRACE("Message: "_$lg(str,3))
				// Get Message Data
				merge data=^Robot.TCPInboundQueue("StorageRequest",item,ts,"data")
				set order=$g(data("OrderNumber"))
				set state=+$g(data("StockRequestState"))
				set delnote=$g(data("DeliveryNote"))
				set qty=+$g(data("Quantity"))
				set product=$g(data("ProductCode"))
				set robot=$g(data("RobotID"))
				set systemid="S0"_ifsrobot
				// Update InboundQueue Entry
				set $list(^Robot.TCPInboundQueue("StorageRequest",item,ts),2)=$zdt($h,3),^Robot.Archive.TCPInboundQueue("StorageRequest",item,ts)=^Robot.TCPInboundQueue("StorageRequest",item,ts)
				kill ^Robot.TCPInboundQueue("StorageRequest",item,ts)
				// Check if we have an Overflow Batch. Can't continue without it
				If '$IsObject(overflow) set overflow=##class(Robot.StockBatch).%OpenId("Overflow")
				if '$IsObject(overflow) $$$TRACE("Unable to continue with Inventory. 'Overflow' Batch is not defined") continue
				// Need to see if this is the Master Robot or a Slave. The Master Robot ID is held in the variable 'robotid'
				set robj=##class(Robot.Robots).%OpenId(ifsrobot) if '$IsObject(robj) set tSC=$system.Status.Error(5001,"Invalid Robot Code: ("_ifsrobot_")") goto End
				if 'robj.IsMasterRobot {
					set robotid=robj.MasterRobot.RobotId
					set operationname=$s(..LoopRobotMessages:robj.MasterRobot.Device.FileOperationName,1:robj.MasterRobot.Device.TCPOperationName)
				}
				else {
					set robotid=ifsrobot
					set operationname=$s(..LoopRobotMessages:robj.Device.FileOperationName,1:robj.Device.TCPOperationName)
				}
				set retstatus=0,text=""
				// Get Delivery Note if not specified but OrderReference is
				// Delivery Note could be entered against one or more robots
				if '$l(delnote),$l(order) {
					set delnote=$g(^Robot.CurrentBatchIndex(ifsrobot,order))
				}
				$$$TRACE("IFSRobot: ("_ifsrobot_") RobotID: ("_robot_") State: ("_state_") Delivery: ("_delnote_") Quantity: ("_qty_") Product: ("_product_")")
				// Check If 'Internal' Batch and whether 'Internal' batches are allowed
				if delnote="Internal",state=2,'..AllowInternalLoading {
					set retstatus=1,text="Delivery Note 'Internal' is not allowed"
					set tSC=..SendBatchResponse(operationname, robotid, order, delnote, "data","refdata",retstatus,text)
					continue
				}
				// If we still don't have a delivery note then we can't proceed
				if '$l(delnote) {
					set retstatus=1,text="Delivery Note ("_delnote_") on Order ("_order_") is invalid"
					set tSC=..SendBatchResponse(operationname, robotid, order, delnote, "data","refdata",retstatus,text)
					continue
				}
				if state=3 {
					// End of Delivery for a specific Robot and Delivery Note
					// Remove order number
					set x="" for {
						set x=$o(^Robot.CurrentBatch(ifsrobot,delnote,x)) q:x=""
						kill ^Robot.CurrentBatchIndex(ifsrobot,x),^Robot.CurrentBatch(ifsrobot,delnote,x)
					}
				}
				else {
					// Set Current Batch Order Index by Robot and Delivery Note
					set ^Robot.CurrentBatch(ifsrobot,delnote,order)=$h,^Robot.CurrentBatchIndex(ifsrobot,order)=delnote
				}
				set batch=##class(Robot.StockBatch).%OpenId(delnote)
				if '$IsObject(batch) {
					set retstatus=1,text="Delivery Note '"_delnote_"' is not known to the Interface Server",ok=0
					set tSC=..SendBatchResponse(operationname,robotid,order,delnote,"data","refdata",retstatus,text)
					continue
				}
				set nappi="",itemobj="",itemdetail=""
				if $l(product) {
					// Get NAPPI Code
					set tSC=##class(Robot.Stock.StockMaster).GetNAPPICode(product,.nappi)
					if 'tSC {
						// NAPPI Code not found. We cannot continue
						set retstatus=1,text="Product Code ("_product_") is unknown to the Interface Server"
						do ##class(Robot.ProductionAlertErrors).ErrorAlert(..%ConfigName,"Unknown Product Code: "_product,text,1,86399)
						set tSC=..SendBatchResponse(operationname,robotid,order,delnote,"data","refdata",retstatus,text)
						continue
					}
					set itemobj=##class(Robot.StockBatchItems).%OpenId(batch.%Id()_"||"_nappi)
					if '$IsObject(itemobj) {
						if state'=6 {
							set retstatus=1,text="Product Code ("_product_") is not part of Delivery Note '"_delnote_"'",ok=0
							set tSC=..SendBatchResponse(operationname,robotid,order,delnote,"data","refdata",retstatus,text)
						}
						else {
							set itemdetail=##class(Robot.StockBatchItems).%OpenId("Overflow||"_nappi) if '$IsObject(itemdetail) quit
							set itemdetail.AmountLoaded=itemdetail.AmountLoaded+qty
							set sc=itemdetail.%Save() if 'sc $$$TRACE("Unable to update 'Overflow' batch: ("_delnote_") for Nappi: ("_nappi_")")

							set sysitem=##class(Robot.StockBatchItemDetails).%New()
							set sysitem.Item=itemdetail,sysitem.DeliveryNote=delnote,sysitem.Date=+$h,sysitem.Time=$p($h,",",2),sysitem.System=systemid,sysitem.Quantity=qty
							set sc=sysitem.%Save() if 'sc $$$TRACE("Unable to update 'Overflow' batch: ("_delnote_") for Nappi: ("_nappi_") with System Data")

							set (itemdetail,sysitem)=""
						}
					}
					elseif $IsObject(itemobj),state=6 {
						set date=+$h,time=$p($h,",",2)
						set itemobj.AmountLoaded=itemobj.AmountLoaded+qty,diff=0
						if ..UseRealTimeStockLevelChecks {
							$$$TRACE("Sending Stock Level Refresh for Robot: ("_ifsrobot_") Product: ("_product_")")
							set ^Robot.Stock.RefreshStockLevels(ifsrobot,product)="" $$$TRACE("Stock Refresh Request for Robot: ("_ifsrobot_") EAN: ("_product_")")
						}
						if ..UseDispenseAndLoadingTotalsForStockLevelUpdate {
							$$$TRACE("Stock Transaction Insert: Robot: ("_ifsrobot_") System: ("_systemid_") Nappi: {"_nappi_") Quantity: ("_qty_")")
							set sc=##class(Robot.Stock.LoadAndDispenseTransactions).InsertTransaction("Load",ifsrobot,systemid,nappi,qty)
							if 'sc $$$TRACE("Error Inserting Transaction: "_$system.Status.GetErrorText(sc))
						}
						if itemobj.AmountLoaded>itemobj.AmountDelivered {

							set diff=itemobj.AmountLoaded-itemobj.AmountDelivered,itemobj.AmountLoaded=itemobj.AmountDelivered,amt=qty-diff

							set sysitem=##class(Robot.StockBatchItemDetails).%OpenId(delnote_"||"_nappi_"||"_systemid_"||"_delnote_"||"_date_"||"_time)
							if '$IsObject(sysitem) {
								set sysitem=##class(Robot.StockBatchItemDetails).%New()
								set sysitem.Item=itemobj,sysitem.DeliveryNote=delnote,sysitem.Date=date,sysitem.Time=time,sysitem.System=systemid
							}
							set sysitem.Quantity=sysitem.Quantity+amt
							set sc=sysitem.%Save() if 'sc $$$TRACE("Unable to update Batch: ("_delnote_") for Item: ("_nappi_") with System Data")

							set sysitem=##class(Robot.StockBatchItemDetails).%OpenId(delnote_"||"_nappi_"||"_systemid_"||"_"Overflow"_"||"_date_"||"_time)
							if '$IsObject(sysitem) {
								set sysitem=##class(Robot.StockBatchItemDetails).%New()
								set sysitem.Item=item,sysitem.DeliveryNote="Overflow",sysitem.Date=date,sysitem.Time=time,sysitem.System=systemid
							}
							set sysitem.Quantity=sysitem.Quantity+diff
							set sc=sysitem.%Save() if 'sc $$$TRACE("Unable to update Overflow data on Batch: ("_delnote_") for Item: ("_nappi_") with System Data")

							set overflowitem=##class(Robot.StockBatchItems).%OpenId("Overflow||"_nappi)
							set sysitem=##class(Robot.StockBatchItemDetails).%OpenId("Overflow"_"||"_nappi_"||"_systemid_"||"_delnote_"||"_date_"||"_time)
							if '$IsObject(sysitem) {
								set sysitem=##class(Robot.StockBatchItemDetails).%New()
								set sysitem.Item=overflowitem,sysitem.DeliveryNote=delnote,sysitem.Date=date,sysitem.Time=time,sysitem.System=systemid
							}
							set sysitem.Quantity=sysitem.Quantity+diff
							set sc=sysitem.%Save() if 'sc $$$TRACE("Unable to save Overflow data for for Batch: ("_delnote_") Item: ("_nappi_")")

							set sc=item.%Save() if 'sc $$$TRACE("Unable to save Batch: ("_delnote_") Item: ("_nappi_")")
						}
						else {
							set sysitem=##class(Robot.StockBatchItemDetails).%OpenId(delnote_"||"_nappi_"||"_systemid_"||"_delnote_"||"_date_"||"_time)
							if '$IsObject(sysitem) {
								set sysitem=##class(Robot.StockBatchItemDetails).%New()
								set sysitem.Item=itemobj,sysitem.DeliveryNote=delnote,sysitem.Date=date,sysitem.Time=time,sysitem.System=systemid
							}
							set sysitem.Quantity=sysitem.Quantity+qty
							set sc=sysitem.%Save() if 'sc $$$TRACE("Unable to update Batch: ("_delnote_") for Nappi: ("_nappi_") with System Data. Error: ("_$system.Status.GetErrorText(sc)_")")
						}
							
					}
					set tSC=batch.%Save()
					if 'tSC $$$TRACE("Unable to update Batch Totals on Delivery Note ("_delnote_")") set tSC=$$$OK
				}
				if "0,1,2,3,4,5"[state {
					if '$l(text) set text=$s(state=3:"Batch Delivery is Finished",state=2:"Batch Delivery has Started",1:"Product Ready to Load")
					$$$TRACE("Text: "_text)
					set tSC=..SendBatchResponse(operationname,robotid,order,delnote,"data","refdata",retstatus,text)
				}
			}
		}
	}
End	;
	Quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
Update	;
	set $list(@gbl@(item,ts),2)=$zdt($h,3)
	merge @agbl@(item,ts)=@gbl@(item,ts)
	kill @gbl@(item,ts)
	quit
]]></Implementation>
</Method>

<Method name="SendBatchResponse">
<FormalSpec>operation:%String,robotid:%String,order:%String,delnote:%String,global:%String,refglobal:%String,retstatus:%Integer,text:%String</FormalSpec>
<PublicList>message,val,retval,data,refdata,xdata,xrefdata</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set state=+$g(@global@("StockRequestState"),99) if "0,1,2,3,4,5"'[state goto End
	set textlen=$l(text)+1
	set tRequest=##class(Robot.RobotRequest).%New()
	set tRequest.Robot=robotid
	set @global@("DialogueCode")="I"
	set @global@("StockResponseState")=retstatus
	set @global@("FieldLength")=$l(text)
	set @global@("ErrorText")=text
	set @global@("RecordEndCharacter")=$c(0)
	set dt=$tr($zd($h,3),"-: ",""),dt=$e(dt,7,8)_$e(dt,5,6)_$e(dt,1,4)
	set @global@("ERPDate")=dt
	set message=""
	set tSC=##class(Robot.Mapping.MessageDefinitions).CreateMessage("StorageResponse",robotid,global,refglobal,.message) if 'tSC goto End
	do tRequest.Messages.SetAt(message,1)
	$$$TRACE("Sending Response: "_message)
	set ^Robot.TCPOutboundQueue("StorageResponse",robotid_"||"_order,$i(^Robot.TCPOutboundQueue("StockRespense")))=$lb($zdt($h,3),"",message)
	set tSC=..SendRequestAsync(operation,tRequest,1,"Robot Messages: Storage Response")
End	;
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set system=##class(Robot.SystemSettings).%OpenId("Robot")
	if '$IsObject(system) set tSC=$system.Status.Error(5001,"Unable to open system settings for system: ("_"Robot"_")") goto End
	set ..AllowInternalLoading = system.AllowInternalLoading
	set ..LoopRobotMessages=system.LoopRobotMessages
	set ..UseDispenseAndLoadingTotalsForStockLevelUpdate=system.UseDispenseAndLoadingTotalsForStockLevelUpdate
	set ..UseRealTimeStockLevelChecks=system.UseDispenseToTriggerStockLevelUpdate
End	;
	Quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,..%ConfigName_" Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>
</Class>


<Class name="Robot.SystemInitialise">
<Super>%Persistent</Super>
<TimeChanged>64778,75631.589342</TimeChanged>
<TimeCreated>64721,57087.597002</TimeCreated>

<Property name="SystemId">
<Type>%String</Type>
<InitialExpression>"Robot"</InitialExpression>
</Property>

<Property name="SiteCode">
<Type>%String</Type>
</Property>

<Property name="SiteDescription">
<Type>%String</Type>
</Property>

<Property name="LocationCode">
<Type>%String</Type>
</Property>

<Property name="LocationDescription">
<Type>%String</Type>
</Property>

<Property name="LocationLabelAddressLine1">
<Type>%String</Type>
<Parameter name="MAXLEN" value="45"/>
</Property>

<Property name="LocationLabelAddressLine2">
<Type>%String</Type>
<Parameter name="MAXLEN" value="45"/>
</Property>

<Property name="LocationLabelAddressLine3">
<Type>%String</Type>
<Parameter name="MAXLEN" value="45"/>
</Property>

<Property name="NumberOfMedimats">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="NumberOfSpeedBoxes">
<Type>%Integer</Type>
<InitialExpression>4</InitialExpression>
<Parameter name="MINVAL" value="1"/>
</Property>

<Property name="IsPDUSite">
<Type>%Boolean</Type>
</Property>

<Property name="NumberOfPDUs">
<Type>%Integer</Type>
<InitialExpression>4</InitialExpression>
<Parameter name="MINVAL" value="1"/>
</Property>

<Property name="Errors">
<Type>Robot.SystemInitialiseErrors</Type>
<Cardinality>children</Cardinality>
<Inverse>Parent</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>SystemId</Properties>
<Unique>1</Unique>
</Index>

<Method name="CreateError">
<FormalSpec>item:%String(MAXLEN=200)="General Error",tSC:%Status</FormalSpec>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set erroritem=##class(Robot.SystemInitialiseErrors).%New()
	set erroritem.ClassModificationItem=item,erroritem.tSC=tSC,erroritem.Parent=$THIS
	set tSC=erroritem.%Save()
End	;
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze) goto End
]]></Implementation>
</Method>

<Method name="%OnBeforeSave">
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	if ..SystemId'="Robot" set tSC=$system.Status.Error(5001,"There can only be one System Initialise Record and the System ID must be 'Robot'") goto End
	set x=##class(Robot.SystemSettings).%OpenId("Robot") set x.SiteName=..SiteDescription,tSC=x.%Save() if 'tSC goto End
	if $l(..SiteCode) {
		set site=##class(Robot.Site).%New(),site.SiteCode=..SiteCode,site.SiteDescription=$s($l(..SiteDescription):..SiteDescription,1:..SiteCode),tSC=site.%Save() if 'tSC do ..CreateError("Create Site: ("_..SiteCode_") Modification",tSC)
		if $l(..LocationCode) {
			set loc=##class(Robot.Location).%New(),loc.LocationCode=..LocationCode,loc.LocationDescription=$s($l(..LocationDescription):..LocationDescription,1:..LocationCode),loc.LocationLabelAddressLine1=..LocationLabelAddressLine1,loc.LocationLabelAddressLine2=..LocationLabelAddressLine2,loc.LocationLabelAddressLine3=..LocationLabelAddressLine3,loc.Site=site,tSC=loc.%Save() if 'tSC do ..CreateError("Create Location: ("_..SiteCode_"||"_..LocationCode_") Modification",tSC)
		}
		merge ^Robot.SiteD(site.SiteCode,"Locations",loc.LocationCode,"Ports")=^Robot.SiteD("SiteCode","Locations","Ports")
	}
	if ..NumberOfSpeedBoxes<4 {
		for i=(..NumberOfSpeedBoxes+1):1:4 {
			set tSC=##class(Robot.Port).%DeleteId("SiteCode||LocationCode||"_i) if 'tSC do ..CreateError("Port: ("_"SiteCode||LocationCode||"_i_") Modification",tSC)
			set tSC=##class(Robot.Systems).%DeleteId("S0"_i) if 'tSC  do ..CreateError("System: (S0"_i_" Modification",tSC)
			set tSC=##class(Robot.Robots).%DeleteId(i) if 'tSC do ..CreateError("Robot: ("_i_") Modification",tSC)
			set tSC=##class(Robot.PDUPrinters).%DeleteId("Printer"_i) if 'tSC do ..CreateError("Printer: ("_"Printer "_i_") Modification",tSC)
			set tSC=##class(Robot.Device).%DeleteId("PDU Printer "_i) if 'tSC do ..CreateError("Printer: ("_"PDU Printer "_i_") Modification",tSC)
			set tSC=##class(Robot.Device).%DeleteId("Speed Box "_i) if 'tSC do ..CreateError("Speed Box: ("_"Speed Box "_i_") Modification",tSC)
			kill ^Robot.TCPMessageData(i)
			set item="",g="^Robot.Stock.StockMasterD"
			for {
				set item=$o(@g@(item)) quit:item=""
				set id=item_"||"_i,tSC=##class(Robot.Stock.StockLevels).%DeleteId(id) if 'tSC do ..CreateError("Inventory Stock Level: ("_id_") Modification",tSC)
			}
		}
	}
	elseif ..NumberOfSpeedBoxes>4 {
		for i=5:1:..NumberOfSpeedBoxes {
			merge ^Robot.TCPMessageData(i)=^Robot.TCPMessageData(1)
			merge ^Robot.DeviceD("PDU Printer "_i)=^Robot.DeviceD("PDU Printer 1")
			merge ^Robot.DeviceD("Speed Box "_i)=^Robot.DeviceD("Speed Box 1")
			set tSC=##class(Robot.Device).%BuildIndices()
			set pdev=##class(Robot.Device).%OpenId("PDU Printer "_i),pdev.DeviceTCPAddress="",pdev.DeviceName="PDU Printer "_i,pdev.TCPOperationName="PDU Printer TCP Operation SB"_i,pdev.FileOperationName="PDU Printer File Operation SB"_i,tSC=pdev.%Save() if 'tSC goto End
			set rdev=##class(Robot.Device).%OpenId("Speed Box "_i),rdev.DeviceTCPAddress="",rdev.DeviceName="Speed Box "_i,rdev.TCPOperationName="Robot TCP Operation SB"_i,rdev.FileOperationName="Robot File Operation SB"_i,tSC=rdev.%Save() if 'tSC goto End
			merge ^Robot.PDUPrintersD("Printer"_i)=^Robot.PDUPrintersD("Printer1")
			set tSC=##class(Robot.PDUPrinters).%BuildIndices()
			set pdu=##class(Robot.PDUPrinters).%OpenId("Printer"_i),pdu.PrinterName="PDU Printer "_i,pdu.Device=pdev,tSC=pdu.%Save() if 'tSC goto End
			merge ^Robot.RobotsD(i)=^Robot.RobotsD(1)
			set tSC=##class(Robot.Robots).%BuildIndices()
			set robot=##class(Robot.Robots).%OpenId(i)
			set robot.RobotDescription="Speed Box "_i,robot.MasterRobot=robot
			merge ^Robot.SystemsD("S0"_i)=^Robot.SystemsD("S01")
			set tSC=##class(Robot.Systems).%BuildIndices()
			set system=##class(Robot.Systems).%OpenId("S0"_i)
			set robot.SystemCode=system,system.Robot=robot
			set tSC=robot.%Save() if 'tSC goto End
			set tSC=system.%Save() if 'tSC goto End
			merge ^Robot.SiteD("SiteCode","Locations","LocationCode","Ports",i)=^Robot.SiteD("SiteCode","Locations","LocationCode","Ports",1)
			do ##class(Robot.Ports).%BuildIndices()
			set port=##class(Robot.Port).%OpenId("SiteCode||LocationCode||"_i),port.IsPDU=1,port.PDUNumber=i,port.PDUPrinter=pdu,port.PortDescription="Port "_i,port.Robot=robot
			do port.Systems.Clear(),port.Systems.Insert("S0"_i)
			set tSC=port.%Save() if 'tSC goto End
		}
	}
End	;
	quit $$$OK
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze) goto End
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.SystemInitialiseD</DataLocation>
<DefaultData>SystemInitialiseDefaultData</DefaultData>
<IdLocation>^Robot.SystemInitialiseD</IdLocation>
<IndexLocation>^Robot.SystemInitialiseI</IndexLocation>
<StreamLocation>^Robot.SystemInitialiseS</StreamLocation>
<Data name="SystemInitialiseDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>SiteCode</Value>
</Value>
<Value name="3">
<Value>SiteDescription</Value>
</Value>
<Value name="4">
<Value>LocationCode</Value>
</Value>
<Value name="5">
<Value>LocationDescription</Value>
</Value>
<Value name="6">
<Value>LocationLabelAddressLine1</Value>
</Value>
<Value name="7">
<Value>LocationLabelAddressLine2</Value>
</Value>
<Value name="8">
<Value>LocationLabelAddressLine3</Value>
</Value>
<Value name="9">
<Value>NumberOfMedimats</Value>
</Value>
<Value name="10">
<Value>NumberOfSpeedBoxes</Value>
</Value>
<Value name="11">
<Value>IsPDUSite</Value>
</Value>
<Value name="12">
<Value>NumberOfPDUs</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.SystemInitialiseErrors">
<Super>%Persistent,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64777,77928.007937</TimeChanged>
<TimeCreated>64777,76917.870314</TimeCreated>

<Property name="CreateTS">
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($h,3)</InitialExpression>
</Property>

<Property name="ClassModificationItem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="tSC">
<Type>%Status</Type>
</Property>

<Property name="Parent">
<Type>Robot.SystemInitialise</Type>
<Cardinality>parent</Cardinality>
<Inverse>Errors</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>{%%PARENT}("Errors")</DataLocation>
<DefaultData>SystemInitialiseErrorsDefaultData</DefaultData>
<IdLocation>^Robot.SystemInitialiseC("Errors")</IdLocation>
<IndexLocation>^Robot.SystemInitialiseErrorsI</IndexLocation>
<StreamLocation>^Robot.SystemInitialiseErrorsS</StreamLocation>
<Data name="SystemInitialiseErrorsDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CreateTS</Value>
</Value>
<Value name="3">
<Value>ClassModificationItem</Value>
</Value>
<Value name="4">
<Value>tSC</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.SystemMethods">
<Super>%RegisteredObject,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64236,7563.382416</TimeChanged>
<TimeCreated>63680,83287.57629</TimeCreated>

<Method name="CopyStockProfile">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	kill array
	set (robot,rsys,system)=""
	for {
		set robot=$o(^Robot.SystemsI("System",robot)) quit:robot=""
		for {
			set rsys=$o(^Robot.SystemsI("System",robot,rsys)) quit:rsys=""
			for {
				set system=$o(^Robot.SystemsI("System",robot,rsys,system)) quit:system=""
				set array(rsys)=robot_"|"_system
				set array(rsys,"R")=##class(Robot.Robots).%OpenId(robot)
				set array(rsys,"S")=##class(Robot.Systems).%OpenId(system)
			}
		}
	}
	zw array
	w !!
	set fgbl="^Robot.NAPPItoEAND" k ^Robot.Stock.StockMasterI
	set x=""
	for {
		set x=$o(@fgbl@(x)) quit:x=""
		set nobj=##class(Robot.Stock.StockMaster).%OpenId(x) if '$IsObject(nobj) write !,x continue
		set y=""
		for {
			set y=$o(@fgbl@(x,"StockLevels",y)) quit:y=""
			set z=""
			for {
				set z=$o(@fgbl@(x,"StockLevels",y,"StorageDetails",z)) quit:z=""
				if $d(array(z)) {
					;kill ^Robot.Stock.StockMasterD(x,"StockLevels",$p(array(z),"|",1))
					w !,"RSystem: "_z
					set robj=##class(Robot.Stock.StockLevels).%New()
					set robj.Master=nobj,robj.Robot=array(z,"R"),robj.RobotQuantity=0,robj.LastUpdatedDT=$zdt($h,3)
					w !,"StockLevels Save: ",robj.%Save()
					set sobj=##class(Robot.Stock.StockLevelSystems).%New()
					set sobj.StorageLocationSystem=array(z,"S"),sobj.StockLevel=robj,sobj.Priority=array(z,"S").DefaultPriority
					w !,"StockLevelSystems: ",sobj.%Save()
					set w=""
					for {
						set w=$o(@fgbl@(x,"StockLevels",y,"StorageDetails",z,w)) q:w=""
						set id=w,shelf=$lg(@fgbl@(x,"StockLevels",y,"StorageDetails",z,w),2),cap=$lg(@fgbl@(x,"StockLevels",y,"StorageDetails",z,w),3),qty=$lg(@fgbl@(x,"StockLevels",y,"StorageDetails",z,w),4)
						set ubd=$lg(@fgbl@(x,"StockLevels",y,"StorageDetails",z,w),5),sdt=$lg(@fgbl@(x,"StockLevels",y,"StorageDetails",z,w),6),erp=$lg(@fgbl@(x,"StockLevels",y,"StorageDetails",z,w),7),batch=$lg(@fgbl@(x,"StockLevels",y,"StorageDetails",z,w),8)
						set dobj=##class(Robot.Stock.StockLevelDetails).%New()
						set dobj.System=sobj,dobj.ID=id,dobj.StorageLocationShelf=shelf,dobj.Capacity=cap,dobj.Quantity=qty,dobj.UseByDate=ubd
						set dobj.StorageDate=sdt,dobj.ERPDate=erp,dobj.BatchNumber=batch
						w !,"StockLevelDetails: ",dobj.%Save()
					}
				}
			}
		}
		w !
	}
]]></Implementation>
</Method>

<Method name="ConvertStock">
<ClassMethod>1</ClassMethod>
<FormalSpec>nappi:%String</FormalSpec>
<Implementation><![CDATA[
	if '$l($g(nappi)) set nappi=""
	if $l(nappi) {
		set old=##class(Robot.NAPPItoEAN).%OpenId(nappi)
		set new=##class(Robot.Stock.StockMaster).%New()
		set new.NAPPICode=old.NAPPICode
		set new.EANCode=old.EANCode
		set new.ProductDescription=old.ProductDescription
		set new.PackSize=old.PackSize
		set new.Active=old.Active
		set new.Suspended=0
		set new.RoboticDispensable=old.RobotDispensable
		set sc=new.%Save()
		if 'sc w !,nappi," ",$system.Status.GetErrorText(sc)
	}
	else {
		for {
			set nappi=$o(^Robot.NAPPItoEAND(nappi)) quit:nappi=""
			set old=##class(Robot.NAPPItoEAN).%OpenId(nappi)
			set new=##class(Robot.Stock.StockMaster).%New()
			set new.NAPPICode=old.NAPPICode
			set new.EANCode=old.EANCode
			set new.ProductDescription=old.ProductDescription
			set new.PackSize=old.PackSize
			set new.Active=old.Active
			set new.Suspended=0
			set new.RoboticDispensable=old.RobotDispensable
			set sc=new.%Save()
			if 'sc w !,nappi," ",$system.Status.GetErrorText(sc)
		}
	}
	quit
]]></Implementation>
</Method>

<Method name="ClearProduction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	kill ^Robot.TCPInboundQueue
	kill ^Robot.TCPOutboundQueue
	kill ^Robot.Archive.TCPInboundQueue
	kill ^Robot.Archive.TCPOutboundQueue
	;kill ^Robot.OMPDetailsD,^Robot.OMPDetailsI
	kill ^Robot.OrderReference,^Robot.OrderMessages
	kill ^Robot.TCPOperationLog,^Robot.TCPMessageData
	kill ^Robot.RunReports
	;kill ^Robot.CurrentBatch,^Robot.CurrentBatchIndex
	kill ^Ens.MessageBodyD,^Ens.MessageHeaderD,^Ens.MessageHeaderI
	kill ^EnsLib.H.MessageD,^EnsLib.H.MessageI
	kill ^Ens.Util.IOLogD,^Ens.Util.IOLogI,^Ens.Util.LogD,^Ens.Util.LogI
	kill ^Robot.TCPResponseCount
	kill ^Robot.Archive.NAPPItoEAND,^Robot.Archive.NAPPItoEANI
	;kill ^Robot.NAPPItoEAND,^Robot.NAPPItoEANI
	kill ^NigelHL7,^NigelRequest
	quit
]]></Implementation>
</Method>

<Method name="DispenseAllProducts">
<ClassMethod>1</ClassMethod>
<FormalSpec>robot:%String,system:%String,port:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error",tSC=$$$OK
	set nappi="" kill array
	for {
		set nappi=$o(^Robot.Stock.StockMasterD(nappi)) q:nappi=""
		set sobj=##class(Robot.Stock.StockLevels).%OpenId(nappi_"||"_robot_"||"_system)
		if '$IsObject(sobj) write !,"Cannot open Stock System: ("_nappi_"||"_robot_"||"_system_")" continue
		if sobj.Quantity {
			set array(nappi)=sobj.Quantity
			set array(nappi,"Desc")=$lg(^Robot.Stock.StockMasterD(nappi),5)
		}
	}
	set file="C:\Temp\AllStockDispense-"_robot_"-"_system_"-"_port_".txt"
	open file:("WNS"):0
	else  write "Unable to open HL7 script" goto End
	set rec="MSH|^~\&|RTC|Call Centre|TriMed|ALEXANDRA:ALEXANDRA PLAZA:1|20161102000001||OMP^O09^OMP_O09|20161102000001111111|P|2.7|||NE|AL"_$c(13,10)
	set str=$p(rec,"|",6),$p(str,":",3)=port,$p(rec,"|",6)=str
	use file write rec
	use file write "PID|||PAT011111^^^^TM~PAT011111^^^^CALL||Salm^Nigel^^^Mr||19730526|M|||Unit 24^First Avenue^Leafysuburb^South Africa (general)^2125^ZA^H^^||0722782988^PRN^CP~^ORN^PH||Zulu||||6209165032088"_$c(13,10)
	use file write "AL1|||"_$c(13,10)
	set nappi="",count=0
	for {
		set nappi=$o(array(nappi)) quit:nappi=""
		use file write "ORC|NW|eRX00100000|710||||||20161102|"_$c(13,10)
		use file write "RXO|||||||||||||5"_$c(13,10)
		use file write "RXR|"_$c(13,10)
		set rec="RXC|B|^^|2|Take 1 a day",$p(rec,"|",3)=nappi_"^"_array(nappi,"Desc")_"^NAPPI",$p(rec,"|",4)=array(nappi)
		use file write rec_$c(13,10)
		set count=count+array(nappi)
	}
	use 0 write !!,"Current Stock Totoal: ",count,!!
End	;
	close file
	quit tSC
Error	;
	set $ztrap="",tSC=$system.Status.Error(5001,"Code Error: "_$ze)
	goto End
]]></Implementation>
</Method>

<Method name="SplitHL7Message">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[string:%String,&array:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap="Error"
	kill array
	for i=1:1 set seg=$p(string,$c(13),i) quit:seg=""  set array(i)=seg
	zw
End	;
	quit 1
Error	;
	set $ztrap=""
	write !,"Code Error: "_$ze
	goto End
]]></Implementation>
</Method>

<Method name="CreateACK">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[status:%Status,hl7message:EnsLib.HL7.Message,&response:EnsLib.HL7.Message]]></FormalSpec>
<Implementation><![CDATA[
	Set $ZT="Error",tSC=1
	set response=hl7message.NewReplyDocument()
	set tSC=response.SetValueAt(hl7message.GetValueAt("MSH:ReceivingApplication"),"MSH:SendingFacility","set","") if 'tSC goto End
	set tSC=response.SetValueAt("ExtendedRobotInterface","MSH:SendingApplication","set","") if 'tSC goto End
	set tSC=response.SetValueAt(hl7message.GetValueAt("MSH:SendingApplication"),"MSH:ReceivingApplication","set","") if 'tSC goto End
	set tSC=response.SetValueAt($p(hl7message.GetValueAt("MSH:SendingFacility"),":",1)_"::","MSH:ReceivingFacility","set","") if 'tSC goto End
	set tSC=response.SetValueAt(hl7message.GetValueAt("MSH:VersionID.VersionID"),"MSH:VersionID","set","") if 'tSC goto End
	set dt=$tr($zdt($h,3),"- :","")
	set tSC=response.SetValueAt(hl7message.GetValueAt("MSH:MessageControlID"),"MSH:MessageControlID","set","") if 'tSC goto End
	set tSc=response.SetValueAt($s(status:"CA",1:"CE"),"MSA:AcknowledgmentCode","set","") if 'tSC goto End
	if 'status set tSC=response.SetValueAt($system.Status.GetErrorText(status),"ERR(1):UserMessage","set","") if 'tSC goto End
End
	Quit $$$OK
Error
	Set $ZT="",tSC=$system.Status.Error(5001,"SystemMethods:CreateACK:Code Error: "_$ze)
	Goto End
]]></Implementation>
</Method>

<Method name="CreateInternalINUMessage">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set file="c:\temp\INU-Internal.txt"
	open file:("WNS"):0
	use file write "MSH|^~\&|TriMed|SB:001:|Robot|SB:001:|"_$tr($zdt($h,3),":- ","")_"||INU^U05^INU_U05|"_$tr($zdt($h,3),":- ","")_"|P|2.7|Internal||NE|AL|||||Open",!
	use file write "EQU|ROBOT|"_$tr($zdt($h,3),":- ",""),!
	set nappi=""
	for {
		set nappi=$o(^Robot.Stock.StockMasterD(nappi)) quit:nappi=""
		set str=^(nappi)
		set ean=$lg(str,10),desc=$lg(str,5),pack=$lg(str,19)
		use file write "INV|"_nappi_"^"_desc_"^NAPPI^"_ean_"^^EAN|OK|Internal||^^^"_pack_"^^Pack Size||999999999|0",!
	}
	close file
]]></Implementation>
</Method>

<Method name="CreateOverflowINUMessage">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set file="c:\temp\INU-Overflow.txt"
	open file:("WNS"):0
	use file write "MSH|^~\&|TriMed|SB:001:|Robot|SB:001:|"_$tr($zdt($h,3),":- ","")_"||INU^U05^INU_U05|"_$tr($zdt($h,3),":- ","")_"|P|2.7|Overflow||NE|AL|||||Open",!
	use file write "EQU|ROBOT|"_$tr($zdt($h,3),":- ",""),!
	set nappi=""
	for {
		set nappi=$o(^Robot.Stock.StockMasterD(nappi)) quit:nappi=""
		set str=^(nappi)
		set ean=$lg(str,10),desc=$lg(str,5),pack=$lg(str,19)
		use file write "INV|"_nappi_"^"_desc_"^NAPPI^"_ean_"^^EAN|OK|Overflow||^^^"_pack_"^^Pack Size||0|0",!
	}
	close file
]]></Implementation>
</Method>

<Method name="SendMessages">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set string="Script A1 Chute 1,Script A2 Chute 2,Script A1 Chute 3,Script A2 Chute 4,Script A2 Chute 1,Script A1 Chute 2,Script A2 Chute 3,Script A1 Chute 4"
	set pa="E:\InterSystems\RobotTesting\ProcessedHL7\"
	set pb="E:\InterSystems\RobotTesting\InboundHL7\"
	for i=1:1:8 {
		set file=$p(string,",",i)
		do ##class(%File).CopyFile(pa_file_".txt",pb_file_".txt")
		hang 30
	}
	quit
]]></Implementation>
</Method>

<Method name="BadDispenseCheck">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set file="c:\temp\baddispense.txt"
	open file:("WNS"):0
	else  write !,"Bad File" quit
	set (x,y,z)="",ogbl="^Robot.TCPOutboundQueue(""DispenseRequest"")",igbl="^Robot.Archive.TCPInboundQueue(""DispenseResponse"")"
	set count=0,error=0
	for {
		set x=$o(@ogbl@(x)) q:x=""
		set count=count+1
		for {
			set y=$o(@ogbl@(x,y)) q:y=""
			set rec=@ogbl@(x,y)
			set dt=$lg(rec,1),msg=$lg(rec,3)
			set prod=$e(msg,19,31),qty1=+$e(msg,39,43)
			use file write "Order: ",x,!
			use file write "'A' Date: ",dt," Product: ",prod," Quantity: ",qty1,!
		}
		for {
			set z=$o(@igbl@(x,z)) q:z=""
			set rec=@igbl@(x,z)
			set dt=$lg(rec,1),msg=$lg(rec,3)
			set status=+$e(msg,16,17),qty2=+$e(msg,40,44)
			use file write "'a' Date: ",dt," Status: ",status," Quantity: ",qty2," Difference: ",$s(qty2<qty1:"<",qty1=qty2:"=",qty2>qty1:">"),!
			if qty2>qty1 set error=error+1
		}
		use file write !
		use file write "Total Order Count: ",count,!!
		use file write "Total Error Count: ",error,!
	}
	close file
]]></Implementation>
</Method>
</Class>


<Class name="Robot.SystemSettings">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64734,55389</TimeChanged>
<TimeCreated>63640,70163.16785</TimeCreated>

<Property name="SystemID">
<Type>%String</Type>
<InitialExpression>"Robot"</InitialExpression>
</Property>

<Property name="SiteName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="ProductionPackageName">
<Type>%String</Type>
</Property>

<Property name="DefaultEmailList">
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Property name="ReportInterimBatchBalances">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="InterimBatchReportingInterval">
<Description>
The time interval used to report open batches for Stock Loading (In Minutes)</Description>
<Type>%Integer</Type>
<InitialExpression>3600</InitialExpression>
</Property>

<Property name="NightlyInterimOpenBatchReportingTime">
<Description>
The time when open batches should be closed and resulted for the last time (24 hour clock)</Description>
<Type>%Time</Type>
</Property>

<Property name="AutomaticallyResultDispenseOrders">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="TimeBeforeAutoResultRDS">
<Type>%Time</Type>
<InitialExpression>175</InitialExpression>
</Property>

<Property name="AutomaticallyFailOrderOnSlowResponse">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="TimeBeforeAutoFailOnSlowResponse">
<Type>%Time</Type>
<InitialExpression>22</InitialExpression>
</Property>

<Property name="NumberOfDaysToRetainLogData">
<Type>%Integer</Type>
<InitialExpression>3</InitialExpression>
</Property>

<Property name="NumberOfDaysToRetainTraceData">
<Type>%Integer</Type>
<InitialExpression>3</InitialExpression>
</Property>

<Property name="NumberOfDaysToRetainOrders">
<Type>%Integer</Type>
<InitialExpression>5</InitialExpression>
</Property>

<Property name="NumberOfDaysToRetainBatches">
<Type>%Integer</Type>
<InitialExpression>5</InitialExpression>
</Property>

<Property name="NumberOfDaystoRetainQueues">
<Type>%Integer</Type>
<InitialExpression>5</InitialExpression>
</Property>

<Property name="LoopRobotMessages">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="LoopPDUPrinter">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="LoopHL7RDSMessages">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="CapturePDUPrintOutput">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="CaptureHL7RDSOutput">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="AllowInternalLoading">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="TestForZeroTCPRead">
<Type>%Boolean</Type>
<InitialExpression>5</InitialExpression>
</Property>

<Property name="AllowDeleteOnNAPPIMaster">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="UseDispenseToTriggerStockLevelUpdate">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="DispenseTriggerInterval">
<Type>%Time</Type>
</Property>

<Property name="UseDispenseAndLoadingTotalsForStockLevelUpdate">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="UseRealTimeStockLevelChecks">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="UseRealTimeStockLevelTransactions">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="StatusMessageModuloValue">
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="SupportBrokenPacks">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="INUHL7TCPOperation">
<Type>%String</Type>
</Property>

<Property name="INUHL7FileOperation">
<Type>%String</Type>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>SystemID</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.SystemSettingsD</DataLocation>
<DefaultData>SystemSettingsDefaultData</DefaultData>
<IdLocation>^Robot.SystemSettingsD</IdLocation>
<IndexLocation>^Robot.SystemSettingsI</IndexLocation>
<StreamLocation>^Robot.SystemSettingsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="SystemSettingsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ProductionPackageName</Value>
</Value>
<Value name="3">
<Value>DefaultEmailList</Value>
</Value>
<Value name="4">
<Value>ReportInterimBatchBalances</Value>
</Value>
<Value name="5">
<Value>InterimBatchReportingInterval</Value>
</Value>
<Value name="6">
<Value>NightlyInterimOpenBatchReportingTime</Value>
</Value>
<Value name="7">
<Value>AutomaticallyResultDispenseOrders</Value>
</Value>
<Value name="8">
<Value>TimeBeforeAutoResultRDS</Value>
</Value>
<Value name="9">
<Value>AutomaticallyFailOrderOnSlowResponse</Value>
</Value>
<Value name="10">
<Value>TimeBeforeAutoFailOnSlowResponse</Value>
</Value>
<Value name="11">
<Value>NumberOfDaysToRetainLogData</Value>
</Value>
<Value name="12">
<Value>NumberOfDaysToRetainTraceData</Value>
</Value>
<Value name="13">
<Value>NumberOfDaysToRetainOrders</Value>
</Value>
<Value name="14">
<Value>NumberOfDaysToRetainBatches</Value>
</Value>
<Value name="15">
<Value>NumberOfDaystoRetainQueues</Value>
</Value>
<Value name="16">
<Value>LoopRobotMessages</Value>
</Value>
<Value name="17">
<Value>LoopPDUPrinter</Value>
</Value>
<Value name="18">
<Value>LoopHL7RDSMessages</Value>
</Value>
<Value name="19">
<Value>CapturePDUPrintOutput</Value>
</Value>
<Value name="20">
<Value>CaptureHL7RDSOutput</Value>
</Value>
<Value name="21">
<Value>AllowInternalLoading</Value>
</Value>
<Value name="22">
<Value>TestForZeroTCPRead</Value>
</Value>
<Value name="23">
<Value>AllowDeleteOnNAPPIMaster</Value>
</Value>
<Value name="24">
<Value>UseDispenseToTriggerStockLevelUpdate</Value>
</Value>
<Value name="25">
<Value>DispenseTriggerInterval</Value>
</Value>
<Value name="26">
<Value>UseDispenseAndLoadingTotalsForStockLevelUpdate</Value>
</Value>
<Value name="27">
<Value>UseRealTimeStockLevelChecks</Value>
</Value>
<Value name="28">
<Value>UseRealTimeStockLevelTransactions</Value>
</Value>
<Value name="29">
<Value>StatusMessageModuloValue</Value>
</Value>
<Value name="30">
<Value>SupportBrokenPacks</Value>
</Value>
<Value name="31">
<Value>SiteName</Value>
</Value>
<Value name="32">
<Value>INUHL7TCPOperation</Value>
</Value>
<Value name="33">
<Value>INUHL7FileOperation</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Systems">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>64734,55389</TimeChanged>
<TimeCreated>64209,6145.030507</TimeCreated>

<Property name="System">
<Type>%String</Type>
</Property>

<Property name="SystemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="RobotSystemID">
<Type>%String</Type>
</Property>

<Property name="Robot">
<Type>Robot.Robots</Type>
</Property>

<Property name="DefaultPriority">
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="5"/>
<Parameter name="MINVAL" value="1"/>
</Property>

<Index name="PK">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>System</Properties>
<Unique>1</Unique>
</Index>

<Index name="System">
<Properties>Robot,RobotSystemID:EXACT</Properties>
</Index>

<Index name="SysUnique">
<Properties>Robot,RobotSystemID</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Robot.SystemsD</DataLocation>
<DefaultData>SystemsDefaultData</DefaultData>
<IdLocation>^Robot.SystemsD</IdLocation>
<IndexLocation>^Robot.SystemsI</IndexLocation>
<StreamLocation>^Robot.SystemsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="SystemsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>SystemName</Value>
</Value>
<Value name="3">
<Value>RobotSystemID</Value>
</Value>
<Value name="4">
<Value>Robot</Value>
</Value>
<Value name="5">
<Value>DefaultPriority</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Robot.Telephone">
<Super>%SerialObject,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>63649,37684</TimeChanged>
<TimeCreated>63620,81980.367932</TimeCreated>

<Property name="CountryCode">
<Parameter name="VALUELIST" value=",27"/>
</Property>

<Property name="Number">
<Type>%String</Type>
<Parameter name="POPSPEC" value=".TelephoneNumber()"/>
</Property>

<Method name="GetNumber">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if $l(..CountryCode) {
		set number="+"_..CountryCode_$s($e(..Number,1)=0:$e(..Number,2,$l(..Number)),1:..Number)
	}
	else {
		set number=..Number
	}
	quit number
]]></Implementation>
</Method>

<Method name="TelephoneNumber">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $p("0827450434,0722782988,0114825224",",",($r(3)+1))
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Serial</Type>
<State>TelephoneState</State>
<StreamLocation>^Robot.TelephoneS</StreamLocation>
<Data name="TelephoneState">
<Value name="1">
<Value>CountryCode</Value>
</Value>
<Value name="2">
<Value>Number</Value>
</Value>
</Data>
</Storage>
</Class>


<Routine name="TestPrint" type="INT" languagemode="0" timestamp="64771,45012.970401"><![CDATA[
TestPrint ;
Test(ip)
	set dev="|TCP|9100"
	open dev:("192.168.16.71":9100:"Q"):2
	else  use 0 write "Cannot open printer 9100" quit
	use 0 write "connected to: "_ip_":9100",!!
	use 0 write "Cancelling Buffer",!
	use dev write $c(2),$c(24),$c(3)
	use 0 write "Start: Getting Status",!
	use dev write $c(2),$c(5),$c(3),!
	use dev read status:2 set status=$zstrip($zstrip(status,"*C"),"*W")
	use 0 write "Status Before: (",status,")",!
	hang 2
	use dev write $c(2)
	use dev write $c(27,65)
	use dev write $c(27,37),1
	use dev write $c(27,69),15
	use dev write $c(27,86),380,$c(27,72),550,$c(27,80),2,$c(27,76),"0101",$c(27,88,83)
	use dev write "Andre van Biljon"_$c(13)
	use dev write "84 3rd Avenue Melville 2109"_$c(13)
	use dev write $c(27,86),380,$c(27,72),800,$c(27,80),2,$c(27,76),"0101",$c(27,88,85)
	use dev write "Themba Lethu Clinic Pharmacy T: 011 489 088"
	use dev write $c(27,86),380,$c(27,72),820,$c(27,80),2,$c(27,76),"0101",$c(27,88,85)
	use dev write "Helen Joseph Hospital, Perth Road, Westdene"
	use dev write $c(27,81),1
	use dev write $c(27,5)
	use dev write $c(27,90)
	use dev write $c(3)
	use 0 write "Print Finished",!!
	use 0 write "After Print: Getting Status",!
	use dev write $c(2),$c(5),$c(3),!
	use dev read status:2 set status=$zstrip($zstrip(status,"*C"),"*W")
	use 0 write "Status After: (",status,")",!
	close dev
]]></Routine>


<Routine name="TestPrint1" type="INT" languagemode="0" timestamp="63842,50128.689912"><![CDATA[
TestPrint1 ;
	set dev="|TCP|9101"
	open dev:("192.168.16.107":9100:"M"):0
	else  use 0 write "Cannot open printer" quit
	write "connected to: 192.168.16.90",!!
	use dev write $c(2)
	use dev write $c(27,65)
	use dev write $c(27,37),1
	use dev write $c(27,69),15
	use dev write $c(27,86),380,$c(27,72),550,$c(27,80),2,$c(27,76),"0101",$c(27,88,83)
	use dev write "Andre van Biljon"_$c(13)
	use dev write "84 3rd Avenue Melville 2109"_$c(13)
	use dev write $c(27,86),380,$c(27,72),800,$c(27,80),2,$c(27,76),"0101",$c(27,88,85)
	use dev write "Themba Lethu Clinic Pharmacy T: 011 489 088"
	use dev write $c(27,86),380,$c(27,72),820,$c(27,80),2,$c(27,76),"0101",$c(27,88,85)
	use dev write "Helen Joseph Hospital, Perth Road, Westdene"
	use dev write $c(27,81),1
	use dev write $c(27,5)
	use dev write $c(27,90)
	use dev write $c(3),*-3
	set info=$system.INetInfo.GetInterfacesInfo("")
	set bytes=$system.INetInfo.TCPStats(4)
	set ^TCPCheck($i(^TCPCheck))=info_"||"_bytes
	use 0 write "Print Finished",!!
	close dev
]]></Routine>


<CSP name="ATCCodes.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica ATCCodes</title>
</head>
<h1 align='center'>Stock ATCCodes</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Stock.ATCCodes' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Stock.ATCCodes'  where='ATCDescription' maxrows='600' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*ATCCode </div></b></td>
		<td><input type='text' name='ATCCode' cspbind='ATCCode' size='50' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>*ATCDescription </div></b></td>
		<td><input type='text' name='ATCDescription' cspbind='ATCDescription' size='80' csprequired></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="ColumnMappings.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot Stock PropertyToColumn Mapping,/title>
</head>
<h1 align='center'>Robot Stock PropertyToColumn Mapping,/h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Stock.PropertyToColumnMapping' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Stock.PropertyToColumnMapping' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*MappingID </div></b></td>
		<td><input type='text' name='MappingID' cspbind='MappingID' size='50' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>MappingName </div></b></td>
		<td><input type='text' name='MappingName' cspbind='MappingName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>FromClassName </div></b></td>
		<td><input type='text' name='FromClassName' cspbind='FromClassName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ToClasName </div></b></td>
		<td><input type='text' name='ToClasName' cspbind='ToClasName' size='50'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="DFIAlertConditions.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>	Cache Server Page </title>

</head>

<body>

<head>
<title>Cache Server Page - DFI.Common.Alerts.AlertConditions (HST-DFI-CODEBASE)</title>
</head>
<h1 align='center'>DFI.Common.Alerts.AlertConditions</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='DFI.Common.Alerts.AlertConditions' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page -->
<csp:search name='form_search' classname='DFI.Common.Alerts.AlertConditions' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><font color='#666666'><b><div align='right'>*ProductionItem ID:</div></b></font></td>
		<td><select name='ProductionItem' cspbind='ProductionItem' classname='DFI.Common.Alerts.ProductionAlerts' query='Extent' field='ID' csprequired></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>*ConditionID:</div></b></td>
		<td><input type='text' name='ConditionID' cspbind='ConditionID' size='80' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>ConditionText:</div></b></td>
		<td><input type='text' name='ConditionText' cspbind='ConditionText' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ConditionCount:</div></b></td>
		<td><input type='text' name='ConditionCount' cspbind='ConditionCount' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ConditionCountAlert:</div></b></td>
		<td><input type='text' name='ConditionCountAlert' cspbind='ConditionCountAlert' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ConditionCountAlertInterval:</div></b></td>
		<td><input type='text' name='ConditionCountAlertInterval' cspbind='ConditionCountAlertInterval' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>LastAlertDT:</div></b></td>
		<td><input type='text' name='LastAlertDT' cspbind='LastAlertDT' size='19'></td>
	</tr>
	<tr>
		<td><b><div align='right'>RecipientList:</div></b></td>
		<td><input type='text' name='RecipientList' cspbind='RecipientList' size='80'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="DFIAlertErrors.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>	Cache Server Page </title>

</head>

<body>

<head>
<title>Cache Server Page - DFI.Common.Alerts.AlertErrors (HST-DFI-CODEBASE)</title>
</head>
<h1 align='center'>DFI.Common.Alerts.AlertErrors</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='DFI.Common.Alerts.AlertErrors' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='DFI.Common.Alerts.AlertErrors' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><font color='#666666'><b><div align='right'>*ProductionItem ID:</div></b></font></td>
		<td><select name='ProductionItem' cspbind='ProductionItem' classname='DFI.Common.Alerts.ProductionAlerts' query='Extent' field='ID' csprequired></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>*ErrorID:</div></b></td>
		<td><input type='text' name='ErrorID' cspbind='ErrorID' size='80' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>ErrorText:</div></b></td>
		<td><input type='text' name='ErrorText' cspbind='ErrorText' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ErrorCount:</div></b></td>
		<td><input type='text' name='ErrorCount' cspbind='ErrorCount' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ErrorCountAlert:</div></b></td>
		<td><input type='text' name='ErrorCountAlert' cspbind='ErrorCountAlert' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ErrorCountAlertInterval:</div></b></td>
		<td><input type='text' name='ErrorCountAlertInterval' cspbind='ErrorCountAlertInterval' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>LastAlertDT:</div></b></td>
		<td><input type='text' name='LastAlertDT' cspbind='LastAlertDT' size='19'></td>
	</tr>
	<tr>
		<td><b><div align='right'>RecipientList:</div></b></td>
		<td><input type='text' name='RecipientList' cspbind='RecipientList' size='80'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="DFIConfigurationSettings.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>	Cache Server Page </title>

</head>

<head>
<title>Cache Server Page - DFI.Common.Configuration.ConfigurationSettings (HST-DFI-CODEBASE)</title>
</head>
<h1 align='center'>DFI.Common.Configuration.ConfigurationSettings</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='DFI.Common.Configuration.ConfigurationSettings' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='DFI.Common.Configuration.ConfigurationSettings' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*DFIConfigurationID:</div></b></td>
		<td><input type='text' name='DFIConfigurationID' cspbind='DFIConfigurationID' size='50' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>*DFIProductionName:</div></b></td>
		<td><input type='text' name='DFIProductionName' cspbind='DFIProductionName' size='80' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFINamespace:</div></b></td>
		<td><input type='text' name='DFINamespace' cspbind='DFINamespace' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIInterfaceVersion:</div></b></td>
		<td><input type='text' name='DFIInterfaceVersion' cspbind='DFIInterfaceVersion' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIIsProductionInterface:</div></b></td>
		<td><input type='checkbox' name='DFIIsProductionInterface' cspbind='DFIIsProductionInterface'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIIsProductionActive:</div></b></td>
		<td><input type='checkbox' name='DFIIsProductionActive' cspbind='DFIIsProductionActive'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFISendingFacility:</div></b></td>
		<td><input type='text' name='DFISendingFacility' cspbind='DFISendingFacility' size='100'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFISendingApplication:</div></b></td>
		<td><input type='text' name='DFISendingApplication' cspbind='DFISendingApplication' size='100'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIReceivingFacility:</div></b></td>
		<td><input type='text' name='DFIReceivingFacility' cspbind='DFIReceivingFacility' size='100'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIReceivingApplication:</div></b></td>
		<td><input type='text' name='DFIReceivingApplication' cspbind='DFIReceivingApplication' size='100'></td>
	</tr>
	<tr>
		<td><b><div align='right'>*DFITargetMessageType:</div></b></td>
		<td><select name='DFITargetMessageType' cspbind='DFITargetMessageType' csprequired>
		  <option value='HL7'>HL7</option>
		  <option value='FHIR'>FHIR</option>
		  <option value='SQL'>SQL</option>
		</select></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIDefaultEvent:</div></b></td>
		<td><input type='text' name='DFIDefaultEvent' cspbind='DFIDefaultEvent' size='50'></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>DFIDebugging:</div></b></font></td>
		<td><input type='checkbox' name='DFIDebugging' cspbind='DFIDebugging' readonly></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIAlertMonitorServiceName:</div></b></td>
		<td><input type='text' name='DFIAlertMonitorServiceName' cspbind='DFIAlertMonitorServiceName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIAlertMonitorServiceClassName:</div></b></td>
		<td><input type='text' name='DFIAlertMonitorServiceClassName' cspbind='DFIAlertMonitorServiceClassName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIAlertNotificationServiceName:</div></b></td>
		<td><input type='text' name='DFIAlertNotificationServiceName' cspbind='DFIAlertNotificationServiceName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIAlertNotificationServiceClassName:</div></b></td>
		<td><input type='text' name='DFIAlertNotificationServiceClassName' cspbind='DFIAlertNotificationServiceClassName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIErrorAlertEmailList:</div></b></td>
		<td><input type='text' name='DFIErrorAlertEmailList' cspbind='DFIErrorAlertEmailList' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>*DFIAlertNotificationEmailList:</div></b></td>
		<td><input type='text' name='DFIAlertNotificationEmailList' cspbind='DFIAlertNotificationEmailList' size='80' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIConditionAlertEmailList:</div></b></td>
		<td><input type='text' name='DFIConditionAlertEmailList' cspbind='DFIConditionAlertEmailList' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIHouseKeepingServiceName:</div></b></td>
		<td><input type='text' name='DFIHouseKeepingServiceName' cspbind='DFIHouseKeepingServiceName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIHouseKeepingClassName:</div></b></td>
		<td><input type='text' name='DFIHouseKeepingClassName' cspbind='DFIHouseKeepingClassName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIHL7RequestFileName:</div></b></td>
		<td><input type='text' name='DFIHL7RequestFileName' cspbind='DFIHL7RequestFileName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIHL7ResponseFileName:</div></b></td>
		<td><input type='text' name='DFIHL7ResponseFileName' cspbind='DFIHL7ResponseFileName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIHTTPHL7OperationName:</div></b></td>
		<td><input type='text' name='DFIHTTPHL7OperationName' cspbind='DFIHTTPHL7OperationName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIHTTPHL7OperationClassName:</div></b></td>
		<td><input type='text' name='DFIHTTPHL7OperationClassName' cspbind='DFIHTTPHL7OperationClassName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIHTTPSHL7OperationName:</div></b></td>
		<td><input type='text' name='DFIHTTPSHL7OperationName' cspbind='DFIHTTPSHL7OperationName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIHTTPSHL7OperationClassName:</div></b></td>
		<td><input type='text' name='DFIHTTPSHL7OperationClassName' cspbind='DFIHTTPSHL7OperationClassName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIHTTPFHIROperationName:</div></b></td>
		<td><input type='text' name='DFIHTTPFHIROperationName' cspbind='DFIHTTPFHIROperationName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIHTTPFHIROperationClassName:</div></b></td>
		<td><input type='text' name='DFIHTTPFHIROperationClassName' cspbind='DFIHTTPFHIROperationClassName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIHTTPSFHIROperationName:</div></b></td>
		<td><input type='text' name='DFIHTTPSFHIROperationName' cspbind='DFIHTTPSFHIROperationName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIHTTPSFHIROperationClassName:</div></b></td>
		<td><input type='text' name='DFIHTTPSFHIROperationClassName' cspbind='DFIHTTPSFHIROperationClassName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIHL7FileDirectory:</div></b></td>
		<td><input type='text' name='DFIHL7FileDirectory' cspbind='DFIHL7FileDirectory' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIFHIRFileDirectory:</div></b></td>
		<td><input type='text' name='DFIFHIRFileDirectory' cspbind='DFIFHIRFileDirectory' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIFileHL7OpertionName:</div></b></td>
		<td><input type='text' name='DFIFileHL7OpertionName' cspbind='DFIFileHL7OpertionName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIFileHL7OpertionClassName:</div></b></td>
		<td><input type='text' name='DFIFileHL7OpertionClassName' cspbind='DFIFileHL7OpertionClassName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIFHIRResources:</div></b></td>
		<td><input type='text' name='DFIFHIRResources' cspbind='DFIFHIRResources' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIFHIRResourceRequestJSONFileName:</div></b></td>
		<td><input type='text' name='DFIFHIRResourceRequestJSONFileName' cspbind='DFIFHIRResourceRequestJSONFileName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIFHIRResourceResponseJSONFileName:</div></b></td>
		<td><input type='text' name='DFIFHIRResourceResponseJSONFileName' cspbind='DFIFHIRResourceResponseJSONFileName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIFileFHIROperationName:</div></b></td>
		<td><input type='text' name='DFIFileFHIROperationName' cspbind='DFIFileFHIROperationName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIFileFHIROperationClassName:</div></b></td>
		<td><input type='text' name='DFIFileFHIROperationClassName' cspbind='DFIFileFHIROperationClassName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIFileDirectory:</div></b></td>
		<td><input type='text' name='DFIFileDirectory' cspbind='DFIFileDirectory' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>*DFIDefaultEmailList:</div></b></td>
		<td><input type='text' name='DFIDefaultEmailList' cspbind='DFIDefaultEmailList' size='80' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIEMailSenderAddress:</div></b></td>
		<td><input type='text' name='DFIEMailSenderAddress' cspbind='DFIEMailSenderAddress' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIRequestMessageClassName:</div></b></td>
		<td><input type='text' name='DFIRequestMessageClassName' cspbind='DFIRequestMessageClassName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIResponseMessageClassName:</div></b></td>
		<td><input type='text' name='DFIResponseMessageClassName' cspbind='DFIResponseMessageClassName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFISendMessageHTTP:</div></b></td>
		<td><input type='checkbox' name='DFISendMessageHTTP' cspbind='DFISendMessageHTTP'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFISendMessageHTTPS:</div></b></td>
		<td><input type='checkbox' name='DFISendMessageHTTPS' cspbind='DFISendMessageHTTPS'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFISendMessageToFile:</div></b></td>
		<td><input type='checkbox' name='DFISendMessageToFile' cspbind='DFISendMessageToFile'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIIsSSLTSLOperation:</div></b></td>
		<td><input type='checkbox' name='DFIIsSSLTSLOperation' cspbind='DFIIsSSLTSLOperation'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIManifestFileDirectory:</div></b></td>
		<td><input type='text' name='DFIManifestFileDirectory' cspbind='DFIManifestFileDirectory' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIManifestFileName:</div></b></td>
		<td><input type='text' name='DFIManifestFileName' cspbind='DFIManifestFileName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIManifestRequestRecordFileName:</div></b></td>
		<td><input type='text' name='DFIManifestRequestRecordFileName' cspbind='DFIManifestRequestRecordFileName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIManifestResponseRecordFileName:</div></b></td>
		<td><input type='text' name='DFIManifestResponseRecordFileName' cspbind='DFIManifestResponseRecordFileName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>*DFIMessageQueueClassName:</div></b></td>
		<td><input type='text' name='DFIMessageQueueClassName' cspbind='DFIMessageQueueClassName' size='50' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIMessageQueueServiceClassName:</div></b></td>
		<td><input type='text' name='DFIMessageQueueServiceClassName' cspbind='DFIMessageQueueServiceClassName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIMessageQueueServiceName:</div></b></td>
		<td><input type='text' name='DFIMessageQueueServiceName' cspbind='DFIMessageQueueServiceName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIPrimaryBusinessProcessName:</div></b></td>
		<td><input type='text' name='DFIPrimaryBusinessProcessName' cspbind='DFIPrimaryBusinessProcessName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIPrimaryBusinessServiceClassName:</div></b></td>
		<td><input type='text' name='DFIPrimaryBusinessServiceClassName' cspbind='DFIPrimaryBusinessServiceClassName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFINumberOfDaysToKeepDebugLogs:</div></b></td>
		<td><input type='text' name='DFINumberOfDaysToKeepDebugLogs' cspbind='DFINumberOfDaysToKeepDebugLogs' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFINumberOfDaysToKeepEnsembleLogs:</div></b></td>
		<td><input type='text' name='DFINumberOfDaysToKeepEnsembleLogs' cspbind='DFINumberOfDaysToKeepEnsembleLogs' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFINumberOfDaysToKeepEnsembleMessages:</div></b></td>
		<td><input type='text' name='DFINumberOfDaysToKeepEnsembleMessages' cspbind='DFINumberOfDaysToKeepEnsembleMessages' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFINumberOfDaysToKeepFiles:</div></b></td>
		<td><input type='text' name='DFINumberOfDaysToKeepFiles' cspbind='DFINumberOfDaysToKeepFiles' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFINumberOfDaysToKeepQueueMessages:</div></b></td>
		<td><input type='text' name='DFINumberOfDaysToKeepQueueMessages' cspbind='DFINumberOfDaysToKeepQueueMessages' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIAltEMCIMessageQueueServiceName:</div></b></td>
		<td><input type='text' name='DFIAltEMCIMessageQueueServiceName' cspbind='DFIAltEMCIMessageQueueServiceName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIAltEMCIMessageQueueServiceClassName:</div></b></td>
		<td><input type='text' name='DFIAltEMCIMessageQueueServiceClassName' cspbind='DFIAltEMCIMessageQueueServiceClassName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIAltODSMessageQueueServiceName:</div></b></td>
		<td><input type='text' name='DFIAltODSMessageQueueServiceName' cspbind='DFIAltODSMessageQueueServiceName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIAltODSMessageQueueServiceClassName:</div></b></td>
		<td><input type='text' name='DFIAltODSMessageQueueServiceClassName' cspbind='DFIAltODSMessageQueueServiceClassName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIBuildPatientListServiceName:</div></b></td>
		<td><input type='text' name='DFIBuildPatientListServiceName' cspbind='DFIBuildPatientListServiceName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIBuildPatientListServiceClassName:</div></b></td>
		<td><input type='text' name='DFIBuildPatientListServiceClassName' cspbind='DFIBuildPatientListServiceClassName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIBulkExportSendPatientsServiceName:</div></b></td>
		<td><input type='text' name='DFIBulkExportSendPatientsServiceName' cspbind='DFIBulkExportSendPatientsServiceName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIBulkExportSendPatientServiceClassName:</div></b></td>
		<td><input type='text' name='DFIBulkExportSendPatientServiceClassName' cspbind='DFIBulkExportSendPatientServiceClassName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIBulkExportSendPatientProcessName:</div></b></td>
		<td><input type='text' name='DFIBulkExportSendPatientProcessName' cspbind='DFIBulkExportSendPatientProcessName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIBulkExportSendPatientProcessClass:</div></b></td>
		<td><input type='text' name='DFIBulkExportSendPatientProcessClass' cspbind='DFIBulkExportSendPatientProcessClass' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIBulkExportQueueClassName:</div></b></td>
		<td><input type='text' name='DFIBulkExportQueueClassName' cspbind='DFIBulkExportQueueClassName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIBulkExportPatientRecordsProcessed:</div></b></td>
		<td><input type='text' name='DFIBulkExportPatientRecordsProcessed' cspbind='DFIBulkExportPatientRecordsProcessed' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIBulkExportNumberOfPatientsToBeSelected:</div></b></td>
		<td><input type='text' name='DFIBulkExportNumberOfPatientsToBeSelected' cspbind='DFIBulkExportNumberOfPatientsToBeSelected' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIBulkExportPatientListComplete:</div></b></td>
		<td><input type='checkbox' name='DFIBulkExportPatientListComplete' cspbind='DFIBulkExportPatientListComplete'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIBulkExportStartPatient:</div></b></td>
		<td><input type='text' name='DFIBulkExportStartPatient' cspbind='DFIBulkExportStartPatient' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DFIBulkExportStartSendAutomatically:</div></b></td>
		<td><input type='checkbox' name='DFIBulkExportStartSendAutomatically' cspbind='DFIBulkExportStartSendAutomatically'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

<body>

</body>
</html>
]]></CSP>


<CSP name="DFIInterfaceMappingDetails.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>	Cache Server Page </title>

</head>

<body>

<head>
<title>Cache Server Page - DFI.Common.Interface.InterfaceMappingDetails (HST-DFI-CODEBASE)</title>
</head>
<h1 align='center'>DFI.Common.Interface.InterfaceMappingDetails</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='DFI.Common.Interface.InterfaceMappingDetails' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='DFI.Common.Interface.InterfaceMappingDetails' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*InterfaceNamespace:</div></b></td>
		<td><input type='text' name='InterfaceNamespace' cspbind='InterfaceNamespace' size='80' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>*ProductionClassName:</div></b></td>
		<td><input type='text' name='ProductionClassName' cspbind='ProductionClassName' size='80' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>MessageQueueClassName:</div></b></td>
		<td><input type='text' name='MessageQueueClassName' cspbind='MessageQueueClassName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>IsProduction:</div></b></td>
		<td><input type='checkbox' name='IsProduction' cspbind='IsProduction'></td>
	</tr>
	<tr>
		<td><b><div align='right'>IsActive:</div></b></td>
		<td><input type='checkbox' name='IsActive' cspbind='IsActive'></td>
	</tr>
	<tr>
		<td><b><div align='right'>*DataSource:</div></b></td>
		<td><select name='DataSource' cspbind='DataSource' csprequired>
		  <option value='ODSGeneral'>ODSGeneral</option>
		  <option value='ODSPatient'>ODSPatient</option>
		  <option value='EMCIMaster'>EMCIMaster</option>
		  <option value='EMCICopy'>EMCICopy</option>
		  <option value='IHIS{Module}'>IHIS{Module}</option>
		</select></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="DFILookupTable.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>	Cache Server Page </title>

</head>

<body>

<head>
<title>DFI Common Code Table Mappings Lookup Reference</title>
</head>
<h1 align='center'>DFI Common Code Table Mappings Lookup Reference</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='DFI.Common.CodeTableMappings.LookupReference' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='DFI.Common.CodeTableMappings.LookupReference' where='DWCode,DWCode,FHIRCode,Type' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>DWCode:</div></b></td>
		<td><input type='text' name='DWCode' cspbind='DWCode' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DWmfCodeTableName:</div></b></td>
		<td><input type='text' name='DWmfCodeTableName' cspbind='DWmfCodeTableName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>FHIRCode:</div></b></td>
		<td><input type='text' name='FHIRCode' cspbind='FHIRCode' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>FHIRURL:</div></b></td>
		<td><input type='text' name='FHIRURL' cspbind='FHIRURL' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>Type:</div></b></td>
		<td><input type='text' name='Type' cspbind='Type' size='50'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
</table>
</center>
</form>
</body>
</html>
]]></CSP>


<CSP name="DFIProductionAlerts.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
5<html>
<head>

<!-- Put your page Title here -->
<title>	Cache Server Page </title>

</head>

<body>

<head>
<title>Cache Server Page - DFI.Common.Alerts.ProductionAlerts (HST-DFI-CODEBASE)</title>
</head>
<h1 align='center'>DFI.Common.Alerts.ProductionAlerts</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='DFI.Common.Alerts.ProductionAlerts' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='DFI.Common.Alerts.ProductionAlerts' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*ProductionItem:</div></b></td>
		<td><input type='text' name='ProductionItem' cspbind='ProductionItem' size='80' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>ProductionItemClassName:</div></b></td>
		<td><input type='text' name='ProductionItemClassName' cspbind='ProductionItemClassName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>QueueSizeAlert:</div></b></td>
		<td><input type='text' name='QueueSizeAlert' cspbind='QueueSizeAlert' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>QueueSizeAlertInterval:</div></b></td>
		<td><input type='text' name='QueueSizeAlertInterval' cspbind='QueueSizeAlertInterval' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>QueueSizeAlertLastDT:</div></b></td>
		<td><input type='text' name='QueueSizeAlertLastDT' cspbind='QueueSizeAlertLastDT' size='19'></td>
	</tr>
	<tr>
		<td><b><div align='right'>RecipientList:</div></b></td>
		<td><input type='text' name='RecipientList' cspbind='RecipientList' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ErrorRecipientList:</div></b></td>
		<td><input type='text' name='ErrorRecipientList' cspbind='ErrorRecipientList' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ConditionRecipientList:</div></b></td>
		<td><input type='text' name='ConditionRecipientList' cspbind='ConditionRecipientList' size='80'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="Device.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica Device</title>
</head>
<h1 align='center'>Devices</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Device' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Device' where='TCPOperationName,FileOperationName' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*DeviceId </div></b></td>
		<td><input type='text' name='DeviceId' cspbind='DeviceId' size='50' csprequired></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>DeviceType ID </div></b></font></td>
		<td><select name='DeviceType' cspbind='DeviceType' classname='Robot.DeviceTypes' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>DeviceName </div></b></td>
		<td><input type='text' name='DeviceName' cspbind='DeviceName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DeviceLocation </div></b></td>
		<td><input type='text' name='DeviceLocation' cspbind='DeviceLocation' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DeviceStatusErrorCodes </div></b></td>
		<td><input type='text' name='DeviceStatusErrorCodes' cspbind='DeviceStatusErrorCodes' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DeviceStatusMessage </div></b></td>
		<td><input type='text' name='DeviceStatusMessage' cspbind='DeviceStatusMessage' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DeviceStatusOKCodes </div></b></td>
		<td><input type='text' name='DeviceStatusOKCodes' cspbind='DeviceStatusOKCodes' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DeviceStatusWarningCodes </div></b></td>
		<td><input type='text' name='DeviceStatusWarningCodes' cspbind='DeviceStatusWarningCodes' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DeviceTCPAddress </div></b></td>
		<td><input type='text' name='DeviceTCPAddress' cspbind='DeviceTCPAddress' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DeviceTCPConnectTimeout </div></b></td>
		<td><input type='text' name='DeviceTCPConnectTimeout' cspbind='DeviceTCPConnectTimeout' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DeviceTCPPortNumber </div></b></td>
		<td><input type='text' name='DeviceTCPPortNumber' cspbind='DeviceTCPPortNumber' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DeviceTCPReadTimeout </div></b></td>
		<td><input type='text' name='DeviceTCPReadTimeout' cspbind='DeviceTCPReadTimeout' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>TCPOperationName </div></b></td>
		<td><input type='text' name='TCPOperationName' cspbind='TCPOperationName' size='200'></td>
	</tr>
	<tr>
		<td><b><div align='right'>FileOperationName </div></b></td>
		<td><input type='text' name='FileOperationName' cspbind='FileOperationName' size='200'></td>
	</tr>
	<tr>
		<td><b><div align='right'>FilePath </div></b></td>
		<td><input type='text' name='FilePath' cspbind='FilePath' size='50'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>
</body>
</html>
]]></CSP>


<CSP name="DeviceStatusCodes.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica Device Type Status Codes</title>
</head>
<h1 align='center'>Robot Device Type Status Codes</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.DeviceTypeStatusCodes' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.DeviceTypeStatusCodes' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><font color='#666666'><b><div align='right'>*Type ID </div></b></font></td>
		<td><select name='Type' cspbind='Type' classname='Robot.DeviceTypes' query='Extent' field='ID' csprequired></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>*StatusCode </div></b></td>
		<td><input type='text' name='StatusCode' cspbind='StatusCode' size='50' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>StatusType </div></b></td>
		<td><select name='StatusType' cspbind='StatusType'>
		  <option value=''></option>
		  <option value='OK'>OK</option>
		  <option value='Warning'>Warning</option>
		  <option value='Error'>Error</option>
		</select></td>
	</tr>
	<tr>
		<td><b><div align='right'>StatusDescription </div></b></td>
		<td><input type='text' name='StatusDescription' cspbind='StatusDescription' size='80'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="DeviceTypes.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot DeviceTypes</title>
</head>
<h1 align='center'>Robot DeviceTypes</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.DeviceTypes' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.DeviceTypes' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>DeviceTypeID </div></b></td>
		<td><select name='DeviceTypeID' cspbind='DeviceTypeID'>
		  <option value=''></option>
		  <option value='Printer'>Printer</option>
		  <option value='Robot'>Robot</option>
		  <option value='Scanner'>Scanner</option>
		  <option value='Camera'>Camera</option>
		</select></td>
	</tr>
	<tr>
		<td><b><div align='right'> DeviceTypeDescription </div></b></td>
		<td><input type='text' name='DeviceTypeDescription' cspbind='DeviceTypeDescription' size='80'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="Location.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot Location</title>
</head>
<h1 align='center'>Robot Location</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Location' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Location' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><font color='#666666'><b><div align='right'>*Site ID </div></b></font></td>
		<td><select name='Site' cspbind='Site' classname='Robot.Site' query='Extent' field='ID' csprequired></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>*LocationCode </div></b></td>
		<td><input type='text' name='LocationCode' cspbind='LocationCode' size='50' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>LocationDescription </div></b></td>
		<td><input type='text' name='LocationDescription' cspbind='LocationDescription' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>LocationLabelAddressLine1 </div></b></td>
		<td><input type='text' name='LocationLabelAddressLine1' cspbind='LocationLabelAddressLine1' size='45'></td>
	</tr>
	<tr>
		<td><b><div align='right'>LocationLabelAddressLine2 </div></b></td>
		<td><input type='text' name='LocationLabelAddressLine2' cspbind='LocationLabelAddressLine2' size='45'></td>
	</tr>
	<tr>
		<td><b><div align='right'>LocationLabelAddressLine3 </div></b></td>
		<td><input type='text' name='LocationLabelAddressLine3' cspbind='LocationLabelAddressLine3' size='45'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>
</body>
</html>
]]></CSP>


<CSP name="MainPage.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[



<!DOCTYPE html>
<html>
<head>
    <title>e-RX </title>
    <meta charset="utf-8"/>

    <link type="text/css" href="wwa/LinkUp.css" rel="stylesheet"/>
    <link type="text/css" href="wwa/style.css" rel="stylesheet"/>
    <link type="text/css" href="wwa/tabsstyle.css" rel="stylesheet"/>
    <link type="text/css" href="wwa/IE_fix.css" rel="stylesheet"/>
  
    <style type="text/css">
    <!--
        .style_msg {
            color: #000000;
            font-bold: true;
            font-family: Arial, Helvetica, sans-serif;
            font-size: 10pt;
        }
    -->
    </style>

    <style type="text/css">
        .modal {
            -moz-opacity: 0.8;
            background-color: black;
            bottom: 0;
            display: inline-block;
            filter: alpha(opacity=80);
            left: 0;
            margin: auto;
            min-height: 100%;
            opacity: 0.8;
            position: absolute;
            right: 0;
            top: 0;
            width: 100%;
            z-index: 99;
        }

        .loading {
            background-color: White;
            display: none;
            font-family: Arial;
            font-size: 10pt;
            height: 100px;
            padding-top: 300px;
            width: 200px;
            z-index: 999;
        }
    </style>
    <script type="text/javascript">
        function ShowProgress() {
            setTimeout(function() {
                var modal = $("#loadingProgressPopup");
                modal.addClass("modal");
                $("body").append(modal);
                var loading = $(".loading");
                loading.show();
                var top = Math.max($(window).height() / 2 - loading[0].offsetHeight / 2, 0);
                var left = Math.max($(window).width() / 2 - loading[0].offsetWidth / 2, 0);
                loading.css({ top: top, left: left, display: "inline-block" });
            }, 200);
        }

        $("form").on("submit", function() {
            ShowProgress();
        });


    </script>

    <!--[if lt IE 9]>
        <script src="images/http://ie7-js.googlecode.com/svn/version/2.1(beta4)/IE9.js"></script>
        <link rel="stylesheet" type="text/css" href="IE_Fix.css">
    <![endif]-->
    <!--[if gte IE 5]>
        <link rel="stylesheet" type="text/css" href="IE_Fix.css">
    <![endif]-->
    <script type="text/javascript">
        /* <![CDATA[ */
        $(function() {
            var input = document.createElement("input");
            if (("placeholder" in input) == false) {
                $("[placeholder]").focus(function() {
                    var i = $(this);
                    if (i.val() == i.attr("placeholder")) {
                        i.val("").removeClass("placeholder");
                        if (i.hasClass("password")) {
                            i.removeClass("password");
                            this.type = "password";
                        }
                    }
                }).blur(function() {
                    var i = $(this);
                    if (i.val() == "" || i.val() == i.attr("placeholder")) {
                        if (this.type == "password") {
                            i.addClass("password");
                            this.type = "text";
                        }
                        i.addClass("placeholder").val(i.attr("placeholder"));
                    }
                }).blur().parents("form").submit(function() {
                    $(this).find("[placeholder]").each(function() {
                        var i = $(this);
                        var curval = i.val();
                        if (curval == i.attr("placeholder"))
                            i.val("");
                    });
                });
            }
        });
        /* ]]]]><![CDATA[> */
    </script>
    <script src="images/jquery/jquery.simplemodal.1.4.4.min.js" type="text/javascript"></script>
    <link href="css/LinkUp.css" rel="stylesheet"/>
    <link href="css/style.css" rel="stylesheet"/>
    <link href="css/IE_fix.css" rel="stylesheet"/>
    <link href="css/tabsstyle.css" rel="stylesheet"/>

    <script type="text/javascript">
        $(document).ready(function() {
            $(".navigation li").hover(
                function() {
                    $("ul", this).fadeIn(100);
                    $("ul li", this).css("zIndex", 800);
                    $("ul li ul", this).css("display", "none");
                },
                function() { $("ul", this).fadeOut(50); });
            $(".has-children").hover(function() {
                    $(".has-children", this).css("display", "block");
                    $("ul", this).fadeIn(100);
                    $("ul li", this).css("zIndex", 800);
                    $("ul li", this).css("left", this.clientWidth);
                    $("ul li", this).css("top", -37);
                },
                function() { $("ul", this).fadeOut(50); });
        });
    </script>
    <script type="text/javascript">
        function showModalPopupForURL(iHeight, iWidth, url) {
            $.modal("<iframe id=\"popupFrame\" height=\"" + iHeight + "\" Width=\"" + iWidth + "\" style=\"border:0\">", {
                closeHTML: "<a class=\"modalCloseImg\" title=\"Close\"></a>",
                closeClass: "simplemodal-close",
                containerCss: { backgroundColor: "#edebeb", borderColor: "#7ea20c", height: iHeight, Width: iWidth, padding: 10 },
                onShow: function(d) {
                    d.wrap.css("overflow", "hidden");
                    document.getElementById("popupFrame").src = url;
                },
                escClose: true,
                overlayClose: false,
                opacity: 80,
                overlayCss: { backgroundColor: "#edebeb" }
            });
        }
    </script>
    <script type="text/javascript">
        function validate(evt) {
            var theEvent = evt || window.event;
            var key = theEvent.keyCode || theEvent.which;
            key = string.fromCharCode(key);
            var regex = /[0-9]|\./;
            if (!regex.test(key)) {
                theEvent.returnValue = false;
                if (theEvent.preventDefault) theEvent.preventDefault();
            }
        }
    </script>


    

</head>
<body>
<form name="aspnetForm" method="post" action="./Default.aspx" id="aspnetForm">
<div>
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="/wEPDwUKMjEwNDQyMTMxMw9kFgJmD2QWAgIED2QWAgIFDxYCHgRUZXh0BStZb3UgYXJlIGxvZ2dlZCBpbiBhcyBDYWxsIENlbnRyZSBQaGFybWFjaXN0ZGQtSdsUKRsW7JIPc9LNAPba8IIJGGFOQyT5nKxGavdIeg==" />
</div>

<div>

	<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="1E917F5F" />
</div>
    <!--Add ScriptManager Ajax Control Toolkit-->
    <div id="loadingProgressPopup" class="modal loading" style="height: 98%; text-align: center; width: 100%;">
        <div>
            Loading...<br/>
            <img src="images/CircularProgressAnimation.gif" alt=""/>
        </div>
    </div>
    <table class="maintable">
        <!--MAIN TABLE-->
        <tr>
            <!--HEADER BEGINS-->
            <td class="header">
                <div style="float: left; padding-left: 5px; padding-top: 10px">
                    <img src="images/logo/e-RxLogo2.png" alt="" style="height: 76px; width: auto;"/>
                </div>
                <div style="float: right;">
                    <img src="images/logo/rtc-home_06.jpg" alt=""/>
                </div>
            </td>
        </tr>
        <!--HEADER ENDS-->
        <tr>
            <!--CONTENT CONTAINER BEGINS-->
            <td class="content">
                <div>
                    <!--NAVIGATION BEGINS-->
                    <ul class="navigation">
                        <li>
                            <li><a href="Default.aspx" class="LeftTopMenu"> <img class="imgbutton" src="images/icons/navicons/navigation/homeicon_nav.png" alt="" />Home</a></li>
<li class="navigation5"> <a href="#"> <img class="imgbutton" src="images/icons/navicons/navigation/patientrecord_nav.png" />Manage Persons</a><ul>
<li><a href="ManagePatient.aspx"> <img class="imgbutton" src="images/icons/navicons/navigation/patientrecord_nav.png" />Manage Patients</a></li>
<li><a href="ManageDoctor.aspx" class="navrouding"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/doctor_subnav.png" />Manage Doctors</a></li>
</ul></li>
<li class="navigationwith2"><a href="#"> <img class="imgbutton" src="images/icons/navicons/navigation/script_and_dispense_nav.png" />Prescription & Dispensing</a><ul>
<li><a href="PrescriptionDispense.aspx"> <img class="imgbutton" src="images/icons/navicons/navigation/script_and_dispense_nav.png" />Prescription & Dispensing</a></li>
<li><a href="ValidateScripts.aspx"  class="navrouding"> <img class="imgbutton" src="images/icons/navicons/navigation/script_and_dispense_nav.png" />Validate Scripts</a></li>
</ul></li>
<li class="navigation4"> <a href="#"> <img class="imgbutton" src="images/icons/navicons/navigation/notifications_nav.png" />Notifications</a></li>
<li class="navigation5"> <a href="#"> <img class="imgbutton" src="images/icons/navicons/navigation/manage_organisation_nav.png" />Manage Organisations</a><ul>
<li><a href="ManageHospital.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_sub_navigation/hospital_subnav.png" />Manage Hospitals / Institutions</a></li>
<li><a href="ManagePharmacy.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_sub_navigation/pharmacy_subnav.png" />Manage Pharmacies</a></li>
<li><a href="ManageLocation.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/location_subnav.png" />Manage Locations</a></li>
<li><a href="ManageBin.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_sub_navigation/manage_bins_subnav.png" />Manage Bins</a></li>
<li><a href="ManagePort.aspx" class="navrouding"> <img class="imgbutton" src="images/icons/navicons/sub_sub_navigation/manage_bins_subnav.png" />Manage Ports</a></li>
</ul></li>
<li class="navigation4"> <a href="#"> <img class="imgbutton" src="images/icons/navicons/navigation/manage_stock_nav.png" />Manage Stock</a><ul>
<li class="has-children"><a href="#"><img class="imgbutton" src="images/icons/navicons/sub_sub_navigation/location_stock_subnav.png" />Stock on Hand<label class="menuarrow"> >> </label></a><ul>
<li  ><a href="LocationStock.aspx" class="navroundingrightop"> <img class="imgbutton" src="images/icons/navicons/sub_sub_navigation/location_stock_subnav.png" />Location</a></li>
<li><a href="BinStock.aspx" class="navroundingrighbottom"> <img class="imgbutton" src="images/icons/navicons/sub_sub_navigation/bin_stock_subnav.png" />Bin</a></li>
</ul></li>
<li><a href="ManageSupplier.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_sub_navigation/add_med_item_sub_sub.png" />Manage Suppliers</a></li>
<li><a href="ManageManufacturer.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/manufacturer_subnav.png" />Manage Manufacturers</a></li>
<li><a href="ManageMedicine.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/medicine_database_subnav.png" />Manage Stock Register</a></li>
<li><a href="ManageCustomerStockMaster.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/manage_customer_stock_master_subnav.png" />Manage Customer Stock Master</a></li>
<li><a href="ManageLocationStockMaster.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/manage_location_stock_master_subnav.png" />Manage Location Stock Master</a></li>
<li><a href="ManageMasterBinStockMaster.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/manage_master_bin_subnav.png" />Manage Master Bin Stock Master</a></li>
<li><a href="ManageBinStockRegister.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/manage_register_stock_subnav.png" />Manage Bin Stock Register</a></li>
<li class="has-children"><a href="#"><img class="imgbutton" src="images/icons/navicons/sub_navigation/stock_ordering_subnav.png" />Stock Ordering <label class="menuarrow"> >> </label></a><ul>
<li><a href="RequestOrderRequisition.aspx" class="navroundingrightop"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/request_order_requistion_subnav.png" />Create Stock Requistion</a></li>
<li><a href="ViewOrderRequisitions.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/request_order_requistion_subnav.png" />View Stock Requistions</a></li>
<li><a href="CreatePurchaseOrder.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/create_new_purchase_order_sub_sub.png" />Create Purchase Orders</a></li>
<li><a href="CreateTransferOrder.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/create_new_purchase_order_sub_sub.png" />Create Transfer Orders</a></li>
<li><a href="ManageStockTransfer.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/manage_stock_movement_subnav.png" />Transfer Stock</a></li>
<li><a href="ViewPurchaseAndTransferOrders.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/view_purchase_order_sub_nav.png" />Manage Purchase And Transfer Orders</a></li>
<li><a href="ManageBackOrders.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/add_new_record_subnav.png" />Manage Requisition Backorders</a></li>
<li><a href="ManageTransferBackOrders.aspx" class="navrouding"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/add_new_record_subnav.png" />Manage Transfer Backorders</a></li>
</ul></li>
<li class="has-children"><a href="#" class="navrouding"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/stock_receiving_subnav.png" />Stock Receiving <label class="menuarrow"> >> </label></a><ul>
<li><a href="CreateGRN.aspx" class="navroundingrightop"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/create_grn_sub_sub.png" />Create GRN</a></li>
<li><a href="ViewGRN.aspx" class="navrouding"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/view_grn_sub_sub.png" />View GRN's</a></li>
</ul></li>
</ul></li>
<li class="navigation7"> <a href="#"> <img class="imgbutton" src="images/icons/navicons/navigation/reports_nav.png" />Reports</a><ul>
<li><a href="#"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/audit_trail_report.png" alt="" />Audit Trail Report</a></li>
<li><a href="#"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/ecard_history_report_subnav.png" />eCard History Report</a></li>
<li><a href="ViewDeliveryNotes.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/view_purchase_order_sub_nav.png" />Delivery Notes</a></li>
<li><a href="#"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/source_record_subnav.png" />Source Record</a></li>
<li><a href="ViewCapturedScriptReport.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/source_record_subnav.png" />Captured Patients Report</a></li>
<li><a href="ViewProductsDueReport.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/source_record_subnav.png" />Products Due Report</a></li>
<li><a href="ViewPDUVisitsReport.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/source_record_subnav.png" />PDU Visits Report</a></li>
<li><a href="ViewMedicineCollectedReport.aspx" class="navrouding"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/source_record_subnav.png" />Medicine Collected Report</a></li>
</ul></li>
<li class=" navigation7"> <a href="#"> <img class="imgbutton" src="images/icons/navicons/navigation/system_admin_nav.png" />System Admin</a><ul>
<li><a href="ManageUser.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_sub_navigation/add_user_sub_sub.png" />Manage Users</a></li>
<li><a href="ManageRolePages.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_sub_navigation/add_user_sub_sub.png" />Manage Roles And Pages</a></li>
<li><a href="ManageUserRoles.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_sub_navigation/add_user_sub_sub.png" />Manage User Roles</a></li>
<li class="has-children"><a href="#"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/manage_ecards_subnav.png" />Manage eCards <label class="menuarrow"> >> </label></a><ul>
<li><a href="ManageECardBatch.aspx" class="navroundingrightop"> <img class="imgbutton" src="images/icons/navicons/sub_sub_navigation/ship_ecard_batch_sub_sub.png" />Ship eCard Batch</a></li>
<li><a href="ReceiveECardBatch.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_sub_navigation/receive_ecard_batch_sub_sub.png" />Receive eCard Batch</a></li>
<li><a href="#" class="navrouding"> <img class="imgbutton" src="images/icons/navicons/sub_sub_navigation/lost_or_stolen_ecard_sub_sub.png" />Lost or Stolen eCard(s)</a></li>
</ul></li>
<li><a href="#"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/manage_data_subnav.png" />Manage Data</a></li>
<li><a href="ManageLists.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/manage_lists_subnav.png" />Manage Lists</a></li>
<li><a href="ManageMessageTemplates.aspx"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/manage_messaging_subnav.png" />Manage Messaging</a></li>
<li><a href="#"> <img class="imgbutton" src="images/icons/navicons/sub_navigation/about_and_update_subnav.png" />About and Update</a></li>
<li><a href="DemoStockCalcAndOrder.aspx" class="navrouding"><img class="imgbutton" src="images/icons/navicons/sub_navigation/stock_cal_to_order_subnav.png" alt="" />Stock Calc to Order</a></li>
</ul></li>
<li class="navigation5"> <a href="#"> <img class="imgbutton" src="images/icons/navicons/navigation/patientrecord_nav.png" />Settings</a><ul>
<li><a href="ManageUserDetails.aspx" class="RightTopMenu"><img class="imgbutton" src="images/icons/navicons/navigation/patientrecord_nav.png" alt="" />Manage User Details</a></li>
<li><a href="Logout.aspx" class="RightTopMenu"><img class="imgbutton" src="images/icons/navicons/navigation/logout_nav.png" alt="" />Logout</a></li>
</ul></li>

                        </li>
                    </ul>
                </div>
                
    <table style="height: 500px; Width: 1180px">
        <tr style="vertical-align: top">
            <td></td>
        </tr>
    </table>

            </td>
        </tr>
        <tr>
            <!--FOOTER BEGINS-->
            <td class="footer">
                <div style="float: left;">
                    <label class="loggedinas">
                        You are logged in as Call Centre Pharmacist
                    </label>
                </div>
                <div style="float: right;">
                    <ul class="footerbutton">
                        <li>
                            <a href="Default.aspx">
                                <img src="images/footericons/bullet.png" alt=""/>Home
                            </a>
                        </li>
                        <li>
                            <a href="Disclaimer.html">
                                <img src="images/footericons/bullet.png" alt=""/>Disclaimer
                            </a>
                        </li>
                        <li>
                            <a href="Terms.html">
                                <img src="images/footericons/bullet.png" alt=""/>Terms & Conditions
                            </a>
                        </li>
                        <li>
                            <a href="http://www.ww-apps.com/" target="_blank">
                                <img src="images/footericons/bullet.png" alt=""/>Developed by Worldwide Applications<img class="backImg" src="images/footericons/wwaicon.png"/>
                            </a>
                        </li>
                    </ul>
                </div>
                <input type="hidden" name="IsPostBack" id="IsPostBack" value="false"/>
                <input type="hidden" name="PostbackControl" id="PostbackControl" value=""/>
            </td>
        </tr>
        <!--FOOTER ENDS-->

    </table>
</form>
</body>
</html>]]></CSP>


<CSP name="MessageDataTypes.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot Mapping.MessageDataTypes</title>
</head>
<h1 align='center'>Robot Mapping.MessageDataTypes</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Mapping.MessageDataTypes' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Mapping.MessageDataTypes' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*DataTypeCode </div></b></td>
		<td><input type='text' name='DataTypeCode' cspbind='DataTypeCode' size='50' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>DataTypeName </div></b></td>
		<td><input type='text' name='DataTypeName' cspbind='DataTypeName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>FillAlign </div></b></td>
		<td><select name='FillAlign' cspbind='FillAlign'>
		  <option value=''></option>
		  <option value='Left'>Left</option>
		  <option value='Right'>Right</option>
		</select></td>
	</tr>
	<tr>
		<td><b><div align='right'>FillCharacter </div></b></td>
		<td><input type='text' name='FillCharacter' cspbind='FillCharacter' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ValidationExpression </div></b></td>
		<td><input type='text' name='ValidationExpression' cspbind='ValidationExpression' size='80'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="MessageDefinitions.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot Mapping.MessageDefinitions</title>
</head>
<h1 align='center'>Robot Mapping.MessageDefinitions</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Mapping.MessageDefinitions' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Mapping.MessageDefinitions' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*MessageCode </div></b></td>
		<td><input type='text' name='MessageCode' cspbind='MessageCode' size='50' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>MessageName </div></b></td>
		<td><input type='text' name='MessageName' cspbind='MessageName' size='80'></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>MessageGroup ID </div></b></font></td>
		<td><select name='MessageGroup' cspbind='MessageGroup' classname='Robot.Mapping.MessageGroups' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>*MessageType </div></b></td>
		<td><select name='MessageType' cspbind='MessageType' csprequired>
		  <option value='Request'>Request</option>
		  <option value='Response'>Response</option>
		</select></td>
	</tr>
	<tr>
		<td><b><div align='right'>RepeatLineMax </div></b></td>
		<td><input type='text' name='RepeatLineMax' cspbind='RepeatLineMax' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>RepeatItemMax </div></b></td>
		<td><input type='text' name='RepeatItemMax' cspbind='RepeatItemMax' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>*StringType </div></b></td>
		<td><select name='StringType' cspbind='StringType' csprequired>
		  <option value='Delimited'>Delimited</option>
		  <option value='Fixed Length'>Fixed Length</option>
		</select></td>
	</tr>
	<tr>
		<td><b><div align='right'>FixedLengthRecordSize </div></b></td>
		<td><input type='text' name='FixedLengthRecordSize' cspbind='FixedLengthRecordSize' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>Delimeter </div></b></td>
		<td><input type='text' name='Delimeter' cspbind='Delimeter' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>SubFieldDelimeter </div></b></td>
		<td><input type='text' name='SubFieldDelimeter' cspbind='SubFieldDelimeter' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>TranslateInFrom </div></b></td>
		<td><input type='text' name='TranslateInFrom' cspbind='TranslateInFrom' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>TranslateInTo </div></b></td>
		<td><input type='text' name='TranslateInTo' cspbind='TranslateInTo' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>TranslateOutFrom </div></b></td>
		<td><input type='text' name='TranslateOutFrom' cspbind='TranslateOutFrom' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>TranslateOutTo </div></b></td>
		<td><input type='text' name='TranslateOutTo' cspbind='TranslateOutTo' size='50'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="MessageGroups.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot Mapping.MessageGroups</title>
</head>
<h1 align='center'>Robot Mapping.MessageGroups</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Mapping.MessageGroups' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Mapping.MessageGroups' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*GroupCode </div></b></td>
		<td><input type='text' name='GroupCode' cspbind='GroupCode' size='50' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>GroupName </div></b></td>
		<td><input type='text' name='GroupName' cspbind='GroupName' size='80'></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'> DeviceReference ID </div></b></font></td>
		<td><select name='DeviceReference' cspbind='DeviceReference' classname='Robot.Device' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="MessageItems.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot Mapping.MessageItems</title>
</head>
<h1 align='center'>Robot Mapping.MessageItems</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Mapping.MessageItems' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Mapping.MessageItems' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*ItemCode </div></b></td>
		<td><input type='text' name='ItemCode' cspbind='ItemCode' size='80' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>ItemName </div></b></td>
		<td><input type='text' name='ItemName' cspbind='ItemName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ItemType </div></b></td>
		<td><select name='ItemType' cspbind='ItemType'>
		  <option value=''></option>
		  <option value='Line Number'>Line Number</option>
		  <option value='Item Number'>Item Number</option>
		  <option value='Reference'>Reference</option>
		  <option value='Code'>Code</option>
		  <option value='Field'>Field</option>
		  <option value='Status'>Status</option>
		  <option value='Text Length'>Text Length</option>
		  <option value='Variable Length Field'>Variable Length Field</option>
		</select></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>DataType ID </div></b></font></td>
		<td><select name='DataType' cspbind='DataType' classname='Robot.Mapping.MessageDataTypes' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>DefaultValue </div></b></td>
		<td><input type='text' name='DefaultValue' cspbind='DefaultValue' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>MinimumLength </div></b></td>
		<td><input type='text' name='MinimumLength' cspbind='MinimumLength' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>MaximumLength </div></b></td>
		<td><input type='text' name='MaximumLength' cspbind='MaximumLength' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>Required </div></b></td>
		<td><input type='checkbox' name='Required' cspbind='Required'></td>
	</tr>
	<tr>
		<td><b><div align='right'>GeneratedExpression </div></b></td>
		<td><input type='text' name='GeneratedExpression' cspbind='GeneratedExpression' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>TransformExpression </div></b></td>
		<td><input type='text' name='TransformExpression' cspbind='TransformExpression' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ValidationExpression </div></b></td>
		<td><input type='text' name='ValidationExpression' cspbind='ValidationExpression' size='80'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>
</body>
</html>
]]></CSP>


<CSP name="PDUPrinters.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>
<head>
<title>NiPaRobotica  Robot PDUPrinters</title>
</head>
<h1 align='center'>Robot PDUPrinters</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.PDUPrinters' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.PDUPrinters' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*PrinterId </div></b></td>
		<td><input type='text' name='PrinterId' cspbind='PrinterId' size='50' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>PrinterName </div></b></td>
		<td><input type='text' name='PrinterName' cspbind='PrinterName' size='80'></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'> Device ID </div></b></font></td>
		<td><select name='Device' cspbind='Device' classname='Robot.Device' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>SendStatus </div></b></td>
		<td><input type='checkbox' name='SendStatus' cspbind='SendStatus'></td>
	</tr>
	<tr>
		<td><b><div align='right'>SystemStateResponseOK </div></b></td>
		<td><input type='text' name='SystemStateResponseOK' cspbind='SystemStateResponseOK' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>SystemStateResponseNOTOK </div></b></td>
		<td><input type='text' name='SystemStateResponseNOTOK' cspbind='SystemStateResponseNOTOK' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>NACKHL7MessagesForPorts </div></b></td>
		<td><input type='text' name='NACKHL7MessagesForPorts' cspbind='NACKHL7MessagesForPorts' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>LastUserDeterminedNACKSet </div></b></td>
		<td><input type='text' name='LastUserDeterminedNACKSet' cspbind='LastUserDeterminedNACKSet' size='19'></td>
	</tr>
	<tr>
		<td><b><div align='right'>NACKHL7MessagesOnNOTOKState </div></b></td>
		<td><input type='checkbox' name='NACKHL7MessagesOnNOTOKState' cspbind='NACKHL7MessagesOnNOTOKState'></td>
	</tr>
	<tr>
		<td><b><div align='right'>UserDeterminedHL7NACK </div></b></td>
		<td><input type='checkbox' name='UserDeterminedHL7NACK' cspbind='UserDeterminedHL7NACK'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="Peronell.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot Personell</title>
</head>
<h1 align='center'>Robot Personell</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Personell' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Personell' where='%Id()' select='Title,FirstName,Surname,EMail,Telephone' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>Title </div></b></td>
		<td><select name='Title' cspbind='Title'>
		  <option value=''></option>
		  <option value='Mr'>Mr</option>
		  <option value='Miss'>Miss</option>
		  <option value='Mrs'>Mrs</option>
		  <option value='Ms'>Ms</option>
		  <option value='Dr'>Dr</option>
		  <option value='Prof'>Prof</option>
		</select></td>
	</tr>
	<tr>
		<td><b><div align='right'>FirstName </div></b></td>
		<td><input type='text' name='FirstName' cspbind='FirstName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>Surname </div></b></td>
		<td><input type='text' name='Surname' cspbind='Surname' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>PersonellType </div></b></td>
		<td><select name='PersonellType' cspbind='PersonellType'>
		  <option value=''></option>
		  <option value='Doctor'>Doctor</option>
		  <option value='Pharmacist'>Pharmacist</option>
		  <option value='Supervisor'>Supervisor</option>
		  <option value='Technician'>Technician</option>
		  <option value='Developer'>Developer</option>
		  <option value='IT'>IT</option>
		  <option value='Manager'>Manager</option>
		  <option value='Supplier'>Supplier</option>
		  <option value='Other'>Other</option>
		</select></td>
	</tr>
	<tr>
		<td><b><div align='right'>Address </div></b></td>
		<td><input type='text' name='Address' cspbind='Address' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>EMail </div></b></td>
		<td><input type='text' name='EMail' cspbind='EMail' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>Telephone </div></b></td>
		<td><input type='text' name='Telephone' cspbind='Telephone' size='50'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="Personnel.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot Personell</title>
</head>
<h1 align='center'>Robot Personell</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Personell' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Personell' where='%Id()' select='Title,FirstName,Surname,EMail,Telephone' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>Title </div></b></td>
		<td><select name='Title' cspbind='Title'>
		  <option value=''></option>
		  <option value='Mr'>Mr</option>
		  <option value='Miss'>Miss</option>
		  <option value='Mrs'>Mrs</option>
		  <option value='Ms'>Ms</option>
		  <option value='Dr'>Dr</option>
		  <option value='Prof'>Prof</option>
		</select></td>
	</tr>
	<tr>
		<td><b><div align='right'>FirstName </div></b></td>
		<td><input type='text' name='FirstName' cspbind='FirstName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>Surname </div></b></td>
		<td><input type='text' name='Surname' cspbind='Surname' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>PersonellType </div></b></td>
		<td><select name='PersonellType' cspbind='PersonellType'>
		  <option value=''></option>
		  <option value='Doctor'>Doctor</option>
		  <option value='Pharmacist'>Pharmacist</option>
		  <option value='Supervisor'>Supervisor</option>
		  <option value='Technician'>Technician</option>
		  <option value='Developer'>Developer</option>
		  <option value='IT'>IT</option>
		  <option value='Manager'>Manager</option>
		  <option value='Supplier'>Supplier</option>
		  <option value='Other'>Other</option>
		</select></td>
	</tr>
	<tr>
		<td><b><div align='right'>EMail </div></b></td>
		<td><input type='text' name='EMail' cspbind='EMail' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>Telephone </div></b></td>
		<td><input type='text' name='Telephone' cspbind='Telephone' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>Active </div></b></td>
		<td><input type='checkbox' name='Active' cspbind='Active'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="Port.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot Port</title>
</head>
<h1 align='center'>Robot Port</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Port' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Port' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><font color='#666666'><b><div align='right'>*Location ID </div></b></font></td>
		<td><select name='Location' cspbind='Location' classname='Robot.Location' query='Extent' field='ID' csprequired></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>*PortCode </div></b></td>
		<td><input type='text' name='PortCode' cspbind='PortCode' size='50' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>PortDescription </div></b></td>
		<td><input type='text' name='PortDescription' cspbind='PortDescription' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>Priority </div></b></td>
		<td><input type='text' name='Priority' cspbind='Priority' size='10'></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>Robot ID </div></b></font></td>
		<td><select name='Robot' cspbind='Robot' classname='Robot.Robots' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>RobotPort </div></b></td>
		<td><input type='text' name='RobotPort' cspbind='RobotPort' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>Systems </div></b></td>
		<td><textarea name='Systems' cspbind='Systems' cols='50' rows='4'></textarea></td>
	</tr>
	<tr>
		<td><b><div align='right'>IsPDU </div></b></td>
		<td><input type='checkbox' name='IsPDU' cspbind='IsPDU'></td>
	</tr>
	<tr>
		<td><b><div align='right'>PDUNumber </div></b></td>
		<td><input type='text' name='PDUNumber' cspbind='PDUNumber' size='10'></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>PDUPrinter ID </div></b></font></td>
		<td><select name='PDUPrinter' cspbind='PDUPrinter' classname='Robot.PDUPrinters' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>
</body>
</html>
]]></CSP>


<CSP name="PropertyToColumns.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot Stock PropertyNames</title>
</head>
<h1 align='center'>Robot Stock PropertyNames</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Stock.PropertyNames' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Stock.PropertyNames' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><font color='#666666'><b><div align='right'>*Mapping ID </div></b></font></td>
		<td><select name='Mapping' cspbind='Mapping' classname='Robot.Stock.PropertyToColumnMapping' query='Extent' field='ID' csprequired></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>FromPropertyName </div></b></td>
		<td><input type='text' name='FromPropertyName' cspbind='FromPropertyName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ToPropertyName </div></b></td>
		<td><input type='text' name='ToPropertyName' cspbind='ToPropertyName' size='80'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="ReportParameters.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot Reports.ReportParameters</title>
</head>
<h1 align='center'>Robot Reports.ReportParameters</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Reports.ReportParameters' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Reports.ReportParameters' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><font color='#666666'><b><div align='right'>Report ID </div></b></font></td>
		<td><select name='Report' cspbind='Report' classname='Robot.Reports.Reports' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>ParameterName </div></b></td>
		<td><input type='text' name='ParameterName' cspbind='ParameterName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ParameterValue </div></b></td>
		<td><input type='text' name='ParameterValue' cspbind='ParameterValue' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ParameterValueType </div></b></td>
		<td><select name='ParameterValueType' cspbind='ParameterValueType'>
		  <option value=''></option>
		  <option value='Literal'>Literal</option>
		  <option value='Expression'>Expression</option>
		</select></td>
	</tr>
	<tr>
		<td><b><div align='right'>DefaultValue </div></b></td>
		<td><input type='text' name='DefaultValue' cspbind='DefaultValue' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DefaultValueType </div></b></td>
		<td><select name='DefaultValueType' cspbind='DefaultValueType'>
		  <option value=''></option>
		  <option value='Literal'>Literal</option>
		  <option value='Expression'>Expression</option>
		</select></td>
	</tr>
	<tr>
		<td><b><div align='right'>ByReference </div></b></td>
		<td><input type='checkbox' name='ByReference' cspbind='ByReference'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="Reports.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot Reports.Reports</title>
</head>
<h1 align='center'>Robot Reports.Reports</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Reports.Reports' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Reports.Reports' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*ReportID </div></b></td>
		<td><input type='text' name='ReportID' cspbind='ReportID' size='50' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>ReportDescription </div></b></td>
		<td><input type='text' name='ReportDescription' cspbind='ReportDescription' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ReportClass </div></b></td>
		<td><input type='text' name='ReportClass' cspbind='ReportClass' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ReportMethod </div></b></td>
		<td><input type='text' name='ReportMethod' cspbind='ReportMethod' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>SubjectPrefix </div></b></td>
		<td><input type='text' name='SubjectPrefix' cspbind='SubjectPrefix' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ReportMessage </div></b></td>
		<td><input type='text' name='ReportMessage' cspbind='ReportMessage' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>RunAt </div></b></td>
		<td><input type='text' name='RunAt' cspbind='RunAt' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>RunTS </div></b></td>
		<td><input type='text' name='RunTS' cspbind='RunTS' size='19'></td>
	</tr>
	<tr>
		<td><b><div align='right'>SentBy </div></b></td>
		<td><input type='text' name='SentBy' cspbind='SentBy' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>RunStatus </div></b></td>
		<td><input type='text' name='RunStatus' cspbind='RunStatus' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DeleteReportAfterRun </div></b></td>
		<td><input type='checkbox' name='DeleteReportAfterRun' cspbind='DeleteReportAfterRun'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ConstructClone </div></b></td>
		<td><input type='checkbox' name='ConstructClone' cspbind='ConstructClone'></td>
	</tr>
	<tr>
		<td><b><div align='right'>Attachments </div></b></td>
		<td><textarea name='Attachments' cspbind='Attachments' cols='80' rows='3'></textarea></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="Robot.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica - Robots</title>
</head>
<h1 align='center'>Robots</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Robots' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Robots' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*RobotId </div></b></td>
		<td><input type='text' name='RobotId' cspbind='RobotId' size='50' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>RobotDescription </div></b></td>
		<td><input type='text' name='RobotDescription' cspbind='RobotDescription' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>IsMasterRobot </div></b></td>
		<td><input type='checkbox' name='IsMasterRobot' cspbind='IsMasterRobot'></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>MasterRobot ID </div></b></font></td>
		<td><select name='MasterRobot' cspbind='MasterRobot' classname='Robot.Robots' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>RobotOwnID </div></b></td>
		<td><input type='text' name='RobotOwnID' cspbind='RobotOwnID' size='50'></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'> Device ID </div></b></font></td>
		<td><select name='Device' cspbind='Device' classname='Robot.Device' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>SystemCode ID </div></b></font></td>
		<td><select name='SystemCode' cspbind='SystemCode' classname='Robot.Systems' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>MessageDialogueCodeExpr </div></b></td>
		<td><input type='text' name='MessageDialogueCodeExpr' cspbind='MessageDialogueCodeExpr' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>NACKHL7MessagesForPorts </div></b></td>
		<td><input type='text' name='NACKHL7MessagesForPorts' cspbind='NACKHL7MessagesForPorts' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>NACKHL7MessagesOnNOTOKState </div></b></td>
		<td><input type='checkbox' name='NACKHL7MessagesOnNOTOKState' cspbind='NACKHL7MessagesOnNOTOKState'></td>
	</tr>
	<tr>
		<td><b><div align='right'>SystemStateResponseOK </div></b></td>
		<td><input type='text' name='SystemStateResponseOK' cspbind='SystemStateResponseOK' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>SystemStateResponseNOTOK </div></b></td>
		<td><input type='text' name='SystemStateResponseNOTOK' cspbind='SystemStateResponseNOTOK' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>UserDeterminedHL7NACK </div></b></td>
		<td><input type='checkbox' name='UserDeterminedHL7NACK' cspbind='UserDeterminedHL7NACK'></td>
	</tr>
	<tr>
		<td><b><div align='right'>LastUserDeterminedNACKSet </div></b></td>
		<td><input type='text' name='LastUserDeterminedNACKSet' cspbind='LastUserDeterminedNACKSet' size='19'></td>
	</tr>
	<tr>
		<td><b><div align='right'>SendStatus </div></b></td>
		<td><input type='checkbox' name='SendStatus' cspbind='SendStatus'></td>
	</tr>
	<tr>
		<td><b><div align='right'>AllowNestedMessages </div></b></td>
		<td><input type='checkbox' name='AllowNestedMessages' cspbind='AllowNestedMessages'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>
</body>
</html>
]]></CSP>


<CSP name="RobotMessages.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot RobotMessages</title>
</head>
<h1 align='center'>Robot RobotMessages</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.RobotMessages' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.RobotMessages' where='DialogueCode' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><font color='#666666'><b><div align='right'>*Robot ID </div></b></font></td>
		<td><select name='Robot' cspbind='Robot' classname='Robot.Robots' query='Extent' field='ID' csprequired></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>*DialogueCode </div></b></td>
		<td><input type='text' name='DialogueCode' cspbind='DialogueCode' size='50' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>*DialogueType </div></b></td>
		<td><select name='DialogueType' cspbind='DialogueType' csprequired>
		  <option value='DispenseRequest'>DispenseRequest</option>
		  <option value='DispenseResponse'>DispenseResponse</option>
		  <option value='StatusRequest'>StatusRequest</option>
		  <option value='StatusResponse'>StatusResponse</option>
		  <option value='StockRequest'>StockRequest</option>
		  <option value='StockResponse'>StockResponse</option>
		  <option value='ProductRequest'>ProductRequest</option>
		  <option value='ProductResponse'>ProductResponse</option>
		  <option value='StockLevelRequest'>StockLevelRequest</option>
		  <option value='StockLevelResponse'>StockLevelResponse</option>
		  <option value='StockLevelDetailRequest'>StockLevelDetailRequest</option>
		  <option value='StockLevelDetailResponse'>StockLevelDetailResponse</option>
		</select></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>*Message ID </div></b></font></td>
		<td><select name='Message' cspbind='Message' classname='Robot.Mapping.MessageDefinitions' query='Extent' field='ID' csprequired></select></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="Schedule.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot Stock ScheduleID</title>
</head>
<h1 align='center'>Robot Stock ScheduleID</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Stock.ScheduleID' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Stock.ScheduleID' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*Schedule </div></b></td>
		<td><input type='text' name='Schedule' cspbind='Schedule' size='10' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>ScheduleDescription </div></b></td>
		<td><input type='text' name='ScheduleDescription' cspbind='ScheduleDescription' size='50'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="Site.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot Site</title>
</head>
<h1 align='center'>Robot Site</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Site' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Site' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*SiteCode </div></b></td>
		<td><input type='text' name='SiteCode' cspbind='SiteCode' size='50' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>SiteDescription </div></b></td>
		<td><input type='text' name='SiteDescription' cspbind='SiteDescription' size='50'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="StockBatch.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot StockBatch</title>
</head>
<h1 align='center'>Robot StockBatch</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

function updateSystemSettings(id)
{
     #server(..formSystemSettingsLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.StockBatch' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.StockBatch' where='%Id()' options='popup,nopredicates' onselect='update'>

<csp:search name='findSystemSettings' classname='Robot.SystemSettings' where='SystemID' options='popup,nopredicates' caption='SystemSettings SystemID' startvalues='SystemSettingsSystemID' onselect='updateSystemSettings'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*DeliveryReference </div></b></td>
		<td><input type='text' name='DeliveryReference' cspbind='DeliveryReference' size='20' csprequired></td>
	</tr>
	<tr>
		<td><input type='hidden' size='10' name='SystemSettingsID' cspbind='SystemSettings'><b><div align='right'>SystemSettings SystemID </div></b></td>
		<td><input type='text' name='SystemSettings' cspbind='SystemSettings.SystemID' size='10' readonly>
	<input type='button' name='btnFind' value='Find' onclick='findSystemSettings();'></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>RobotLocation ID </div></b></font></td>
		<td><select name='RobotLocation' cspbind='RobotLocation' classname='Robot.Location' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>SendingApplication </div></b></td>
		<td><input type='text' name='SendingApplication' cspbind='SendingApplication' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>SendingFacility </div></b></td>
		<td><input type='text' name='SendingFacility' cspbind='SendingFacility' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ReceivingApplication </div></b></td>
		<td><input type='text' name='ReceivingApplication' cspbind='ReceivingApplication' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ReceivingFacility </div></b></td>
		<td><input type='text' name='ReceivingFacility' cspbind='ReceivingFacility' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>HL7Message </div></b></td>
		<td><input type='text' name='HL7Message' cspbind='HL7Message' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>IsHL7Clone </div></b></td>
		<td><input type='checkbox' name='IsHL7Clone' cspbind='IsHL7Clone'></td>
	</tr>
	<tr>
		<td><b><div align='right'>AcceptAckType </div></b></td>
		<td><input type='text' name='AcceptAckType' cspbind='AcceptAckType' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ApplicationAckType </div></b></td>
		<td><input type='text' name='ApplicationAckType' cspbind='ApplicationAckType' size='50'></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>FacilityPK </div></b></font></td>
		<td><input type='text' name='FacilityPK' cspbind='FacilityPK' size='50' readonly></td>
	</tr>
	<tr>
		<td><b><div align='right'>MessageControlID </div></b></td>
		<td><input type='text' name='MessageControlID' cspbind='MessageControlID' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>MessageDateTime </div></b></td>
		<td><input type='text' name='MessageDateTime' cspbind='MessageDateTime' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>MessageType </div></b></td>
		<td><input type='text' name='MessageType' cspbind='MessageType' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>MessageVersion </div></b></td>
		<td><input type='text' name='MessageVersion' cspbind='MessageVersion' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>BatchCreationDate </div></b></td>
		<td><input type='text' name='BatchCreationDate' cspbind='BatchCreationDate' size='19'></td>
	</tr>
	<tr>
		<td><b><div align='right'>BatchClosedDate </div></b></td>
		<td><input type='text' name='BatchClosedDate' cspbind='BatchClosedDate' size='19'></td>
	</tr>
	<tr>
		<td><b><div align='right'>BatchStatus </div></b></td>
		<td><input type='checkbox' name='BatchStatus' cspbind='BatchStatus'></td>
	</tr>
	<tr>
		<td><b><div align='right'>SendBatch </div></b></td>
		<td><input type='checkbox' name='SendBatch' cspbind='SendBatch'></td>
	</tr>
	<tr>
		<td><b><div align='right'>SendOpenBatch </div></b></td>
		<td><input type='checkbox' name='SendOpenBatch' cspbind='SendOpenBatch'></td>
	</tr>
	<tr>
		<td><b><div align='right'>OpenBatchReportedDate </div></b></td>
		<td><input type='text' name='OpenBatchReportedDate' cspbind='OpenBatchReportedDate' size='19'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ClosedBatchReportedDate </div></b></td>
		<td><input type='text' name='ClosedBatchReportedDate' cspbind='ClosedBatchReportedDate' size='19'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="StockBatchItems.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot StockBatchItems</title>
</head>
<h1 align='center'>Robot StockBatchItems</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.StockBatchItems' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.StockBatchItems' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>NAPPICode </div></b></td>
		<td><input type='text' name='NAPPICode' cspbind='NAPPICode' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>EANCode </div></b></td>
		<td><input type='text' name='EANCode' cspbind='EANCode' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>SubstanceName </div></b></td>
		<td><input type='text' name='SubstanceName' cspbind='SubstanceName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>AmountDelivered </div></b></td>
		<td><input type='text' name='AmountDelivered' cspbind='AmountDelivered' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>AmountLoaded </div></b></td>
		<td><input type='text' name='AmountLoaded' cspbind='AmountLoaded' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>Error </div></b></td>
		<td><input type='text' name='Error' cspbind='Error' size='10'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
</table>
</center>
</form>
</body>
</html>
]]></CSP>


<CSP name="StockLevelSystems.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot Stock Stock LevelSystems</title>
</head>
<h1 align='center'>Robot Stock Stock LevelSystems</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Stock.StockLevelSystems' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' maxrows='1000' classname='Robot.Stock.StockLevelSystems' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><font color='#666666'><b><div align='right'>*StockLevel ID </div></b></font></td>
		<td><select name='StockLevel' cspbind='StockLevel' classname='Robot.Stock.StockLevels' query='Extent' field='ID' csprequired></select></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>*StorageLocationSystem ID </div></b></font></td>
		<td><select name='StorageLocationSystem' cspbind='StorageLocationSystem' classname='Robot.Systems' query='Extent' field='ID' csprequired></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>Priority </div></b></td>
		<td><input type='text' name='Priority' cspbind='Priority' size='10'></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>Quantity </div></b></font></td>
		<td><input type='text' name='Quantity' cspbind='Quantity' size='10' readonly></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>TransactionBalance </div></b></font></td>
		<td><input type='text' name='TransactionBalance' cspbind='TransactionBalance' size='10' readonly></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>
</body>
</html>
]]></CSP>


<CSP name="StockLevels.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica - Robot StockLevels</title>
</head>
<h1 align='center'>Robot Stock Levels</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Stock.StockLevels' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Stock.StockLevels' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><font color='#666666'><b><div align='right'>*Master ID:</div></b></font></td>
		<td><select name='Master' cspbind='Master' classname='Robot.Stock.StockMaster' query='Extent' field='ID' csprequired></select></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>Quantity:</div></b></font></td>
		<td><input type='text' name='Quantity' cspbind='Quantity' size='10' readonly></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>*Robot ID:</div></b></font></td>
		<td><select name='Robot' cspbind='Robot' classname='Robot.Robots' query='Extent' field='ID' csprequired></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>RobotQuantity:</div></b></td>
		<td><input type='text' name='RobotQuantity' cspbind='RobotQuantity' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>LastUpdatedDT:</div></b></td>
		<td><input type='text' name='LastUpdatedDT' cspbind='LastUpdatedDT' size='19'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="StockMaster.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot Stock StockMaster</title>
</head>
<h1 align='center'>Robot Stock StockMaster</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Stock.StockMaster' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Stock.StockMaster' where='InternalSerialID,EANCode,Bin,Active,RoboticDispensable' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*NAPPICode </div></b></td>
		<td><input type='text' name='NAPPICode' cspbind='NAPPICode' size='50' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>*InternalSerialID </div></b></td>
		<td><input type='text' name='InternalSerialID' cspbind='InternalSerialID' size='10' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>EANCode </div></b></td>
		<td><input type='text' name='EANCode' cspbind='EANCode' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>EAN13Priority </div></b></td>
		<td><input type='text' name='EAN13Priority' cspbind='EAN13Priority' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DepotCodes </div></b></td>
		<td><input type='text' name='DepotCodes' cspbind='DepotCodes' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>Bin </div></b></td>
		<td><select name='Bin' cspbind='Bin'>
		  <option value=''></option>
		  <option value='Fridge'>Fridge</option>
		  <option value='Shelf'>Shelf</option>
		  <option value='Cupboard'>Cupboard</option>
		  <option value='Robot'>Robot</option>
		</select></td>
	</tr>
	<tr>
		<td><b><div align='right'>*Active </div></b></td>
		<td><input type='checkbox' name='Active' cspbind='Active' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>Action </div></b></td>
		<td><select name='Action' cspbind='Action'>
		  <option value=''></option>
		  <option value='ADD'>ADD</option>
		  <option value='DELETE'>DELETE</option>
		  <option value='UPDATE'>UPDATE</option>
		</select></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>ATC ID </div></b></font></td>
		<td><select name='ATC' cspbind='ATC' classname='Robot.Stock.ATCCodes' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>Category ID </div></b></font></td>
		<td><select name='Category' cspbind='Category' classname='Robot.Stock.Category' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>ListPrice </div></b></td>
		<td><input type='text' name='ListPrice' cspbind='ListPrice' size='10'></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>Manufacturer ID </div></b></font></td>
		<td><select name='Manufacturer' cspbind='Manufacturer' classname='Robot.Stock.Manufacturer' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>ManufacturerItemCode </div></b></td>
		<td><input type='text' name='ManufacturerItemCode' cspbind='ManufacturerItemCode' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ModifiedTS </div></b></td>
		<td><input type='text' name='ModifiedTS' cspbind='ModifiedTS' size='19'></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>NSNICN ID </div></b></font></td>
		<td><select name='NSNICN' cspbind='NSNICN' classname='Robot.Stock.NSNICNCodes' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>*PackSize </div></b></td>
		<td><input type='text' name='PackSize' cspbind='PackSize' size='10' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>PrivateBarCode </div></b></td>
		<td><input type='text' name='PrivateBarCode' cspbind='PrivateBarCode' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>PrivateBarCode2 </div></b></td>
		<td><input type='text' name='PrivateBarCode2' cspbind='PrivateBarCode2' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>*ProductDescription </div></b></td>
		<td><input type='text' name='ProductDescription' cspbind='ProductDescription' size='80' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>RequiredForDispense </div></b></td>
		<td><input type='checkbox' name='RequiredForDispense' cspbind='RequiredForDispense'></td>
	</tr>
	<tr>
		<td><b><div align='right'>RoboticDispensable </div></b></td>
		<td><input type='checkbox' name='RoboticDispensable' cspbind='RoboticDispensable'></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>Schedule ID </div></b></font></td>
		<td><select name='Schedule' cspbind='Schedule' classname='Robot.Stock.ScheduleID' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>StrengthUnit </div></b></td>
		<td><input type='text' name='StrengthUnit' cspbind='StrengthUnit' size='50'></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>Supplier ID </div></b></font></td>
		<td><select name='Supplier' cspbind='Supplier' classname='Robot.Stock.Supplier' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>SupplierItemCode </div></b></td>
		<td><input type='text' name='SupplierItemCode' cspbind='SupplierItemCode' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>Suspended </div></b></td>
		<td><input type='checkbox' name='Suspended' cspbind='Suspended'></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>UnitsOfIssue ID </div></b></font></td>
		<td><select name='UnitsOfIssue' cspbind='UnitsOfIssue' classname='Robot.Stock.UnitsOfIssueCodes' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>

</body>
</html>
]]></CSP>


<CSP name="SystemInitialise.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot SystemInitialise</title>
</head>
<h1 align='center'>Robot SystemInitialise</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.SystemInitialise' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.SystemInitialise' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*SystemId </div></b></td>
		<td><input type='text' name='SystemId' cspbind='SystemId' size='50' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>SiteCode </div></b></td>
		<td><input type='text' name='SiteCode' cspbind='SiteCode' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>SiteDescription </div></b></td>
		<td><input type='text' name='SiteDescription' cspbind='SiteDescription' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>LocationCode </div></b></td>
		<td><input type='text' name='LocationCode' cspbind='LocationCode' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>LocationDescription </div></b></td>
		<td><input type='text' name='LocationDescription' cspbind='LocationDescription' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>LocationLabelAddressLine1 </div></b></td>
		<td><input type='text' name='LocationLabelAddressLine1' cspbind='LocationLabelAddressLine1' size='45'></td>
	</tr>
	<tr>
		<td><b><div align='right'>LocationLabelAddressLine2 </div></b></td>
		<td><input type='text' name='LocationLabelAddressLine2' cspbind='LocationLabelAddressLine2' size='45'></td>
	</tr>
	<tr>
		<td><b><div align='right'>LocationLabelAddressLine3 </div></b></td>
		<td><input type='text' name='LocationLabelAddressLine3' cspbind='LocationLabelAddressLine3' size='45'></td>
	</tr>
	<tr>
		<td><b><div align='right'>IsPDUSite </div></b></td>
		<td><input type='checkbox' name='IsPDUSite' cspbind='IsPDUSite'></td>
	</tr>
	<tr>
		<td><b><div align='right'>NumberOfMedimats </div></b></td>
		<td><input type='text' name='NumberOfMedimats' cspbind='NumberOfMedimats' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>NumberOfSpeedBoxes </div></b></td>
		<td><input type='text' name='NumberOfSpeedBoxes' cspbind='NumberOfSpeedBoxes' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>NumberOfPDUs </div></b></td>
		<td><input type='text' name='NumberOfPDUs' cspbind='NumberOfPDUs' size='10'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>
</body>
</html>
]]></CSP>


<CSP name="SystemSettings.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot SystemSettings</title>
</head>
<h1 align='center'>Robot SystemSettings</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.SystemSettings' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.SystemSettings' where='%Id()' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*SystemID </div></b></td>
		<td><input type='text' name='SystemID' cspbind='SystemID' size='50' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>ProductionPackageName </div></b></td>
		<td><input type='text' name='ProductionPackageName' cspbind='ProductionPackageName' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>SiteName </div></b></td>
		<td><input type='text' name='SiteName' cspbind='SiteName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>AllowInternalLoading </div></b></td>
		<td><input type='checkbox' name='AllowInternalLoading' cspbind='AllowInternalLoading'></td>
	</tr>
	<tr>
		<td><b><div align='right'>AllowDeleteOnNAPPIMaster </div></b></td>
		<td><input type='checkbox' name='AllowDeleteOnNAPPIMaster' cspbind='AllowDeleteOnNAPPIMaster'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DefaultEmailList </div></b></td>
		<td><textarea name='DefaultEmailList' cspbind='DefaultEmailList' cols='50' rows='3'></textarea></td>
	</tr>
	<tr>
		<td><b><div align='right'>INUHL7FileOperation </div></b></td>
		<td><input type='text' name='INUHL7FileOperation' cspbind='INUHL7FileOperation' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>INUHL7TCPOperation </div></b></td>
		<td><input type='text' name='INUHL7TCPOperation' cspbind='INUHL7TCPOperation' size='50'></td>
	</tr>
	<tr>
		<td><b><div align='right'>ReportInterimBatchBalances </div></b></td>
		<td><input type='checkbox' name='ReportInterimBatchBalances' cspbind='ReportInterimBatchBalances'></td>
	</tr>
	<tr>
		<td><b><div align='right'>StatusMessageModuloValue </div></b></td>
		<td><input type='text' name='StatusMessageModuloValue' cspbind='StatusMessageModuloValue' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>NightlyInterimOpenBatchReportingTime </div></b></td>
		<td><input type='text' name='NightlyInterimOpenBatchReportingTime' cspbind='NightlyInterimOpenBatchReportingTime' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>InterimBatchReportingInterval </div></b></td>
		<td><input type='text' name='InterimBatchReportingInterval' cspbind='InterimBatchReportingInterval' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>CaptureHL7RDSOutput </div></b></td>
		<td><input type='checkbox' name='CaptureHL7RDSOutput' cspbind='CaptureHL7RDSOutput'></td>
	</tr>
	<tr>
		<td><b><div align='right'>CapturePDUPrintOutput </div></b></td>
		<td><input type='checkbox' name='CapturePDUPrintOutput' cspbind='CapturePDUPrintOutput'></td>
	</tr>
	<tr>
		<td><b><div align='right'>LoopHL7RDSMessages </div></b></td>
		<td><input type='checkbox' name='LoopHL7RDSMessages' cspbind='LoopHL7RDSMessages'></td>
	</tr>
	<tr>
		<td><b><div align='right'>LoopPDUPrinter </div></b></td>
		<td><input type='checkbox' name='LoopPDUPrinter' cspbind='LoopPDUPrinter'></td>
	</tr>
	<tr>
		<td><b><div align='right'>LoopRobotMessages </div></b></td>
		<td><input type='checkbox' name='LoopRobotMessages' cspbind='LoopRobotMessages'></td>
	</tr>
	<tr>
		<td><b><div align='right'>AutomaticallyFailOrderOnSlowResponse </div></b></td>
		<td><input type='checkbox' name='AutomaticallyFailOrderOnSlowResponse' cspbind='AutomaticallyFailOrderOnSlowResponse'></td>
	</tr>
	<tr>
		<td><b><div align='right'>AutomaticallyResultDispenseOrders </div></b></td>
		<td><input type='checkbox' name='AutomaticallyResultDispenseOrders' cspbind='AutomaticallyResultDispenseOrders'></td>
	</tr>
	<tr>
		<td><b><div align='right'>TimeBeforeAutoFailOnSlowResponse </div></b></td>
		<td><input type='text' name='TimeBeforeAutoFailOnSlowResponse' cspbind='TimeBeforeAutoFailOnSlowResponse' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>TimeBeforeAutoResultRDS </div></b></td>
		<td><input type='text' name='TimeBeforeAutoResultRDS' cspbind='TimeBeforeAutoResultRDS' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>TestForZeroTCPRead </div></b></td>
		<td><input type='checkbox' name='TestForZeroTCPRead' cspbind='TestForZeroTCPRead'></td>
	</tr>
	<tr>
		<td><b><div align='right'>SupportBrokenPacks </div></b></td>
		<td><input type='checkbox' name='SupportBrokenPacks' cspbind='SupportBrokenPacks'></td>
	</tr>
	<tr>
		<td><b><div align='right'>UseDispenseAndLoadingTotalsForStockLevelUpdate </div></b></td>
		<td><input type='checkbox' name='UseDispenseAndLoadingTotalsForStockLevelUpdate' cspbind='UseDispenseAndLoadingTotalsForStockLevelUpdate'></td>
	</tr>
	<tr>
		<td><b><div align='right'>UseDispenseToTriggerStockLevelUpdate </div></b></td>
		<td><input type='checkbox' name='UseDispenseToTriggerStockLevelUpdate' cspbind='UseDispenseToTriggerStockLevelUpdate'></td>
	</tr>
	<tr>
		<td><b><div align='right'>UseRealTimeStockLevelChecks </div></b></td>
		<td><input type='checkbox' name='UseRealTimeStockLevelChecks' cspbind='UseRealTimeStockLevelChecks'></td>
	</tr>
	<tr>
		<td><b><div align='right'>UseRealTimeStockLevelTransactions </div></b></td>
		<td><input type='checkbox' name='UseRealTimeStockLevelTransactions' cspbind='UseRealTimeStockLevelTransactions'></td>
	</tr>
	<tr>
		<td><b><div align='right'>DispenseTriggerInterval </div></b></td>
		<td><input type='text' name='DispenseTriggerInterval' cspbind='DispenseTriggerInterval' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>NumberOfDaysToRetainBatches </div></b></td>
		<td><input type='text' name='NumberOfDaysToRetainBatches' cspbind='NumberOfDaysToRetainBatches' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>NumberOfDaysToRetainLogData </div></b></td>
		<td><input type='text' name='NumberOfDaysToRetainLogData' cspbind='NumberOfDaysToRetainLogData' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>NumberOfDaysToRetainOrders </div></b></td>
		<td><input type='text' name='NumberOfDaysToRetainOrders' cspbind='NumberOfDaysToRetainOrders' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>NumberOfDaysToRetainTraceData </div></b></td>
		<td><input type='text' name='NumberOfDaysToRetainTraceData' cspbind='NumberOfDaysToRetainTraceData' size='10'></td>
	</tr>
	<tr>
		<td><b><div align='right'>NumberOfDaystoRetainQueues </div></b></td>
		<td><input type='text' name='NumberOfDaystoRetainQueues' cspbind='NumberOfDaystoRetainQueues' size='10'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>
</body>
</html>
]]></CSP>


<CSP name="Systems.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>

<!-- Put your page Title here -->
<title>NiPaRobotica</title>

</head>

<body>

<head>
<title>NiPaRobotica  Robot Systems</title>
</head>
<h1 align='center'>Robot Systems</h1>
<!-- This function is needed by the search button on the form -->
<script language='javascript'>
<!--
function update(id)
{
     #server(..formLoad(id))#;
     return true;
}

// -->
</script>

<!-- set the domain so error messages could be properly localized -->
<csp:class DOMAIN='%CSPBind'>

<!-- use CSP:OBJECT tag to create a reference to an instance of the class -->
<csp:object name='objForm' classname='Robot.Systems' OBJID='#(%request.Get("OBJID"))#'>

<!-- use csp:search tag to create a javascript function to invoke a search page --> 
<csp:search name='form_search' classname='Robot.Systems' where='RobotSystemID' options='popup,nopredicates' onselect='update'>

<form name='form' cspbind='objForm' cspjs='All' onsubmit='return form_validate();'>
<center>
<table cellpadding='3'>
	<tr>
		<td><b><div align='right'>*System </div></b></td>
		<td><input type='text' name='System' cspbind='System' size='50' csprequired></td>
	</tr>
	<tr>
		<td><b><div align='right'>SystemName </div></b></td>
		<td><input type='text' name='SystemName' cspbind='SystemName' size='80'></td>
	</tr>
	<tr>
		<td><b><div align='right'>RobotSystemID </div></b></td>
		<td><input type='text' name='RobotSystemID' cspbind='RobotSystemID' size='50'></td>
	</tr>
	<tr>
		<td><font color='#666666'><b><div align='right'>Robot ID </div></b></font></td>
		<td><select name='Robot' cspbind='Robot' classname='Robot.Robots' query='Extent' field='ID'></select></td>
	</tr>
	<tr>
		<td><b><div align='right'>DefaultPriority </div></b></td>
		<td><input type='text' name='DefaultPriority' cspbind='DefaultPriority' size='10'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><input type='button' name='btnClear' value='#(%response.GetText("","%CSPSearch","ClearBtn","clear"))#' onclick='form_new();'>
	<input type='button' name='btnSave' value='#(%response.GetText("","%CSPSearch","SaveBtn","save"))#' onclick='form_save();'>
	<input type='button' name='btnSearch' value='#(%response.GetText("","%CSPSearch","SearchBtn","search"))#' onclick='form_search();'></td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td><font color='#000088' size='2'>#(%response.GetText("","%CSPSearch","RequiredNote","(* Denotes required fields)"))#'</font></td>
	</tr>
</table>
</center>
</form>
</body>
</html>
]]></CSP>


<CSP name="Test.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>
<title>Right ePharmacy</title>
<link rel="stylesheet" type="text/css" href="wwa_style.css"/>
<style type="text/css">
</style>
</head>
<body >
<table id="MainTitle" class="maintable">
	<tr>
		<td class="header" align="left" >
			<table>
			<tr>
			<td width="15%">
				<img width="250px" src="images/Right ePharmacy.jpg"/>
			</td>
			<td align="center" width="70%" style="padding-left:20px;">
				<div style="font-size: 1.5em;">Robot Interface</div>
				<br>
				<div style="font-size: 1.0em;">Right ePharmacy</div>
			</td>
			<td style="text-align: right; vertical-align: middle;">
			<table >
				<tr>
					<td align="right">User </td><td align="left"><b>_SYSTEM</b>&nbsp;</td>
				</tr>
				<tr>
					<td align="right">Server </td><td align="left"><b>ENSEMBLE2014</b>&nbsp;</td>
				</tr>
			</table>
		</td>
	</tr>
</table>
</body>
</html>
]]></CSP>


<CSP name="Untitled2.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[

<!DOCTYPE html>
<html  >
<!-- Server: Cache for Windows (x86-64) 2014.1.4 (Build 803U) Fri Feb 27 2015 10:47:17 EST  Zen #: 14 -->
<head>
<title>Stock ATC Codes</title>
	
<link rel="stylesheet" type="text/css" href="ZEN_SVGComponent.css"/>
<link rel="stylesheet" type="text/css" href="ZEN_Component__core_3.css"/>
<link rel="stylesheet" type="text/css" href="ZEN_Component__form_3.css"/>
<link rel="stylesheet" type="text/css" href="ZEN_Component__table_3.css"/>
<link rel="stylesheet" type="text/css" href="Robot_Zen_CustomComponents_3.css"/>
<style id="zenStyleSection" type="text/css"></style>
<!-- application-wide css includes -->
<link rel="stylesheet" type="text/css" href="wwa_style.css"/>
<!-- Style: Robot.Zen.InterfaceServerApplication -->
<!-- Style: Robot.Zen.InterfaceServerApplication -->
<style type="text/css">
</style>
<!-- Style: Robot.Zen.ATCCodes -->
<style>
</style>
<script type="text/javascript" src="zenutils.js"></script>
<script type="text/javascript">var zenIsHTML5=true;</script>
</head>
<body id="zenBody">
<xml id="zenWorkspace"></xml>
<div id="zenMouseTrap" ></div>
<div id="zenModalDiv" style="display: none;"></div>
<div id="zenFloatingDiv" style="display: none;"></div>
<div class="zendiv" id="zen1" zen="1"  >
<table id="group_1" class="page" style="width:100%;height:100%;" border="0" cellspacing="0" cellpadding="0">
	<tr style="vertical-align:top;">
		<td id="zenLayoutTableCell_2"  >
			<div class="zendiv" id="title" zen="2"  >
			<table id="MainTitle" class="maintable">
				<tr>
					<td class="header" align="left" >
						<table>
							<tr>
							<td width="15%">
								<img width="250px" src="images/Right ePharmacy.jpg"/>
							</td>
							<td align="center" width="70%" style="padding-left:20px;">
								<div style="font-size: 1.5em;">Robot Interface</div>
								<br>
								<div style="font-size: 1.0em;">ATC Code Table</div>
							</td>
							<td style="text-align: right; vertical-align: middle;">
							<table >
								<tr>
									<td align="right">User </td><td align="left"><b>_SYSTEM</b>&nbsp;</td>
								</tr>
								<tr>
									<td align="right">Server </td><td align="left"><b>ENSEMBLE2014</b>&nbsp;</td>
								</tr>
							</table>
						</table>
					</td>
				</tr>
			</table>
			</div>
		</td>
	</tr>
<tr style="vertical-align:top;">
<td id="zenLayoutTableCell_6"  align="left" >
	<div class="zendiv" id="zen6" zen="6" style="width:100%;" >
<table id="group_6" class="group" style="width:100%;" border="0" cellspacing="0" cellpadding="0">
<tr style="height:100%;">
	<td id="zenLayoutTableCell_7"  >
		<div class="zendiv" id="zen7" zen="7" style="height:20px;" ><div class="spacer" id="spacer_7" style="height:20px;">
		</div>
		</div>
	</td>
	<td id="zenLayoutTableCell_8"  align="left" style="width:100%;">
		<div class="zendiv" id="zen8" zen="8"  >
		<table id="group_8" class="group" style="width:100%;" border="0" cellspacing="0" cellpadding="0">
		<tr style="vertical-align:top;">
			<td id="zenLayoutTableCell_9"  style="height:20px;">
				<div class="zendiv" id="zen9" zen="9"  >
					<div class="spacer" id="spacer_9" style="height:20px;">
					</div>
				</div>
			</td>
		</tr>
<tr style="vertical-align:top;">
<td id="zenLayoutTableCell_10"  align="left" >
<div class="zendiv" id="atcNav" zen="10"  >
	<table id="group_10" class="group"  border="0" cellspacing="0" cellpadding="0">
		<tr style="vertical-align:top;">
			<td id="zenLayoutTableCell_32"  >
				<div class="zendiv" id="zen32" zen="32"  >
					<table id="group_32" class="group"  border="0" cellspacing="0" cellpadding="0">
						<tr style="height:100%;">
							<td id="zenLayoutTableCell_33"  >
								<div class="zendiv" id="atcNav.btnFirst" zen="33"  ><input type="button" class="button" id="control_33" title="Go to first page"  value=" |&lt; "     onclick="return zenFireEvent('33','zenThis.composite.gotoPage(\'first\');','onclick',event);"/>
								</div>
							</td>
							<td id="zenLayoutTableCell_34"  >
								<div class="zendiv" id="atcNav.btnPrev" zen="34"  ><input type="button" class="button" id="control_34" title="Go to previous page"  value=" &lt;&lt; "     onclick="return zenFireEvent('34','zenThis.composite.gotoPage(\'prev\');','onclick',event);"/>
								</div>
							</td>
							<td id="zenLayoutTableCell_35"  >
								<div class="zendiv" id="atcNav.btnNext" zen="35"  ><input type="button" class="button" id="control_35" title="Go to next page"  value=" &gt;&gt; "     onclick="return zenFireEvent('35','zenThis.composite.gotoPage(\'next\');','onclick',event);"/>
								</div>
							</td>
							<td id="zenLayoutTableCell_36"  >
								<div class="zendiv" id="atcNav.btnLast" zen="36"  ><input type="button" class="button" id="control_36" title="Go to last page"  value=" &gt;| "     onclick="return zenFireEvent('36','zenThis.composite.gotoPage(\'last\');','onclick',event);"/>
								</div>
							</td>
							<td id="zenLayoutTableCell_37"  style="width:20px;">
								<div class="zendiv" id="zen37" zen="37"  ><div class="spacer" id="spacer_37" style="width:20px;"></div>
								</div>
							</td>
							<td id="zenLayoutLabelCell_38" class="hzLabelLeft" nowrap="1" ><span id="zenlbl_38" class="tn-pageLabel"  >Page</span></td><td id="zenLayoutTableCell_38"  >
								<div class="zendiv" id="atcNav.pageNo" zen="38"  ><input type="text" class="text"  id="control_38"     size="2"     spellcheck="true"  onchange="zenPage.getComponent(38).onchangeHandler();"/>
								</div>
							</td>
							<td id="zenLayoutLabelCell_39" class="hzLabelLeft" nowrap="1" ><span id="zenlbl_39" class="tn-pageLabel"  >of</span></td><td id="zenLayoutTableCell_39"  >
								<div class="zendiv" id="atcNav.pageCount" zen="39"  ><input type="text" class="text"  id="control_39"   readonly  size="4"     spellcheck="true"  onchange="zenPage.getComponent(39).onchangeHandler();"/>
								</div>
							</td>
								<td id="zenLayoutTableCell_40"  style="width:*;">
									<div class="zendiv" id="zen40" zen="40"  ><div class="spacer" id="spacer_40" style="width:1px;"></div>
									</div>
								</td>
							<td style="width:99%;">&nbsp;</td>
						</tr>
					</table>
				</div>
			</td>
		</tr>
	</table>
</div>
</td>
</tr>
<tr style="vertical-align:top;">
	<td id="zenLayoutTableCell_11"  style="height:10px;">
		<div class="zendiv" id="zen11" zen="11"  ><div class="spacer" id="spacer_11" style="height:10px;"></div>
		</div>
	</td>
</tr>
<tr style="vertical-align:top;">
	<td id="zenLayoutTableCell_12"  align="left" >
		<div class="zendiv" id="zen12" zen="12"  >
			<input type="button" class="button" id="control_12" value="New" onclick="return zenFireEvent('12','javascript:zenPage.newATC();','onclick',event);"/>
		</div>
	</td>
</tr>
<tr style="vertical-align:top;">
<td id="zenLayoutTableCell_13"  style="height:10px;">
<div class="zendiv" id="zen13" zen="13"  ><div class="spacer" id="spacer_13" style="height:10px;"></div>
</div>
</td>
</tr>
<tr style="vertical-align:top;">
<td id="zenLayoutTableCell_14"  >
<div class="zendiv" id="zen14" zen="14"  >
<table id="group_14" class="group"  border="0" cellspacing="0" cellpadding="0"><tr style="height:100%;">
<td id="zenLayoutTableCell_19"  style="width:60%;">
<div class="zendiv" id="atcTable" zen="19"  ><table class="tpTable" border="1" cellspacing="0" cellpadding="0">
<thead id="tpHead_19" class="tpHead">
<tr valign="bottom" id="filterRow_19" class="tpFilterRow" >
<th width="5%">&nbsp;</th>
<th valign="bottom" nowrap="1" width="10%">
<table class="tpFilterLayout" border="0" cellspacing="0" width="100%"><tr>
<td nowrap="1"><input  type="text" id="filter1_ATCCode_19"  class="tpFilter" value="" onkeypress="zenPage.getComponent(19).filterKeyPressed(event,'ATCCode');" onchange="zenPage.getComponent(19).filterChanged('ATCCode',true);"></td>
</tr></table>
</th>
<th valign="bottom" nowrap="1" width="40%">
<table class="tpFilterLayout" border="0" cellspacing="0" width="100%"><tr>
<td nowrap="1"><input  type="text" id="filter1_ATCDescription_19"  class="tpFilter" value="" onkeypress="zenPage.getComponent(19).filterKeyPressed(event,'ATCDescription');" onchange="zenPage.getComponent(19).filterChanged('ATCDescription',true);"></td>
</tr></table>
</th>
<th width="5%">&nbsp;</th>
<tr>
<th width="5%" onclick="zenPage.getComponent(19).headerClick('');">&nbsp;&nbsp;&nbsp;</th>
<th  width="10%" id="th_ATCCode_19" onclick="zenPage.getComponent(19).headerClick('ATCCode');">ATC Code&nbsp;</th>
<th  width="40%" id="th_ATCDescription_19" onclick="zenPage.getComponent(19).headerClick('ATCDescription');">ATC Description&nbsp;</th>
<th width="5%" onclick="zenPage.getComponent(19).headerClick('');">&nbsp;&nbsp;</th>
</tr></thead>
<tbody class="tpBody" id="tpBody_19" >
<tr zenValue="J05AR08" class="tpOdd"  id="tr_0_19" onclick="zenPage.getComponent(19).clickHandler(0);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_0_19" width="5%">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;"  width="10%">J05AR08</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;"  width="40%">&quot;Emtricitabine, Tenofovir Disoproxil And Rilpivirine&nbsp;&quot;</td>
<td class="tpAction" style="white-space:nowrap;"  width="5%"><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;J05AR08&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="N01BB52" class="tpEven"  id="tr_1_19" onclick="zenPage.getComponent(19).clickHandler(1);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_1_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >N01BB52</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >&quot;Lidocaine, combinations&quot;</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;N01BB52&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="J04AM06" class="tpOdd"  id="tr_2_19" onclick="zenPage.getComponent(19).clickHandler(2);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_2_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >J04AM06</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >&quot;Rifampicin, pyrazinamide, ethambutol and isoniazid&nbsp;&quot;</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;J04AM06&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="S01GA52" class="tpEven"  id="tr_3_19" onclick="zenPage.getComponent(19).clickHandler(3);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_3_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >S01GA52</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >&quot;Tetryzoline, combinations (ophthal)&quot;</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;S01GA52&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="R03DA04" class="tpOdd"  id="tr_4_19" onclick="zenPage.getComponent(19).clickHandler(4);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_4_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >R03DA04</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >&quot;Theophylline, Anhydrous&quot;</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;R03DA04&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="J05AF06" class="tpEven"  id="tr_5_19" onclick="zenPage.getComponent(19).clickHandler(5);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_5_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >J05AF06</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Abacavir Sulfate</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;J05AF06&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="J05AB01" class="tpOdd"  id="tr_6_19" onclick="zenPage.getComponent(19).clickHandler(6);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_6_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >J05AB01</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Acyclovir Sodium</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;J05AB01&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="M04AA01" class="tpEven"  id="tr_7_19" onclick="zenPage.getComponent(19).clickHandler(7);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_7_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >M04AA01</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Allopurinol</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;M04AA01&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="N06AA09&nbsp;" class="tpOdd"  id="tr_8_19" onclick="zenPage.getComponent(19).clickHandler(8);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_8_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >N06AA09&nbsp;</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Amitriptyline</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;N06AA09%C2%A0&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="N06AA09" class="tpEven"  id="tr_9_19" onclick="zenPage.getComponent(19).clickHandler(9);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_9_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >N06AA09</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Amitriptyline Hydrochloride</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;N06AA09&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="C08CA01" class="tpOdd"  id="tr_10_19" onclick="zenPage.getComponent(19).clickHandler(10);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_10_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >C08CA01</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Amlodipine Besylate</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;C08CA01&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="J01CA04" class="tpEven"  id="tr_11_19" onclick="zenPage.getComponent(19).clickHandler(11);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_11_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >J01CA04</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Amoxicillin</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;J01CA04&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="J01CR02" class="tpOdd"  id="tr_12_19" onclick="zenPage.getComponent(19).clickHandler(12);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_12_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >J01CR02</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Amoxicillin</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;J01CR02&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="R06AX05" class="tpEven"  id="tr_13_19" onclick="zenPage.getComponent(19).clickHandler(13);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_13_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >R06AX05</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Antazoline</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;R06AX05&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="A01AB11" class="tpOdd"  id="tr_14_19" onclick="zenPage.getComponent(19).clickHandler(14);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_14_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >A01AB11</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Anti Infectives and Anticeptives for Local oral Treatment</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;A01AB11&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="A11GA01" class="tpEven"  id="tr_15_19" onclick="zenPage.getComponent(19).clickHandler(15);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_15_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >A11GA01</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Ascorbic Acid (Vitamin C)</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;A11GA01&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="J05AE08" class="tpOdd"  id="tr_16_19" onclick="zenPage.getComponent(19).clickHandler(16);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_16_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >J05AE08</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Atazanavir Sulfate</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;J05AE08&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="C07AB03" class="tpEven"  id="tr_17_19" onclick="zenPage.getComponent(19).clickHandler(17);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_17_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >C07AB03</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Atenolol</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;C07AB03&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="C10AA05" class="tpOdd"  id="tr_18_19" onclick="zenPage.getComponent(19).clickHandler(18);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_18_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >C10AA05</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Atorvastatin Calcium</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;C10AA05&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="J01FA10" class="tpEven"  id="tr_19_19" onclick="zenPage.getComponent(19).clickHandler(19);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_19_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >J01FA10</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Azithromycin</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;J01FA10&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="R03BA01" class="tpOdd"  id="tr_20_19" onclick="zenPage.getComponent(19).clickHandler(20);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_20_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >R03BA01</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Beclomethasone Dipropionate Monohydrate</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;R03BA01&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="J04AK05" class="tpEven"  id="tr_21_19" onclick="zenPage.getComponent(19).clickHandler(21);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_21_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >J04AK05</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Bedaquiline</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;J04AK05&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="D07AC01" class="tpOdd"  id="tr_22_19" onclick="zenPage.getComponent(19).clickHandler(22);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_22_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >D07AC01</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Bethamethasone</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;D07AC01&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="C10AB02" class="tpEven"  id="tr_23_19" onclick="zenPage.getComponent(19).clickHandler(23);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_23_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >C10AB02</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Bezafibrate</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;C10AB02&#39;)%3B">edit</a></td>
</tr>
<tr zenValue="C05AX02" class="tpOdd"  id="tr_24_19" onclick="zenPage.getComponent(19).clickHandler(24);" ondblclick="zenPage.getComponent(19).dblclickHandler();" >
<td class="tpSel" style="" id="selector_24_19">&nbsp;</td>
<td class="tpStr" style="text-align: center;white-space:nowrap;" >C05AX02</td>
<td class="tpStr" style="text-align: left;white-space:nowrap;" >Bismuth Oxide</td>
<td class="tpAction" style="white-space:nowrap;" ><a style="white-space:nowrap;"  href="javascript:zenPage.showatcForm(&#39;C05AX02&#39;)%3B">edit</a></td>
</tr>
<tr><td style="border:none;height:99%" colspan="4" class="tpPadRow"></td></tr></tbody></table>
</div>
</td>
<td id="zenLayoutTableCell_20"  style="width:60px;">
<div class="zendiv" id="zen20" zen="20"  ><div class="spacer" id="spacer_20" style="width:60px;"></div>
</div>
</td>
<td id="zenLayoutTableCell_21"  style="display: none;">
<div class="zendiv" id="atcFormGroup" zen="21" style="display: none;" ><fieldset id="fieldset_21" class="fieldSet">
<legend id="legend_21" title="">ATC Code Details</legend>

<table id="group_21" class="fieldset"  border="0" cellspacing="0" cellpadding="0">
<tr style="vertical-align:top;">
<td id="zenLayoutTableCell_22"  >
<div class="zendiv" id="atcForm" zen="22"  ><form method="post" id="form_22" action="Robot.Zen.ATCCodes.cls"    onsubmit="return zenPage.getComponent(22).submitHandler();">

<input type="hidden" name="$ZEN_FORMID" value="atcForm"/>
<input type="hidden" name="$ZEN_FORMINDEX" value="22"/>
<input id="formKey_22" type="hidden" name="$ZEN_FORMKEY" value=""/>
<input id="nextPage_22" type="hidden" name="$ZEN_NEXTPAGE" value=""/>
<input id="submitMethod_22" type="hidden" name="$ZEN_FORMMETHOD" value=""/>
<input id="modelClass_22" type="hidden" name="$ZEN_MODELCLASS" value=""/>
<input id="action_22" type="hidden" name="$SUBMIT" value="submit" />

<table id="group_22" class="form" style="padding: 5px;" border="0" cellspacing="0" cellpadding="0">
<tr style="vertical-align:top;">
<td id="zenLayoutTableCell_23"  style="padding: 5px; padding-left: 10px; padding-right: 10px;">
<span id="zenlbl_23" class="zenLabel"  >ATC Code </span><div class="zendiv" id="ATCCode" zen="23"  ><input type="text" class="text"  id="control_23" name="$V_ATCCode"    size="8"     spellcheck="true"  onchange="zenPage.getComponent(23).onchangeHandler();"/>
</div>
</td>
</tr>
<tr style="vertical-align:top;">
<td id="zenLayoutTableCell_24"  style="padding: 5px; padding-left: 10px; padding-right: 10px;height:.5px;">
<div class="zendiv" id="zen24" zen="24"  ><div class="spacer" id="spacer_24" style="height:.5px;"></div>
</div>
</td>
</tr>
<tr style="vertical-align:top;">
<td id="zenLayoutTableCell_25"  style="padding: 5px; padding-left: 10px; padding-right: 10px;">
<span id="zenlbl_25" class="zenLabel"  >ATC Description </span><div class="zendiv" id="ATCDescription" zen="25"  ><input type="text" class="text"  id="control_25" name="$V_ATCDescription"    size="40"     spellcheck="true"  onchange="zenPage.getComponent(25).onchangeHandler();"/>
</div>
</td>
</tr>
<tr style="vertical-align:top;">
<td id="zenLayoutTableCell_26"  style="padding: 5px; padding-left: 10px; padding-right: 10px;height:.5px;">
<div class="zendiv" id="zen26" zen="26"  ><div class="spacer" id="spacer_26" style="height:.5px;"></div>
</div>
</td>
</tr>
<tr style="vertical-align:top;">
<td id="zenLayoutTableCell_27"  style="padding: 5px; padding-left: 10px; padding-right: 10px;">
<div class="zendiv" id="zen27" zen="27"  >
<table id="group_27" class="group"  border="0" cellspacing="0" cellpadding="0"><tr style="height:100%;">
<td id="zenLayoutTableCell_28"  >
<div class="zendiv" id="zen28" zen="28"  ><input type="button" class="button" id="control_28"   value="Save"     onclick="return zenFireEvent('28','zenPage.saveATC();','onclick',event);"/>
</div>
</td>
<td id="zenLayoutTableCell_29"  style="width:5px;">
<div class="zendiv" id="zen29" zen="29"  ><div class="spacer" id="spacer_29" style="width:5px;"></div>
</div>
</td>
<td id="zenLayoutTableCell_30"  >
<div class="zendiv" id="zen30" zen="30"  ><input type="button" class="button" id="control_30"   value="Delete"     onclick="return zenFireEvent('30','zenPage.deleteATC();','onclick',event);"/>
</div>
</td>
</tr></table>
</div>
</td>
</tr>
</table>
</form>
</div>
</td>
</tr>
</table>
</fieldset>
</div>
</td>
<td id="zenLayoutTableCell_31"  style="width:20%;">
<div class="zendiv" id="zen31" zen="31"  >
<table id="group_31" class="group" style="width:100%;" border="0" cellspacing="0" cellpadding="0">
<tr><td>&nbsp;</td></tr></table>
</div>
</td>
</tr></table>
</div>
</td>
</tr>
</table>
</div>
</td>
</tr></table>
</div>
</td>
</tr>
<tr style="height:99%;"><td ></td></tr>
</table>
</div>
<script type="text/javascript" src="cspxmlhttp.js"></script>
<script type="text/javascript" src="cspbroker.js"></script>
<script type="text/javascript" src="ZEN_Component__core.js"></script>
<script type="text/javascript" src="ZEN_Auxiliary.js"></script>
<script type="text/javascript" src="ZEN_Auxiliary__mvc.js"></script>
<script type="text/javascript" src="ZEN_Component__form.js"></script>
<script type="text/javascript" src="ZEN_Component__table.js"></script>
<script type="text/javascript" src="Robot_Zen_CustomComponents.js"></script>
<script type="text/javascript">
//<![CDATA[

var zenAutoLogoutTime = 915000;
var zenAutoLogoutTimerID = null;
	

zenAutoLogoutTimerID = self.setTimeout("zenAutoLogout()",zenAutoLogoutTime);
function zenAutoLogout()
{
	var ok = true;
	if (zenPage.onlogoutHandler) {
		ok = zenPage.onlogoutHandler();
	}
	if (ok) {
		top.document.location.reload();
	}
}
		
//]]]]><![CDATA[>
</script>
<script type="text/javascript">
//<![CDATA[
var _zenPageError = 'ZEN ERROR:\nzenPage object is missing or invalid for this page.';
cspMultipleCall = true;
function zenClassMethod(object,method,spec,rettype,args)
{
	if (zenAutoLogoutTimerID) {
		self.clearTimeout(zenAutoLogoutTimerID);
		zenAutoLogoutTimerID = self.setTimeout("zenAutoLogout()",zenAutoLogoutTime);
	}
	if (zenPage.onServerMethodCall) { zenPage.onServerMethodCall(method); }
	var state = new zenSerialState();
	var arglist = zenBuildArgumentList(state,spec,args);
	if (zenDEBUGTraceEvents) { zenTRACE('Server Class Method',method,arglist);}
	var header = state.getHeader();
	var body = state.getBody();
	var ns = 'IFSV3DEV';
	if (''!=rettype) {
		var ret = cspHttpServerMethod("aHy_TzhnGokIEgWfBnMA8GtE_$X0nKw3mvHv_uCSC6NrDT_FX2z89V8lt0UzwiqHuSsuoxrT5$0gk$sanOX1po2TjSf5pqbj23Kqzo3jkFg-",object._serverClass,method,rettype,zenSyncFlag,header,body,spec,arglist,ns,zenGetThreadId());
		return zenConvertType(rettype,ret);
	} else {
		if (!zenSynchronousMode) {
			cspCallHttpServerMethod("aHy_TzhnGokIEgWfBnMA8GtE_$X0nKw3mvHv_uCSC6NrDT_FX2z89V8lt0UzwiqHuSsuoxrT5$0gk$sanOX1po2TjSf5pqbj23Kqzo3jkFg-",object._serverClass,method,rettype,zenSyncFlag,header,body,spec,arglist,ns,zenGetThreadId());
		} else {
			cspHttpServerMethod("aHy_TzhnGokIEgWfBnMA8GtE_$X0nKw3mvHv_uCSC6NrDT_FX2z89V8lt0UzwiqHuSsuoxrT5$0gk$sanOX1po2TjSf5pqbj23Kqzo3jkFg-",object._serverClass,method,rettype,zenSyncFlag,header,body,spec,arglist,ns,zenGetThreadId());
		}
	}
}
function zenInstanceMethod(object,method,spec,rettype,args)
{
	if (zenAutoLogoutTimerID) {
		self.clearTimeout(zenAutoLogoutTimerID);
		zenAutoLogoutTimerID = self.setTimeout("zenAutoLogout()",zenAutoLogoutTime);
	}
	if (zenPage.onServerMethodCall) { zenPage.onServerMethodCall(method); }
	var state = new zenSerialState();
	state.addObject(object);
	var arglist = zenBuildArgumentList(state,spec,args);
	if (zenDEBUGTraceEvents) { zenTRACE('Server Instance Method',method,arglist);}
	var header = state.getHeader();
	var body = state.getBody();
	var ns = 'IFSV3DEV';
	if (''!=rettype) {
		var ret = cspHttpServerMethod("vZisCVFqI7wk6XNIQaOVimtE_$X0nKw3mvHv_uCSC6OPjpQW85fpmsfm2LaERg$gs0DZaAlRYmWyED35oChRvB7phWzEFHEfSSSVFkMfoV0-",object.index,method,rettype,zenSyncFlag,header,body,spec,arglist,ns,zenGetThreadId());
		return zenConvertType(rettype,ret);
	} else {
		if (!zenSynchronousMode) {
			cspCallHttpServerMethod("vZisCVFqI7wk6XNIQaOVimtE_$X0nKw3mvHv_uCSC6OPjpQW85fpmsfm2LaERg$gs0DZaAlRYmWyED35oChRvB7phWzEFHEfSSSVFkMfoV0-",object.index,method,rettype,zenSyncFlag,header,body,spec,arglist,ns,zenGetThreadId());
		} else {
			cspHttpServerMethod("vZisCVFqI7wk6XNIQaOVimtE_$X0nKw3mvHv_uCSC6OPjpQW85fpmsfm2LaERg$gs0DZaAlRYmWyED35oChRvB7phWzEFHEfSSSVFkMfoV0-",object.index,method,rettype,zenSyncFlag,header,body,spec,arglist,ns,zenGetThreadId());
		}
	}
}
function zenLink(url,share)
{
	var parms = '';
	if (share) {
		parms = 'CSPSHARE=1&CSPCHD=000000010000u9xR7C8kfa0000Ti6lj1SF3J8E2rcZ25rWcA--';
	}
	var s = url.split('?');
	var loc = s[0];
	if (null!=s[1]||''!=parms) {
		loc += '?' + parms + (null==s[1]?'':((''==parms)?'':'&') + s[1]);
	}
	return loc;
}
var _zenEmbeddedPage = false;
var zenDecimalSeparator = '.';
var zenNumericGroupSeparator = ',';
var zenNumericGroupSize = 3;
var _zenResource = new Object();
_zenResource['zenDayNames'] = 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday';
_zenResource['zenDayShortNames'] = 'S,M,T,W,T,F,S';
_zenResource['zenMonthNames'] = 'January,February,March,April,May,June,July,August,September,October,November,December';
_zenResource['zenMonthShortNames'] = 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec';
var _zenTEXT = new Object();
var _zenDOMAIN = 'REP';

self._zenClassIdx['ATCCodes'] = 'Robot_Zen_ATCCodes';
self.Robot_Zen_ATCCodes = function(index,id) {
	if (index>=0) {Robot_Zen_ATCCodes__init(this,index,id);}
}

self.Robot_Zen_ATCCodes__init = function(o,index,id) {
	('undefined' == typeof _ZEN_Component_page__init) ?zenMaster._ZEN_Component_page__init(o,index,id):_ZEN_Component_page__init(o,index,id);
	o.useSoftModals = false;
}
function Robot_Zen_ATCCodes_serialize(set,s)
{
	var o = this;s[0]='4277539460';s[1]=o.index;s[2]=o.id;s[3]=o.name;s[4]=set.addObject(o.parent,'parent');s[5]=set.addObject(o.composite,'composite');s[6]=o.SVGClassList;s[7]=o.UserSVGPackageList;s[8]=o.align;s[9]=o.aux;s[10]=o.backgroundTimerInterval;s[11]=o.cellAlign;s[12]=o.cellSize;s[13]=o.cellStyle;s[14]=o.cellVAlign;s[15]=set.serializeList(o,o.children,true,'children');s[16]=o.containerStyle;s[17]=o.cssLevel;s[18]=(o.designMode?1:0);s[19]=(o.disabled?1:0);s[20]=(o.dragAndDrop?1:0);s[21]=(o.dragEnabled?1:0);s[22]=(o.dropEnabled?1:0);s[23]=(o.dynamic?1:0);s[24]=o.enclosingClass;s[25]=o.enclosingStyle;s[26]=o.error;s[27]=o.groupClass;s[28]=o.groupStyle;s[29]=o.height;s[30]=(o.hidden?1:0);s[31]=o.hint;s[32]=o.hintClass;s[33]=o.hintStyle;s[34]=(o.inlineSVG?1:0);s[35]=(o.isPopup?1:0);s[36]=(o.isSoftModal?1:0);s[37]=o.label;s[38]=o.labelClass;s[39]=o.labelDisabledClass;s[40]=o.labelPosition;s[41]=o.labelStyle;s[42]=o.lastModalIndex;s[43]=o.layout;s[44]=o.nextIndex;s[45]=o.onafterdrag;s[46]=o.onbeforedrag;s[47]=o.onclick;s[48]=o.ondrag;s[49]=o.ondrop;s[50]=o.onhide;s[51]=o.onoverlay;s[52]=o.onrefresh;s[53]=o.onshow;s[54]=o.onupdate;s[55]=o.overlayMode;s[56]=o.popupParent;s[57]=o.renderFlag;s[58]=(o.showLabel?1:0);s[59]=o.slice;s[60]=o.title;s[61]=o.tuple;s[62]=(o.useSVG?1:0);s[63]=(o.useSoftModals?1:0);s[64]=o.valign;s[65]=(o.visible?1:0);s[66]=o.width;s[67]=(o.zenPersistentPopup?1:0);
}
function Robot_Zen_ATCCodes_getSettings(s)
{
	s['name'] = 'string';
	this.invokeSuper('getSettings',arguments);
}

self.Robot_Zen_ATCCodes_deleteATC = function() {
  var controller = zenPage.getComponentById('atcData');
  controller.deleteId(controller.getModelId());
  var table = zenPage.getComponentById('atcTable');
   //refresh data in contact table
  table.executeQuery(true);
  controller.update();
}

self.Robot_Zen_ATCCodes_newATC = function() {
  var controller = zenPage.getComponentById('atcData');
  var atcFormGroup=zenPage.getComponentById("atcFormGroup");
  atcFormGroup.setProperty('hidden',false);
  controller.createNewObject();
}

self.Robot_Zen_ATCCodes_saveATC = function() {
  // validate and save form
  var form = zenPage.getComponentById('atcForm');
  var atc = form.save();
  if (atc.length != 0) alert("ATC Code " + atc + " has been saved");
  var table=zenPage.getComponentById('atcTable');
  //refresh data in ATC table
  table.executeQuery();
}

self.Robot_Zen_ATCCodes_showatcForm = function(id) {
  var controller = zenPage.getComponentById('atcData');
  controller.setProperty('modelId',id);
  var atcFormGroup=zenPage.getComponentById("atcFormGroup");
  atcFormGroup.setProperty('hidden',false);
}

self.Robot_Zen_ATCCodes_LoadZenComponent = function(pNamespace,pName,pClassName,pCSSLevel) {
	return zenClassMethod(this,'LoadZenComponent','L,L,L,L','BOOLEAN',arguments);
}

self.Robot_Zen_ATCCodes_MonitorBackgroundTask = function(pTaskID) {
	zenClassMethod(this,'MonitorBackgroundTask','L','',arguments);
}

self.Robot_Zen_ATCCodes_ReallyRefreshContents = function() {
	zenInstanceMethod(this,'ReallyRefreshContents','','',arguments);
}
self.Robot_Zen_ATCCodes__Loader = function() {
	zenLoadClass('_ZEN_Component_page');
	Robot_Zen_ATCCodes.prototype = zenCreate('_ZEN_Component_page',-1);
	var p = Robot_Zen_ATCCodes.prototype;
	if (null==p) {return;}
	p.constructor = Robot_Zen_ATCCodes;
	p.superClass = ('undefined' == typeof _ZEN_Component_page) ? zenMaster._ZEN_Component_page.prototype:_ZEN_Component_page.prototype;
	p.__ZENcomponent = true;
	p._serverClass = 'Robot.Zen.ATCCodes';
	p._type = 'ATCCodes';
	p.serialize = Robot_Zen_ATCCodes_serialize;
	p.getSettings = Robot_Zen_ATCCodes_getSettings;
	p.LoadZenComponent = Robot_Zen_ATCCodes_LoadZenComponent;
	p.MonitorBackgroundTask = Robot_Zen_ATCCodes_MonitorBackgroundTask;
	p.ReallyRefreshContents = Robot_Zen_ATCCodes_ReallyRefreshContents;
	p.deleteATC = Robot_Zen_ATCCodes_deleteATC;
	p.newATC = Robot_Zen_ATCCodes_newATC;
	p.saveATC = Robot_Zen_ATCCodes_saveATC;
	p.showatcForm = Robot_Zen_ATCCodes_showatcForm;
}
// ================================================================================
function zenCreatePageModel() {
try {
var o = null;
zenCreate('Robot_Zen_ATCCodes',1,'');
zenCreate('Robot_Zen_CustomComponents_Title',2,'title');
zenCreate('_ZEN_Auxiliary_dataBag',3,'');
zenCreate('_ZEN_Auxiliary_dataBag',4,'');
zenCreate('_ZEN_Auxiliary_dataController',5,'atcData');
zenCreate('_ZEN_Component_hgroup',6,'');
zenCreate('_ZEN_Component_spacer',7,'');
zenCreate('_ZEN_Component_vgroup',8,'');
zenCreate('_ZEN_Component_spacer',9,'');
zenCreate('_ZEN_Component_tableNavigator',10,'atcNav');
zenCreate('_ZEN_Component_spacer',11,'');
zenCreate('_ZEN_Component_button',12,'');
zenCreate('_ZEN_Component_spacer',13,'');
zenCreate('_ZEN_Component_hgroup',14,'');
zenCreate('_ZEN_Auxiliary_column',15,'');
zenCreate('_ZEN_Auxiliary_column',16,'');
zenCreate('_ZEN_Auxiliary_column',17,'');
zenCreate('_ZEN_Auxiliary_column',18,'');
zenCreate('_ZEN_Component_tablePane',19,'atcTable');
zenCreate('_ZEN_Component_spacer',20,'');
zenCreate('_ZEN_Component_fieldSet',21,'atcFormGroup');
zenCreate('_ZEN_Component_form',22,'atcForm');
zenCreate('_ZEN_Component_text',23,'ATCCode');
zenCreate('_ZEN_Component_spacer',24,'');
zenCreate('_ZEN_Component_text',25,'ATCDescription');
zenCreate('_ZEN_Component_spacer',26,'');
zenCreate('_ZEN_Component_hgroup',27,'');
zenCreate('_ZEN_Component_button',28,'');
zenCreate('_ZEN_Component_spacer',29,'');
zenCreate('_ZEN_Component_button',30,'');
zenCreate('_ZEN_Component_vgroup',31,'');
zenCreate('_ZEN_Component_hgroup',32,'');
zenCreate('_ZEN_Component_button',33,'atcNav.btnFirst');
zenCreate('_ZEN_Component_button',34,'atcNav.btnPrev');
zenCreate('_ZEN_Component_button',35,'atcNav.btnNext');
zenCreate('_ZEN_Component_button',36,'atcNav.btnLast');
zenCreate('_ZEN_Component_spacer',37,'');
zenCreate('_ZEN_Component_text',38,'atcNav.pageNo');
zenCreate('_ZEN_Component_text',39,'atcNav.pageCount');
zenCreate('_ZEN_Component_spacer',40,'');

o = _zenIndex[1];
o.SVGClassList = 'Robot.Zen.ATCCodes';
o.children[0] = _zenIndex[2];
o.children[1] = _zenIndex[5];
o.children[2] = _zenIndex[6];
o.cssLevel = 3;
o.isPopup = false;
o.nextIndex = 40;
o.title = 'Stock ATC Codes';

o = _zenIndex[2];
o.category = 'Robot Interface';
o.id = 'title';
o.parent = _zenIndex[1];
o.title = 'ATC Code Table';

o = _zenIndex[3];

o = _zenIndex[4];
o.clientData = zenListToArray('\x05','\x05');
o.labelList = ',';
o.parent = _zenIndex[5];
o.propertyList = 'ATCCode,ATCDescription';
o.propertyTypes = ',';

o = _zenIndex[5];
o.dataBag = _zenIndex[4];
o.dataLoaded = true;
o.dataReadOnly = false;
o.id = 'atcData';
o.modelClass = 'Robot.Stock.ATCCodes';
o.parent = _zenIndex[1];
o.validationCode = 'switch(property) {\n}\n\/*Robot.Stock.ATCCodes*\/';

o = _zenIndex[6];
o.align = 'left';
o.children[0] = _zenIndex[7];
o.children[1] = _zenIndex[8];
o.parent = _zenIndex[1];
o.width = '100%';

o = _zenIndex[7];
o.height = '20';
o.parent = _zenIndex[6];

o = _zenIndex[8];
o.align = 'left';
o.children[0] = _zenIndex[9];
o.children[1] = _zenIndex[10];
o.children[2] = _zenIndex[11];
o.children[3] = _zenIndex[12];
o.children[4] = _zenIndex[13];
o.children[5] = _zenIndex[14];
o.parent = _zenIndex[6];
o.width = '100%';

o = _zenIndex[9];
o.height = '20';
o.parent = _zenIndex[8];

o = _zenIndex[10];
o.align = 'left';
o.children[0] = _zenIndex[32];
o.childrenCreated = true;
o.id = 'atcNav';
o.msgFirstPage = 'Go to first page';
o.msgLastPage = 'Go to last page';
o.msgNextPage = 'Go to next page';
o.msgOf = 'of';
o.msgPage = 'Page';
o.msgPreviousPage = 'Go to previous page';
o.parent = _zenIndex[8];
o.renderFlag = 1;
o.tablePaneId = 'atcTable';

o = _zenIndex[11];
o.height = '10';
o.parent = _zenIndex[8];

o = _zenIndex[12];
o.align = 'left';
o.caption = 'New';
o.onclick = 'javascript:zenPage.newATC();';
o.parent = _zenIndex[8];

o = _zenIndex[13];
o.height = '10';
o.parent = _zenIndex[8];

o = _zenIndex[14];
o.children[0] = _zenIndex[19];
o.children[1] = _zenIndex[20];
o.children[2] = _zenIndex[21];
o.children[3] = _zenIndex[31];
o.parent = _zenIndex[8];

o = _zenIndex[15];
o.colExpression = 'jkruJuZfzJxP0KQJv6K5JA--';
o.colName = 'ID';
o.filterQuery = 'jkruJuZfzJxP0KQJv6K5JA--';
o.header = 'ID';
o.hidden = true;

o = _zenIndex[16];
o.colExpression = 'jkruJuZfzJxP0KQJv6K5JA--';
o.colName = 'ATCCode';
o.filterQuery = 'jkruJuZfzJxP0KQJv6K5JA--';
o.filterType = 'text';
o.header = 'ATC Code';
o.hidden = false;
o.style = 'text-align: center;';
o.width = '10%';

o = _zenIndex[17];
o.colExpression = 'jkruJuZfzJxP0KQJv6K5JA--';
o.colName = 'ATCDescription';
o.filterQuery = 'jkruJuZfzJxP0KQJv6K5JA--';
o.filterType = 'text';
o.header = 'ATC Description';
o.hidden = false;
o.style = 'text-align: left;';
o.width = '40%';

o = _zenIndex[18];
o.colExpression = 'jkruJuZfzJxP0KQJv6K5JA--';
o.filterQuery = 'jkruJuZfzJxP0KQJv6K5JA--';
o.link = 'javascript:zenPage.showatcForm(\'#(%query.ID)#\');';
o.linkCaption = 'edit';
o.width = '5%';

o = _zenIndex[19];
o.columns[0] = _zenIndex[15];
o.columns[1] = _zenIndex[16];
o.columns[2] = _zenIndex[17];
o.columns[3] = _zenIndex[18];
o.extraColumnWidth = '5%';
o.id = 'atcTable';
o.lastUpdate = '2017-03-21 18:17:10.881';
o.maxRows = 2000;
o.pageSize = 25;
o.parent = _zenIndex[14];
o.queryClass = 'jkruJuZfzJxP0KQJv6K5JA--';
o.rowCount = '135';
o.showQuery = 'UudMF0xo2h32hQhpAUNtBA--';
o.showZebra = true;
o.snapshotId = 8094092;
o.sql = 'jkruJuZfzJxP0KQJv6K5JA--';
o.tableName = 'Kd_Ts$_XjDT74AJt9H0ZFMyV4Kxtm9zkITnjfkeyoqw-';
o.useSnapshot = true;
o.valueColumn = 'ID';
o.width = '60%';

o = _zenIndex[20];
o.parent = _zenIndex[14];
o.width = '60';

o = _zenIndex[21];
o.children[0] = _zenIndex[22];
o.hidden = true;
o.id = 'atcFormGroup';
o.legend = 'ATC Code Details';
o.parent = _zenIndex[14];

o = _zenIndex[22];
o.cellStyle = 'padding: 5px; padding-left: 10px; padding-right: 10px;';
o.children[0] = _zenIndex[23];
o.children[1] = _zenIndex[24];
o.children[2] = _zenIndex[25];
o.children[3] = _zenIndex[26];
o.children[4] = _zenIndex[27];
o.controllerId = 'atcData';
o.id = 'atcForm';
o.parent = _zenIndex[21];

o = _zenIndex[23];
o.dataBinding = 'ATCCode';
o.id = 'ATCCode';
o.label = 'ATC Code:';
o.name = 'ATCCode';
o.parent = _zenIndex[22];
o.required = true;
o.size = 8;

o = _zenIndex[24];
o.height = '.5';
o.parent = _zenIndex[22];

o = _zenIndex[25];
o.dataBinding = 'ATCDescription';
o.id = 'ATCDescription';
o.label = 'ATC Description:';
o.name = 'ATCDescription';
o.parent = _zenIndex[22];
o.size = 40;

o = _zenIndex[26];
o.height = '.5';
o.parent = _zenIndex[22];

o = _zenIndex[27];
o.children[0] = _zenIndex[28];
o.children[1] = _zenIndex[29];
o.children[2] = _zenIndex[30];
o.parent = _zenIndex[22];

o = _zenIndex[28];
o.caption = 'Save';
o.onclick = 'zenPage.saveATC();';
o.parent = _zenIndex[27];

o = _zenIndex[29];
o.parent = _zenIndex[27];
o.width = '5';

o = _zenIndex[30];
o.caption = 'Delete';
o.onclick = 'zenPage.deleteATC();';
o.parent = _zenIndex[27];

o = _zenIndex[31];
o.parent = _zenIndex[14];
o.width = '20%';

o = _zenIndex[32];
o.cellAlign = 'left';
o.children[0] = _zenIndex[33];
o.children[1] = _zenIndex[34];
o.children[2] = _zenIndex[35];
o.children[3] = _zenIndex[36];
o.children[4] = _zenIndex[37];
o.children[5] = _zenIndex[38];
o.children[6] = _zenIndex[39];
o.children[7] = _zenIndex[40];
o.composite = _zenIndex[10];
o.labelPosition = 'left';
o.parent = _zenIndex[10];

o = _zenIndex[33];
o.caption = ' |< ';
o.composite = _zenIndex[10];
o.id = 'atcNav.btnFirst';
o.onclick = 'zenThis.composite.gotoPage(\'first\');';
o.parent = _zenIndex[32];
o.title = 'Go to first page';

o = _zenIndex[34];
o.caption = ' << ';
o.composite = _zenIndex[10];
o.id = 'atcNav.btnPrev';
o.onclick = 'zenThis.composite.gotoPage(\'prev\');';
o.parent = _zenIndex[32];
o.title = 'Go to previous page';

o = _zenIndex[35];
o.caption = ' >> ';
o.composite = _zenIndex[10];
o.id = 'atcNav.btnNext';
o.onclick = 'zenThis.composite.gotoPage(\'next\');';
o.parent = _zenIndex[32];
o.title = 'Go to next page';

o = _zenIndex[36];
o.caption = ' >| ';
o.composite = _zenIndex[10];
o.id = 'atcNav.btnLast';
o.onclick = 'zenThis.composite.gotoPage(\'last\');';
o.parent = _zenIndex[32];
o.title = 'Go to last page';

o = _zenIndex[37];
o.composite = _zenIndex[10];
o.parent = _zenIndex[32];
o.width = '20';

o = _zenIndex[38];
o.composite = _zenIndex[10];
o.id = 'atcNav.pageNo';
o.label = 'Page';
o.labelClass = 'tn-pageLabel';
o.onchange = 'zenThis.composite.gotoPage(zenThis.getValue());';
o.parent = _zenIndex[32];
o.size = 2;

o = _zenIndex[39];
o.composite = _zenIndex[10];
o.id = 'atcNav.pageCount';
o.label = 'of';
o.labelClass = 'tn-pageLabel';
o.parent = _zenIndex[32];
o.readOnly = true;
o.size = 4;

o = _zenIndex[40];
o.composite = _zenIndex[10];
o.parent = _zenIndex[32];
o.width = '*';
zenPage = _zenIndex[1];
}
catch(ex) {
 zenExceptionHandler(ex,arguments,'Error building ZEN Page Model.');
}
}
function zenFinalizeModel() {
 try {
  zenRenderContents(zenPage.getComponent(10));
 }
 catch(ex) {
  zenExceptionHandler(ex,arguments,'Error in zenFinalizeModel.');
 }
}

window.onload = function() {
	if (null == self.zenASSERT) { alert('ZEN ERROR:\nRequired include file, zenutils.js, not found.'); window.stop(); return; }
	if (14 != self.zenUtilsVersion) { alert('ZEN ERROR:\nzenutils.js has the wrong version number.\nPage version:14\nzenutils.js: ' + (self.zenUtilsVersion ? self.zenUtilsVersion : '')); window.stop(); return; }
	if (14 != self.js_zen_core) { alert('ZEN ERROR:\nInclude file is missing or has the wrong version number:\nPage version:14\nZEN_Component__core.js: ' + (self.js_zen_core ? self.js_zen_core : '')); window.stop(); return ; }
	zenPageEventHandler('onload'); }
window.onbeforeunload = function() { return zenPageEventHandler('onunload'); }
window.onresize = function() { zenPageEventHandler('onresize'); }
window.onkeydown = function(event) { return zenPageEventHandler('onkeydown',event); }
window.onkeyup = function(event) { return zenPageEventHandler('onkeyup',event); }
	
//]]]]><![CDATA[>
</script>
</body>
</html>
<!-- .012613 -->]]></CSP>


<CSP name="WWALogin.csp" application="/csp/healthshare/niparobotica/" default="1"><![CDATA[
<html>
<head>
    <title> e-RX </title>
    <meta charset="utf-8"/>

    <link type="text/css" href="wwa/LinkUp.css" rel="stylesheet"/>
    <link type="text/css" href="wwa/style.css" rel="stylesheet"/>
    <link type="text/css" href="wwa/tabsstyle.css" rel="stylesheet"/>
    <link type="text/css" href="wwa/IE_fix.css" rel="stylesheet"/>
  
    <style type="text/css">
    <!--
        .style_msg {
            color: #000000;
            font-bold: true;
            font-family: Arial, Helvetica, sans-serif;
            font-size: 10pt;
        }
    -->
    </style>
    <script language="javascript">
	// called when page is loaded
	function pageLoad()
	{
		// see if we can give focus to the UserName field:
		if (self.document.Login && self.document.Login.CacheUserName) {
			self.document.Login.CacheUserName.focus();
			self.document.Login.CacheUserName.select();
		}
		return true;
	}
	</script>

</head>
<body onload="pageLoad();">
<form name="Login" id="Login" method="post" action="/csp/ifsv3dev/Robot.Zen.NAPPICodes.cls">

<table class="maintable">
<!--MAIN TABLE-->
<tr >
    <div style="float: center; padding-left: 5px; padding-top: 15px; padding-bottom: 15px;">
	    <td class="header" align="center" height="150px">
	        <img src="images/Right ePharmacy.jpg" style="height: auto; width: 300px;" alt=""/>
	    </td>
    </div>
</tr>
<tr>
    <td>
        <br/>
    </td>
</tr>
<tr>
    <td>
        <table style="Width: 1308px">
            <tr style="text-align: center; vertical-align: mIDdle;">
                <td>
                    <div class="system_message header_rounding" style="height: 400px; vertical-align: mIDdle; Width: 870px;">
                        <br/>
                        <span class="style_msg" style="vertical-align: mIDdle"><br /><br/>
		    				<span id="Label1" style="width:800px;align:center;font-family:Arial;font-size:24pt;font-weight:bold;">Inventory Maintenance</span><br /><br/>
			                <span id="lblVersionNo">Version No: 3.0.2</span>
			            </span>
                    </div>
                </td>
                <td>
                    <div class="system_message header_rounding" style="height: 400px; Width: 410px;">
                        <div id="pnlLogin">
	
                            <table style="text-align: center; Width: 400px;">
                                <tr>
                                    <td>
                                        <br/>
                                    </td>
                                </tr>
                                <tr style="text-align: center; vertical-align: top">
                                    <td>
                                        <span id="Label3" style="display:inline-block;font-family:Arial;font-size:14pt;font-weight:bold;width:140px;">Login</span>
                                    </td>
                                </tr>
                                <tr>
                                    <td>&nbsp;</td>
                                </tr>
                                <tr style="text-align: center; vertical-align: top">
                                    <td>
                                        <span id="lblUsername" style="display:inline-block;font-family:Arial;font-size:9pt;font-weight:bold;width:140px;">Username</span>
                                    </td>
                                </tr><tr>
                                    <td>
                                        <input name="CacheUserName" type="text" id="CacheUserName" tabindex="1" style="width:150px;z-index: 0" />
                                    </td>
                                </tr>
                                <tr style="text-align: center; vertical-align: top">
                                    <td>
                                        <span id="lblPassword" style="display:inline-block;font-family:Arial;font-size:9pt;font-weight:bold;width:140px;">Password</span>
                                    </td>
                                </tr>
                                <tr>
                                       </tr>
                                <tr>
                              <td>
                                        <input name="txtPassword" type="password" maxlength="25" id="txtPassword" tabindex="2" style="width:150px;z-index: 0" />
                                    </td>
                                   <td>
                                        <br/>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <button type="submit" id="btnLogin" class="colourbtn" style="Width: 120px;" TabIndex="3" type="button">Login</button>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <button onclick="__doPostBack('btnForgotPassword','')" id="btnForgotPassword" class="colourbtn" style="Width: 120px;" TabIndex="4" type="button">Forgot Password</button>
                                    </td>
                                </tr>
                            </table>
						</div>
                    </div>
                </td>
            </tr>
        </table>
    </td>
</tr>
</table>

</form>

</body>
</html>
]]></CSP>


<Project name="nIpArOBOTICA" LastModified="2021-06-01 02:27:07.071253">
  <Items>
    <ProjectItem name="DFI.Common.Abstract.MessageQueueBaseMethods" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.Abstract.MessageQueueBaseProperties" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.HL7MsgRouter.ABCRoutingRule" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.HL7MsgRouter.ADTLastNameTransform" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.HL7MsgRouter.AlertRule" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.HL7MsgRouter.EmailAlertTransform" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.HL7MsgRouter.Functions" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.HL7MsgRouter.MainRoutingRule" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.HL7MsgRouter.NigelRule" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.HL7MsgRouter.ORMLastNameTransform" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.HL7MsgRouter.XYZRoutingRule" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.Operation.EMailOperation" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.Operation.FHIRFileOperation" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.Operation.FHIRHTTPOperation" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.Operation.FHIRHTTPSOperation" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.Operation.PIXHL7FileOperation" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.Operation.PIXHL7HTTPOperation" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.Operation.PIXHL7HTTPSOperation" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.Production.HL7MsgRouter" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.Production.InterfaceProduction" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.Production.REST" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.REST.DirectoryOperation" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.REST.DirectoryPage" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.REST.DirectoryRequest" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.REST.DirectoryResponse" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.REST.DirectoryService" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.REST.MathService" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.SearchTable.HL7MsgRouter" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.Service.AlertNotificationService" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.Service.HL7FileService" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.Service.HTTPHL7Service" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.Service.HouseKeeping" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.Service.ProcessEMCIMessageQueue" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.Service.ProcessMessageQueue" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.Service.ProcessODSMessageQueue" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.TestModule.EMCIConsumerProperties" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.TestModule.Manifest" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.TestModule.ManifestRecords" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.TestModule.TestConditions" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.TestModule.TestDefinitions" type="CLS"></ProjectItem>
    <ProjectItem name="DFI.Common.TestModule.mfConfigSettings" type="CLS"></ProjectItem>
    <ProjectItem name="DFIInclude.INC" type="MAC"></ProjectItem>
    <ProjectItem name="Robot.ACKOperation" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.ACKResponse" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Address" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.AlertService" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Common" type="PKG"></ProjectItem>
    <ProjectItem name="Robot.Device" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.DeviceTypeStatusCodes" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.DeviceTypes" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.DispenseResponseService" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.EMailOperation" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.EMailRequest" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.EMailResponse" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.ExtendedRobotInterfaceProduction" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.FHIR" type="PKG"></ProjectItem>
    <ProjectItem name="Robot.HL7FileOperation" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.HL7FileResponse" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.HousekeepingService" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.INURequest" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.INUResponse" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Location" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.MFNRequest" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.MFNResponse" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Mapping.MessageDataTypes" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Mapping.MessageDefinitions" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Mapping.MessageGroups" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Mapping.MessageItems" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Metrics.Dispense" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Metrics.UnitsOfMeasure" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.OMPDetails" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.OMPRequest" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.OMPResponse" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.ORCDetails" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.OrderItemStatistics" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.OrderStatistics" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.PDUPrinterFileOperation" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.PDUPrinterRequest" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.PDUPrinterResponse" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.PDUPrinterStatusRequest" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.PDUPrinterStatusResponse" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.PDUPrinterTCPOperation" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.PDUPrinters" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Personell" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.PersonellType" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Port" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.ProcessDispenseOrderBP" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.ProcessDispenseResultBP" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.ProcessHL7MessagesBP" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.ProcessRobotDispenseBP" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.ProcessRobotMessagesBP" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.ProcessStockBatchUpdateBP" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.ProcessStockLevelRequestBP" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.ProductionAlertConditions" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.ProductionAlertErrors" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.ProductionAlerts" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.RXCDetails" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.RXDDetails" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.ReportService" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Reports.Batch" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Reports.Dispense" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Reports.Logs" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Reports.Metrics" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Reports.ReportParameters" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Reports.Reports" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Reports.StockLevels" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.RobotFileOperation" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.RobotMessages" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.RobotRequest" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.RobotResponse" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.RobotTCPOperation" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Robots" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Site" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.StatusService" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.ATCCodes" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.Category" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.HL7StockItemsTransform" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.HL7StockLevelItems" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.HL7StockLevels" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.HL7StockTransform" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.LoadAndDispenseTransactions" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.LocationStockMaster" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.Manufacturer" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.NSNICNCodes" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.PropertyNames" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.PropertyToColumnMapping" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.ScheduleID" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.StockLevelDetails" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.StockLevelSystems" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.StockLevels" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.StockMaster" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.Supplier" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.SysMedicine" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.UnitsOfIssueCodes" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Stock.UpdateCloudStockMaster" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.StockBatch" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.StockBatchItemDetails" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.StockBatchItems" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.StockBatchService" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.StockLevelService" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.StockLoadingResponseService" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.SystemInitialise" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.SystemInitialiseErrors" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.SystemMethods" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.SystemSettings" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Systems" type="CLS"></ProjectItem>
    <ProjectItem name="Robot.Telephone" type="CLS"></ProjectItem>
    <ProjectItem name="TestPrint.INT" type="MAC"></ProjectItem>
    <ProjectItem name="TestPrint1.INT" type="MAC"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/ATCCodes.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/ColumnMappings.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/DFIAlertConditions.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/DFIAlertErrors.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/DFIConfigurationSettings.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/DFIInterfaceMappingDetails.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/DFILookupTable.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/DFIProductionAlerts.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/Device.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/DeviceStatusCodes.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/DeviceTypes.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/Location.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/MainPage.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/MessageDataTypes.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/MessageDefinitions.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/MessageGroups.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/MessageItems.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/PDUPrinters.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/Peronell.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/Personnel.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/Port.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/PropertyToColumns.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/ReportParameters.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/Reports.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/Robot.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/RobotMessages.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/Schedule.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/Site.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/StockBatch.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/StockBatchItems.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/StockLevelSystems.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/StockLevels.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/StockMaster.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/SystemInitialise.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/SystemSettings.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/Systems.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/Test.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/Untitled2.csp" type="CSP"></ProjectItem>
    <ProjectItem name="csp/healthshare/niparobotica/WWALogin.csp" type="CSP"></ProjectItem>
  </Items>
</Project>
</Export>
